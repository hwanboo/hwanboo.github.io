System.register('chunks:///_virtual/_1.ts', ['cc', './FrontYard.ts'], function (t) {
  var c, r, e;
  return {
    setters: [
      function (t) {
        (c = t.cclegacy), (r = t._decorator);
      },
      function (t) {
        e = t.FrontYard;
      },
    ],
    execute: function () {
      c._RF.push({}, 'e82e2zopPtHo4KbaMsKDbkM', '_1', void 0);
      r.ccclass,
        r.property,
        t('q', function () {
          this.fy = e;
        });
      c._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/AnimationController.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './Character.ts'],
  function (t) {
    var n, i, o, e, a, r, l, s, d, h, p, c;
    return {
      setters: [
        function (t) {
          (n = t.applyDecoratedDescriptor),
            (i = t.inheritsLoose),
            (o = t.initializerDefineProperty),
            (e = t.assertThisInitialized);
        },
        function (t) {
          (a = t.cclegacy), (r = t._decorator), (l = t.Prefab), (s = t.dragonBones), (d = t.Vec3), (h = t.Component);
        },
        function (t) {
          p = t.NodePools;
        },
        function (t) {
          c = t.CharacterScale;
        },
      ],
      execute: function () {
        var u, m, y, b, f, P, v, A, g, w, S, R, C, E, F, U, k;
        a._RF.push({}, 'a97bbP1jrpAOKueZ/Uiwdhb', 'AnimationController', void 0);
        var D = r.ccclass,
          L = r.property;
        t(
          'AnimationController',
          ((u = D('AnimationController')),
          (m = L({ type: String })),
          (y = L({ type: [String], displayName: 'randomAnimateNumber' })),
          (b = L({ type: Number })),
          (f = L({ type: l })),
          (P = L({ type: l })),
          (v = L([String])),
          (A = L(l)),
          u(
            ((S = n(
              (w = (function (t) {
                function n() {
                  for (var n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                  return (
                    (n = t.call.apply(t, [this].concat(a)) || this),
                    o(n, 'IdleAnim', S, e(n)),
                    o(n, 'RandomAnim', R, e(n)),
                    o(n, 'RandRate', C, e(n)),
                    (n.timeScale = void 0),
                    o(n, 'Vineback', E, e(n)),
                    (n.vineback = null),
                    o(n, 'PotFront', F, e(n)),
                    (n.potFront = null),
                    (n.bodyPart = []),
                    (n.otherPart = []),
                    o(n, 'startHideSlotName', U, e(n)),
                    o(n, 'PlantUpper', k, e(n)),
                    (n.plantUpper = void 0),
                    (n.anmCompleteListenerDone = !1),
                    (n.body = null),
                    n
                  );
                }
                i(n, t);
                var a = n.prototype;
                return (
                  (a.addVineBack = function (t) {
                    if (this.Vineback) {
                      var n = p.instantiatePooly(this.Vineback);
                      (n.parent = t),
                        (n.scale = this.node.scale),
                        (this.vineback = n.getComponent(s.ArmatureDisplay)),
                        this.bodyPart.push(this.vineback),
                        this.otherPart.push(this.vineback);
                    }
                    this.playRandom();
                  }),
                  (a.addPotFront = function (t) {
                    if (this.PotFront) {
                      var n = p.instantiatePooly(this.PotFront);
                      (n.parent = t),
                        (n.scale = this.node.scale),
                        (this.potFront = n.getComponent(s.ArmatureDisplay)),
                        this.bodyPart.push(this.potFront),
                        this.otherPart.push(this.potFront);
                    }
                    this.playRandom();
                  }),
                  (a.addPlantUpper = function (t) {
                    if (this.PlantUpper) {
                      var n = p.instantiatePooly(this.PlantUpper);
                      (n.parent = t),
                        (n.scale = this.node.scale),
                        (n.worldPosition = this.node.worldPosition),
                        (this.plantUpper = n.getComponent(s.ArmatureDisplay)),
                        this.bodyPart.push(this.plantUpper),
                        this.playRandom();
                    }
                  }),
                  (a.onDisable = function () {
                    this.otherPart.concat([this.plantUpper]).forEach(function (t) {
                      p.destroyPooly(null == t ? void 0 : t.node);
                    });
                  }),
                  (a.anmCompleteListenerOn = function () {
                    this.anmCompleteListenerDone ||
                      ((this.anmCompleteListenerDone = !0),
                      this.body.addEventListener(s.EventObject.COMPLETE, this.randomAnimate, this));
                  }),
                  (a.playAnimation = function (t, n, i, o) {
                    void 0 === n && (n = 1),
                      void 0 === i && (i = 0),
                      void 0 === o && (o = this.timeScale),
                      this.bodyPart.forEach(function (e) {
                        e &&
                          ((e.timeScale = o), 0 == i ? e.playAnimation(t, n) : 0 != i && e.armature().animation.fadeIn(t, i, n));
                      });
                  }),
                  (a.playRandom = function () {
                    if (0 == Math.round((100 * Math.random()) / this.RandRate) && this.RandomAnim.length > 0) {
                      var t = Math.round(Math.random() * (this.RandomAnim.length - 1));
                      this.playAnimation(this.RandomAnim[t], 1);
                    } else this.playAnimation(this.IdleAnim, 1);
                  }),
                  (a.randomAnimate = function (t) {
                    t.type == s.EventObject.COMPLETE && this.playRandom();
                  }),
                  (a.setTimeScale = function (t) {
                    this.bodyPart.forEach(function (n) {
                      n.timeScale = t;
                    });
                  }),
                  (a.throwAllBackNFront = function () {
                    var t = this;
                    this.otherPart.concat().forEach(function (n) {
                      var i = t.bodyPart.indexOf(n);
                      p.destroyPooly(n.node), -1 != i && t.bodyPart.splice(i);
                    });
                  }),
                  (a.setBody = function () {
                    this.body = this.node.getChildByName('Body').getComponent(s.ArmatureDisplay);
                  }),
                  (a.onLoad = function () {
                    this.setBody();
                  }),
                  (a.onEnable = function () {
                    (this.node.scale = new d(c, c, c)),
                      (this.bodyPart = []),
                      (this.otherPart = []),
                      (this.timeScale = 0.9 + Math.round(20 * Math.random()) / 100),
                      this.bodyPart.push(this.body),
                      this.playRandom(),
                      this.anmCompleteListenerOn();
                    var t = this.body.armature();
                    this.startHideSlotName.forEach(function (n) {
                      var i;
                      null == (i = t.getSlot(n)) || i._setDisplayIndex(-1);
                    });
                  }),
                  (a.start = function () {
                    this.body.timeScale = this.timeScale;
                  }),
                  (a.fixTimeScale = function (t) {
                    var n = this;
                    this.bodyPart.forEach(function (i) {
                      i.timeScale = n.timeScale * t * 60;
                    });
                  }),
                  (a.update = function (t) {
                    this.potFront && (this.potFront.node.worldPosition = this.body.node.worldPosition),
                      this.vineback && (this.vineback.node.worldPosition = this.body.node.worldPosition),
                      this.plantUpper &&
                        ((this.plantUpper.node.worldPosition = this.body.node.worldPosition),
                        (this.plantUpper.node.worldScale = this.body.node.worldScale),
                        (this.plantUpper.node.worldRotation = this.body.node.worldRotation));
                  }),
                  n
                );
              })(h)).prototype,
              'IdleAnim',
              [m],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 'Idle';
                },
              }
            )),
            (R = n(w.prototype, 'RandomAnim', [y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (C = n(w.prototype, 'RandRate', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 100;
              },
            })),
            (E = n(w.prototype, 'Vineback', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (F = n(w.prototype, 'PotFront', [P], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (U = n(w.prototype, 'startHideSlotName', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (k = n(w.prototype, 'PlantUpper', [A], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (g = w))
          ) || g)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Armor.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Materials.ts', './SoundRescourses.ts'],
  function (t) {
    var i, e, n, r, s, a, o, h, l, u, c, p, d, m, f;
    return {
      setters: [
        function (t) {
          (i = t.applyDecoratedDescriptor),
            (e = t.inheritsLoose),
            (n = t.initializerDefineProperty),
            (r = t.assertThisInitialized);
        },
        function (t) {
          (s = t.cclegacy),
            (a = t._decorator),
            (o = t.Enum),
            (h = t.Prefab),
            (l = t.dragonBones),
            (u = t.Material),
            (c = t.AudioSource),
            (p = t.Color),
            (d = t.Component);
        },
        function (t) {
          m = t.materialRes;
        },
        function (t) {
          f = t.sounds;
        },
      ],
      execute: function () {
        var g, y, b, A, v, D, S, C, R;
        s._RF.push({}, 'b6eeddCxRlJeI4ZcFg9Q6At', 'Armor', void 0);
        var w = a.ccclass,
          P = a.property,
          z = (function (t) {
            return (t[(t.plastic = 0)] = 'plastic'), (t[(t.shield = 1)] = 'shield'), (t[(t.none = 2)] = 'none'), t;
          })(z || {});
        o(z);
        t(
          'Armor',
          ((g = w('Armor Features')),
          (y = P(Number)),
          (b = P(h)),
          (A = P({ type: z })),
          g(
            ((S = i(
              (D = (function (t) {
                function i() {
                  for (var i, e = arguments.length, s = new Array(e), a = 0; a < e; a++) s[a] = arguments[a];
                  return (
                    (i = t.call.apply(t, [this].concat(s)) || this),
                    n(i, 'toughness', S, r(i)),
                    (i.health = 0),
                    n(i, 'armorDROP', C, r(i)),
                    (i.db = null),
                    (i.hurting = 0),
                    n(i, 'hurtSoundType', R, r(i)),
                    (i.material = void 0),
                    i
                  );
                }
                e(i, t);
                var s = i.prototype;
                return (
                  (s.onLoad = function () {
                    this.db = this.getComponent(l.ArmatureDisplay);
                    var t = new u();
                    t.initialize({ effectAsset: m.addColorEffect, defines: { USE_TEXTURE: !0 } }),
                      (this.material = t),
                      this.material.setProperty('chillColor', 0);
                  }),
                  (s.onEnable = function () {
                    (this.hurting = 0),
                      this.getComponent(c) || this.addComponent(c),
                      (this.health = this.toughness),
                      this.setDisplay();
                  }),
                  (s.playHurtSound = function () {
                    switch (this.hurtSoundType) {
                      case z.plastic:
                        f.playArmorHitPlastic();
                        break;
                      case z.shield:
                        f.playArmorHitShield();
                    }
                  }),
                  (s.shouldMaterial = function () {
                    var t = new p(0, 0, 0, 255);
                    this.hurting > 0 && ((t.r += 10 * this.hurting), (t.g += 10 * this.hurting), (t.b += 10 * this.hurting));
                    var i = this.material.passes[0].getHandle('addColor');
                    this.material.passes[0].setUniform(i, t), (this.db.customMaterial = this.material);
                  }),
                  (s.update = function (t) {
                    this.hurting > 0 && (this.hurting -= 60 * t), this.shouldMaterial();
                  }),
                  (s.dealDamage = function (t, i) {
                    return (
                      void 0 === i && (i = !0),
                      t <= 0 || ((this.health -= t), (this.hurting = 10), i && this.playHurtSound(), this.setDisplay()),
                      this.health
                    );
                  }),
                  (s.setDisplay = function () {
                    this.health > (2 * this.toughness) / 3
                      ? this.db.playAnimation('Broken0')
                      : this.health <= (2 * this.toughness) / 3 && this.health > this.toughness / 3
                      ? this.db.playAnimation('Broken1')
                      : this.health <= this.toughness / 3 && this.health > 0 && this.db.playAnimation('Broken2');
                  }),
                  i
                );
              })(d)).prototype,
              'toughness',
              [y],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 370;
                },
              }
            )),
            (C = i(D.prototype, 'armorDROP', [b], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (R = i(D.prototype, 'hurtSoundType', [A], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return z.none;
              },
            })),
            (v = D))
          ) || v)
        );
        s._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/Armors.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (e) {
  var r, t, i, c, n, u, o, b, a;
  return {
    setters: [
      function (e) {
        (r = e.applyDecoratedDescriptor), (t = e.inheritsLoose), (i = e.initializerDefineProperty), (c = e.assertThisInitialized);
      },
      function (e) {
        (n = e.cclegacy), (u = e._decorator), (o = e.Prefab), (b = e.find), (a = e.Component);
      },
    ],
    execute: function () {
      var l, _, s, p, f, k, y, g, w, m, z, h, d, v, A, B, D, P, R, x, C, F, I, L, Z, j, q, E, H, M, O, S, T, W, X;
      n._RF.push({}, 'e5554r+OABBIoqkx+eyZoWX', 'Armors', void 0);
      var G = u.ccclass,
        J = u.property,
        K = e(
          'armorEnum',
          (function (e) {
            return (
              (e[(e.basic_cone = 0)] = 'basic_cone'),
              (e[(e.basic_bucket = 1)] = 'basic_bucket'),
              (e[(e.basic_bricks = 2)] = 'basic_bricks'),
              (e[(e.egypt_cone = 3)] = 'egypt_cone'),
              (e[(e.egypt_bucket = 4)] = 'egypt_bucket'),
              (e[(e.egypt_bricks = 5)] = 'egypt_bricks'),
              (e[(e.future_cone = 6)] = 'future_cone'),
              (e[(e.future_bucket = 7)] = 'future_bucket'),
              (e[(e.future_bricks = 8)] = 'future_bricks'),
              (e[(e.pirate_cone = 9)] = 'pirate_cone'),
              (e[(e.pirate_bucket = 10)] = 'pirate_bucket'),
              (e[(e.pirate_bricks = 11)] = 'pirate_bricks'),
              (e[(e.cowboy_cone = 12)] = 'cowboy_cone'),
              (e[(e.cowboy_bucket = 13)] = 'cowboy_bucket'),
              (e[(e.cowboy_bricks = 14)] = 'cowboy_bricks'),
              e
            );
          })({})
        ),
        N =
          (e(
            'armors',
            (function () {
              function e() {}
              return (
                (e.getArmor = function (e) {
                  var r = b('Resources/Zombies').getComponent(N);
                  switch (e) {
                    case K.basic_bucket:
                      return r.basic_bucket;
                    case K.basic_bricks:
                      return r.basic_bricks;
                    case K.future_cone:
                      return r.future_cone;
                    case K.future_bucket:
                      return r.future_bucket;
                    case K.future_bricks:
                      return r.future_bricks;
                    case K.egypt_cone:
                      return r.egypt_cone;
                    case K.egypt_bucket:
                      return r.egypt_bucket;
                    case K.egypt_bricks:
                      return r.egypt_bricks;
                    case K.cowboy_cone:
                      return r.cowboy_cone;
                    case K.cowboy_bucket:
                      return r.cowboy_bucket;
                    case K.cowboy_bricks:
                      return r.cowboy_bricks;
                    case K.pirate_cone:
                      return r.pirate_cone;
                    case K.pirate_bucket:
                      return r.pirate_bucket;
                    case K.pirate_bricks:
                      return r.pirate_bricks;
                    default:
                      return r.basic_cone;
                  }
                }),
                e
              );
            })()
          ),
          e(
            'Armors',
            ((l = G('Armors')),
            (_ = J(o)),
            (s = J(o)),
            (p = J(o)),
            (f = J(o)),
            (k = J(o)),
            (y = J(o)),
            (g = J(o)),
            (w = J(o)),
            (m = J(o)),
            (z = J(o)),
            (h = J(o)),
            (d = J(o)),
            (v = J(o)),
            (A = J(o)),
            (B = J(o)),
            (D = J(o)),
            l(
              ((x = r(
                (R = (function (e) {
                  function r() {
                    for (var r, t = arguments.length, n = new Array(t), u = 0; u < t; u++) n[u] = arguments[u];
                    return (
                      (r = e.call.apply(e, [this].concat(n)) || this),
                      i(r, 'basic_cone', x, c(r)),
                      i(r, 'basic_bucket', C, c(r)),
                      i(r, 'basic_bricks', F, c(r)),
                      i(r, 'future_cone', I, c(r)),
                      i(r, 'future_bucket', L, c(r)),
                      i(r, 'future_bricks', Z, c(r)),
                      i(r, 'egypt_cone', j, c(r)),
                      i(r, 'egypt_bucket', q, c(r)),
                      i(r, 'egypt_bricks', E, c(r)),
                      i(r, 'pirate_cone', H, c(r)),
                      i(r, 'pirate_bucket', M, c(r)),
                      i(r, 'pirate_bricks', O, c(r)),
                      i(r, 'cowboy_cone', S, c(r)),
                      i(r, 'cowboy_bucket', T, c(r)),
                      i(r, 'cowboy_bricks', W, c(r)),
                      i(r, 'lost_cone', X, c(r)),
                      r
                    );
                  }
                  return t(r, e), r;
                })(a)).prototype,
                'basic_cone',
                [_],
                {
                  configurable: !0,
                  enumerable: !0,
                  writable: !0,
                  initializer: function () {
                    return null;
                  },
                }
              )),
              (C = r(R.prototype, 'basic_bucket', [s], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (F = r(R.prototype, 'basic_bricks', [p], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (I = r(R.prototype, 'future_cone', [f], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (L = r(R.prototype, 'future_bucket', [k], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (Z = r(R.prototype, 'future_bricks', [y], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (j = r(R.prototype, 'egypt_cone', [g], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (q = r(R.prototype, 'egypt_bucket', [w], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (E = r(R.prototype, 'egypt_bricks', [m], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (H = r(R.prototype, 'pirate_cone', [z], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (M = r(R.prototype, 'pirate_bucket', [h], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (O = r(R.prototype, 'pirate_bricks', [d], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (S = r(R.prototype, 'cowboy_cone', [v], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (T = r(R.prototype, 'cowboy_bucket', [A], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (W = r(R.prototype, 'cowboy_bricks', [B], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (X = r(R.prototype, 'lost_cone', [D], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (P = R))
            ) || P)
          ));
      n._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/BananaLauncher.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './SniperPlant.ts',
    './LnC.ts',
    './NodePools.ts',
    './Character.ts',
    './commonShot.ts',
    './ProjectileManager.ts',
    './bananaLauncherSound.ts',
    './Square.ts',
    './CharacterManager.ts',
  ],
  function (n) {
    var t, o, a, i, e, r, l, c, s, u, h, d, p, m, f, y, g, P, w, C;
    return {
      setters: [
        function (n) {
          (t = n.applyDecoratedDescriptor),
            (o = n.inheritsLoose),
            (a = n.initializerDefineProperty),
            (i = n.assertThisInitialized);
        },
        function (n) {
          (e = n.cclegacy), (r = n._decorator), (l = n.Prefab), (c = n.CCFloat), (s = n.KeyCode), (u = n.Vec2);
        },
        function (n) {
          h = n.SniperPlant;
        },
        function (n) {
          d = n.LnC;
        },
        function (n) {
          (p = n.NodePools), (m = n.ArrayGet);
        },
        function (n) {
          f = n.CharacterType;
        },
        function (n) {
          y = n.commonShot;
        },
        function (n) {
          g = n.projectile;
        },
        function (n) {
          P = n.bananaLauncherSound;
        },
        function (n) {
          w = n.Square;
        },
        function (n) {
          C = n.ZombiePool;
        },
      ],
      execute: function () {
        var S, A, L, b, v, O, R;
        e._RF.push({}, 'cf114hcRKJKgbd4gyuONecz', 'BananaLauncher', void 0);
        var B = r.ccclass,
          D = r.property,
          j = (function () {
            function n() {}
            return (
              (n.throwOneBananaOnPos = function (n, t, o, a, i, e) {
                n.parent = a;
                var r = n.getComponent(y);
                return (
                  (r.worldPosition = new u(t.x, t.y)),
                  (r.height = o),
                  (r.gravity = 0),
                  (r.linearVelocity = new u(0, 0)),
                  (r.bodyLinearVelocity = -i),
                  g.registerProjectile(n, e),
                  r
                );
              }),
              (n.throwOneBananaOnNode = function (n, t, o, a, i, e) {
                return this.throwOneBananaOnPos(n, t.worldPosition, o, a, i, e);
              }),
              n
            );
          })();
        n(
          'BananaLauncherPlant',
          ((S = B('BananaLauncherPlant')),
          (A = D(l)),
          (L = D(c)),
          S(
            ((O = t(
              (v = (function (n) {
                function t() {
                  for (var t, o = arguments.length, e = new Array(o), r = 0; r < o; r++) e[r] = arguments[r];
                  return (
                    (t = n.call.apply(n, [this].concat(e)) || this),
                    a(t, 'projectile', O, i(t)),
                    a(t, 'cooldownDuration', R, i(t)),
                    (t.coolingdown = 0),
                    t
                  );
                }
                o(t, n);
                var e = t.prototype;
                return (
                  (e.LocateStartKeyCode = function () {
                    return s.KEY_B;
                  }),
                  (e.animationListener = function (n) {
                    if ('drop' == n.name) {
                      var t;
                      this.getComponent(P).playShootSound(!1);
                      var o = p.instantiatePooly(this.projectile),
                        a = C.inLawnPool(),
                        i = null == (t = m.getRandom(a)) ? void 0 : t.inLnC;
                      i || (i = w.getRandomSquare().getComponent(d)),
                        j.throwOneBananaOnNode(o, i.plantPoint, 1e3, i.inLane.prjLayer, 22, f.zombie);
                    }
                    'foodEnd' == n.name && this.foodEnd();
                  }),
                  (e.sniperPlantLocatable = function () {
                    return this.coolingdown <= 0;
                  }),
                  (e.setAnimation = function (n) {
                    switch ((void 0 === n && (n = 0), n)) {
                      case 1:
                        (this.anmControl.IdleAnim = 'Steady'), (this.anmControl.RandomAnim = []), (this.deathAnm = 'Death');
                        break;
                      case 2:
                        (this.anmControl.IdleAnim = 'IdleSad'),
                          (this.anmControl.RandomAnim = ['RandomSad']),
                          (this.deathAnm = 'DeathSad');
                        break;
                      default:
                        (this.anmControl.IdleAnim = 'Idle'), (this.anmControl.RandomAnim = ['Random']), (this.deathAnm = 'Death');
                    }
                  }),
                  (e.specialSniperPlantDie = function () {}),
                  (e.specialPlantFood = function (n) {
                    this.anmControl.playAnimation('Food', 1),
                      this.getComponent(P).playFoodSound(),
                      this.setAnimation(2),
                      (this.coolingdown = 1 / 0),
                      this.anmControl.playAnimation('Food', 1);
                  }),
                  (e.waterable = function () {
                    return this.sniperPlantLocatable();
                  }),
                  (e.specialPlantFoodEnd = function () {
                    this.coolingdown = this.cooldownDuration;
                  }),
                  (e.specialSniperPlantOnEnable = function () {
                    (this.coolingdown = 0), this.setAnimation();
                  }),
                  (e.specialSniperPlantLocateCancel = function () {
                    this.setAnimation(), this.anmControl.playRandom();
                  }),
                  (e.specialSniperPlantLocateStart = function () {
                    this.setAnimation(1), this.anmControl.playAnimation('TakeAim', 1);
                  }),
                  (e.specialSniperPlantTrigger = function (n) {
                    this.setAnimation(2),
                      (this.coolingdown = this.cooldownDuration),
                      this.anmControl.playAnimation('Launch', 1),
                      this.getComponent(P).playShootSound();
                    var t = p.instantiatePooly(this.projectile);
                    j.throwOneBananaOnNode(t, n.plantPoint, 1e3, n.inLane.prjLayer, 22, f.zombie);
                  }),
                  (e._wake = function () {
                    this.setAnimation(0), this.anmControl.playAnimation('GetReady', 1), this.getComponent(P).playWakeSound();
                  }),
                  (e.specialPlantUpdate = function (n) {
                    this.coolingdown > 0 && ((this.coolingdown -= n), this.coolingdown <= 0 && this._wake());
                  }),
                  t
                );
              })(h)).prototype,
              'projectile',
              [A],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (R = t(v.prototype, 'cooldownDuration', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 20;
              },
            })),
            (b = v))
          ) || b)
        );
        e._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/bananaLauncherSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './SoundsController.ts'],
  function (o) {
    var n, t, e, u, a, i, r, d, s, l, S;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (u = o.assertThisInitialized);
        },
        function (o) {
          (a = o.cclegacy), (i = o._decorator), (r = o.AudioClip), (d = o.AudioSource), (s = o.Component);
        },
        function (o) {
          l = o.ArrayGet;
        },
        function (o) {
          S = o.SoundFXController;
        },
      ],
      execute: function () {
        var c, p, h, f, y, b, m, g, w, F, v, L, z;
        a._RF.push({}, '95eecG1I45E4Lri80BuPGfr', 'bananaLauncherSound', void 0);
        var C = i.ccclass,
          R = i.property;
        o(
          'bananaLauncherSound',
          ((c = C('bananaLauncherSound')),
          (p = R([r])),
          (h = R([r])),
          (f = R([r])),
          (y = R([r])),
          (b = R([r])),
          c(
            ((w = n(
              (g = (function (o) {
                function n() {
                  for (var n, t = arguments.length, a = new Array(t), i = 0; i < t; i++) a[i] = arguments[i];
                  return (
                    ((n = o.call.apply(o, [this].concat(a)) || this).audioSource = null),
                    e(n, 'shootSounds', w, u(n)),
                    e(n, 'shootSaySounds', F, u(n)),
                    e(n, 'wakeSounds', v, u(n)),
                    e(n, 'foodSaySounds', L, u(n)),
                    e(n, 'foodStartSounds', z, u(n)),
                    n
                  );
                }
                t(n, o);
                var a = n.prototype;
                return (
                  (a.onLoad = function () {
                    this.getComponent(d) || this.addComponent(d), (this.audioSource = this.getComponent(d));
                  }),
                  (a.playShootSound = function (o) {
                    void 0 === o && (o = !0),
                      this.audioSource.playOneShot(l.getRandom(this.shootSounds), S.SoundFXVolume),
                      o && this.audioSource.playOneShot(l.getRandom(this.shootSaySounds), S.SoundFXVolume);
                  }),
                  (a.playWakeSound = function () {
                    this.audioSource.playOneShot(l.getRandom(this.wakeSounds), S.SoundFXVolume);
                  }),
                  (a.playFoodSound = function () {
                    this.audioSource.playOneShot(l.getRandom(this.foodStartSounds), S.SoundFXVolume),
                      this.audioSource.playOneShot(l.getRandom(this.foodSaySounds), S.SoundFXVolume);
                  }),
                  n
                );
              })(s)).prototype,
              'shootSounds',
              [p],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (F = n(g.prototype, 'shootSaySounds', [h], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (v = n(g.prototype, 'wakeSounds', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (L = n(g.prototype, 'foodSaySounds', [y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (z = n(g.prototype, 'foodStartSounds', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (m = g))
          ) || m)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Bloomerang.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './CharacterManager.ts',
    './NodePools.ts',
    './Character.ts',
    './boomerang.ts',
    './bloomerangSound.ts',
    './Square.ts',
    './Peashooter.ts',
  ],
  function (t) {
    var o, n, e, i, a, r, s, h, c, u, l, d, g, m, p, f, b, y, S;
    return {
      setters: [
        function (t) {
          (o = t.applyDecoratedDescriptor),
            (n = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (i = t.assertThisInitialized);
        },
        function (t) {
          (a = t.cclegacy), (r = t._decorator), (s = t.Prefab), (h = t.Node), (c = t.Vec2), (u = t.Vec3), (l = t.dragonBones);
        },
        function (t) {
          d = t.Plant;
        },
        function (t) {
          g = t.Rectangle;
        },
        function (t) {
          m = t.NodePools;
        },
        function (t) {
          p = t.CharacterType;
        },
        function (t) {
          f = t.boomerang;
        },
        function (t) {
          b = t.bloomerangSound;
        },
        function (t) {
          y = t.Square;
        },
        function (t) {
          S = t.peaShooter;
        },
      ],
      execute: function () {
        var P, v, C, w, j, x, B, E, M, _, D;
        a._RF.push({}, 'd3578tct9RIlYHwJbYd9E0Y', 'Bloomerang', void 0);
        var R = r.ccclass,
          L = r.property;
        t(
          'BloomerangPlant',
          ((P = R('BloomerangPlant')),
          (v = L({ type: Number, min: 0 })),
          (C = L(s)),
          (w = L(Number)),
          (j = L(h)),
          P(
            ((E = o(
              (B = (function (t) {
                function o() {
                  for (var o, n = arguments.length, a = new Array(n), r = 0; r < n; r++) a[r] = arguments[r];
                  return (
                    (o = t.call.apply(t, [this].concat(a)) || this),
                    e(o, 'foodBoomerangMaxCount', E, i(o)),
                    e(o, 'boomerang', M, i(o)),
                    (o.detector = null),
                    (o.prjDetecter = null),
                    (o.boomerangsShot = []),
                    (o.catching = !1),
                    e(o, 'shootInterval', _, i(o)),
                    e(o, 'boomerangSpawnpoint', D, i(o)),
                    (o.busy = 0),
                    (o.shooting = !1),
                    o
                  );
                }
                n(o, t);
                var a = o.prototype;
                return (
                  (a._shoot = function (t, o, n) {
                    void 0 === t && (t = !1), void 0 === o && (o = new c(15, 0)), void 0 === n && (n = this.boomerang);
                    var e = m.instantiatePooly(n);
                    if (e) {
                      var i = 1;
                      t && (i += Math.round(4 * Math.random()) / 10 - 0.2),
                        S.shootOnePea(
                          e,
                          this.fooding
                            ? this.node.worldPosition
                            : new u(this.boomerangSpawnpoint.getWorldPosition().x, this.shadeWorldPosition.y, 0),
                          this.boomerangSpawnpoint.worldPosition.y - this.shadeWorldPosition.y,
                          this.inLane.prjLayer,
                          new c(o.x * i, o.y * i),
                          p.zombie
                        );
                      var a = e.getComponent(f);
                      a &&
                        ((a.maxTargetNumber = 3),
                        (a.master = this),
                        (a.judgeHaveEnemy = !0),
                        this.fooding && ((a.judgeHaveEnemy = !1), (a.maxTargetNumber = 1 / 0))),
                        this.boomerangsShot.push(a);
                    }
                    this.shooting = !1;
                  }),
                  (a.specialPlantFoodEnd = function () {
                    (this.catching = !1), this.anmControl.playRandom(), (this.busy = 0);
                  }),
                  (a.umbrella = function () {
                    return this.shooting || this.anmControl.playAnimation('Block', 1), this.getComponent(b).playBlockSound(), !0;
                  }),
                  (a.specialPlantFood = function () {
                    var t = this;
                    this.getComponent(b).playFoodSound(), this.anmControl.playAnimation('Food', -1), (this.busy = 1 / 0);
                    var o = 0;
                    this.schedule(
                      function () {
                        t._shoot(!0, new c(15, 0)),
                          t._shoot(!0, new c(-15, 0)),
                          t._shoot(!0, new c(0, 10)),
                          t._shoot(!0, new c(0, -10)),
                          ++o >= t.foodBoomerangMaxCount && t.foodEnd();
                      },
                      2 / this.foodBoomerangMaxCount,
                      this.foodBoomerangMaxCount,
                      0.01
                    );
                  }),
                  (a._shootPeaAnimation = function () {
                    this.anmControl.playAnimation('Shoot', 1, 0.1, Math.max(2.7 / this.shootInterval, 1));
                  }),
                  (a.animationListener = function (t) {
                    'Shoot' == t.name ? this._shoot() : 'ShootSound' == t.name ? this.getComponent(b).playShootSound() : t.name;
                  }),
                  (a.setDetecter = function () {
                    (this.prjDetecter = g.createRectangleNodeCenter(this.node, 0.6 * y.SquareDisW, 0.6 * y.SquareDisH)),
                      (this.detector = g.createRectangleNodeSide(
                        this.inLnC.node,
                        y.SquareDisW * (9 - this.cIndex),
                        y.SquareDisH
                      ));
                  }),
                  (a.detectPrj = function () {
                    var t = this;
                    this.boomerangsShot.concat().forEach(function (o) {
                      var n = t.boomerangsShot.indexOf(o);
                      o.master == t &&
                        o.returned &&
                        t.prjDetecter.judgeInRecP(o.shadeWorldPosition) &&
                        (o.fade(),
                        -1 != n && t.boomerangsShot.splice(n, 1),
                        t.getComponent(b).playCatchSound(),
                        t.shooting ||
                          t.fooding ||
                          t.catching ||
                          ((t.catching = !0), t.anmControl.playAnimation('Catch', 1, 0.1)));
                    });
                  }),
                  (a.waterable = function () {
                    return !this.shooting;
                  }),
                  (a.specialPlantOnEnable = function () {
                    var t = this;
                    (this.catching = !1),
                      (this.boomerangsShot = []),
                      (this.busy = 0),
                      this.anmControl.body.addEventListener(
                        l.EventObject.LOOP_COMPLETE,
                        function () {
                          (t.shooting = !1), (t.catching = !1);
                        },
                        this
                      );
                  }),
                  (a.startShooting = function () {
                    this.shooting = !0;
                    var t = 0.03 * Math.round(5 * Math.random()) * (this.shootInterval / 1.35);
                    (this.busy = this.shootInterval + t), this._shootPeaAnimation();
                  }),
                  (a.detectEnemy = function () {
                    for (var t = this.inLane.zombiePool(), o = 0; o < t.length; o++)
                      if (this.detector.judgeCrossRec(t[o].bodyRec)) return !0;
                    for (var n = this.inLane.tombPool(), e = 0; e < n.length; e++)
                      if (this.detector.judgeCrossRec(n[e].bodyRec)) return !0;
                    return !1;
                  }),
                  (a.specialPlantOnSquareChange = function (t, o) {
                    this.setDetecter();
                  }),
                  (a.specialPlantUpdate = function (t) {
                    this.busy > 0 && (this.busy -= t),
                      this.busy <= 0 && ((this.busy = 0), this.detectEnemy() && this.startShooting()),
                      this.detectPrj();
                  }),
                  o
                );
              })(d)).prototype,
              'foodBoomerangMaxCount',
              [v],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 60;
                },
              }
            )),
            (M = o(B.prototype, 'boomerang', [C], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (_ = o(B.prototype, 'shootInterval', [w], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 2.7;
              },
            })),
            (D = o(B.prototype, 'boomerangSpawnpoint', [j], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (x = B))
          ) || x)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/bloomerangSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './plantSound.ts'],
  function (o) {
    var n, t, e, i, r, u, a, l, c;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (i = o.assertThisInitialized);
        },
        function (o) {
          (r = o.cclegacy), (u = o._decorator), (a = o.AudioClip);
        },
        function (o) {
          l = o.ArrayGet;
        },
        function (o) {
          c = o.plantSound;
        },
      ],
      execute: function () {
        var d, p, s, S, h, f, y, b, g, m, v;
        r._RF.push({}, 'd0705O10WZJJpig+6ppu658', 'bloomerangSound', void 0);
        var z = u.ccclass,
          R = u.property;
        o(
          'bloomerangSound',
          ((d = z('bloomerangSound')),
          (p = R([a])),
          (s = R([a])),
          (S = R([a])),
          (h = R([a])),
          d(
            ((b = n(
              (y = (function (o) {
                function n() {
                  for (var n, t = arguments.length, r = new Array(t), u = 0; u < t; u++) r[u] = arguments[u];
                  return (
                    (n = o.call.apply(o, [this].concat(r)) || this),
                    e(n, 'catchSound', b, i(n)),
                    e(n, 'shootSound', g, i(n)),
                    e(n, 'foodSound', m, i(n)),
                    e(n, 'blockSound', v, i(n)),
                    n
                  );
                }
                t(n, o);
                var r = n.prototype;
                return (
                  (r.playBlockSound = function () {
                    this.playOneShot(l.getRandom(this.blockSound));
                  }),
                  (r.playFoodSound = function () {
                    this.playOneShot(l.getRandom(this.foodSound));
                  }),
                  (r.playShootSound = function () {
                    this.playOneShot(l.getRandom(this.shootSound));
                  }),
                  (r.playCatchSound = function () {
                    this.playOneShot(l.getRandom(this.catchSound));
                  }),
                  n
                );
              })(c)).prototype,
              'catchSound',
              [p],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (g = n(y.prototype, 'shootSound', [s], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (m = n(y.prototype, 'foodSound', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (v = n(y.prototype, 'blockSound', [h], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (f = y))
          ) || f)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Blover.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Plant.ts', './FrontYard.ts', './NodePools.ts', './SoundsController.ts'],
  function (t) {
    var n, o, i, e, r, l, a, u, s, c, d, h, p;
    return {
      setters: [
        function (t) {
          (n = t.applyDecoratedDescriptor),
            (o = t.inheritsLoose),
            (i = t.initializerDefineProperty),
            (e = t.assertThisInitialized);
        },
        function (t) {
          (r = t.cclegacy), (l = t._decorator), (a = t.CCFloat), (u = t.AudioClip), (s = t.AudioSource);
        },
        function (t) {
          c = t.Plant;
        },
        function (t) {
          d = t.FrontYard;
        },
        function (t) {
          h = t.ArrayGet;
        },
        function (t) {
          p = t.SoundFXController;
        },
      ],
      execute: function () {
        var b, f, m, w, y, v, S;
        r._RF.push({}, '1f0c1xbLLRKlLjI78K3hZz+', 'Blover', void 0);
        var C = l.ccclass,
          D = l.property;
        t(
          'BloverPlant',
          ((b = C('BloverPlant')),
          (f = D(a)),
          (m = D([u])),
          b(
            ((v = n(
              (y = (function (t) {
                function n() {
                  for (var n, o = arguments.length, r = new Array(o), l = 0; l < o; l++) r[l] = arguments[l];
                  return (
                    (n = t.call.apply(t, [this].concat(r)) || this), i(n, 'blowDuration', v, e(n)), i(n, 'blowSound', S, e(n)), n
                  );
                }
                o(n, t);
                var r = n.prototype;
                return (
                  (r.specialPlantOnEnable = function () {
                    (this.invincible = !0),
                      (this.eaterDetectable = !1),
                      (this.smasherDetectable = !1),
                      (this.foodable = !1),
                      (this.anmControl.IdleAnim = 'Blowing'),
                      (this.anmControl.RandomAnim = []),
                      this.anmControl.playAnimation('BlowStart', 1);
                  }),
                  (r.playBlowSound = function () {
                    this.getComponent(s) || this.addComponent(s),
                      this.getComponent(s).playOneShot(h.getRandom(this.blowSound), p.SoundFXVolume);
                  }),
                  (r.animationListener = function (t) {
                    var n = this;
                    'blowStart' == t.name &&
                      (this.playBlowSound(),
                      (d.windy = d.windy > this.blowDuration ? d.windy : this.blowDuration),
                      this.scheduleOnce(function () {
                        n.die(), n.anmControl.playAnimation('Death', 1, 0);
                      }, this.blowDuration));
                  }),
                  n
                );
              })(c)).prototype,
              'blowDuration',
              [f],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 3;
                },
              }
            )),
            (S = n(y.prototype, 'blowSound', [m], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (w = y))
          ) || w)
        );
        r._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/BodyGrouper.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (n) {
  var e, t, r, i, o, a, l, u, c;
  return {
    setters: [
      function (n) {
        (e = n.applyDecoratedDescriptor), (t = n.inheritsLoose), (r = n.initializerDefineProperty), (i = n.assertThisInitialized);
      },
      function (n) {
        (o = n.cclegacy), (a = n._decorator), (l = n.dragonBones), (u = n.math), (c = n.Component);
      },
    ],
    execute: function () {
      var s, m, p, d, f, y, h, b, g, v, A;
      o._RF.push({}, '58139gaPaBD5JtqBrmcDFyc', 'BodyGrouper', void 0);
      var D = a.ccclass,
        _ = a.property;
      n(
        'BodyGrouper',
        ((s = D('BodyGrouper')),
        (m = _(String)),
        (p = _(String)),
        (d = _(String)),
        (f = _(String)),
        s(
          ((b = e(
            (h = (function (n) {
              function e() {
                for (var e, t = arguments.length, o = new Array(t), a = 0; a < t; a++) o[a] = arguments[a];
                return (
                  (e = n.call.apply(n, [this].concat(o)) || this),
                  r(e, 'IdleAnm', b, i(e)),
                  r(e, 'WalkAnm', g, i(e)),
                  r(e, 'DeathAnm', v, i(e)),
                  r(e, 'EatAnm', A, i(e)),
                  (e.body = void 0),
                  (e.currentAnimationName = ''),
                  e
                );
              }
              t(e, n);
              var o = e.prototype;
              return (
                (o.showArm = function (n) {
                  var e;
                  void 0 === n && (n = !0),
                    null == (e = this.body) ||
                      null == (e = e.armature()) ||
                      null == (e = e.getSlots()) ||
                      e.forEach(function (e) {
                        e.name.includes('_HAND')
                          ? e._setDisplayIndex(n ? 0 : -1)
                          : e.name.includes('_ARM') && e._setDisplayIndex(n ? -1 : 0);
                      });
                }),
                (o.showHead = function (n) {
                  var e;
                  void 0 === n && (n = !0),
                    null == (e = this.body) ||
                      null == (e = e.armature()) ||
                      null == (e = e.getSlots()) ||
                      e.forEach(function (e) {
                        e.name.includes('_HEAD') && e._setDisplayIndex(n ? 0 : -1);
                      });
                }),
                (o.setColor = function (n) {
                  var e = 255 - n.r,
                    t = 255 - n.g,
                    r = 255 - n.b,
                    i = 255 - n.a,
                    o = this.getComponent(l.ArmatureDisplay).color,
                    a = o.r,
                    c = o.g,
                    s = o.b,
                    m = o.a;
                  new u.Color(a - e, c - t, s - r, m - i);
                }),
                (o.playAnimation = function (n, e, t) {
                  var r, i;
                  if (
                    (void 0 === e && (e = 1 / 0),
                    void 0 === t && (t = 0),
                    -1 !=
                      (null == (r = this.body) || null == (r = r.armature()) ? void 0 : r.animation.animationNames.indexOf(n)))
                  ) {
                    var o;
                    if (t > 0)
                      null == (o = this.body) || null == (o = o.armature()) || null == (o = o.animation) || o.fadeIn(n, t, e);
                    else null == (i = this.body) || i.playAnimation(n, e);
                    this.currentAnimationName = n;
                  }
                }),
                (o.onEnable = function () {
                  this.setColor(new u.Color(255, 255, 255, 255));
                }),
                (o.hitFlash = function () {}),
                e
              );
            })(c)).prototype,
            'IdleAnm',
            [m],
            {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 'Idle';
              },
            }
          )),
          (g = e(h.prototype, 'WalkAnm', [p], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return 'Walk';
            },
          })),
          (v = e(h.prototype, 'DeathAnm', [d], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return 'Death';
            },
          })),
          (A = e(h.prototype, 'EatAnm', [f], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return 'Eat';
            },
          })),
          (y = h))
        ) || y)
      );
      o._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/BonkChoy.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Plant.ts', './bonkChoySound.ts', './CharacterManager.ts', './Square.ts'],
  function (t) {
    var e, a, o, n, i, s, r, c, h, l, d, u, m;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor),
            (a = t.inheritsLoose),
            (o = t.initializerDefineProperty),
            (n = t.assertThisInitialized);
        },
        function (t) {
          (i = t.cclegacy), (s = t._decorator), (r = t.macro), (c = t.Vec2), (h = t.dragonBones);
        },
        function (t) {
          l = t.Plant;
        },
        function (t) {
          d = t.bonkChoySound;
        },
        function (t) {
          u = t.Rectangle;
        },
        function (t) {
          m = t.Square;
        },
      ],
      execute: function () {
        var g, b, f, y, p;
        i._RF.push({}, '3c6a9Ol/9RMhZdXe+1G4AxT', 'BonkChoy', void 0);
        var k = s.ccclass,
          v = s.property;
        t(
          'BonkChoyPlant',
          ((g = k('BonkChoy')),
          (b = v(Number)),
          g(
            ((p = e(
              (y = (function (t) {
                function e() {
                  for (var e, a = arguments.length, i = new Array(a), s = 0; s < a; s++) i[s] = arguments[s];
                  return (
                    ((e = t.call.apply(t, [this].concat(i)) || this).target = null),
                    (e.damageNM = 15),
                    (e.damageHV = 30),
                    (e.damageFood = 60),
                    (e.foodPunch = 0),
                    (e.maxFoodPunch = 25),
                    (e.detector = void 0),
                    (e.tombDetector = void 0),
                    (e.foodDetecter = void 0),
                    (e.targetTomb = void 0),
                    o(e, 'attackInterval', p, n(e)),
                    (e.busy = 24),
                    (e.bonking = !1),
                    e
                  );
                }
                a(e, t);
                var i = e.prototype;
                return (
                  (i.specialPlantFood = function () {
                    this.faceNormal(),
                      this.anmControl.playAnimation('FoodStart', r.REPEAT_FOREVER, 0, 1),
                      (this.foodPunch = 0),
                      (this.busy = 1 / 0);
                  }),
                  (i.waterable = function () {
                    return !this.bonking;
                  }),
                  (i.specialPlantFoodEnd = function () {
                    this.anmControl.playRandom(), (this.busy = 0);
                  }),
                  (i.attackAnimation = function () {
                    this.target
                      ? (this.target.node.worldPosition.x < this.node.worldPosition.x ? this.faceNormal(-1) : this.faceNormal(),
                        this.target.totalHealth() < this.damageHV
                          ? this.anmControl.playAnimation(
                              'Defeat',
                              1,
                              0,
                              0.4 < this.attackInterval ? 1 : 0.4 / this.attackInterval
                            )
                          : this.anmControl.playAnimation(
                              'Attack',
                              1,
                              0,
                              0.4 < this.attackInterval ? 1 : 0.4 / this.attackInterval
                            ))
                      : this.targetTomb &&
                        (this.targetTomb.node.worldPosition.x < this.node.worldPosition.x
                          ? this.faceNormal(-1)
                          : this.faceNormal(),
                        this.targetTomb.health < this.damageHV
                          ? this.anmControl.playAnimation(
                              'Defeat',
                              1,
                              0,
                              0.4 < this.attackInterval ? 1 : 0.4 / this.attackInterval
                            )
                          : this.anmControl.playAnimation(
                              'Attack',
                              1,
                              0,
                              0.4 < this.attackInterval ? 1 : 0.4 / this.attackInterval
                            ));
                  }),
                  (i.specialPlantOnSquareChange = function (t, e) {
                    this.setDetector();
                  }),
                  (i.animationListener = function (t) {
                    var e = this;
                    'attackAir' == t.name && this.getComponent(d).playAttackAir(),
                      'attackGoal' == t.name &&
                        (this.target
                          ? (this.target.dealDamage(this.damageNM, !0, !0, !0, new c(20 * this.body.scale.x, 0)),
                            this.getComponent(d).playAttackGoal())
                          : this.targetTomb && (this.targetTomb.dealDamage(this.damageNM), this.getComponent(d).playAttackGoal()),
                        (this.target = null),
                        (this.targetTomb = null),
                        (this.bonking = !1)),
                      'attackHeavy' == t.name &&
                        (this.target
                          ? (this.target.dealDamage(this.damageHV, !0, !0, !0, new c(20 * this.body.scale.x, 30)),
                            this.getComponent(d).playDefeatSound())
                          : this.targetTomb &&
                            (this.targetTomb.dealDamage(this.damageHV), this.getComponent(d).playDefeatSound()),
                        (this.target = null),
                        (this.targetTomb = null),
                        (this.bonking = !1)),
                      'foodAttack' == t.name &&
                        (this.getComponent(d).playAttackAir(),
                        this.detectFoodEnemy().forEach(function (t) {
                          t.dealDamage(e.damageFood);
                        }),
                        this.detectFoodTomb().forEach(function (t) {
                          t.dealDamage(e.damageFood);
                        }),
                        ++this.foodPunch >= this.maxFoodPunch && this.foodEnd());
                  }),
                  (i.faceNormal = function (t) {
                    void 0 === t && (t = 1),
                      t < 0
                        ? this.body.setScale(-Math.abs(this.body.scale.x), this.body.scale.y)
                        : t > 0 && this.body.setScale(Math.abs(this.body.scale.x), this.body.scale.y);
                  }),
                  (i.setDetector = function () {
                    (this.detector = u.createRectangleNodeCenter(this.inLnC.node, 4 * m.SquareDisW, m.SquareDisH)),
                      (this.tombDetector = u.createRectangleNodeCenter(this.inLnC.node, 3 * m.SquareDisW, m.SquareDisH)),
                      (this.foodDetecter = u.createRectangleNodeCenter(this.inLnC.node, 3 * m.SquareDisW, 3 * m.SquareDisH));
                  }),
                  (i.faceToNormal = function () {
                    this.faceNormal(1);
                  }),
                  (i.specialPlantOnEnable = function () {
                    (this.busy = 0), this.anmControl.body.addEventListener(h.EventObject.COMPLETE, this.faceToNormal, this);
                  }),
                  (i.detectFoodEnemy = function () {
                    for (
                      var t = [],
                        e = this.inLane
                          .zombiePool()
                          .concat(this.inLane.UpperLane.zombiePool(), this.inLane.LowerLane.zombiePool()),
                        a = 0;
                      a < e.length;
                      a++
                    )
                      this.foodDetecter.judgeCrossRec(e[a].bodyRec) && t.push(e[a]);
                    return t;
                  }),
                  (i.detectFoodTomb = function () {
                    for (
                      var t = [],
                        e = this.inLane.tombPool().concat(this.inLane.UpperLane.tombPool(), this.inLane.LowerLane.tombPool()),
                        a = 0;
                      a < e.length;
                      a++
                    )
                      this.foodDetecter.judgeCrossRec(e[a].bodyRec) && t.push(e[a]);
                    return t;
                  }),
                  (i.detectTomb = function () {
                    var t = this,
                      e = null,
                      a = 1 / 0;
                    return (
                      this.inLane.tombPool().forEach(function (o) {
                        var n = o.node.worldPosition.x;
                        o.bodyRec.judgeCrossRec(t.tombDetector) && n < a && ((e = o), (a = n));
                      }),
                      e
                    );
                  }),
                  (i.detectEnemy = function () {
                    var t = this,
                      e = null,
                      a = this.inLane.zombiePool(),
                      o = 1 / 0;
                    return (
                      a.forEach(function (a) {
                        var n = a.bodyRec.prjX().x;
                        t.detector.judgeCrossRec(a.bodyRec) && n < o && ((e = a), (o = n));
                      }),
                      e
                    );
                  }),
                  (i.startBonking = function () {
                    (this.bonking = !0), this.attackAnimation(), (this.busy = 60 * this.attackInterval);
                  }),
                  (i.specialPlantUpdate = function (t) {
                    this.busy > 0 && (this.busy -= 60 * t),
                      this.busy <= 0 &&
                        !this.fooding &&
                        ((this.busy = 0),
                        ((this.target = this.detectEnemy()) || (this.targetTomb = this.detectTomb())) && this.startBonking());
                  }),
                  e
                );
              })(l)).prototype,
              'attackInterval',
              [b],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 0.4;
                },
              }
            )),
            (f = y))
          ) || f)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/bonkChoySound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './plantSound.ts'],
  function (t) {
    var n, o, e, a, i, r, l, u;
    return {
      setters: [
        function (t) {
          (n = t.applyDecoratedDescriptor),
            (o = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (a = t.assertThisInitialized);
        },
        function (t) {
          (i = t.cclegacy), (r = t._decorator), (l = t.AudioClip);
        },
        function (t) {
          u = t.plantSound;
        },
      ],
      execute: function () {
        var c, p, d, s, y, h, S, f, b;
        i._RF.push({}, 'cad07736/5LoLENO1J6rW3B', 'bonkChoySound', void 0);
        var k = r.ccclass,
          A = r.property;
        t(
          'bonkChoySound',
          ((c = k('bonkChoySound')),
          (p = A(l)),
          (d = A(l)),
          (s = A(l)),
          c(
            ((S = n(
              (h = (function (t) {
                function n() {
                  for (var n, o = arguments.length, i = new Array(o), r = 0; r < o; r++) i[r] = arguments[r];
                  return (
                    (n = t.call.apply(t, [this].concat(i)) || this),
                    e(n, 'attackAirSound', S, a(n)),
                    e(n, 'attackGoalSound', f, a(n)),
                    e(n, 'defeatSound', b, a(n)),
                    n
                  );
                }
                o(n, t);
                var i = n.prototype;
                return (
                  (i.playAttackAir = function () {
                    this.playOneShot(this.attackAirSound);
                  }),
                  (i.playAttackGoal = function () {
                    this.playOneShot(this.attackGoalSound);
                  }),
                  (i.playDefeatSound = function () {
                    this.playOneShot(this.defeatSound);
                  }),
                  n
                );
              })(u)).prototype,
              'attackAirSound',
              [p],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (f = n(h.prototype, 'attackGoalSound', [d], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (b = n(h.prototype, 'defeatSound', [s], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (y = h))
          ) || y)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/boomerang.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './commonShot.ts', './CharacterManager.ts', './Square.ts'],
  function (e) {
    var t, n, r, a, i, o, s, c;
    return {
      setters: [
        function (e) {
          t = e.inheritsLoose;
        },
        function (e) {
          (n = e.cclegacy), (r = e._decorator), (a = e.Vec2), (i = e.tween);
        },
        function (e) {
          o = e.commonShot;
        },
        function (e) {
          s = e.LineSegment;
        },
        function (e) {
          c = e.Square;
        },
      ],
      execute: function () {
        var u;
        n._RF.push({}, 'b4ba8bZy4pFt52T8XYiyO5U', 'boomerang', void 0);
        var d = r.ccclass;
        r.property,
          e('boomerangEnemy', function (e, t) {
            void 0 === t && (t = !1), (this.node = null), (this.damageDealt = !1), (this.node = e), (this.damageDealt = t);
          }),
          e(
            'boomerang',
            d('boomerang')(
              (u = (function (e) {
                function n() {
                  for (var t, n = arguments.length, r = new Array(n), a = 0; a < n; a++) r[a] = arguments[a];
                  return (
                    ((t = e.call.apply(e, [this].concat(r)) || this).contactingEnemies = []),
                    (t.targets = null),
                    (t.maxTargetNumber = 3),
                    (t.returned = !1),
                    (t._returned = !1),
                    (t.master = void 0),
                    (t.returning = !1),
                    (t.judgeHaveEnemy = !0),
                    t
                  );
                }
                t(n, e);
                var r = n.prototype;
                return (
                  (r.full = function () {
                    return this.targets.length >= this.maxTargetNumber;
                  }),
                  (r.haveEnemy = function (e) {
                    var t = this,
                      n = !1,
                      r = s.createLineVec(e, new a(9 * c.SquareDisW, 0));
                    return (
                      this.inLane.zombiePool().forEach(function (e) {
                        n || (-1 == t.targets.indexOf(e.node) && r.judgeCrossRec(e.bodyRec) && (n = !0));
                      }),
                      !!n ||
                        (this.inLane.tombPool().forEach(function (e) {
                          n || (-1 == t.targets.indexOf(e.node) && r.judgeCrossRec(e.bodyRec) && (n = !0));
                        }),
                        n)
                    );
                  }),
                  (r.returnStart = function () {
                    var e = this;
                    if (!this.returning && !this.returned) {
                      var t = this.linearVelocity;
                      this.returning = !0;
                      var n = this;
                      i(n)
                        .to(0.3, { linearVelocity: new a(0, 0) })
                        .call(function () {
                          e.contactingEnemies.forEach(function (e) {
                            e.damageDealt = !1;
                          }),
                            (e.returned = !0),
                            e.judgeHaveEnemy ? (e._returned = !0) : ((e.returning = !1), (e.targets = [])),
                            i(n)
                              .to(0.3, { linearVelocity: new a(-t.x, -t.y) })
                              .start();
                        })
                        .start();
                    }
                  }),
                  (r.characterOnEnable = function () {
                    this.initialize(),
                      (this.contactingEnemies = []),
                      (this.targets = []),
                      (this.returned = !1),
                      (this._returned = !1),
                      (this.returning = !1);
                  }),
                  (r.characterOnSquareChange = function (e, t) {
                    (-1 != t.cIndex && 9 != t.cIndex && -1 != t.lIndex && 5 != t.lIndex) || this.returnStart(),
                      !this.judgeHaveEnemy || (!this.full() && this.haveEnemy(this.realWorldPosition)) || this.returnStart();
                  }),
                  (r.characterUpdate = function (e) {
                    this.dead || (this.rotate(), this.hitBorderOrGround(e), this.move(e), this.detectEnemy(e));
                  }),
                  (r.detectEnemy = function (e) {
                    var t,
                      n,
                      r = this;
                    (this.full() && !this.returned) ||
                      (null == (t = this.inLane) ||
                        t.zombiePool().forEach(function (e) {
                          if (!r.dead) {
                            var t = r.targets.indexOf(e.node);
                            ((!r._returned && -1 == t && !r.full()) || (r._returned && -1 != t)) &&
                              e.bodyRec.judgeCrossRec(r.bodyRec()) &&
                              (r.dealDamageToTarget(e),
                              r.playParticle(),
                              r.playPopSound(),
                              r._returned ? r.targets.splice(t, 1) : r.targets.push(e.node));
                          }
                        }),
                      null == (n = this.inLane) ||
                        n.tombPool().forEach(function (e) {
                          if (!r.dead) {
                            var t = r.targets.indexOf(e.node);
                            ((!r._returned && -1 == t) || (r._returned && -1 != t)) &&
                              e.bodyRec.judgeCrossRec(r.bodyRec()) &&
                              (e.dealDamage(r.damage),
                              r.playParticle(),
                              r.playPopSound(),
                              r._returned ? r.targets.splice(t, 1) : r.targets.push(e.node));
                          }
                        }));
                  }),
                  n
                );
              })(o))
            ) || u
          );
        n._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Buttercup.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './NodePools.ts',
    './CabbagePult.ts',
    './Character.ts',
    './CharacterManager.ts',
    './LnC.ts',
    './Square.ts',
    './buttercupSound.ts',
  ],
  function (t) {
    var o, n, e, i, r, a, l, s, u, c, b, p, d, f, h, P, g;
    return {
      setters: [
        function (t) {
          (o = t.applyDecoratedDescriptor),
            (n = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (i = t.assertThisInitialized);
        },
        function (t) {
          (r = t.cclegacy), (a = t._decorator), (l = t.Prefab), (s = t.Node), (u = t.CCFloat);
        },
        function (t) {
          c = t.Plant;
        },
        function (t) {
          b = t.NodePools;
        },
        function (t) {
          p = t.cabbagePult;
        },
        function (t) {
          d = t.CharacterType;
        },
        function (t) {
          f = t.ZombiePool;
        },
        function (t) {
          h = t.TileLiquidEnum;
        },
        function (t) {
          P = t.Square;
        },
        function (t) {
          g = t.buttercupSound;
        },
      ],
      execute: function () {
        var m, y, w, v, L, C, S, D, O;
        r._RF.push({}, '897991iB9tMG6ufv1/LzPQP', 'Buttercup', void 0);
        var Z = a.ccclass,
          T = a.property;
        t(
          'ButtercupPlant',
          ((m = Z('ButtercupPlant')),
          (y = T(l)),
          (w = T(s)),
          (v = T(u)),
          m(
            ((S = o(
              (C = (function (t) {
                function o() {
                  for (var o, n = arguments.length, r = new Array(n), a = 0; a < n; a++) r[a] = arguments[a];
                  return (
                    (o = t.call.apply(t, [this].concat(r)) || this),
                    e(o, 'butterPrj', S, i(o)),
                    e(o, 'butterSpawnPoint', D, i(o)),
                    (o.targetZombies = []),
                    e(o, 'LobInterval', O, i(o)),
                    (o.coolDown = 0),
                    (o.lobbing = !1),
                    o
                  );
                }
                n(o, t);
                var r = o.prototype;
                return (
                  (r.animationListener = function (t) {
                    var o = this;
                    'Lob' == t.name
                      ? (this.lobOnTargets(), (this.lobbing = !1))
                      : 'LobFood' == t.name
                      ? (this.getComponent(g).playFoodSound(),
                        f
                          .pool()
                          .concat()
                          .forEach(function (t) {
                            var n = b.instantiatePooly(o.butterPrj);
                            p.lobOneCabbageOnZombie(
                              n,
                              o.node.worldPosition,
                              o.butterSpawnPoint.worldPosition.y - o.node.worldPosition.y,
                              o.inLane.prjLayer,
                              t,
                              2,
                              d.zombie,
                              !0
                            )
                              .setButter(12)
                              .setDamage(150)
                              .setTileLiquid(h.butterJuice, 150);
                          }),
                        P.getRandomSquares(20).forEach(function (t) {
                          var n = b.instantiatePooly(o.butterPrj);
                          p.lobOneCabbageOnNode(
                            n,
                            o.node.worldPosition,
                            o.butterSpawnPoint.worldPosition.y - o.node.worldPosition.y,
                            o.inLane.prjLayer,
                            t,
                            2,
                            d.zombie,
                            !0
                          )
                            .setButter(12)
                            .setDamage(150)
                            .setTileLiquid(h.butterJuice, 150);
                        }))
                      : 'foodEnd' == t.name
                      ? this.foodEnd()
                      : 'titter' == t.name && this.getComponent(g).platTitterSound();
                  }),
                  (r.specialPlantFood = function (t) {
                    this.anmControl.playAnimation('Food', 1), (this.lobbing = !1);
                  }),
                  (r.waterable = function () {
                    return !this.lobbing;
                  }),
                  (r.specialPlantOnEnable = function () {
                    (this.coolDown = 0), (this.targetZombies = []), (this.lobbing = !1);
                  }),
                  (r.lobOnTargets = function (t) {
                    var o = this;
                    void 0 === t && (t = 8),
                      this.targetZombies.forEach(function (n) {
                        if (n.isAlive()) {
                          var e = b.instantiatePooly(o.butterPrj);
                          p.lobOneCabbageOnZombie(
                            e,
                            o.node.worldPosition,
                            o.butterSpawnPoint.worldPosition.y - o.node.worldPosition.y,
                            o.inLane.prjLayer,
                            n,
                            3,
                            d.zombie,
                            !0
                          )
                            .setButter(t)
                            .setDamage(100)
                            .setTileLiquid(h.butterJuice, 120);
                        }
                      }),
                      (this.targetZombies = []);
                  }),
                  (r.specialPlantDie = function () {
                    this.lobOnTargets();
                  }),
                  (r.specialPlantUpdate = function (t) {
                    var o = this;
                    this.coolDown > 0 && (this.coolDown -= t),
                      this.targetZombies.concat().forEach(function (t) {
                        if (!t.isAlive()) {
                          var n = o.targetZombies.indexOf(t);
                          -1 != n && o.targetZombies.splice(n, 1);
                        }
                      });
                  }),
                  (r.specialPlantOnEaten = function (t, o, n, e) {
                    o &&
                      (-1 == this.targetZombies.indexOf(o) && this.targetZombies.push(o),
                      this.coolDown <= 0 &&
                        (this.getComponent(g).playShootSound(),
                        this.anmControl.playAnimation('Lob', 1, 0.1),
                        (this.coolDown = this.LobInterval),
                        (this.lobbing = !0)));
                  }),
                  o
                );
              })(c)).prototype,
              'butterPrj',
              [y],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (D = o(C.prototype, 'butterSpawnPoint', [w], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (O = o(C.prototype, 'LobInterval', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 1.34;
              },
            })),
            (L = C))
          ) || L)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/buttercupSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './SoundsController.ts'],
  function (o) {
    var t, n, e, u, i, r, a, d, c, l, p;
    return {
      setters: [
        function (o) {
          (t = o.applyDecoratedDescriptor),
            (n = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (u = o.assertThisInitialized);
        },
        function (o) {
          (i = o.cclegacy), (r = o._decorator), (a = o.AudioClip), (d = o.AudioSource), (c = o.Component);
        },
        function (o) {
          l = o.ArrayGet;
        },
        function (o) {
          p = o.SoundFXController;
        },
      ],
      execute: function () {
        var s, S, h, f, y, b, m, g, v;
        i._RF.push({}, '42a66WuyftHXIvDGRT9hu/h', 'buttercupSound', void 0);
        var C = r.ccclass,
          F = r.property;
        o(
          'buttercupSound',
          ((s = C('buttercupSound')),
          (S = F([a])),
          (h = F([a])),
          (f = F([a])),
          s(
            ((m = t(
              (b = (function (o) {
                function t() {
                  for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
                  return (
                    ((t = o.call.apply(o, [this].concat(i)) || this).audioSource = void 0),
                    e(t, 'shootSound', m, u(t)),
                    e(t, 'foodSound', g, u(t)),
                    e(t, 'titterSound', v, u(t)),
                    t
                  );
                }
                n(t, o);
                var i = t.prototype;
                return (
                  (i.onLoad = function () {
                    this.getComponent(d) || this.addComponent(d), (this.audioSource = this.getComponent(d));
                  }),
                  (i.playShootSound = function () {
                    this.audioSource.playOneShot(l.getRandom(this.shootSound), p.SoundFXVolume);
                  }),
                  (i.playFoodSound = function () {
                    this.audioSource.playOneShot(l.getRandom(this.foodSound), p.SoundFXVolume);
                  }),
                  (i.platTitterSound = function () {
                    this.audioSource.playOneShot(l.getRandom(this.titterSound), 0.3 * p.SoundFXVolume);
                  }),
                  t
                );
              })(c)).prototype,
              'shootSound',
              [S],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (g = t(b.prototype, 'foodSound', [h], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (v = t(b.prototype, 'titterSound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (y = b))
          ) || y)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/ButtonWithSounds.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './SoundsController.ts'],
  function (o) {
    var t, n, e, u, i, r, c, a, d, l, s;
    return {
      setters: [
        function (o) {
          (t = o.applyDecoratedDescriptor),
            (n = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (u = o.assertThisInitialized);
        },
        function (o) {
          (i = o.cclegacy), (r = o._decorator), (c = o.AudioClip), (a = o.AudioSource), (d = o.Node), (l = o.Component);
        },
        function (o) {
          s = o.SoundFXController;
        },
      ],
      execute: function () {
        var S, h, p, f, y, v, C;
        i._RF.push({}, '2e673nCkwJH5Jl8XLIW8wTA', 'ButtonWithSounds', void 0);
        var m = r.ccclass,
          g = r.property;
        o(
          'ButtonWithSounds',
          ((S = m('ButtonWithSounds')),
          (h = g(c)),
          (p = g(c)),
          S(
            ((v = t(
              (y = (function (o) {
                function t() {
                  for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
                  return (
                    ((t = o.call.apply(o, [this].concat(i)) || this).audioSource = void 0),
                    e(t, 'touchStartSound', v, u(t)),
                    e(t, 'touchEndSound', C, u(t)),
                    t
                  );
                }
                return (
                  n(t, o),
                  (t.prototype.onLoad = function () {
                    var o = this;
                    this.getComponent(a) || this.addComponent(a),
                      (this.audioSource = this.getComponent(a)),
                      this.node.on(d.EventType.TOUCH_START, function () {
                        o.touchStartSound && o.audioSource.playOneShot(o.touchStartSound, s.SoundFXVolume);
                      }),
                      this.node.on(d.EventType.TOUCH_END, function () {
                        o.touchEndSound && o.audioSource.playOneShot(o.touchEndSound, s.SoundFXVolume);
                      });
                  }),
                  t
                );
              })(l)).prototype,
              'touchStartSound',
              [h],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (C = t(y.prototype, 'touchEndSound', [p], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (f = y))
          ) || f)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/CabbagePult.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Character.ts',
    './cabbagePultSound.ts',
    './NodePools.ts',
    './CharacterManager.ts',
    './Square.ts',
    './ProjectileManager.ts',
    './Plant.ts',
    './Zombie.ts',
  ],
  function (t) {
    var e, o, n, i, a, r, l, b, s, c, u, g, h, d, f, y, p, P, v, m;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor),
            (o = t.inheritsLoose),
            (n = t.initializerDefineProperty),
            (i = t.assertThisInitialized);
        },
        function (t) {
          (a = t.cclegacy), (r = t._decorator), (l = t.Prefab), (b = t.Node), (s = t.Vec2);
        },
        function (t) {
          (c = t.Character), (u = t.CharacterType);
        },
        function (t) {
          g = t.cabbagePultSound;
        },
        function (t) {
          h = t.NodePools;
        },
        function (t) {
          (d = t.ZombiePool), (f = t.TombPool), (y = t.Rectangle);
        },
        function (t) {
          p = t.Square;
        },
        function (t) {
          P = t.projectile;
        },
        function (t) {
          v = t.Plant;
        },
        function (t) {
          m = t.Zombie;
        },
      ],
      execute: function () {
        var L, C, w, S, k, O, x, _, z, j, D, I, M, N, R;
        a._RF.push({}, 'b8357J5RHlKf5Qf6WXXkqdh', 'CabbagePult', void 0);
        var E = r.ccclass,
          T = r.property,
          V = t(
            'cabbagePult',
            (function () {
              function t() {}
              return (
                (t.lobOneCabbageOnPos = function (t, e, o, n, i, a, r, l, b) {
                  void 0 === l && (l = 30), void 0 === b && (b = 0), (t.parent = n), P.registerProjectile(t, r, null);
                  var u = t.getComponent(c);
                  u.height = o;
                  var g = (u.gravity = a);
                  return (
                    (u.linearVelocity = new s(15, 0)),
                    (u.worldPosition = new s(e.x, e.y)),
                    (u.linearVelocity = new s((i.x - e.x) / l, (i.y - e.y) / l)),
                    (u.bodyLinearVelocity = (g * l) / 2),
                    (u.bodyLinearVelocity += b / l),
                    u
                  );
                }),
                (t.lobOneCabbageOnNode = function (t, e, o, n, i, a, r, l, b) {
                  void 0 === b && (b = 30);
                  var c = new s(i.worldPosition.x, i.worldPosition.y),
                    u = this.lobOneCabbageOnPos(t, e, o, n, c, a, r, b);
                  return (u.targetLocked = l ? i : null), u;
                }),
                (t.lobOneCabbageOnZombie = function (t, e, o, n, i, a, r, l, b) {
                  void 0 === b && (b = 30);
                  var s = i.lobberTarget(),
                    c = null == s ? void 0 : s.lobberToPos(b);
                  s.node.worldPosition.clone().add(e.clone().negative()).length() <= 60 && (b /= 3);
                  var u = this.lobOneCabbageOnPos(t, e, o, n, c, a, r, b);
                  return (u.targetLocked = l ? s.node : null), (u.bodyLinearVelocity += (s.zombieHeight + s.height) / b), u;
                }),
                (t.lobOneCabbageHorizontal = function (t, e, o, n, i, a, r) {
                  var l = t.getComponent(c);
                  return (
                    P.registerProjectile(t, r, null),
                    (l.node.parent = n),
                    (l.worldPosition = new s(e.x, e.y)),
                    (l.height = o),
                    (l.linearVelocity = new s(i.x, 0)),
                    (l.node.angle = 0),
                    (l.bodyLinearVelocity = i.y),
                    (l.gravity = 2),
                    l
                  );
                }),
                t
              );
            })()
          );
        t(
          'CabbagePultPlant',
          ((L = E('CabbagePultPlant')),
          (C = T(l)),
          (w = T(l)),
          (S = T(l)),
          (k = T(l)),
          (O = T(Number)),
          (x = T(b)),
          L(
            ((j = e(
              (z = (function (t) {
                function e() {
                  for (var e, o = arguments.length, a = new Array(o), r = 0; r < o; r++) a[r] = arguments[r];
                  return (
                    ((e = t.call.apply(t, [this].concat(a)) || this).targetLock = null),
                    (e.cabbage = null),
                    n(e, 'cabbage0', j, i(e)),
                    n(e, 'cabbage1', D, i(e)),
                    n(e, 'cabbage2', I, i(e)),
                    n(e, 'cabbageMega', M, i(e)),
                    n(e, 'lobInterval', N, i(e)),
                    n(e, 'cabbageSpawnPoint', R, i(e)),
                    (e.detector = null),
                    (e.busy = 0),
                    (e.lobbing = !1),
                    e
                  );
                }
                o(e, t);
                var a = e.prototype;
                return (
                  (a.specialPlantFood = function () {
                    this.anmControl.playAnimation('Food', 1), (this.busy = 1 / 0), this.getComponent(g).playFoodSound();
                  }),
                  (a.waterable = function () {
                    return !this.lobbing;
                  }),
                  (a._lobCabbageAnimation = function () {
                    this.anmControl.playAnimation('Lob', 1, 0.1, Math.max(2.7 / this.lobInterval, 1));
                  }),
                  (a._lob = function (t, e, o, n) {
                    var i;
                    void 0 === t && (t = this.targetLock),
                      void 0 === e && (e = this.cabbage),
                      void 0 === o && (o = !1),
                      void 0 === n && (n = 30);
                    var a = h.instantiatePooly(e),
                      r = null == (i = t) ? void 0 : i.getComponent(m);
                    if (a)
                      if (r)
                        V.lobOneCabbageOnZombie(
                          a,
                          this.inLnC.plantPoint.worldPosition,
                          this.cabbageSpawnPoint.worldPosition.y - this.inLnC.plantPoint.worldPosition.y,
                          this.inLane.prjLayer,
                          r,
                          2,
                          u.zombie,
                          o,
                          n
                        );
                      else this._lobToNode(t, e, o, n);
                    this.lobbing = !1;
                  }),
                  (a._lobToNode = function (t, e, o, n) {
                    void 0 === t && (t = this.targetLock),
                      void 0 === e && (e = this.cabbage),
                      void 0 === o && (o = !1),
                      void 0 === n && (n = 30);
                    var i = h.instantiatePooly(e);
                    i &&
                      V.lobOneCabbageOnNode(
                        i,
                        this.inLnC.plantPoint.worldPosition,
                        this.cabbageSpawnPoint.worldPosition.y - this.inLnC.plantPoint.worldPosition.y,
                        this.inLane.prjLayer,
                        t,
                        2,
                        u.zombie,
                        o,
                        n
                      ),
                      (this.lobbing = !1);
                  }),
                  (a.specialAnimationListener = function (t) {}),
                  (a.animationListener = function (t) {
                    var e = this;
                    'Lob' == t.name
                      ? (this.detectEnemy(!0), this._lob(this.targetLock), (this.targetLock = null))
                      : 'LobSound' == t.name
                      ? this.node.getComponent(g).playLobSound()
                      : 'lobFood' == t.name
                      ? (d.pool().forEach(function (t) {
                          e._lob(t.node, e.cabbageMega, !0);
                        }),
                        f.pool().forEach(function (t) {
                          e._lobToNode(t.node, e.cabbageMega, !0);
                        }))
                      : 'foodEnd' == t.name && ((this.busy = 0), this.foodEnd()),
                      this.specialAnimationListener(t);
                  }),
                  (a.specialPlantOnSquareChange = function (t, e) {
                    this.setDetecter();
                  }),
                  (a.specialPlantOnEnable = function () {
                    this.changeProjectile(0);
                  }),
                  (a.changeProjectile = function (t) {
                    switch ((void 0 === t && (t = 0), t)) {
                      case 0:
                        var e;
                        (this.cabbage = this.cabbage0),
                          null == (e = this.anmControl.body.armature().getSlot('effect')) || e._setDisplayIndex(-1);
                        break;
                      case 1:
                        var o;
                        (this.cabbage = this.cabbage1),
                          null == (o = this.anmControl.body.armature().getSlot('effect')) || o._setDisplayIndex(1);
                        break;
                      case 2:
                        var n;
                        (this.cabbage = this.cabbage2),
                          null == (n = this.anmControl.body.armature().getSlot('effect')) || n._setDisplayIndex(0);
                    }
                  }),
                  (a.setDetecter = function () {
                    this.detector = y.createRectangleNodeSide(this.inLnC.node, p.SquareDisW * (9 - this.cIndex), p.SquareDisH);
                  }),
                  (a.detectEnemy = function (t) {
                    void 0 === t && (t = !1);
                    var e = [],
                      o = [],
                      n = !1,
                      i = this.inLane.zombiePool(),
                      a = this.inLane.tombPool();
                    this.targetLock = this.inLane.toRight;
                    for (var r = 0; r < i.length; r++) this.detector.judgeCrossRec(i[r].bodyRec) && (e.push(i[r].node), (n = !0));
                    for (var l = 0; l < a.length; l++) this.detector.judgeCrossRec(a[l].bodyRec) && (o.push(a[l].node), (n = !0));
                    if (t)
                      if (e.length > 0) {
                        this.targetLock = e[0];
                        for (var b = 1; b < e.length; b++)
                          this.targetLock.worldPosition.x > e[b].worldPosition.x && (this.targetLock = e[b]);
                      } else if (o.length > 0) {
                        this.targetLock = o[0];
                        for (var s = 1; s < o.length; s++)
                          this.targetLock.worldPosition.x > o[s].worldPosition.x && (this.targetLock = o[s]);
                      }
                    return n;
                  }),
                  (a.startLobbing = function () {
                    (this.lobbing = !0), this._lobCabbageAnimation();
                    var t = 0.03 * Math.round(5 * Math.random()) * (this.lobInterval / 1.35);
                    this.busy = 60 * (this.lobInterval + t);
                  }),
                  (a.specialPlantUpdate = function (t) {
                    this.busy > 0 && (this.busy -= 60 * t),
                      this.busy <= 0 && ((this.busy = 0), this.detectEnemy() && this.startLobbing());
                  }),
                  e
                );
              })(v)).prototype,
              'cabbage0',
              [C],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (D = e(z.prototype, 'cabbage1', [w], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (I = e(z.prototype, 'cabbage2', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (M = e(z.prototype, 'cabbageMega', [k], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (N = e(z.prototype, 'lobInterval', [O], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 1.35;
              },
            })),
            (R = e(z.prototype, 'cabbageSpawnPoint', [x], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (_ = z))
          ) || _)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/cabbagePultSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './SoundsController.ts', './NodePools.ts'],
  function (o) {
    var n, t, e, u, i, r, a, l, d, c, s;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (u = o.assertThisInitialized);
        },
        function (o) {
          (i = o.cclegacy), (r = o._decorator), (a = o.AudioClip), (l = o.AudioSource), (d = o.Component);
        },
        function (o) {
          c = o.SoundFXController;
        },
        function (o) {
          s = o.ArrayGet;
        },
      ],
      execute: function () {
        var p, S, b, f, h, y, g;
        i._RF.push({}, '1a3074MynBDxrdpb1Y6sL7/', 'cabbagePultSound', void 0);
        var m = r.ccclass,
          v = r.property;
        o(
          'cabbagePultSound',
          ((p = m('cabbagePultSound')),
          (S = v([a])),
          (b = v([a])),
          p(
            ((y = n(
              (h = (function (o) {
                function n() {
                  for (var n, t = arguments.length, i = new Array(t), r = 0; r < t; r++) i[r] = arguments[r];
                  return (
                    (n = o.call.apply(o, [this].concat(i)) || this),
                    e(n, 'lobSound', y, u(n)),
                    e(n, 'foodSound', g, u(n)),
                    (n.audioSourse = void 0),
                    n
                  );
                }
                t(n, o);
                var i = n.prototype;
                return (
                  (i.onLoad = function () {
                    this.getComponent(l) || this.addComponent(l), (this.audioSourse = this.getComponent(l));
                  }),
                  (i.playFoodSound = function () {
                    this.audioSourse.playOneShot(s.getRandom(this.foodSound), c.SoundFXVolume);
                  }),
                  (i.playLobSound = function () {
                    this.audioSourse.playOneShot(s.getRandom(this.lobSound), c.SoundFXVolume);
                  }),
                  n
                );
              })(d)).prototype,
              'lobSound',
              [S],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (g = n(h.prototype, 'foodSound', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (f = h))
          ) || f)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Cactus.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './NodePools.ts',
    './Peashooter.ts',
    './Character.ts',
    './commonShot.ts',
    './cactusSound.ts',
    './CharacterManager.ts',
    './Square.ts',
    './Spikeweed.ts',
    './cactusThorn.ts',
  ],
  function (t) {
    var o, n, e, i, a, s, r, h, l, c, d, u, m, p, f, b, C, g, y, D, S;
    return {
      setters: [
        function (t) {
          (o = t.applyDecoratedDescriptor),
            (n = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (i = t.assertThisInitialized);
        },
        function (t) {
          (a = t.cclegacy), (s = t._decorator), (r = t.Prefab), (h = t.Node), (l = t.CCFloat), (c = t.Vec2), (d = t.Vec3);
        },
        function (t) {
          u = t.Plant;
        },
        function (t) {
          m = t.NodePools;
        },
        function (t) {
          p = t.peaShooter;
        },
        function (t) {
          f = t.CharacterType;
        },
        function (t) {
          b = t.commonShot;
        },
        function (t) {
          C = t.cactusSound;
        },
        function (t) {
          g = t.Rectangle;
        },
        function (t) {
          y = t.Square;
        },
        function (t) {
          D = t.spikeweed;
        },
        function (t) {
          S = t.cactusThorn;
        },
      ],
      execute: function () {
        var v, P, w, R, I, A, L, z, E, _, j, H, F, q, x;
        a._RF.push({}, 'd8347tqDEBHAaEpFnziRm1N', 'Cactus', void 0);
        var M = s.ccclass,
          k = s.property;
        t(
          'CactusPlant',
          ((v = M('CactusPlant')),
          (P = k(r)),
          (w = k(r)),
          (R = k(h)),
          (I = k(l)),
          (A = k(l)),
          (L = k(l)),
          v(
            ((_ = o(
              (E = (function (t) {
                function o() {
                  for (var o, n = arguments.length, a = new Array(n), s = 0; s < n; s++) a[s] = arguments[s];
                  return (
                    (o = t.call.apply(t, [this].concat(a)) || this),
                    e(o, 'prj0', _, i(o)),
                    e(o, 'prjFood', j, i(o)),
                    e(o, 'peaSpawnpoint', H, i(o)),
                    e(o, 'shootInterval', F, i(o)),
                    (o.shootCD = 0),
                    (o.shooting = !1),
                    e(o, 'stabInterval', q, i(o)),
                    (o.stabCD = 0),
                    e(o, 'stabDamage', x, i(o)),
                    (o.lit = !1),
                    (o.hidden = !1),
                    (o.shootDetector = new g()),
                    (o.hideDetector = new g()),
                    (o.stabDetector = new g()),
                    o
                  );
                }
                n(o, t);
                var a = o.prototype;
                return (
                  (a.specialPlantOnEnable = function () {
                    this.showLight(!1), (this.shootCD = 0), (this.stabCD = 0);
                  }),
                  (a._shoot = function (t, o, n) {
                    void 0 === t && (t = this.prj0), void 0 === o && (o = 15), void 0 === n && (n = new c(1, 0));
                    var e = m.instantiatePooly(t);
                    if (e) {
                      var i = p
                          .shootOnePea(
                            e,
                            new d(this.peaSpawnpoint.worldPosition.x, this.inLnC.plantPoint.worldPosition.y, 0),
                            Math.max(1, this.peaSpawnpoint.worldPosition.y - this.inLnC.plantPoint.worldPosition.y),
                            this.inLane.node,
                            n.normalize().multiplyScalar(o),
                            f.zombie
                          )
                          .getComponent(b),
                        a = i.getComponent(S);
                      return a && (a.maxPierceAmount_ = 3 + Math.round(Math.random())), i;
                    }
                  }),
                  (a.showLight = function (t) {
                    void 0 === t && (t = !0),
                      this.anmControl.body
                        .armature()
                        .getSlots()
                        .forEach(function (o) {
                          o.name.includes('stab')
                            ? o._setDisplayIndex(t ? 1 : 0)
                            : o.name.includes('Light') && o._setDisplayIndex(t ? 0 : -1);
                        }),
                      (this.lit = t),
                      (this.foodable = !t);
                  }),
                  (a.hide = function (t, o) {
                    void 0 === t && (t = !0),
                      void 0 === o && (o = !0),
                      t
                        ? ((this.anmControl.IdleAnim = 'Idle_Hidden'),
                          (this.anmControl.RandomAnim = []),
                          (this.deathAnm = 'Death_Hidden'),
                          o ? this.anmControl.playAnimation('Hide', 1) : this.anmControl.playRandom())
                        : ((this.anmControl.IdleAnim = 'Idle'),
                          (this.anmControl.RandomAnim = ['Rand1', 'Rand2']),
                          (this.deathAnm = 'Death'),
                          o ? this.anmControl.playAnimation('Recover_Hidden', 1) : this.anmControl.playRandom()),
                      (this.hidden = t),
                      (this.eaterDetectable = !t),
                      (this.short_ = t);
                  }),
                  (a.specialPlantFood = function (t) {
                    this.anmControl.playAnimation('Food', 2);
                  }),
                  (a.specialPlantFoodEnd = function () {
                    this.anmControl.playRandom(), this.showLight(), (this.shootCD = 0), (this.stabCD = 0);
                  }),
                  (a.animationListener = function (t) {
                    var o = this;
                    'Shoot' == t.name
                      ? this._shoot(this.lit ? this.prjFood : this.prj0, 20)
                      : 'shootSound' == t.name
                      ? this.getComponent(C).playShootSound(this.lit)
                      : 'hideSound' == t.name
                      ? this.getComponent(C).playHideSound()
                      : 'hideEndSound' == t.name
                      ? this.getComponent(C).playRecoverSound()
                      : 'foodSound' == t.name
                      ? this.getComponent(C).playFoodSound()
                      : 'attackSound' == t.name
                      ? this.getComponent(C).playStabSound()
                      : 'Attack' == t.name
                      ? (this.getComponent(C).playShakeSound(),
                        this.inLane
                          .zombiePool()
                          .concat()
                          .forEach(function (t) {
                            !t.flying &&
                              t.bodyRec.judgeCrossRec(o.stabDetector) &&
                              D.stabOnZombie(o, t, o.stabDamage * (o.lit ? 2 : 1));
                          }))
                      : 'light' == t.name
                      ? this.showLight()
                      : 'foodEnd' == t.name && this.foodEnd();
                  }),
                  (a.waterable = function () {
                    return !this.shooting && !this.hidden;
                  }),
                  (a.specialPlantOnSquareChange = function (t, o) {
                    this.setDetecter(t, o);
                  }),
                  (a.setDetecter = function (t, o) {
                    (this.shootDetector = g.createRectangleNodeSide(o.node, y.SquareDisW * (9 - o.cIndex), y.SquareDisH)),
                      (this.hideDetector = g.createRectangleNodeCenter(o.node, 2 * y.SquareDisW, y.SquareDisH)),
                      (this.stabDetector = g.createRectangleNodeCenter(o.node, y.SquareDisW, y.SquareDisH));
                  }),
                  (a.detectShootEnemy = function () {
                    for (var t = this.inLane.zombiePool(), o = 0; o < t.length; o++)
                      if (this.shootDetector.judgeCrossRec(t[o].bodyRec)) return !0;
                    for (var n = this.inLane.tombPool(), e = 0; e < n.length; e++)
                      if (this.shootDetector.judgeCrossRec(n[e].bodyRec)) return !0;
                    return !1;
                  }),
                  (a.detectStabEnemy = function () {
                    for (var t = this.inLane.zombiePool(), o = 0; o < t.length; o++)
                      if (!t[o].flying && this.stabDetector.judgeCrossRec(t[o].bodyRec)) return !0;
                  }),
                  (a.detectHideEnemy = function () {
                    for (var t = this.inLane.zombiePool(), o = 0; o < t.length; o++)
                      if (this.hideDetector.judgeCrossRec(t[o].bodyRec)) return !0;
                  }),
                  (a.startShooting = function () {
                    this.shooting = !0;
                    var t = 0.03 * Math.round(5 * Math.random()) * (this.shootInterval / 1.35);
                    (this.shootCD = this.shootInterval + t),
                      this.anmControl.playAnimation('Shoot', 1, 0.1, Math.max(1.35 / this.shootInterval, 1));
                  }),
                  (a.animationOnComplete = function () {
                    this.shooting = !1;
                  }),
                  (a.normalSmash = function (t) {
                    D.stabOnZombie(null, t, this.stabDamage * (this.lit ? 2 : 1)), this.fooding || this.invincible || this.die();
                  }),
                  (a.specialPlantUpdate = function (t) {
                    if (!this.fooding) {
                      this.hidden
                        ? (this.stabCD > 0 && (this.stabCD -= t),
                          this.stabCD <= 0 &&
                            !this.dead &&
                            ((this.stabCD = 0),
                            this.detectStabEnemy() &&
                              ((this.shooting = !0),
                              (this.stabCD = this.stabInterval),
                              this.anmControl.playAnimation('Attack_Hidden', 1, 0.1, Math.max(0.5 / this.shootInterval, 1)))))
                        : (this.shootCD > 0 && (this.shootCD -= t),
                          this.shootCD <= 0 &&
                            !this.dead &&
                            ((this.shootCD = 0), this.detectShootEnemy() && this.startShooting()));
                      var o = this.detectHideEnemy();
                      this.hidden && !o ? this.hide(!1) : !this.hidden && o && this.hide(!0);
                    }
                  }),
                  o
                );
              })(u)).prototype,
              'prj0',
              [P],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (j = o(E.prototype, 'prjFood', [w], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (H = o(E.prototype, 'peaSpawnpoint', [R], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (F = o(E.prototype, 'shootInterval', [I], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 1.35;
              },
            })),
            (q = o(E.prototype, 'stabInterval', [A], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 0.5;
              },
            })),
            (x = o(E.prototype, 'stabDamage', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 10;
              },
            })),
            (z = E))
          ) || z)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/cactusSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './plantSound.ts'],
  function (o) {
    var n, t, e, i, r, u, a, l;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (i = o.assertThisInitialized);
        },
        function (o) {
          (r = o.cclegacy), (u = o._decorator), (a = o.AudioClip);
        },
        function (o) {
          l = o.plantSound;
        },
      ],
      execute: function () {
        var s, d, S, h, c, p, f, y, b, m, F, g, v, z, w, A, k, O, D, C;
        r._RF.push({}, 'f8512uvjj9Fb5lnf92TblD2', 'cactusSound', void 0);
        var _ = u.ccclass,
          j = u.property;
        o(
          'cactusSound',
          ((s = _('cactusSound')),
          (d = j([a])),
          (S = j([a])),
          (h = j([a])),
          (c = j([a])),
          (p = j([a])),
          (f = j([a])),
          (y = j(a)),
          (b = j([a])),
          s(
            (((C = (function (o) {
              function n() {
                for (var n, t = arguments.length, r = new Array(t), u = 0; u < t; u++) r[u] = arguments[u];
                return (
                  (n = o.call.apply(o, [this].concat(r)) || this),
                  e(n, 'shootSounds', g, i(n)),
                  e(n, 'shootFoodSounds', v, i(n)),
                  e(n, 'hideSounds', z, i(n)),
                  e(n, 'blopSounds', w, i(n)),
                  e(n, 'shakeSound', A, i(n)),
                  e(n, 'stabSound', k, i(n)),
                  e(n, 'foodShootSound', O, i(n)),
                  e(n, 'foodShoutSound', D, i(n)),
                  n
                );
              }
              t(n, o);
              var r = n.prototype;
              return (
                (r.playShootSound = function (o) {
                  void 0 === o && (o = !1), this.playOneShotFromArray(o ? this.shootFoodSounds : this.shootSounds);
                }),
                (r.playHideSound = function () {
                  this.playOneShotFromArray(this.hideSounds);
                }),
                (r.playRecoverSound = function () {
                  this.playOneShotFromArray(this.hideSounds), this.playOneShotFromArray(this.blopSounds);
                }),
                (r.playShakeSound = function () {
                  n.shakeSoundCD <= 0 && (this.playOneShotFromArray(this.shakeSound), (n.shakeSoundCD = 1));
                }),
                (r.playStabSound = function () {
                  this.playOneShotFromArray(this.stabSound);
                }),
                (r.playFoodSound = function () {
                  this.playOneShot(this.foodShootSound), this.playOneShotFromArray(this.foodShoutSound);
                }),
                n
              );
            })(l)).shakeSoundCD = 1),
            (g = n((F = C).prototype, 'shootSounds', [d], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (v = n(F.prototype, 'shootFoodSounds', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (z = n(F.prototype, 'hideSounds', [h], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (w = n(F.prototype, 'blopSounds', [c], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (A = n(F.prototype, 'shakeSound', [p], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (k = n(F.prototype, 'stabSound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (O = n(F.prototype, 'foodShootSound', [y], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (D = n(F.prototype, 'foodShoutSound', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (m = F))
          ) || m)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/cactusThorn.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './commonShot.ts', './Zombie.ts'],
  function (t) {
    var e, n, i, o, a, c, r, s, u, l;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor),
            (n = t.inheritsLoose),
            (i = t.initializerDefineProperty),
            (o = t.assertThisInitialized);
        },
        function (t) {
          (a = t.cclegacy), (c = t._decorator), (r = t.CCInteger);
        },
        function (t) {
          (s = t.ProjectileEnemyType), (u = t.commonShot);
        },
        function (t) {
          l = t.Zombie;
        },
      ],
      execute: function () {
        var h, d, m, g, f;
        a._RF.push({}, '358c6pnkANKjYft0I9QLF82', 'cactusThorn', void 0);
        var p = c.ccclass,
          y = c.property;
        t(
          'cactusThorn',
          ((h = p('cactusThorn')),
          (d = y(r)),
          h(
            ((f = e(
              (g = (function (t) {
                function e() {
                  for (var e, n = arguments.length, a = new Array(n), c = 0; c < n; c++) a[c] = arguments[c];
                  return (
                    (e = t.call.apply(t, [this].concat(a)) || this),
                    i(e, 'maxPierceAmount', f, o(e)),
                    (e.maxPierceAmount_ = 3),
                    (e.dealtTargetAmount = 0),
                    (e.contactingEnemies = []),
                    e
                  );
                }
                n(e, t);
                var a = e.prototype;
                return (
                  (a.characterOnEnable = function () {
                    this.initialize(),
                      (this.maxPierceAmount_ = this.maxPierceAmount),
                      (this.dealtTargetAmount = 0),
                      (this.contactingEnemies = []);
                  }),
                  (a.judgeContacting = function () {
                    var t = this;
                    this.contactingEnemies.concat().forEach(function (e) {
                      var n;
                      if (
                        -1 == [].concat(t.inLane.zombiePool(), t.inLane.plantPool(), t.inLane.tombPool()).indexOf(e) ||
                        null == (n = e.bodyRec) ||
                        !n.judgeCrossRec(t.bodyRec())
                      ) {
                        var i = t.contactingEnemies.indexOf(e);
                        -1 != i && t.contactingEnemies.splice(i, 1);
                      }
                    });
                  }),
                  (a.detectEnemy = function (t) {
                    var e,
                      n = this;
                    if (this.inLane)
                      if (
                        (this.judgeContacting(),
                        null != (e = this.targetLocked) &&
                          null != (e = e.getComponent(l)) &&
                          e.dead &&
                          (this.targetLocked = null),
                        this.enemyType == s.zombie)
                      ) {
                        var i,
                          o,
                          a = [];
                        null == (i = this.inLane) ||
                          i.zombiePool().forEach(function (t) {
                            (!n.targetLocked || (n.targetLocked && t.node == n.targetLocked)) &&
                              -1 == n.contactingEnemies.indexOf(t) &&
                              t.bodyRec.judgeCrossRec(n.bodyRec()) &&
                              a.push(t);
                          });
                        var c = [];
                        if (a.length) {
                          for (
                            var r = function () {
                              var t = 1 / 0,
                                e = null;
                              if (
                                (a.forEach(function (n) {
                                  var i = n.bodyRec.prjX().x;
                                  i < t && ((e = n), (t = i));
                                }),
                                e)
                              ) {
                                var i = a.indexOf(e);
                                -1 != i && a.splice(i, 1), c.push(e);
                              }
                              c.forEach(function (t) {
                                n.dealDamageToTarget(t, !0), n.dealtTargetAmount++, n.contactingEnemies.push(t);
                              });
                            };
                            a.length > 0 && c.length < this.maxPierceAmount_ - this.dealtTargetAmount;

                          )
                            r();
                          if (this.dealtTargetAmount >= this.maxPierceAmount_) return void this.pop();
                          this.playPopSound(), this.playParticle();
                        }
                        var u = [];
                        null == (o = this.inLane) ||
                          o.tombPool().forEach(function (t) {
                            (!n.targetLocked || (n.targetLocked && t.node == n.targetLocked)) &&
                              -1 == n.contactingEnemies.indexOf(t) &&
                              t.bodyRec.judgeCrossRec(n.bodyRec()) &&
                              u.push(t);
                          });
                        var h = [];
                        if (u.length) {
                          for (
                            var d = function () {
                              var t = 1 / 0,
                                e = null;
                              if (
                                (u.forEach(function (n) {
                                  var i = n.bodyRec.prjX().x;
                                  i < t && ((e = n), (t = i));
                                }),
                                e)
                              ) {
                                var i = u.indexOf(e);
                                -1 != i && u.splice(i, 1), h.push(e);
                              }
                              h.forEach(function (t) {
                                t.dealDamage(n.damage),
                                  n.dealSplashDamage(null, t),
                                  n.dealtTargetAmount++,
                                  n.contactingEnemies.push(t);
                              });
                            };
                            u.length > 0 && h.length < this.maxPierceAmount_ - this.dealtTargetAmount;

                          )
                            d();
                          if (this.dealtTargetAmount >= this.maxPierceAmount_) return void this.pop();
                          this.playPopSound(), this.playParticle();
                        }
                      } else if (this.enemyType == s.plant) {
                        var m,
                          g = [];
                        null == (m = this.inLane) ||
                          m.plantPool().forEach(function (t) {
                            (!n.targetLocked || (n.targetLocked && t.node == n.targetLocked)) &&
                              -1 == n.contactingEnemies.indexOf(t) &&
                              t.bodyRec.judgeCrossRec(n.bodyRec()) &&
                              g.push(t);
                          });
                        var f = [];
                        if (g.length) {
                          for (
                            var p = function () {
                              var t = -1 / 0,
                                e = null;
                              if (
                                (g.forEach(function (n) {
                                  var i = n.bodyRec.prjX().y;
                                  i > t && ((e = n), (t = i));
                                }),
                                e)
                              ) {
                                var i = g.indexOf(e);
                                -1 != i && g.splice(i, 1), f.push(e);
                              }
                              f.forEach(function (t) {
                                n.dealDamageToTargetPlant(t), n.dealtTargetAmount++, n.contactingEnemies.push(t);
                              });
                            };
                            g.length > 0 && f.length < this.maxPierceAmount_ - this.dealtTargetAmount;

                          )
                            p();
                          if (this.dealtTargetAmount >= this.maxPierceAmount_) return void this.pop();
                          this.playPopSound(), this.playParticle();
                        }
                      }
                  }),
                  e
                );
              })(u)).prototype,
              'maxPierceAmount',
              [d],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 3;
                },
              }
            )),
            (m = g))
          ) || m)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/CardFeatureTotal.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Plants.ts', './cardSelectAlmanac.ts'],
  function (t) {
    var e, a, n, i, r, s, o, l, c, p, u, h;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor), (a = t.inheritsLoose), (n = t.createClass), (i = t.initializerDefineProperty);
        },
        function (t) {
          (r = t.cclegacy), (s = t._decorator), (o = t.Prefab), (l = t.dragonBones), (c = t.Component);
        },
        function (t) {
          (p = t.PlantEnum), (u = t.plants);
        },
        function (t) {
          h = t.cardSelectAlmanac;
        },
      ],
      execute: function () {
        var d, y, m, f, P, g, b, A;
        r._RF.push({}, 'ad10f3V4/FHzpjqwpkiAhVr', 'CardFeatureTotal', void 0);
        var C = s.ccclass,
          v = s.property;
        t(
          'PlantsInCard',
          ((d = C('PlantsInCard')),
          (y = v({ type: o, visible: !0, tooltip: 'Plant Model' })),
          (m = v({ type: o, visible: !0, tooltip: 'Active Plant' })),
          d(
            ((g = e(
              (P = function () {
                i(this, 'plantDIS', g, this), i(this, 'plantPLANT', b, this);
              }).prototype,
              'plantDIS',
              [y],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (b = e(P.prototype, 'plantPLANT', [m], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (f = P))
          ) || f)
        ),
          t(
            'CardFeatureTotal',
            C('CardFeatureTotal')(
              (A = (function (t) {
                function e() {
                  for (var e, a = arguments.length, n = new Array(a), i = 0; i < a; i++) n[i] = arguments[i];
                  return (
                    ((e = t.call.apply(t, [this].concat(n)) || this).thisPlant = void 0), (e.thisCard = void 0), (e.pID = 0), e
                  );
                }
                a(e, t);
                var i = e.prototype;
                return (
                  (i.cardGrouperPlant = function (t, e) {
                    for (void 0 === t && (t = this.ID), void 0 === e && (e = !0), t >= p.amount && (t %= p.amount); t < 0; )
                      t += p.amount;
                    (this.ID = t), (this.thisPlant = u.getPlantFeature(t)), (this.thisCard = u.getPlantsInCard(t));
                    var a = this.getComponent(h);
                    switch (this.thisPlant.OBTAINWORLD) {
                      case 'egypt':
                      case 'pirate':
                      case 'cowboy':
                      case 'future':
                      case 'dark':
                      case 'beach':
                      case 'ice':
                      case 'lostcity':
                      case 'stage':
                      case 'dino':
                      case 'modern':
                      case 'frontyard':
                        (a.golden = !1), a._bg.playAnimation(this.thisPlant.OBTAINWORLD);
                        break;
                      case 'market':
                        (a.golden = !0), a._bg.playAnimation('prenium');
                        break;
                      default:
                        a._bg.playAnimation('homeless');
                    }
                    switch (((a.suncostShown = e), this.thisPlant.FAMILY)) {
                      case 'Peashooter':
                      case 'Cold':
                      case 'Electricity':
                      case 'Cold':
                      case 'Fire':
                      case 'Magic':
                      case 'Shadow':
                      case 'Slow':
                      case 'Trap':
                      case 'Sun':
                      case 'Sharp':
                      case 'Poison':
                      case 'Defence':
                      case 'Explosive':
                      case 'Lobber':
                      case 'Melee':
                        this.node.getChildByName('Family').getComponent(l.ArmatureDisplay).playAnimation(this.thisPlant.FAMILY);
                        break;
                      default:
                        this.node.getChildByName('Family').getComponent(l.ArmatureDisplay).playAnimation('Nope');
                    }
                    (a._price.string = this.thisPlant.SUNCOST.toString()), a._plant.playAnimation(this.thisPlant.PLANTTYPE);
                  }),
                  (i.cardGrouper = function (t, e) {
                    void 0 === t && (t = this.ID), void 0 === e && (e = !0), this.cardGrouperPlant(t, e);
                  }),
                  n(e, [
                    {
                      key: 'ID',
                      get: function () {
                        return this.pID;
                      },
                      set: function (t) {
                        this.pID = t;
                      },
                    },
                  ]),
                  e
                );
              })(c))
            ) || A
          );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/CardFeatureTotalZombie.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './CardFeatureTotal.ts', './Zombies.ts', './cardSelectAlmanac.ts'],
  function (e) {
    var t, o, a, i, n, r, s, c, u, m;
    return {
      setters: [
        function (e) {
          (t = e.inheritsLoose), (o = e.createClass);
        },
        function (e) {
          (a = e.cclegacy), (i = e._decorator), (n = e.dragonBones);
        },
        function (e) {
          r = e.CardFeatureTotal;
        },
        function (e) {
          (s = e.ZombieEnum), (c = e.zombies), (u = e.ZombieFeature);
        },
        function (e) {
          m = e.cardSelectAlmanac;
        },
      ],
      execute: function () {
        var l;
        a._RF.push({}, 'd7345nx6ChFwY4KZggMeaDC', 'CardFeatureTotalZombie', void 0);
        var h = i.ccclass;
        i.property,
          e(
            'CardFeatureTotalZombie',
            h('CardFeatureTotalZombie')(
              (l = (function (e) {
                function a() {
                  for (var t, o = arguments.length, a = new Array(o), i = 0; i < o; i++) a[i] = arguments[i];
                  return ((t = e.call.apply(e, [this].concat(a)) || this).thisZombie = new u()), (t.zID = 0), t;
                }
                t(a, e);
                var i = a.prototype;
                return (
                  (i.cardGrouper = function (e, t) {
                    void 0 === t && (t = !0), this.cardGrouperZombie(e, t);
                  }),
                  (i.cardGrouperZombie = function (e, t) {
                    for (
                      void 0 === e && (e = this.ID), void 0 === t && (t = !0), e >= s.zombieAmount && (e %= s.zombieAmount);
                      e < 0;

                    )
                      e += s.zombieAmount;
                    (this.ID = e), (this.thisZombie = c.getZombieFeature(e));
                    var o = this.getComponent(m);
                    switch (this.thisZombie.OBTAINWORLD) {
                      case 'egypt':
                      case 'pirate':
                      case 'cowboy':
                      case 'future':
                      case 'dark':
                      case 'beach':
                      case 'ice':
                      case 'lostcity':
                      case 'stage':
                      case 'dino':
                      case 'modern':
                      case 'frontyard':
                        (o.golden = !1), o._bg.playAnimation(this.thisZombie.OBTAINWORLD);
                        break;
                      case 'market':
                        (o.golden = !0), o._bg.playAnimation('prenium');
                        break;
                      default:
                        o._bg.playAnimation('homeless');
                    }
                    (o.suncostShown = t),
                      this.node.getChildByName('Family').getComponent(n.ArmatureDisplay).playAnimation('Nope'),
                      (o._price.string = this.thisZombie.SUNCOST.toString()),
                      o._plant.playAnimation(this.thisZombie.ZOMBIETYPE);
                  }),
                  o(a, [
                    {
                      key: 'ID',
                      get: function () {
                        return this.zID;
                      },
                      set: function (e) {
                        this.zID = e;
                      },
                    },
                  ]),
                  a
                );
              })(r))
            ) || l
          );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Cards.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './cardSelectAlmanac.ts',
    './UI.ts',
    './SunCount.ts',
    './CardUIUpper.ts',
    './CardFeatureTotal.ts',
    './Droppings.ts',
    './SeedChooser.ts',
    './SoundRescourses.ts',
    './levelController.ts',
    './Plants.ts',
    './NodePools.ts',
    './SandBoxLevelSettingWindow.ts',
    './CoinCollecterInGame.ts',
  ],
  function (t) {
    var e, n, o, s, a, i, r, d, c, l, h, u, p, g, m, C, S, f, P, k, w, B, v, y, b, U, I, O, E, x, D, N, A;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor),
            (n = t.inheritsLoose),
            (o = t.initializerDefineProperty),
            (s = t.assertThisInitialized);
        },
        function (t) {
          (a = t.cclegacy),
            (i = t._decorator),
            (r = t.Prefab),
            (d = t.Button),
            (c = t.Vec3),
            (l = t.math),
            (h = t.dragonBones),
            (u = t.find),
            (p = t.Label),
            (g = t.tween),
            (m = t.Sprite),
            (C = t.Color),
            (S = t.Node),
            (f = t.instantiate),
            (P = t.Component);
        },
        function (t) {
          k = t.cardSelectAlmanac;
        },
        function (t) {
          w = t.UIInGame;
        },
        function (t) {
          B = t.SunCount;
        },
        function (t) {
          v = t.CardUIUpper;
        },
        function (t) {
          y = t.CardFeatureTotal;
        },
        function (t) {
          b = t.droppings;
        },
        function (t) {
          U = t.SeedChooser;
        },
        function (t) {
          I = t.sounds;
        },
        function (t) {
          O = t.LevelPlay;
        },
        function (t) {
          (E = t.plants), (x = t.PlantEnum);
        },
        function (t) {
          D = t.NodePools;
        },
        function (t) {
          N = t.SandBoxLevelSettingWindow;
        },
        function (t) {
          A = t.CoinCollecterInGame;
        },
      ],
      execute: function () {
        var _, T, L, M, F, G, W, J;
        a._RF.push({}, 'bb6235wi4BJZIjcgfvmWiuD', 'Cards', void 0);
        var R = i.ccclass,
          j = i.property;
        t(
          'Cards',
          ((_ = R('Cards')),
          (T = j(r)),
          (L = j(d)),
          _(
            (((J = (function (t) {
              function e() {
                for (var e, n = arguments.length, a = new Array(n), i = 0; i < n; i++) a[i] = arguments[i];
                return (
                  ((e = t.call.apply(t, [this].concat(a)) || this).maxSlotCount = 0),
                  (e.seedPackets = []),
                  (e.cardSelection = []),
                  (e.cardSlot = []),
                  (e.ui = null),
                  o(e, 'seedBankPrefab', G, s(e)),
                  (e.seedBank = void 0),
                  (e.oldPos = new c(25, 312, 0)),
                  (e.shown = !1),
                  o(e, 'gameStartButton', W, s(e)),
                  (e._gsbuttonOldPos = new c()),
                  (e.fromCards = []),
                  (e.laid = !1),
                  (e.cardsUIUpper = []),
                  (e.gameStarted = !1),
                  e
                );
              }
              n(e, t);
              var a = e.prototype;
              return (
                (a.JudgeSelection = function () {
                  for (var t = 0; t < this.seedPackets.length; t++) {
                    var e = new l.Color(87, 174, 255, 0);
                    this.cardSlot[t].getComponent(v).mouseDownOff(),
                      -3 == this.ui.index &&
                        this.cardSlot[t].getComponent(v).cooling > 0 &&
                        ((e = new l.Color(87, 174, 255, 255)), this.cardSlot[t].getComponent(v).mouseDownOn()),
                      (this.cardSelection[t].getComponent(h.ArmatureDisplay).color = e),
                      this.JudgeCardsSelectable();
                  }
                }),
                (a.cardSelect = function () {
                  for (var t = 0; t < this.seedPackets.length; t++)
                    (this.seedPackets[t].getComponent(k).index = this.ui.index == t ? 1 : 0),
                      (this.node.getChildByName(t.toString()).getComponent(v).chosen = this.ui.index == t);
                }),
                (a.closeSeedbank = function () {
                  this.seedBank && D.destroyPooly(this.seedBank);
                }),
                (a.createSeedbank = function () {
                  this.seedBank = D.instantiatePooly(this.seedBankPrefab);
                  this.seedBank.getComponent(U);
                  (this.seedBank.parent = this.ui.UIUpper.getChildByName('seedbank')),
                    (this.seedBank.position = new c(0, -500, 0));
                }),
                (a.onLoad = function () {
                  (this.oldPos = this.node.position.clone()),
                    (this.gameStarted = !1),
                    (this.ui = this.node.parent.getComponent(w));
                  for (var t = 0; t < 8; t++)
                    u('Canvas/UIInGameUpper/CardsUpper/Key' + t.toString()).getComponent(p).color = new l.Color(0, 0, 0, 0);
                  (e.cardsController = this),
                    (this._gsbuttonOldPos = this.gameStartButton.node.position.clone()),
                    this.gameStartButton.node.position.add(new c(0, -1e4, 0));
                }),
                (a.showSeedSlots = function () {
                  !this.shown &&
                    this.maxSlotCount > 0 &&
                    (A.component && (A.component.show(), (A.component.hidden = !1), (A.component.showCD = 1 / 0)),
                    (this.shown = !0),
                    g(this.node).to(0.4, { position: this.oldPos }, { easing: 'cubicOut' }).start());
                }),
                (a.laySeedBank = function () {
                  var t = this;
                  I.playSeedChooserOn(),
                    this.showSeedSlots(),
                    (this.gameStartButton.node.position = this._gsbuttonOldPos),
                    g(this.seedBank)
                      .to(0.4, { position: new c(0, 0, 0) }, { easing: 'cubicOut' })
                      .call(function () {
                        t.cardChooseOn();
                      })
                      .start();
                }),
                (a.pullSeedBank = function (t) {
                  var e = this;
                  I.playSeedChooserOff(),
                    (this.gameStartButton.getComponent(m).color = new C(255, 255, 255, 0)),
                    this.gameStartButton.node.position.add(new c(0, 1e4, 0)),
                    g(this.seedBank)
                      .to(0.8, { position: new c(0, -2e3, 0) }, { easing: 'cubicIn' })
                      .call(function () {
                        t && e.seedBank;
                      })
                      .start();
                }),
                (a.judgeAllowed = function (t) {
                  var e = t.getComponent(k);
                  ((O.component.ExcludeListSunProducers && -1 != t.thisPlant.TYPE.indexOf('sunProducer')) ||
                    -1 != O.component.ExcludePlantList.indexOf(E.getPlantFeature(t.ID).CODENAME)) &&
                    (e.disallowed = !0);
                }),
                (a.cardChooseOn = function () {
                  var t = this;
                  (this.gameStartButton.node.position = new c(380, -280, 0)),
                    (this.gameStartButton.getComponent(m).color =
                      this.seedPackets.length == this.maxSlotCount ? new C(255, 255, 255, 255) : new C(140, 140, 140, 255)),
                    this.seedBank.getComponent(U).PlantsInCard.forEach(function (e) {
                      t.judgeAllowed(e),
                        e.node.on(
                          S.EventType.TOUCH_END,
                          function (n) {
                            t.addCard(e);
                          },
                          t
                        );
                    });
                }),
                (a.addCard = function (t) {
                  var e = this,
                    n = this.seedPackets.length + 0,
                    o = t.getComponent(k);
                  if (!o.disallowed && n < this.maxSlotCount && !o.chosen) {
                    var s = f(t.node);
                    s.setParent(this.cardSlot[n].getComponent(v).CardUpper, !1),
                      (s.worldPosition = t.node.worldPosition),
                      (s.worldScale = this.cardSlot[n].worldScale),
                      s.getComponent(y).cardGrouper(t.ID),
                      (o.chosen = !0),
                      this.fromCards.push(o),
                      (s.getComponent(k).seedChooserModeOn = !1),
                      this.seedPackets.push(s),
                      g(s)
                        .to(0.3, { position: new c(0, 0, 0) }, { easing: 'cubicOut' })
                        .call(function () {
                          s.setParent(e.cardSlot[n], !1),
                            s.once(
                              S.EventType.MOUSE_DOWN,
                              function (t) {
                                e.spliceCard(s);
                              },
                              e
                            );
                        })
                        .start(),
                      this.seedPackets.length == this.maxSlotCount &&
                        (this.gameStartButton.getComponent(m).color = new C(255, 255, 255, 255));
                  }
                }),
                (a.addCardByPlantEnum = function (t) {
                  var e = this.seedPackets.length + 0;
                  if (e < this.maxSlotCount) {
                    var n = f(b.PlantSeedPacket);
                    (n.parent = this.cardSlot[e]),
                      (n.worldScale = this.cardSlot[e].worldScale),
                      n.getComponent(y).cardGrouper(t),
                      this.seedPackets.push(n);
                  }
                }),
                (a.addCardByPlantEnumFromSeedbank = function (t) {}),
                (a.spliceCard = function (t) {
                  if (!O.letsRocked) {
                    I.playCardCancel();
                    var e = this.seedPackets.indexOf(t),
                      n = 0;
                    for (n = 0; n < this.fromCards.length; n++)
                      if (this.fromCards[n].getComponent(y).ID == t.getComponent(y).ID) {
                        (this.fromCards[n].chosen = !1), this.fromCards.splice(n, 1);
                        break;
                      }
                    t.destroy();
                    for (var o = e; o < this.seedPackets.length; o++)
                      this.seedPackets[o].parent != this.cardSlot[o - 1] &&
                        (this.seedPackets[o].setParent(this.cardSlot[o - 1], !0),
                        g(this.seedPackets[o])
                          .to(0.3, { position: new c(0, 0, 0) }, { easing: 'cubicOut' })
                          .start());
                    this.seedPackets.splice(e, 1),
                      this.seedPackets.length != this.maxSlotCount &&
                        (this.gameStartButton.getComponent(m).color = new C(140, 140, 140, 255));
                  }
                }),
                (a.laySlots = function () {
                  if (!this.laid) {
                    this.laid = !0;
                    for (var t = 1; t < this.maxSlotCount; t++) {
                      var e = f(this.node.getChildByName('0'));
                      (e.name = t.toString()),
                        (e.parent = this.node),
                        this.cardSlot.push(e),
                        (this.cardSlot[t].getComponent(v).index = t);
                      var n = e.getChildByName('PlantFoodSelection');
                      this.cardSelection.push(n), (n.getComponent(h.ArmatureDisplay).color = new C(255, 255, 255, 0));
                    }
                    this.cardSelection.forEach(function (t) {
                      t.getComponent(h.ArmatureDisplay).playAnimation('Idle', 1 / 0);
                    });
                  }
                }),
                (a.start = function () {
                  (this.laid = !1),
                    (this.shown = !1),
                    this.cardSlot.push(this.node.getChildByName('0')),
                    this.cardSelection.push(this.node.getChildByName('0').getChildByName('PlantFoodSelection')),
                    (this.cardSelection[0].getComponent(h.ArmatureDisplay).color = new C(255, 255, 255, 0)),
                    (this.cardSlot[0].getComponent(v).index = 0),
                    this.node.position.add(new c(0, 200, 0)),
                    this.node.on(S.EventType.MOUSE_WHEEL, this.onMouseScroll, this);
                }),
                (a.onDisable = function () {
                  for (var t = 0; t < this.seedPackets.length; t++)
                    (this.seedPackets[t].getComponent(d).enabled = !1), (this.seedPackets[t].getComponent(k).enabled = !1);
                }),
                (a.CoolStart = function (t) {
                  var e;
                  null == (e = this.node.getChildByName(t.toString())) || e.getComponent(v).coolStart();
                }),
                (a.cardsUIUpperRestart = function () {
                  this.cardsUIUpper.forEach(function (t) {
                    t.coolStart();
                  });
                }),
                (a.gameStart = function () {
                  if (!this.gameStarted) {
                    this.gameStarted = !0;
                    for (var t = 0; t < this.seedPackets.length; t++) {
                      var e = this.node.getChildByName(t.toString()).getComponent(v);
                      e.gameStart(),
                        this.cardsUIUpper.push(e),
                        this.seedPackets[t].off(S.EventType.MOUSE_DOWN),
                        this.seedPackets[t].on(S.EventType.MOUSE_DOWN, this.ui.indexChange[t], this.ui);
                    }
                    this.cardSelection.forEach(function (t) {
                      t.setSiblingIndex(t.parent.children.length),
                        (t.getComponent(h.ArmatureDisplay).color = new C(255, 255, 255, 0));
                    }),
                      this.JudgeCardsSelectable(),
                      this.JudgeSelection();
                  }
                }),
                (a.JudgeCardsSelectable = function () {
                  for (var t = B.component.SunCount, e = 0; e < this.cardsUIUpper.length; e++) {
                    var n;
                    null == (n = this.cardsUIUpper[e]) ||
                      n.setAffordable(t >= this.seedPackets[e].getComponent(y).thisPlant.SUNCOST || N.freePlant);
                  }
                }),
                (a.cardsUpdate = function (t) {
                  this.cardsUIUpper.forEach(function (e) {
                    e.cardUpdate(t);
                  });
                }),
                (a.onMouseScroll = function (t) {
                  if (O.sandBoxModeOn && O.gameStarted && this.seedPackets.length) {
                    var e = this.seedPackets[0].getComponent(y),
                      n = t.getScrollY() > 0 ? -1 : 1,
                      o = (e.ID + n) % x.amount;
                    this.seedPackets.forEach(function (t, e) {
                      t.getComponent(y).cardGrouper(o + e);
                    });
                  }
                }),
                e
              );
            })(P)).cardsController = void 0),
            (G = e((F = J).prototype, 'seedBankPrefab', [T], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (W = e(F.prototype, 'gameStartButton', [L], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (M = F))
          ) || M)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/cardSelectAlmanac.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './levelController.ts'],
  function (t) {
    var e, i, o, n, s, h, a, l, r, c, d;
    return {
      setters: [
        function (t) {
          (e = t.inheritsLoose), (i = t.createClass);
        },
        function (t) {
          (o = t.cclegacy),
            (n = t._decorator),
            (s = t.Node),
            (h = t.dragonBones),
            (a = t.Label),
            (l = t.Color),
            (r = t.math),
            (c = t.Component);
        },
        function (t) {
          d = t.LevelPlay;
        },
      ],
      execute: function () {
        var p;
        o._RF.push({}, '824f019C59ESqoTIS6t819E', 'cardSelectAlmanac', void 0);
        var u = n.ccclass;
        n.property,
          t(
            'cardSelectAlmanac',
            u('cardSelectAlmanac')(
              (p = (function (t) {
                function o() {
                  for (var e, i = arguments.length, o = new Array(i), n = 0; n < i; n++) o[n] = arguments[n];
                  return (
                    ((e = t.call.apply(t, [this].concat(o)) || this).index = void 0),
                    (e.indexPoint = void 0),
                    (e.affordable = void 0),
                    (e.cooling = void 0),
                    (e.selectable = void 0),
                    (e._disallowed = !1),
                    (e._bg = void 0),
                    (e._boost = void 0),
                    (e._dots = void 0),
                    (e._plant = void 0),
                    (e._price = void 0),
                    (e._select = void 0),
                    (e._disallow = void 0),
                    (e.free = !1),
                    (e.seedChooserModeOn = !1),
                    (e.chosen = !1),
                    (e._suncostShown = !1),
                    (e.golden = !1),
                    (e.Dark = new l(140, 140, 140, 255)),
                    (e.Red = new r.Color(255, 100, 100, 255)),
                    (e.White = new r.Color(255, 255, 255, 255)),
                    (e.Transparent = new r.Color(255, 255, 255, 0)),
                    e
                  );
                }
                e(o, t);
                var n = o.prototype;
                return (
                  (n.onEnable = function () {
                    this.node.on(s.EventType.MOUSE_ENTER, this.enter, this),
                      this.node.on(s.EventType.MOUSE_LEAVE, this.leave, this),
                      (this.index = 0),
                      (this.indexPoint = 0),
                      (this._select.armatureName = 'selection'),
                      this._select.playAnimation('nope', -1);
                  }),
                  (n.onLoad = function () {
                    (this._disallow = this.node.getChildByName('Disallow').getComponent(h.ArmatureDisplay)),
                      (this._boost = this.node
                        .getChildByName('Background')
                        .getChildByName('Boost')
                        .getComponent(h.ArmatureDisplay)),
                      (this._bg = this.node.getChildByName('Background').getComponent(h.ArmatureDisplay)),
                      (this._dots = this.node.getChildByName('Dots').getComponent(h.ArmatureDisplay)),
                      (this._plant = this.node.getChildByName('Plant').getComponent(h.ArmatureDisplay)),
                      (this._price = this.node.getChildByName('Dots').getChildByName('Price').getComponent(a)),
                      (this._select = this.node.getChildByName('Select').getComponent(h.ArmatureDisplay)),
                      this._disallow.playAnimation('nope', 1);
                  }),
                  (n.onDisable = function () {
                    this.node.off(s.EventType.MOUSE_ENTER, this.enter, this),
                      this.node.off(s.EventType.MOUSE_LEAVE, this.leave, this);
                  }),
                  (n.PlantDark = function () {
                    return !this.selectable;
                  }),
                  (n.BKDark = function () {
                    return !this.selectable || 1 == this.index;
                  }),
                  (n.Selection = function () {
                    return 1 == this.index;
                  }),
                  (n.Pointed = function () {
                    return 1 == this.indexPoint && 0 == this.index && this.selectable;
                  }),
                  (n.SelectionAnimationName = function () {
                    return this.Selection() ? 'select' : this.Pointed() ? 'point' : 'nope';
                  }),
                  (n.enter = function (t) {
                    this.indexPoint = 1;
                  }),
                  (n.leave = function (t) {
                    this.indexPoint = 0;
                  }),
                  (n.inGameColor = function () {
                    (this._boost.color = this.BKDark() ? this.Dark : this.White),
                      (this._bg.color = this.BKDark() ? this.Dark : this.White),
                      (this._dots.color = this.BKDark() ? this.Dark : this.White),
                      (this._plant.color = this.PlantDark() ? this.Dark : this.White),
                      (this._price.color = this._suncostShown ? (this.affordable ? this.White : this.Red) : this.Transparent),
                      this._select.playAnimation(this.SelectionAnimationName());
                  }),
                  (n.chooseSeedColor = function () {
                    var t = this.chosen || this.disallowed;
                    (this._boost.color = t ? this.Dark : this.White),
                      (this._bg.color = t ? this.Dark : this.White),
                      (this._dots.color = t ? this.Dark : this.White),
                      (this._plant.color = t ? this.Dark : this.White),
                      (this._price.color =
                        this._suncostShown && !this.disallowed ? (this.chosen ? this.Dark : this.White) : this.Transparent),
                      this._select.playAnimation(1 == this.indexPoint ? 'point' : this.Selection() ? 'select' : 'nope');
                  }),
                  (n.commonColor = function () {
                    (this._price.color = this._suncostShown ? this.White : this.Transparent),
                      this._select.playAnimation(1 == this.indexPoint ? 'point' : this.Selection() ? 'select' : 'nope');
                  }),
                  (n.update = function (t) {
                    (this.selectable = !this.cooling && (this.affordable || this.free) && !this.disallowed),
                      d.gameStarted || d.component.lastStandPrepareStarted
                        ? this.inGameColor()
                        : this.seedChooserModeOn
                        ? this.chooseSeedColor()
                        : this.commonColor();
                  }),
                  i(o, [
                    {
                      key: 'disallowed',
                      get: function () {
                        return this._disallowed;
                      },
                      set: function (t) {
                        (this.suncostShown = !t),
                          this._disallow.playAnimation(t ? 'disallow' : 'nope', 1),
                          (this._disallowed = t);
                      },
                    },
                    {
                      key: 'suncostShown',
                      get: function () {
                        return this._suncostShown;
                      },
                      set: function (t) {
                        t
                          ? ((this.free = !1), this._dots.playAnimation(this.golden ? 'dotsPricePrenium' : 'dotPrice'))
                          : ((this.free = !0), this._dots.playAnimation('dotsNoPrice')),
                          (this._suncostShown = t);
                      },
                    },
                  ]),
                  o
                );
              })(c))
            ) || p
          );
        o._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/CardUIUpper.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Cards.ts',
    './cardSelectAlmanac.ts',
    './UI.ts',
    './PlantFoodCount.ts',
    './CardFeatureTotal.ts',
    './levelController.ts',
    './SandBoxLevelSettingWindow.ts',
  ],
  function (o) {
    var t, e, n, i, a, l, r, s, c, d, h, p, C, u, f, g, m, S, w, U, v, y, P, O, T, D;
    return {
      setters: [
        function (o) {
          (t = o.applyDecoratedDescriptor),
            (e = o.inheritsLoose),
            (n = o.initializerDefineProperty),
            (i = o.assertThisInitialized);
        },
        function (o) {
          (a = o.cclegacy),
            (l = o._decorator),
            (r = o.Node),
            (s = o.Prefab),
            (c = o.EventMouse),
            (d = o.Sprite),
            (h = o.find),
            (p = o.Color),
            (C = o.math),
            (u = o.dragonBones),
            (f = o.Label),
            (g = o.instantiate),
            (m = o.Button),
            (S = o.Vec3),
            (w = o.Component);
        },
        function (o) {
          U = o.Cards;
        },
        function (o) {
          v = o.cardSelectAlmanac;
        },
        function (o) {
          y = o.UIInGame;
        },
        function (o) {
          P = o.PlantFoodCount;
        },
        function (o) {
          O = o.CardFeatureTotal;
        },
        function (o) {
          T = o.LevelPlay;
        },
        function (o) {
          D = o.SandBoxLevelSettingWindow;
        },
      ],
      execute: function () {
        var b, I, L, F, k, B, N;
        a._RF.push({}, '8cfcd0rpYJLVIHfHUSKviCk', 'CardUIUpper', void 0);
        var R = l.ccclass,
          W = l.property;
        o(
          'CardUIUpper',
          ((b = R('CardUIUpper')),
          (I = W(r)),
          (L = W(s)),
          b(
            ((B = t(
              (k = (function (o) {
                function t() {
                  for (var t, e = arguments.length, a = new Array(e), l = 0; l < e; l++) a[l] = arguments[l];
                  return (
                    ((t = o.call.apply(o, [this].concat(a)) || this).CardUpper = null),
                    n(t, 'Mouse', B, i(t)),
                    (t.KeyTip = void 0),
                    n(t, 'COOL', N, i(t)),
                    (t.coolShadow = void 0),
                    (t.plantReady = void 0),
                    (t.chosen = void 0),
                    (t.cooling = 0),
                    (t.affordable = void 0),
                    (t.coolTotalTime = 5),
                    (t.index = -1),
                    (t.masked = !1),
                    (t.detecter = null),
                    (t.card = null),
                    t
                  );
                }
                e(t, o);
                var a = t.prototype;
                return (
                  (a.setAffordable = function (o) {
                    (this.affordable = o), this.setUpperColor();
                  }),
                  (a.clearCool = function (o) {
                    o.getButton() == c.BUTTON_LEFT &&
                      ((this.coolShadow.getComponent(d).fillRange = 0),
                      (this.cooling = 0),
                      U.cardsController.JudgeSelection(),
                      h('Canvas/UIInGame').getComponent(y).tryChangingIndex(-1),
                      h('Canvas/UIInGame/PlantFoodSlot').getComponent(P).plantFoodDec());
                  }),
                  (a.mouseDownOn = function () {
                    var o;
                    null == (o = this.coolShadow) || o.on(r.EventType.MOUSE_DOWN, this.clearCool, this);
                  }),
                  (a.mouseDownOff = function () {
                    var o;
                    null == (o = this.coolShadow) || o.off(r.EventType.MOUSE_DOWN, this.clearCool, this);
                  }),
                  (a.coolStart = function (o) {
                    if ((void 0 === o && (o = 1), D.noCDPlant)) o = 0;
                    else if (T.component.lastStandPrepareStarted) {
                      o = 0;
                      var t = this.card.getComponent(O);
                      (0 != t.thisPlant.SUNCOST && -1 == t.thisPlant.TYPE.indexOf('lastStandDisallowed')) || (o = 1);
                    }
                    (this.coolShadow.getComponent(d).fillRange = o),
                      (this.coolTotalTime = this.card.getComponent(O).thisPlant.COOLDOWN),
                      (this.cooling = o * this.coolTotalTime),
                      this.setUpperColor();
                  }),
                  (a.coolDown = function (o) {
                    T.gameStarted && this.cooling > 0 && (this.cooling -= o),
                      (this.cooling <= 0 || D.noCDPlant) &&
                        ((this.cooling = 0), this.setUpperColor(), U.cardsController.JudgeSelection()),
                      (this.coolShadow.getComponent(d).fillRange = this.cooling / this.coolTotalTime);
                  }),
                  (a.keyColor = function () {
                    return T.gameStarted || T.component.lastStandPrepareStarted
                      ? this.chosen
                        ? new C.Color(100, 255, 100, 255)
                        : this.cooling > 0
                        ? new C.Color(150, 150, 255, 255)
                        : this.affordable
                        ? new C.Color(245, 255, 0, 255)
                        : new C.Color(255, 100, 100, 255)
                      : new p(255, 255, 255, 0);
                  }),
                  (a.setUpperColor = function () {
                    this.plantReady && (this.plantReady.getComponent(u.ArmatureDisplay).color = this.showPlantColor());
                  }),
                  (a.showPlantColor = function () {
                    return (this.masked && !this.affordable) || (this.masked && this.cooling > 0)
                      ? new C.Color(155, 155, 155, 255)
                      : this.masked
                      ? new C.Color(255, 255, 255, 255)
                      : new C.Color(255, 255, 255, 0);
                  }),
                  (a.onLoad = function () {
                    (this.KeyTip = h('Canvas/UIInGameUpper/CardsUpper/Key' + this.node.name).getComponent(f)),
                      (this.CardUpper = h('Canvas/UIInGameUpper/CardsUpper/' + this.node.name));
                  }),
                  (a.setDetecter = function () {}),
                  (a.gameStart = function () {
                    this.coolShadow || this.coolShade(),
                      this.CardUpper.setWorldPosition(this.node.worldPosition),
                      this.CardUpper.setWorldScale(this.node.worldScale),
                      this.coolShadow && this.coolStart(this.card.getComponent(O).thisPlant.COOLDOWNFROM);
                  }),
                  (a.coolShade = function () {
                    (this.coolShadow = g(this.COOL)),
                      (this.card = U.cardsController.seedPackets[this.index]),
                      this.card.getChildByName('Dots').getChildByName('CooldownShade').addChild(this.coolShadow);
                  }),
                  (a.start = function () {}),
                  (a.update = function (o) {
                    (this.CardUpper.worldPosition = this.node.worldPosition), (this.CardUpper.worldScale = this.node.worldScale);
                  }),
                  (a.cardUpdate = function (o) {
                    this.card &&
                      (this.coolDown(o),
                      (this.card.getComponent(v).affordable = this.affordable),
                      (this.card.getComponent(v).cooling = this.cooling > 0 && !D.noCDPlant),
                      (this.card.getComponent(m).enabled = this.card.getComponent(v).selectable),
                      (this.KeyTip.color = this.keyColor()),
                      (this.KeyTip.node.scale = this.chosen ? new S(0.7, 0.7) : new S(0.5, 0.5)));
                  }),
                  t
                );
              })(w)).prototype,
              'Mouse',
              [I],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (N = t(k.prototype, 'COOL', [L], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (F = k))
          ) || F)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Character.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Lane.ts',
    './LnC.ts',
    './Square.ts',
    './shadeFloor.ts',
    './NodePools.ts',
    './FrontYard.ts',
  ],
  function (t) {
    var e, i, n, o, a, s, h, r, d, l, c, u, f, g, S, w, y, p, L, C, P, k;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor),
            (i = t.inheritsLoose),
            (n = t.initializerDefineProperty),
            (o = t.assertThisInitialized),
            (a = t.createClass);
        },
        function (t) {
          (s = t.cclegacy),
            (h = t._decorator),
            (r = t.CCFloat),
            (d = t.Size),
            (l = t.Node),
            (c = t.dragonBones),
            (u = t.Vec3),
            (f = t.Color),
            (g = t.tween),
            (S = t.Vec2),
            (w = t.Component);
        },
        function (t) {
          y = t.Lane;
        },
        function (t) {
          p = t.TileType;
        },
        function (t) {
          L = t.Square;
        },
        function (t) {
          C = t.shadeFloor;
        },
        function (t) {
          P = t.NodePools;
        },
        function (t) {
          k = t.FrontYard;
        },
      ],
      execute: function () {
        var b, _, m, I, v, x, H, Y, O, X, F, A, D;
        s._RF.push({}, 'fb6fe2CvXNDDoGQaFJYhZZy', 'Character', void 0);
        var z = h.ccclass,
          q = h.property,
          E = t('CharacterScale', 0.45);
        t(
          'CharacterType',
          (function (t) {
            return (
              (t[(t.zombie = 0)] = 'zombie'),
              (t[(t.plant = 1)] = 'plant'),
              (t[(t.droppings = 2)] = 'droppings'),
              (t[(t.projectle = 3)] = 'projectle'),
              (t[(t.default = 4)] = 'default'),
              t
            );
          })({})
        ),
          t(
            'Character',
            ((b = z('Character')),
            (_ = q(r)),
            (m = q({
              type: Boolean,
              visible: function () {
                return this.useShade;
              },
            })),
            (I = q(Boolean)),
            (v = q({
              type: d,
              visible: function () {
                return this.useShade;
              },
            })),
            (x = q({
              type: l,
              visible: function () {
                return this.useShade;
              },
            })),
            b(
              ((O = e(
                (Y = (function (t) {
                  function e() {
                    for (var e, i = arguments.length, a = new Array(i), s = 0; s < i; s++) a[s] = arguments[s];
                    return (
                      (e = t.call.apply(t, [this].concat(a)) || this),
                      n(e, 'originalScale', O, o(e)),
                      (e.disabled = !1),
                      (e.inLane = void 0),
                      (e.inLnC = void 0),
                      (e.db = null),
                      (e._worldPositionX = 0),
                      (e._worldPositionY = 0),
                      (e._height = 0),
                      (e._maxShowShadeHeight = 600),
                      (e.shadeHidden = !1),
                      (e.lIndex = -2),
                      (e.cIndex = -2),
                      (e.shadeCIndex = -2),
                      n(e, 'smartShadeHider', X, o(e)),
                      (e.shadeInLnC = void 0),
                      (e.lockLane = !1),
                      (e.fallingInSky = !1),
                      (e.flyingOnSky = !1),
                      n(e, 'useShade', F, o(e)),
                      n(e, 'originalShadeScale', A, o(e)),
                      n(e, 'shadeSocket', D, o(e)),
                      (e.shade = void 0),
                      (e.fadingAway = !1),
                      e
                    );
                  }
                  i(e, t);
                  var s = e.prototype;
                  return (
                    (s.onLoad = function () {
                      this.shadeSocket || (this.shadeSocket = this.node),
                        (this.db = this.getComponent(c.ArmatureDisplay)),
                        this.disabled || this.characterOnLoad();
                    }),
                    (s.characterOnLoad = function () {}),
                    (s.triggerGameLose = function () {}),
                    (s.onEnable = function () {
                      var t;
                      (this.shadeHidden = !1),
                        this.setLockLane(null),
                        null == (t = this.db) || null == (t = t.color) || t.set(255, 255, 255, 255),
                        (this.fadingAway = !1),
                        (this.node.worldScale = new u(E, E, E).multiplyScalar(this.originalScale)),
                        this.node.children.forEach(function (t) {
                          t.scale = new u(1, 1, 1);
                        }),
                        (this.fallingInSky = !1),
                        (this.flyingOnSky = !1),
                        (this.cIndex = -2),
                        (this.lIndex = -2),
                        this.disabled ||
                          (this.characterOnEnable(),
                          this.useShade && this.spawnShade(),
                          (this.inLane = L.getLane(-2).getComponent(y)),
                          (this.inLnC = L.getLnC(-2, -2))),
                        (this.height = 0);
                    }),
                    (s.onDisable = function () {
                      this.useShade && this.shade && (C.component.putShade(this.shade.node), (this.shade = null)),
                        this.disabled || this.characterOnDisable();
                    }),
                    (s.characterOnEnable = function () {}),
                    (s.characterOnDisable = function () {}),
                    (s.setInLnC = function (t) {
                      var e = this.inLnC;
                      (this.inLnC = t), (this.inLane = t.inLane), this.onLnCSet(e, t);
                    }),
                    (s.onLnCSet = function (t, e) {}),
                    (s.characterOnSquareChange = function (t, e) {}),
                    (s.onSquareChange = function (t, e) {
                      this.fallingInSky ||
                        ((this.inLnC = e),
                        (this.smartShadeHider && this.shadeSocket) || (this.shadeInLnC = e),
                        this.characterOnSquareChange(t, e));
                    }),
                    (s.characterOnLaneChange = function (t, e) {}),
                    (s.onLaneChange = function (t, e) {
                      this.fallingInSky || ((this.inLane = e), this.characterOnLaneChange(t, e));
                    }),
                    (s.judgeInLnC = function () {
                      var t = this.lIndex + 0,
                        e = this.cIndex + 0,
                        i = this.getLaneIndex(),
                        n = this.getColumnIndex();
                      this.smartShadeHider && this.shadeSocket && (this.shadeInLnC = L.getLnC(this.lIndex, this.shadeCIndex)),
                        this.lockLane || t == i || this.onLaneChange(L.getLane(t).getComponent(y), L.getLane(i).getComponent(y)),
                        (t == i && e == n) || this.onSquareChange(L.getLnC(t, e), L.getLnC(i, n));
                    }),
                    (s.getLaneIndex = function () {
                      for (var t = this.shadeWorldPosition.y, e = L.SquareDisH, i = L.lawnRec.prjY().x, n = -1, o = 0; o < 5; o++)
                        if (t >= i + o * e && t < i + (o + 1) * e) {
                          n = 4 - o;
                          break;
                        }
                      return t < i && (n = 5), (this.lIndex = n), n;
                    }),
                    (s.getColumnIndex = function () {
                      for (var t = this._worldPosition.x, e = L.SquareDisW, i = L.lawnRec.prjX().x, n = -1, o = 0; o < 9; o++)
                        if (t >= i + o * e && t < i + (o + 1) * e) {
                          n = o;
                          break;
                        }
                      if ((t >= i + 9 * e && (n = 9), (this.cIndex = n), this.smartShadeHider && this.shadeSocket)) {
                        for (var a = this.shadeSocket.worldPosition.x, s = -1, h = 0; h < 9; h++)
                          if (a >= i + h * e && a < i + (h + 1) * e) {
                            s = h;
                            break;
                          }
                        a >= i + 9 * e && (s = 9), (this.shadeCIndex = s);
                      }
                      return n;
                    }),
                    (s.setLockLane = function (t) {
                      t
                        ? ((this.inLane = t), this.onLaneChange(L.getLane(-2).getComponent(y), t), (this.lockLane = !0))
                        : (this.lockLane = !1);
                    }),
                    (s.spawnShade = function () {
                      var t = C.component;
                      if (null != t && t.isValid) {
                        var e = t.giveShade();
                        e.setWorldScale(this.originalShadeScale.width, this.originalShadeScale.height, 0),
                          (e.parent = t.node),
                          (this.shade = e.getComponent(c.ArmatureDisplay)),
                          (this.worldPosition = this._worldPosition),
                          (this.shade.color = new f(255, 255, 255, 0));
                      }
                    }),
                    (s.followShade = function (t) {
                      var e = t.getTileType();
                      if (
                        ((this.flyingOnSky = e == p.sky || e == p.sea),
                        (this.shade.node.worldPosition = new u(
                          this.shadeSocket ? this.shadeSocket.worldPosition.x : this._worldPosition.x,
                          this._worldPosition.y
                        )),
                        this.flyingOnSky || this.fallingInSky || this._height < -2 || this.shadeHidden
                          ? (this.shade.color = new f(0, 0, 0, 0))
                          : (this.shade.color = new f(255, 255, 255, this.db ? this.db.color.a : 255)),
                        this.useShade && this.shade)
                      ) {
                        var i = this._height;
                        this.shadeSocket && (i = this.shadeSocket.worldPosition.y - this._worldPosition.y),
                          this.shade.node.setScale(
                            this._maxShowShadeHeight > i
                              ? ((this.originalShadeScale.width * (this._maxShowShadeHeight - i)) / this._maxShowShadeHeight) *
                                  E *
                                  2
                              : 0,
                            this._maxShowShadeHeight > i
                              ? ((this.originalShadeScale.height * (this._maxShowShadeHeight - i)) / this._maxShowShadeHeight) *
                                  E *
                                  2
                              : 0
                          );
                      }
                    }),
                    (s.update = function (t) {
                      this.disabled ||
                        (this.judgeInLnC(),
                        this.useShade &&
                          this.shade &&
                          this.followShade(this.smartShadeHider && this.shadeSocket ? this.shadeInLnC : this.inLnC),
                        this.characterUpdate(t));
                    }),
                    (s.lateUpdate = function (t) {
                      this.characterLateUpdate(t);
                    }),
                    (s.characterUpdate = function (t) {}),
                    (s.characterLateUpdate = function (t) {}),
                    (s.fadeAway = function () {
                      var t = this;
                      this.fadingAway ||
                        this.fallingInSky ||
                        ((this.fadingAway = !0),
                        g(this.db ? this.db.color : new f())
                          .to(0.5, { a: 0 })
                          .call(function () {
                            t.onFadeEnd();
                          })
                          .start());
                    }),
                    (s.shrinkAway = function () {
                      var t = this;
                      this.fadingAway ||
                        this.fallingInSky ||
                        ((this.fadingAway = !0),
                        g(this.node)
                          .to(0.5, { worldScale: new u(0.01, 0.01, 0.01) }, { easing: 'quadIn' })
                          .call(function () {
                            t.onFadeEnd();
                          })
                          .start());
                    }),
                    (s.onFadeEnd = function () {
                      P.destroyPooly(this.node);
                    }),
                    (s.fallInSky = function (t) {
                      var e = this;
                      if ((void 0 === t && (t = !0), !this.fallingInSky && !this.fadingAway)) {
                        (this.fallingInSky = !0), (this.height = 0);
                        var i = this.node.scale.clone();
                        if (k.currentLawn.node.getChildByName('Lower')) {
                          var n = k.currentLawn.node.getChildByName('Lower');
                          n.setWorldScale(1, 1, 1), this.node.setParent(n, !0);
                        }
                        var o = this.node.worldPosition,
                          a = 1 + Math.random(),
                          s = Math.random(),
                          h = this;
                        t &&
                          g(h.node)
                            .by(a, { angle: 180 * (2 - 4 * s) }, { easing: 'cubicIn' })
                            .start(),
                          g(h.node)
                            .to(a, { scale: new u(0.01, 0.01, 1) })
                            .start(),
                          g(h)
                            .to(a, { worldPositionX: o.x - (40 + 10 * s), worldPositionY: o.y + (5 * s - 20) })
                            .call(function () {
                              e.node.active &&
                                ((e.node.scale = i),
                                (e.node.angle = 0),
                                (e.node.worldPosition = new u(1e3, -1e3, 0)),
                                P.destroyPooly(e.node),
                                e.onSkyFallEnd());
                            })
                            .start();
                      }
                    }),
                    (s.onSkyFallEnd = function () {
                      P.destroyPooly(this.node);
                    }),
                    a(e, [
                      {
                        key: 'worldPositionX',
                        get: function () {
                          return this._worldPositionX;
                        },
                        set: function (t) {
                          (this._worldPositionX = t),
                            (this.node.worldPosition = new u(t, this._worldPositionY + this._height, 10));
                        },
                      },
                      {
                        key: 'worldPositionY',
                        get: function () {
                          return this._worldPositionY;
                        },
                        set: function (t) {
                          (this._worldPositionY = t),
                            (this.node.worldPosition = new u(this._worldPositionX, t + this._height, 10));
                        },
                      },
                      {
                        key: '_worldPosition',
                        get: function () {
                          return new S(this._worldPositionX, this._worldPositionY);
                        },
                      },
                      {
                        key: 'worldPosition',
                        get: function () {
                          return new S(this._worldPositionX, this._worldPositionY);
                        },
                        set: function (t) {
                          (this.worldPositionX = t.x), (this.worldPositionY = t.y);
                        },
                      },
                      {
                        key: 'shadeWorldPosition',
                        get: function () {
                          return new S(this._worldPositionX, this._worldPositionY);
                        },
                      },
                      {
                        key: 'realWorldPosition',
                        get: function () {
                          return new S(this._worldPositionX, this._worldPositionY + this._height);
                        },
                      },
                      {
                        key: 'height',
                        get: function () {
                          return this._height;
                        },
                        set: function (t) {
                          (this._height = t),
                            (this.node.worldPosition = new u(this._worldPositionX, this._worldPositionY + t, 10));
                        },
                      },
                    ]),
                    e
                  );
                })(w)).prototype,
                'originalScale',
                [_],
                {
                  configurable: !0,
                  enumerable: !0,
                  writable: !0,
                  initializer: function () {
                    return 1;
                  },
                }
              )),
              (X = e(Y.prototype, 'smartShadeHider', [m], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return !1;
                },
              })),
              (F = e(Y.prototype, 'useShade', [I], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return !0;
                },
              })),
              (A = e(Y.prototype, 'originalShadeScale', [v], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new d(0.25, 0.25);
                },
              })),
              (D = e(Y.prototype, 'shadeSocket', [x], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (H = Y))
            ) || H)
          );
        s._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/CharacterManager.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './NodePools.ts',
    './Zombies.ts',
    './Cards.ts',
    './SoundRescourses.ts',
    './levelController.ts',
  ],
  function (t) {
    var n, o, i, e, s, r, h, a, c, u, p, l, d, y, x, P, f, w, m;
    return {
      setters: [
        function (t) {
          (n = t.createClass),
            (o = t.applyDecoratedDescriptor),
            (i = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (s = t.assertThisInitialized);
        },
        function (t) {
          (r = t.cclegacy),
            (h = t._decorator),
            (a = t.Vec2),
            (c = t.find),
            (u = t.Prefab),
            (p = t.math),
            (l = t.HALF_PI),
            (d = t.Component);
        },
        function (t) {
          (y = t.NodePools), (x = t.ArrayGet);
        },
        function (t) {
          P = t.zombies;
        },
        function (t) {
          f = t.Cards;
        },
        function (t) {
          w = t.sounds;
        },
        function (t) {
          m = t.LevelPlay;
        },
      ],
      execute: function () {
        var g, M, I, v, L;
        r._RF.push({}, '99347P29tZA8pn9lmrrqr47', 'CharacterManager', void 0);
        var b = h.ccclass,
          C = h.property,
          R =
            (t(
              'Rectangle',
              (function () {
                var t = n.prototype;
                function n(t, n, o, i) {
                  void 0 === t && (t = new a()),
                    void 0 === n && (n = new a()),
                    void 0 === o && (o = new a()),
                    void 0 === i && (i = new a()),
                    (this.point1 = new a(0, 0)),
                    (this.point2 = new a(0, 0)),
                    (this.point3 = new a(0, 0)),
                    (this.point4 = new a(0, 0)),
                    (this.dot1 = null),
                    (this.dot2 = null),
                    (this.dot3 = null),
                    (this.dot4 = null),
                    (this.shown = !1),
                    (this.point1 = t),
                    (this.point2 = n),
                    (this.point3 = o),
                    (this.point4 = i);
                }
                return (
                  (t.prjX = function () {
                    return Math.abs(this.point1.x - this.point3.x) < Math.abs(this.point2.x - this.point4.x)
                      ? new a(Math.min(this.point2.x, this.point4.x), Math.max(this.point2.x, this.point4.x))
                      : new a(Math.min(this.point1.x, this.point3.x), Math.max(this.point1.x, this.point3.x));
                  }),
                  (t.prjY = function () {
                    return Math.abs(this.point1.y - this.point3.y) < Math.abs(this.point2.y - this.point4.y)
                      ? new a(Math.min(this.point2.y, this.point4.y), Math.max(this.point2.y, this.point4.y))
                      : new a(Math.min(this.point1.y, this.point3.y), Math.max(this.point1.y, this.point3.y));
                  }),
                  (t.hidePoints = function () {
                    this.shown && ((this.shown = !1), y.destroyNodeArrayPooly([this.dot1, this.dot2, this.dot3, this.dot4]));
                  }),
                  (t.showPoints = function () {
                    if (!this.shown) {
                      this.shown = !0;
                      var t = c('CharacterManager').getComponent(H).debugDot,
                        n = c('Canvas/UIInGameUpper/Debug');
                      (this.dot1 = y.instantiatePooly(t)),
                        (this.dot1.parent = n),
                        this.dot1.setWorldPosition(this.point1.x, this.point1.y, 0),
                        (this.dot2 = y.instantiatePooly(t)),
                        (this.dot2.parent = n),
                        this.dot2.setWorldPosition(this.point2.x, this.point2.y, 0),
                        (this.dot3 = y.instantiatePooly(t)),
                        (this.dot3.parent = n),
                        this.dot3.setWorldPosition(this.point3.x, this.point3.y, 0),
                        (this.dot4 = y.instantiatePooly(t)),
                        (this.dot4.parent = n),
                        this.dot4.setWorldPosition(this.point4.x, this.point4.y, 0);
                    }
                  }),
                  (n.createRectangleNodeSide = function (t, n, o, i) {
                    void 0 === i && (i = 0);
                    var e = t.worldPosition.clone();
                    return this.createRectangleSide(new a(e.x, e.y), n, o, i);
                  }),
                  (n.createRectangleNodeCenter = function (t, n, o, i) {
                    void 0 === i && (i = 0);
                    var e = t.worldPosition.clone();
                    return this.createRectangleCenter(new a(e.x, e.y), n, o, i);
                  }),
                  (n.createRectangleNodeCorner = function (t, n, o, i) {
                    void 0 === i && (i = 0);
                    var e = t.worldPosition.clone();
                    return this.createRectangleCorner(new a(e.x, e.y), n, o, i);
                  }),
                  (n.createRectangleSide = function (t, o, i, e) {
                    void 0 === e && (e = 0);
                    var s = new a(t.x, t.y - i / 2),
                      r = new a(s.x + o, s.y),
                      h = new a(s.x, s.y + i),
                      c = new a(h.x + o, h.y);
                    return (
                      e &&
                        ((s = new a(
                          t.x + (i / 2) * Math.sin((e * p.HALF_PI) / 90),
                          t.y - (i / 2) * Math.cos((e * p.HALF_PI) / 90)
                        )),
                        (r = new a(s.x + o * Math.cos((e * p.HALF_PI) / 90), s.y + o * Math.sin((e * p.HALF_PI) / 90))),
                        (h = new a(
                          s.x + i * Math.cos(((e + 90) * p.HALF_PI) / 90),
                          s.y + i * Math.sin(((e + 90) * p.HALF_PI) / 90)
                        )),
                        (c = new a(h.x + o * Math.cos((e * p.HALF_PI) / 90), h.y + o * Math.sin((e * p.HALF_PI) / 90)))),
                      new n(s, r, c, h)
                    );
                  }),
                  (n.createRectangleCorner = function (t, o, i, e) {
                    void 0 === e && (e = 0);
                    var s = t,
                      r = new a(s.x + o, s.y),
                      h = new a(s.x, s.y + i),
                      c = new a(h.x + o, h.y);
                    return (
                      e &&
                        ((r = new a(s.x + o * Math.cos((e * p.HALF_PI) / 90), s.y + o * Math.sin((e * p.HALF_PI) / 90))),
                        (h = new a(
                          s.x + i * Math.cos(((e + 90) * p.HALF_PI) / 90),
                          s.y + i * Math.sin(((e + 90) * p.HALF_PI) / 90)
                        )),
                        (c = new a(h.x + o * Math.cos((e * p.HALF_PI) / 90), h.y + o * Math.sin((e * p.HALF_PI) / 90)))),
                      new n(s, r, c, h)
                    );
                  }),
                  (n.createRectangleCenter = function (t, o, i, e) {
                    void 0 === e && (e = 0);
                    var s = new a(t.x - o / 2, t.y - i / 2),
                      r = new a(s.x + o, s.y),
                      h = new a(s.x, s.y + i),
                      c = new a(h.x + o, h.y);
                    return (
                      e &&
                        ((s = new a(
                          t.x + (i / 2) * Math.sin((e * p.HALF_PI) / 90) - (o / 2) * Math.cos((e * p.HALF_PI) / 90),
                          t.y - (i / 2) * Math.cos((e * p.HALF_PI) / 90) - (o / 2) * Math.sin((e * p.HALF_PI) / 90)
                        )),
                        (r = new a(s.x + o * Math.cos((e * p.HALF_PI) / 90), s.y + o * Math.sin((e * p.HALF_PI) / 90))),
                        (h = new a(
                          s.x + i * Math.cos(((e + 90) * p.HALF_PI) / 90),
                          s.y + i * Math.sin(((e + 90) * p.HALF_PI) / 90)
                        )),
                        (c = new a(h.x + o * Math.cos((e * p.HALF_PI) / 90), h.y + o * Math.sin((e * p.HALF_PI) / 90)))),
                      new n(s, r, c, h)
                    );
                  }),
                  (t.judgeInRec = function (t, n, o) {
                    void 0 === o && (o = !1);
                    var i =
                        (t - this.point1.x) * (this.point4.x - this.point1.x) +
                        (n - this.point1.y) * (this.point4.y - this.point1.y),
                      e =
                        (t - this.point2.x) * (this.point1.x - this.point2.x) +
                        (n - this.point2.y) * (this.point1.y - this.point2.y),
                      s =
                        (t - this.point3.x) * (this.point2.x - this.point3.x) +
                        (n - this.point3.y) * (this.point2.y - this.point3.y),
                      r =
                        (t - this.point4.x) * (this.point3.x - this.point4.x) +
                        (n - this.point4.y) * (this.point3.y - this.point4.y);
                    return o ? i >= 0 && e >= 0 && s >= 0 && r >= 0 : i > 0 && e > 0 && s > 0 && r > 0;
                  }),
                  (t.judgeInRecP = function (t, n) {
                    return void 0 === n && (n = !1), !!t && this.judgeInRec(t.x, t.y, n);
                  }),
                  (t.judgeInRecNode = function (t) {
                    return !!t && this.judgeInRec(t.worldPosition.x, t.worldPosition.y);
                  }),
                  (t.judgeCrossLine = function (t) {
                    if (!t) return !1;
                    var n = t.getP1(),
                      o = t.getP2();
                    return (
                      !(!this.judgeInRec(n.x, n.y) && !this.judgeInRec(o.x, o.y)) ||
                      !(!t.judgeCrossLine(new R(this.point1, this.point3)) && !t.judgeCrossLine(new R(this.point2, this.point4)))
                    );
                  }),
                  (t.judgeCrossRec = function (t) {
                    return (
                      !!t &&
                      (!!(
                        this.judgeInRecP(t.point1) ||
                        this.judgeInRecP(t.point2) ||
                        this.judgeInRecP(t.point3) ||
                        this.judgeInRecP(t.point4) ||
                        t.judgeInRecP(this.point1) ||
                        t.judgeInRecP(this.point2) ||
                        t.judgeInRecP(this.point3) ||
                        t.judgeInRecP(this.point4)
                      ) ||
                        !(!new R(this.point1, this.point3).judgeCrossRec(t) && !new R(t.point1, t.point3).judgeCrossRec(this)))
                    );
                  }),
                  n
                );
              })()
            ),
            t(
              'LineSegment',
              (function () {
                var t = n.prototype;
                function n(t, n) {
                  (this.point1 = void 0), (this.point2 = void 0), (this.point1 = t), (this.point2 = n);
                }
                return (
                  (t.getP1 = function () {
                    return this.point1;
                  }),
                  (t.getP2 = function () {
                    return this.point2;
                  }),
                  (t.judgeCrossLine = function (t) {
                    var n = this.point1,
                      o = this.point2,
                      i = t.point1,
                      e = t.point2;
                    return (
                      !(
                        Math.max(i.x, e.x) < Math.min(n.x, o.x) ||
                        Math.max(n.x, o.x) < Math.min(i.x, e.x) ||
                        Math.max(i.y, e.y) < Math.min(n.y, o.y) ||
                        Math.max(n.y, o.y) < Math.min(i.y, e.y)
                      ) &&
                      !(
                        a.cross(new a(n.x - e.x, n.y - e.y), new a(i.x - e.x, i.y - e.y)) *
                          a.cross(new a(o.x - e.x, o.y - e.y), new a(i.x - e.x, i.y - e.y)) >=
                        0
                      ) &&
                      !(
                        a.cross(new a(i.x - o.x, i.y - o.y), new a(n.x - o.x, n.y - o.y)) *
                          a.cross(new a(e.x - o.x, e.y - o.y), new a(n.x - o.x, n.y - o.y)) >=
                        0
                      )
                    );
                  }),
                  (t.judgeCrossRec = function (t) {
                    return t.judgeCrossLine(this);
                  }),
                  (n.createLineLenRo = function (t, n, o) {
                    return (
                      void 0 === o && (o = 0), this.createLineLenDir(t, n, new a(Math.cos((o / 90) * l), Math.sin((o / 90) * l)))
                    );
                  }),
                  (n.createLineLenDir = function (t, n, o) {
                    void 0 === o && (o = new a(1, 0));
                    var i = (n * o.x) / o.length(),
                      e = (n * o.y) / o.length();
                    return this.createLineVec(t, new a(i, e));
                  }),
                  (n.createLineVec = function (t, o) {
                    return new n(t, new a(t.x + o.x, t.y + o.y));
                  }),
                  n
                );
              })()
            )),
          A = t(
            'PlantPool',
            (function () {
              function t() {}
              return (
                (t.pool = function () {
                  return this.cm.plantPool;
                }),
                (t.registerPlant = function (t) {
                  -1 == this.cm.plantPool.indexOf(t) && this.cm.plantPool.push(t);
                }),
                (t.deletePlant = function (t) {
                  var n = this.pool().indexOf(t);
                  -1 != n && this.pool().splice(n, 1);
                }),
                t
              );
            })()
          );
        A.cm = null;
        var _ = t(
          'ZombiePool',
          (function () {
            function t() {}
            return (
              (t.pool = function () {
                return this.cm.zombiePool;
              }),
              (t.inLawnPool = function () {
                return this.cm.zombieInLawnPool;
              }),
              (t.registerZombie = function (t) {
                -1 == this.cm.zombiePool.indexOf(t) && this.pool().push(t);
              }),
              (t.deleteZombie = function (t) {
                var n = this.pool().indexOf(t);
                -1 != n && this.pool().splice(n, 1);
              }),
              t
            );
          })()
        );
        _.cm = null;
        var j = t(
          'TombPool',
          (function () {
            function t() {}
            return (
              (t.pool = function () {
                return this.cm.tombPool;
              }),
              (t.registerTomb = function (t) {
                -1 == this.cm.tombPool.indexOf(t) && this.pool().push(t);
              }),
              (t.deleteTomb = function (t) {
                var n = this.pool().indexOf(t);
                -1 != n && this.pool().splice(n, 1);
              }),
              t
            );
          })()
        );
        j.cm = null;
        t(
          'Icetiles',
          (function () {
            function t() {}
            return (
              (t.pool = function () {
                return c('CharacterManager').getComponent(H).Icepool;
              }),
              (t.registerIce = function (t) {
                this.pool().push(t);
              }),
              (t.deleteIce = function (t) {
                var n = this.pool().indexOf(t);
                -1 != n && this.pool().splice(n, 1);
              }),
              t
            );
          })()
        );
        var F = t(
          'Umbrellas',
          (function () {
            function t() {}
            return (
              n(t, null, [
                {
                  key: 'umbrellas',
                  get: function () {
                    return this.cm.umbrellas;
                  },
                  set: function (t) {
                    this.cm.umbrellas = t;
                  },
                },
              ]),
              t
            );
          })()
        );
        F.cm = void 0;
        var H = t(
          'CharacterManager',
          ((g = b('CharacterManager')),
          (M = C(u)),
          g(
            ((L = o(
              (v = (function (t) {
                function n() {
                  for (var n, o = arguments.length, i = new Array(o), r = 0; r < o; r++) i[r] = arguments[r];
                  return (
                    (n = t.call.apply(t, [this].concat(i)) || this),
                    e(n, 'debugDot', L, s(n)),
                    (n.umbrellas = []),
                    (n.zombiePool = []),
                    (n.zombieInLawnPool = []),
                    (n.tombPool = []),
                    (n.plantPool = []),
                    (n.Icepool = []),
                    (n.groanCoolDown = 0),
                    n
                  );
                }
                i(n, t);
                var o = n.prototype;
                return (
                  (o.playZombieGroan = function (t) {
                    if (this.zombiePool.length > 0 && this.groanCoolDown <= 0) {
                      var n = x.getRandom(this.zombiePool);
                      n.groanSound.length > 0 ? w.play(x.getRandom(n.groanSound)) : P.playGroan(n.zombieGroanSoundGroup),
                        (this.groanCoolDown = 2.5 + 5 / this.zombiePool.length + 3 * Math.random());
                    }
                    this.groanCoolDown > 0 && (this.groanCoolDown -= t);
                  }),
                  (o.update = function (t) {
                    this.characterManagerUpdate(t);
                  }),
                  (o.characterManagerUpdate = function (t) {
                    var n = [];
                    this.zombiePool.forEach(function (t) {
                      t.isInLawn() && n.push(t);
                    }),
                      (this.zombieInLawnPool = n),
                      m.gameStarted && this.playZombieGroan(t),
                      f.cardsController.cardsUpdate(t);
                  }),
                  (o.onLoad = function () {
                    (_.cm = this),
                      (A.cm = this),
                      (j.cm = this),
                      (F.cm = this),
                      (this.umbrellas = []),
                      (this.zombiePool = []),
                      (this.zombieInLawnPool = []),
                      (this.tombPool = []),
                      (this.plantPool = []),
                      (this.Icepool = []);
                  }),
                  n
                );
              })(d)).prototype,
              'debugDot',
              [M],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (I = v))
          ) || I)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/CherryBomb.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Plant.ts', './SoundsController.ts'],
  function (e) {
    var t, n, r, i, o, a, l, c, s;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (n = e.inheritsLoose),
            (r = e.initializerDefineProperty),
            (i = e.assertThisInitialized);
        },
        function (e) {
          (o = e.cclegacy), (a = e._decorator), (l = e.AudioClip);
        },
        function (e) {
          c = e.Plant;
        },
        function (e) {
          s = e.SoundFXController;
        },
      ],
      execute: function () {
        var u, h, p, d, y;
        o._RF.push({}, '28eeb/RjZNKZ4IdgQM7o1OF', 'CherryBomb', void 0);
        var f = a.ccclass,
          b = a.property;
        e(
          'CherryBombPlant',
          ((u = f('CherryBombPlant')),
          (h = b(l)),
          u(
            ((y = t(
              (d = (function (e) {
                function t() {
                  for (var t, n = arguments.length, o = new Array(n), a = 0; a < n; a++) o[a] = arguments[a];
                  return (t = e.call.apply(e, [this].concat(o)) || this), r(t, 'chargeSound', y, i(t)), t;
                }
                n(t, e);
                var o = t.prototype;
                return (
                  (o.specialPlantOnEnable = function () {
                    this.anmControl.playAnimation('Attack', 1),
                      (this.deathAnm = ''),
                      (this.invincible = !0),
                      (this.foodable = !1),
                      (this.eaterDetectable = !1),
                      (this.smasherDetectable = !1),
                      this.chargeSound && this.audioSource.playOneShot(this.chargeSound, s.SoundFXVolume);
                  }),
                  (o.animationListener = function (e) {
                    'explode' == e.name && (this.inLnC.explodeCherry3x3(1800, !0), this.die());
                  }),
                  t
                );
              })(c)).prototype,
              'chargeSound',
              [h],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (p = d))
          ) || p)
        );
        o._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/ChiliBean.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Plant.ts', './LnC.ts', './Square.ts', './chilibeanSound.ts'],
  function (n) {
    var t, o, a, i, e, r, l, u, s, c, p, h;
    return {
      setters: [
        function (n) {
          (t = n.applyDecoratedDescriptor),
            (o = n.inheritsLoose),
            (a = n.initializerDefineProperty),
            (i = n.assertThisInitialized);
        },
        function (n) {
          (e = n.cclegacy), (r = n._decorator), (l = n.CCInteger);
        },
        function (n) {
          (u = n.PlantType), (s = n.Plant);
        },
        function (n) {
          c = n.LnC;
        },
        function (n) {
          p = n.Square;
        },
        function (n) {
          h = n.chilibeanSound;
        },
      ],
      execute: function () {
        var d, f, m, y, C;
        e._RF.push({}, 'cf014IsRB1JJbt2+1GrtaDK', 'ChiliBean', void 0);
        var g = r.ccclass,
          b = r.property;
        n(
          'ChiliBean',
          ((d = g('ChiliBean')),
          (f = b(l)),
          d(
            ((C = t(
              (y = (function (n) {
                function t() {
                  for (var t, o = arguments.length, e = new Array(o), r = 0; r < o; r++) e[r] = arguments[r];
                  return (t = n.call.apply(n, [this].concat(e)) || this), a(t, 'maxFoodThrowAmount', C, i(t)), t;
                }
                o(t, n);
                var e = t.prototype;
                return (
                  (e.specialPlantOnEaten = function (n, t, o, a) {
                    a <= 0 && t && t.chilibeanFart();
                  }),
                  (e.onLeapEnd = function () {
                    this.anmControl.playAnimation('FlyEnd', 1), (this.damagable = !0), this.getComponent(h).playLandSound();
                  }),
                  (e.onLeapStart = function () {
                    this.anmControl.playAnimation('Flying', 1 / 0);
                  }),
                  (e.specialPlantFood = function (n) {
                    this.anmControl.playAnimation('Food', 1), this.getComponent(h).playFoodSound();
                  }),
                  (e.animationListener = function (n) {
                    'foodEnd' == n.name ? this.foodEnd() : 'foodSpawn' == n.name && this.throwChildren();
                  }),
                  (e.throwChildren = function () {
                    for (
                      var n = this, t = [], o = [], a = 0;
                      a < 45 && t.length < this.maxFoodThrowAmount && t.length + o.length < 45;

                    ) {
                      var i = p.getRandomSquare().getComponent(c);
                      -1 == t.indexOf(i) && -1 == o.indexOf(i) && (i.plantable() ? t.push(i) : o.push(i), a++);
                    }
                    t.forEach(function (t) {
                      var o = n.inLnC.spawnPlantByPlantEnum(n.ID);
                      o.judgeInLnC(),
                        o.node.setPosition(0, 0, 0),
                        o && (n.inLnC.pushPlant(o), (o.plantType = u.plant), (o.damagable = !1), o.leapTo(t, 0.8, 200));
                    });
                  }),
                  t
                );
              })(s)).prototype,
              'maxFoodThrowAmount',
              [f],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 3;
                },
              }
            )),
            (m = y))
          ) || m)
        );
        e._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/chilibeanSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './plantSound.ts'],
  function (n) {
    var o, i, e, t, r, a, l, u;
    return {
      setters: [
        function (n) {
          (o = n.applyDecoratedDescriptor),
            (i = n.inheritsLoose),
            (e = n.initializerDefineProperty),
            (t = n.assertThisInitialized);
        },
        function (n) {
          (r = n.cclegacy), (a = n._decorator), (l = n.AudioClip);
        },
        function (n) {
          u = n.plantSound;
        },
      ],
      execute: function () {
        var c, d, p, s, f, h, S;
        r._RF.push({}, 'b1f9fG6H4BKBYSDaJ+AhW5o', 'chilibeanSound', void 0);
        var y = a.ccclass,
          b = a.property;
        n(
          'chilibeanSound',
          ((c = y('chilibeanSound')),
          (d = b(l)),
          (p = b(l)),
          c(
            ((h = o(
              (f = (function (n) {
                function o() {
                  for (var o, i = arguments.length, r = new Array(i), a = 0; a < i; a++) r[a] = arguments[a];
                  return (
                    (o = n.call.apply(n, [this].concat(r)) || this), e(o, 'landSound', h, t(o)), e(o, 'foodSound', S, t(o)), o
                  );
                }
                i(o, n);
                var r = o.prototype;
                return (
                  (r.playLandSound = function () {
                    this.playOneShot(this.landSound);
                  }),
                  (r.playFoodSound = function () {
                    this.playOneShot(this.foodSound);
                  }),
                  o
                );
              })(u)).prototype,
              'landSound',
              [d],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (S = o(f.prototype, 'foodSound', [p], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (s = f))
          ) || s)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Chomper.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './CharacterManager.ts',
    './Square.ts',
    './Zombie.ts',
    './NodePools.ts',
    './chomperSound.ts',
  ],
  function (t) {
    var o, n, i, a, e, s, l, h, r, u, c, m, d, p, w, f;
    return {
      setters: [
        function (t) {
          (o = t.applyDecoratedDescriptor),
            (n = t.inheritsLoose),
            (i = t.initializerDefineProperty),
            (a = t.assertThisInitialized);
        },
        function (t) {
          (e = t.cclegacy), (s = t._decorator), (l = t.CCFloat), (h = t.CCInteger), (r = t.dragonBones), (u = t.Vec2);
        },
        function (t) {
          c = t.Plant;
        },
        function (t) {
          m = t.Rectangle;
        },
        function (t) {
          d = t.Square;
        },
        function (t) {
          p = t.zombieDamageType;
        },
        function (t) {
          w = t.NodePools;
        },
        function (t) {
          f = t.chomperSound;
        },
      ],
      execute: function () {
        var g, y, C, A, S, b, D, P, E, R, k, x, M;
        e._RF.push({}, '29a38fz79JLQoGFQUXPFiV2', 'Chomper', void 0);
        var v = s.ccclass,
          T = s.property;
        t(
          'ChomperPlant',
          ((g = v('ChomperPlant')),
          (y = T(l)),
          (C = T(l)),
          (A = T(l)),
          (S = T(l)),
          (b = T(h)),
          g(
            ((E = o(
              (P = (function (t) {
                function o() {
                  for (var o, n = arguments.length, e = new Array(n), s = 0; s < n; s++) e[s] = arguments[s];
                  return (
                    ((o = t.call.apply(t, [this].concat(e)) || this).detector = null),
                    i(o, 'attackDamage', E, a(o)),
                    (o.inMouthAmount = 0),
                    (o.countDownBase = 0),
                    (o.countDownExtra = 0),
                    i(o, 'chewDuration', R, a(o)),
                    i(o, 'foodPullDuration', k, a(o)),
                    (o.pulling = 0),
                    i(o, 'foodPushDuration', x, a(o)),
                    (o.pushing = 0),
                    i(o, 'foodSwallowAmount', M, a(o)),
                    (o.foodSwallowTargets = []),
                    (o.foodSwallowedTargets = []),
                    (o.switching = !1),
                    o
                  );
                }
                n(o, t);
                var e = o.prototype;
                return (
                  (e.setDetector = function (t) {
                    this.detector = m.createRectangleNodeSide(t.node, 2 * d.SquareDisW, d.SquareDisH);
                  }),
                  (e.chompZombie = function (t) {
                    t.chompable_
                      ? (this.fooding ||
                          (t.easyToChomp_
                            ? this.anmControl.playAnimation('AttackEmpty', 1)
                            : ((this.anmControl.IdleAnim = 'Chewing'),
                              (this.anmControl.RandomAnim = []),
                              this.anmControl.playAnimation('AttackChewStart', 1),
                              this.inMouthAmount++,
                              1 == this.inMouthAmount
                                ? ((this.countDownExtra = 0), (this.countDownBase = this.chewDuration))
                                : 2 == this.inMouthAmount &&
                                  ((this.countDownExtra = this.countDownBase), (this.countDownBase = this.chewDuration)))),
                        t.playDie(!0),
                        w.destroyPooly(t.node))
                      : (t.dealDamage(this.attackDamage, !1, !1, !1, null, p.physicle),
                        this.fooding || this.anmControl.playAnimation('AttackEmpty', 1));
                  }),
                  (e.specialPlantOnSquareChange = function (t, o) {
                    this.setDetector(o);
                  }),
                  (e.detectEnemy = function () {
                    var t,
                      o,
                      n = this,
                      i = !1;
                    return (
                      this.inLane.zombiePool().forEach(function (t) {
                        var o;
                        i || (null != (o = n.detector) && o.judgeCrossRec(t.bodyRec) && (i = !0));
                      }),
                      ((null != (t = this.inLnC) && t.tombStone) || (null != (o = this.inLnC.righter) && o.tombStone)) &&
                        (i = !0),
                      i
                    );
                  }),
                  (e.chompEnemy = function () {
                    var t = this,
                      o = null;
                    this.inLane.zombiePool().forEach(function (n) {
                      var i;
                      null != (i = t.detector) &&
                        i.judgeCrossRec(n.bodyRec) &&
                        (!o || n.bodyRec.prjX().x < o.bodyRec.prjX().x) &&
                        (o = n);
                    }),
                      o
                        ? this.chompZombie(o)
                        : (this.inLnC.tombStone && !this.inLnC.tombStone.hidden
                            ? this.inLnC.tombStone.dealDamage(this.attackDamage)
                            : this.inLnC.righter.tombStone &&
                              !this.inLnC.righter.tombStone.hidden &&
                              this.inLnC.righter.tombStone.dealDamage(this.attackDamage),
                          this.anmControl.playAnimation('AttackEmpty', 1));
                  }),
                  (e.specialPlantFood = function (t) {
                    this.anmControl.playAnimation('FoodPullStart', 2),
                      this.getComponent(f).foodPullBegin(),
                      (this.inMouthAmount = 0),
                      (this.anmControl.IdleAnim = 'Idle'),
                      (this.anmControl.RandomAnim = ['Rand1', 'Rand2', 'Rand3']),
                      (this.pulling = 0),
                      (this.pushing = 0),
                      (this.foodSwallowTargets = []),
                      (this.foodSwallowedTargets = []);
                  }),
                  (e.specialPlantOnEnable = function () {
                    var t = this;
                    (this.inMouthAmount = 0),
                      (this.switching = !1),
                      (this.countDownBase = 0),
                      (this.countDownExtra = 0),
                      (this.pushing = 0),
                      (this.pulling = 0),
                      (this.anmControl.IdleAnim = 'Idle'),
                      (this.anmControl.RandomAnim = ['Rand1', 'Rand2', 'Rand3']),
                      this.anmControl.body.on(
                        r.EventObject.COMPLETE,
                        function () {
                          t.switching = !1;
                        },
                        this
                      );
                  }),
                  (e.animationListener = function (t) {
                    if ('chomp' == t.name) this.chompEnemy(), this.getComponent(f).playChompSound();
                    else if ('judgeChew' == t.name) {
                      var o = 2;
                      this.countDownExtra <= 0 && o--,
                        this.countDownBase <= 0 && o--,
                        (this.inMouthAmount = o),
                        0 == this.inMouthAmount &&
                          ((this.anmControl.IdleAnim = 'Idle'), (this.anmControl.RandomAnim = ['Rand1', 'Rand2', 'Rand3']));
                    } else
                      'pullBegin' == t.name
                        ? ((this.pulling = this.foodPullDuration), this.anmControl.playAnimation('FoodPulling', 1 / 0))
                        : 'pushStart' == t.name
                        ? ((this.foodSwallowedTargets = []),
                          (this.pushing = this.foodPushDuration),
                          this.anmControl.playAnimation('FoodPushing', 1 / 0),
                          this.getComponent(f).playFoodPushSound())
                        : 'foodEnd' == t.name
                        ? this.foodEnd()
                        : 'switchEnd' == t.name
                        ? (this.switching = !1)
                        : 'chew' == t.name
                        ? this.getComponent(f).playChewSound()
                        : 'scratch' == t.name
                        ? this.getComponent(f).playScratchSound()
                        : 'chewStart' == t.name
                        ? this.getComponent(f).playChewStartSound()
                        : 'swallow' == t.name
                        ? this.getComponent(f).playSwallowSound()
                        : 'lick' == t.name
                        ? this.getComponent(f).playLickSound()
                        : 'hiccup' == t.name && this.getComponent(f).playHiccupSound();
                  }),
                  (e.waterable = function () {
                    return !this.switching && this.inMouthAmount <= 0;
                  }),
                  (e.attackAnimation = function () {
                    (this.switching = !0), this.anmControl.playAnimation('Attack', 2, 0.1);
                  }),
                  (e.setSlots = function () {
                    var t = this;
                    ['ARM1', 'ARM1_', 'HAND1', 'HAND1_'].forEach(function (o) {
                      t.anmControl.body
                        .armature()
                        .getSlot(o)
                        ._setDisplayIndex(t.inMouthAmount >= 1 ? 0 : -1);
                    }),
                      ['ARM2', 'ARM2_', 'HAND2', 'HAND2_'].forEach(function (o) {
                        t.anmControl.body
                          .armature()
                          .getSlot(o)
                          ._setDisplayIndex(t.inMouthAmount >= 2 ? 0 : -1);
                      });
                  }),
                  (e.swallowAnimation = function () {
                    (this.switching = !0), this.anmControl.playAnimation('ChewEnd', 1);
                  }),
                  (e.specialPlantUpdate = function (t) {
                    var o = this;
                    if (
                      (this.setSlots(),
                      this.inMouthAmount > 0 &&
                        (this.countDownBase > 0 && (this.countDownBase -= t),
                        this.countDownBase <= 0 && 1 == this.inMouthAmount && (this.switching || this.swallowAnimation()),
                        this.countDownExtra > 0 && (this.countDownExtra -= t),
                        this.countDownExtra <= 0 && 2 == this.inMouthAmount && (this.switching || this.swallowAnimation())),
                      !this.fooding && !this.switching && this.inMouthAmount < 2 && this.detectEnemy() && this.attackAnimation(),
                      this.fooding)
                    ) {
                      if (this.pulling > 0) {
                        if (
                          ((this.pulling -= t),
                          this.foodSwallowTargets.length < this.foodSwallowAmount - this.foodSwallowedTargets.length)
                        ) {
                          var n = null;
                          this.inLane.zombiePool().forEach(function (t) {
                            t.knockBackable &&
                              -1 == o.foodSwallowTargets.indexOf(t) &&
                              (!n || n.bodyRec.prjX().x > t.bodyRec.prjX().x) &&
                              t.bodyRec.prjX().y > o.node.worldPosition.x &&
                              (n = t);
                          }),
                            n && this.foodSwallowTargets.push(n);
                        }
                        this.foodSwallowTargets.concat().forEach(function (t) {
                          var n = o.foodSwallowTargets.indexOf(t);
                          t.isAlive() || -1 == n
                            ? (t.stun(0.2),
                              t.bodyRec.prjX().x <= o.node.worldPosition.x + 15
                                ? (-1 == o.foodSwallowedTargets.indexOf(t) && (o.chompZombie(t), o.foodSwallowedTargets.push(t)),
                                  o.foodSwallowedTargets.length >= o.foodSwallowAmount && (o.pulling = 0))
                                : t.knockBackBy(new u(-0.4, 0), !1))
                            : o.foodSwallowTargets.splice(n, 1);
                        }),
                          this.pulling <= 0 &&
                            (this.getComponent(f).playFoodSwallowSound(),
                            this.anmControl.playAnimation('FoodPullEndPushStart', 2));
                      }
                      this.pushing > 0 &&
                        ((this.pushing -= t),
                        this.inLane.zombiePool().forEach(function (t) {
                          t.knockBackable && t.bodyRec.prjX().y > o.node.worldPosition.x && t.knockBackBy(new u(0.4, 0), !1);
                        }),
                        this.pushing <= 0 && this.anmControl.playAnimation('FoodPushEnd', 1)),
                        this.foodSwallowedTargets.concat().forEach(function (t) {
                          null != t && t.isAlive() && (null == t || t.stun(0.2));
                        });
                    }
                  }),
                  o
                );
              })(c)).prototype,
              'attackDamage',
              [y],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 100;
                },
              }
            )),
            (R = o(P.prototype, 'chewDuration', [C], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 17;
              },
            })),
            (k = o(P.prototype, 'foodPullDuration', [A], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 3;
              },
            })),
            (x = o(P.prototype, 'foodPushDuration', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 3;
              },
            })),
            (M = o(P.prototype, 'foodSwallowAmount', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 4;
              },
            })),
            (D = P))
          ) || D)
        );
        e._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/chomperSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './SoundsController.ts', './plantSound.ts'],
  function (o) {
    var n, t, i, e, u, l, r, a, c, d;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (i = o.initializerDefineProperty),
            (e = o.assertThisInitialized);
        },
        function (o) {
          (u = o.cclegacy), (l = o._decorator), (r = o.AudioClip);
        },
        function (o) {
          a = o.ArrayGet;
        },
        function (o) {
          c = o.SoundFXController;
        },
        function (o) {
          d = o.plantSound;
        },
      ],
      execute: function () {
        var S, p, h, s, f, y, b, w, m, g, P, z, O, R, v, F, k, C, A, D, L, _, B, X, H, j, x;
        u._RF.push({}, 'd54c4dLtSBDY552sRgXA+o7', 'chomperSound', void 0);
        var G = l.ccclass,
          I = l.property;
        o(
          'chomperSound',
          ((S = G('chomperSound')),
          (p = I(r)),
          (h = I(r)),
          (s = I([r])),
          (f = I([r])),
          (y = I([r])),
          (b = I([r])),
          (w = I([r])),
          (m = I([r])),
          (g = I([r])),
          (P = I(r)),
          (z = I([r])),
          (O = I(r)),
          S(
            ((F = n(
              (v = (function (o) {
                function n() {
                  for (var n, t = arguments.length, u = new Array(t), l = 0; l < t; l++) u[l] = arguments[l];
                  return (
                    (n = o.call.apply(o, [this].concat(u)) || this),
                    i(n, 'foodPushSound', F, e(n)),
                    i(n, 'foodSwallowSound', k, e(n)),
                    i(n, 'chewSound', C, e(n)),
                    i(n, 'chompSound', A, e(n)),
                    i(n, 'swallowSound', D, e(n)),
                    i(n, 'chewStartSound', L, e(n)),
                    i(n, 'lickSound', _, e(n)),
                    i(n, 'hiccupSound', B, e(n)),
                    i(n, 'scratchSound', X, e(n)),
                    i(n, 'foodPullStartSound', H, e(n)),
                    i(n, 'foodPullSkillSound', j, e(n)),
                    i(n, 'foodPullingSound', x, e(n)),
                    n
                  );
                }
                t(n, o);
                var u = n.prototype;
                return (
                  (u.playFoodPushSound = function () {
                    this.playOneShot(this.foodPushSound);
                  }),
                  (u.playFoodSwallowSound = function () {
                    this.playOneShot(this.foodSwallowSound), this.stopFoodPull();
                  }),
                  (u.playChewSound = function () {
                    this.playOneShot(a.getRandom(this.chewSound), 0.4);
                  }),
                  (u.playChompSound = function () {
                    this.playOneShot(a.getRandom(this.chompSound));
                  }),
                  (u.playSwallowSound = function () {
                    this.playOneShot(a.getRandom(this.swallowSound));
                  }),
                  (u.playChewStartSound = function () {
                    this.playOneShot(a.getRandom(this.chewStartSound));
                  }),
                  (u.playLickSound = function () {
                    this.playOneShot(a.getRandom(this.lickSound), 0.4);
                  }),
                  (u.playHiccupSound = function () {
                    this.playOneShot(a.getRandom(this.hiccupSound));
                  }),
                  (u.playScratchSound = function () {
                    this.playOneShot(a.getRandom(this.scratchSound), 0.4);
                  }),
                  (u.foodPullBegin = function () {
                    var o = this;
                    this.playOneShot(this.foodPullStartSound),
                      this.playOneShotFromArray(this.foodPullSkillSound),
                      (this.audioSource.clip = this.foodPullingSound),
                      this.scheduleOnce(function () {
                        o.audioSource.play(), (o.audioSource.volume = 0.5 * c.SoundFXVolume), (o.audioSource.loop = !0);
                      }, 0.3);
                  }),
                  (u.stopFoodPull = function () {
                    this.audioSource.stop();
                  }),
                  n
                );
              })(d)).prototype,
              'foodPushSound',
              [p],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (k = n(v.prototype, 'foodSwallowSound', [h], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (C = n(v.prototype, 'chewSound', [s], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (A = n(v.prototype, 'chompSound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (D = n(v.prototype, 'swallowSound', [y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (L = n(v.prototype, 'chewStartSound', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (_ = n(v.prototype, 'lickSound', [w], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (B = n(v.prototype, 'hiccupSound', [m], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (X = n(v.prototype, 'scratchSound', [g], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (H = n(v.prototype, 'foodPullStartSound', [P], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (j = n(v.prototype, 'foodPullSkillSound', [z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (x = n(v.prototype, 'foodPullingSound', [O], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (R = v))
          ) || R)
        );
        u._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/CoconutCannon.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './coconutCannonSound.ts',
    './NodePools.ts',
    './commonShot.ts',
    './Peashooter.ts',
    './Character.ts',
  ],
  function (o) {
    var n, t, i, e, a, s, l, r, p, h, c, u, d, m, C, f, y, w, S;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (i = o.initializerDefineProperty),
            (e = o.assertThisInitialized);
        },
        function (o) {
          (a = o.cclegacy),
            (s = o._decorator),
            (l = o.CCFloat),
            (r = o.Prefab),
            (p = o.Node),
            (h = o.AnimationComponent),
            (c = o.Color),
            (u = o.Vec2),
            (d = o.Vec3);
        },
        function (o) {
          m = o.Plant;
        },
        function (o) {
          C = o.coconutCannonSound;
        },
        function (o) {
          f = o.NodePools;
        },
        function (o) {
          y = o.commonShot;
        },
        function (o) {
          w = o.peaShooter;
        },
        function (o) {
          S = o.CharacterType;
        },
      ],
      execute: function () {
        var g, P, b, D, v, A, F, j, z, R, _;
        a._RF.push({}, '50720yK6odEMocWqgdyjOTQ', 'CoconutCannon', void 0);
        var L = s.ccclass,
          k = s.property;
        o(
          'CoconutCannonPlant',
          ((g = L('CoconutCannonPlant')),
          (P = k(l)),
          (b = k(r)),
          (D = k(r)),
          (v = k(p)),
          g(
            ((j = n(
              (F = (function (o) {
                function n() {
                  for (var n, t = arguments.length, a = new Array(t), s = 0; s < t; s++) a[s] = arguments[s];
                  return (
                    (n = o.call.apply(o, [this].concat(a)) || this),
                    i(n, 'sleepDuration', j, e(n)),
                    (n.sleepCD = 0),
                    (n.shooting = !1),
                    i(n, 'prj0', z, e(n)),
                    i(n, 'prjFood', R, e(n)),
                    i(n, 'peaSpawnpoint', _, e(n)),
                    n
                  );
                }
                t(n, o);
                var a = n.prototype;
                return (
                  (a.specialPlantOnEnable = function () {
                    this.sleepCD = 0;
                  }),
                  (a.shootAnimation = function (o) {
                    void 0 === o && (o = !1),
                      (this.shooting = !0),
                      this.anmControl.playAnimation(o ? 'Food' : 'Shoot', 2),
                      (this.anmControl.IdleAnim = 'Sleep'),
                      (this.anmControl.RandomAnim = []);
                  }),
                  (a.wake = function () {
                    (this.sleepCD = 0),
                      this.anmControl.playAnimation('Wake', 1),
                      (this.anmControl.IdleAnim = 'Idle'),
                      (this.anmControl.RandomAnim = ['Rand1', 'Rand2']),
                      this.getComponent(h).stop(),
                      (this.anmControl.body.color = new c(255, 255, 255, 255));
                  }),
                  (a.specialPlantFood = function (o) {
                    this.wake(), this.shootAnimation(!0), this.getComponent(C).playFoodStartSound();
                  }),
                  (a.waterable = function () {
                    return this.sleepCD <= 0 && !this.shooting;
                  }),
                  (a._shoot = function (o, n, t) {
                    void 0 === o && (o = this.prj0), void 0 === n && (n = 35), void 0 === t && (t = new u(1, 0));
                    var i = f.instantiatePooly(o);
                    if (i)
                      return w
                        .shootOnePea(
                          i,
                          new d(this.peaSpawnpoint.worldPosition.x, this.inLnC.plantPoint.worldPosition.y, 0),
                          Math.max(1, this.peaSpawnpoint.worldPosition.y - this.inLnC.plantPoint.worldPosition.y),
                          this.inLane.node,
                          t.normalize().multiplyScalar(n),
                          S.zombie
                        )
                        .getComponent(y);
                  }),
                  (a.animationListener = function (o) {
                    'Shoot' == o.name
                      ? (this.getComponent(C).playShootSound(!1), this._shoot())
                      : 'foodShoot' == o.name
                      ? (this.getComponent(C).playShootSound(!0), this._shoot(this.prjFood, 10))
                      : 'sleepStart' == o.name
                      ? (this.anmControl.playRandom(),
                        (this.shooting = !1),
                        (this.sleepCD = this.sleepDuration),
                        this.getComponent(h).play('plantCooldown'))
                      : 'foodEnd' == o.name && this.foodEnd();
                  }),
                  (a.specialPlantUpdate = function (o) {
                    this.sleepCD > 0 &&
                      ((this.getComponent(h).getState('plantCooldown').speed = this.sleepDuration / (this.sleepCD + 0.5)),
                      (this.sleepCD -= o),
                      this.sleepCD <= 0 && this.wake());
                  }),
                  (a.specialPlantOnMouseDown = function () {
                    var o = this.sleepCD <= 0 && !this.shooting;
                    return o && this.shootAnimation(!1), o;
                  }),
                  n
                );
              })(m)).prototype,
              'sleepDuration',
              [P],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 15;
                },
              }
            )),
            (z = n(F.prototype, 'prj0', [b], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (R = n(F.prototype, 'prjFood', [D], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (_ = n(F.prototype, 'peaSpawnpoint', [v], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (A = F))
          ) || A)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/coconutCannonSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './plantSound.ts'],
  function (o) {
    var n, t, e, i, r, u, a, l;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (i = o.assertThisInitialized);
        },
        function (o) {
          (r = o.cclegacy), (u = o._decorator), (a = o.AudioClip);
        },
        function (o) {
          l = o.plantSound;
        },
      ],
      execute: function () {
        var c, s, d, p, S, h, f, y, b;
        r._RF.push({}, '57051LPg25GRLcXsVmpO7l9', 'coconutCannonSound', void 0);
        var g = u.ccclass,
          v = u.property;
        o(
          'coconutCannonSound',
          ((c = g('coconutCannonSound')),
          (s = v(a)),
          (d = v(a)),
          (p = v(a)),
          c(
            ((f = n(
              (h = (function (o) {
                function n() {
                  for (var n, t = arguments.length, r = new Array(t), u = 0; u < t; u++) r[u] = arguments[u];
                  return (
                    (n = o.call.apply(o, [this].concat(r)) || this),
                    e(n, 'shootFoodSound', f, i(n)),
                    e(n, 'shootSound', y, i(n)),
                    e(n, 'foodStartSound', b, i(n)),
                    n
                  );
                }
                t(n, o);
                var r = n.prototype;
                return (
                  (r.playShootSound = function (o) {
                    void 0 === o && (o = !1), this.playOneShot(o ? this.shootFoodSound : this.shootSound);
                  }),
                  (r.playFoodStartSound = function () {
                    this.playOneShot(this.foodStartSound);
                  }),
                  n
                );
              })(l)).prototype,
              'shootFoodSound',
              [s],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (y = n(h.prototype, 'shootSound', [d], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (b = n(h.prototype, 'foodStartSound', [p], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (S = h))
          ) || S)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/coconutHeavy.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './commonShot.ts', './Zombie.ts'],
  function (e) {
    var t, n, o, a, i, c;
    return {
      setters: [
        function (e) {
          t = e.inheritsLoose;
        },
        function (e) {
          (n = e.cclegacy), (o = e._decorator);
        },
        function (e) {
          (a = e.ProjectileEnemyType), (i = e.commonShot);
        },
        function (e) {
          c = e.Zombie;
        },
      ],
      execute: function () {
        var l;
        n._RF.push({}, '5e745SbVZdK75F64q70ZJjV', 'coconutHeavy', void 0);
        var r = o.ccclass;
        o.property,
          e(
            'coconutHeavy',
            r('coconutHeavy')(
              (l = (function (e) {
                function n() {
                  for (var t, n = arguments.length, o = new Array(n), a = 0; a < n; a++) o[a] = arguments[a];
                  return ((t = e.call.apply(e, [this].concat(o)) || this).ignited = !1), t;
                }
                t(n, e);
                var o = n.prototype;
                return (
                  (o.specialOnSquareChange = function (e, t) {
                    var n;
                    t.cIndex >= 8 &&
                      !this.ignited &&
                      ((this.ignited = !0), null == (n = this.db) || n.playAnimation('Explode', 1));
                  }),
                  (o.animationListener = function (e) {
                    'pop' == e.name && (this.dealSplashDamage(), this.pop());
                  }),
                  (o.characterOnEnable = function () {
                    var e;
                    this.initialize(), (this.ignited = !1), null == (e = this.db) || e.playAnimation('Idle', 1 / 0);
                  }),
                  (o.detectEnemy = function (e) {
                    var t,
                      n,
                      o = this;
                    if ((this.ignited && (this.linearVelocity.x /= 1.2), this.inLane))
                      if (
                        (null != (t = this.targetLocked) &&
                          null != (t = t.getComponent(c)) &&
                          t.dead &&
                          (this.targetLocked = null),
                        this.enemyType == a.zombie)
                      ) {
                        var i,
                          l,
                          r = [];
                        if (
                          (null == (i = this.inLane) ||
                            i.zombiePool().forEach(function (e) {
                              e.knockBackable &&
                                (!o.targetLocked || (o.targetLocked && e.node == o.targetLocked)) &&
                                e.bodyRec.judgeCrossRec(o.bodyRec()) &&
                                r.push(e);
                            }),
                          r.length)
                        ) {
                          var s = this.bodyRec().prjX().y;
                          r.forEach(function (e) {
                            e.stun(0.1), (e.worldPositionX = s);
                          });
                        }
                        var d = null;
                        null == (l = this.inLane) ||
                          l.tombPool().forEach(function (e) {
                            e.bodyRec.judgeCrossRec(o.bodyRec()) &&
                              (!o.targetLocked || (o.targetLocked && e.node == o.targetLocked)) &&
                              (d = e);
                          }),
                          d &&
                            (d.dealDamage(this.damage_ * this.damageScale * (this.havePeaBuff ? 1.5 : 1)),
                            this.dealSplashDamage(null, d),
                            this.pop());
                      } else
                        this.enemyType == a.plant &&
                          (null == (n = this.inLane) ||
                            n.plantPool().forEach(function (e) {
                              o.dead ||
                                (e.bodyRec.judgeCrossRec(o.bodyRec()) &&
                                  (!o.targetLocked || (o.targetLocked && e.node == o.targetLocked)) &&
                                  (o.dealDamageToTargetPlant(e), o.pop()));
                            }));
                  }),
                  n
                );
              })(i))
            ) || l
          );
        n._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/coin.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './dropping.ts',
    './CoinCount.ts',
    './SoundRescourses.ts',
    './CoinCollecterInGame.ts',
  ],
  function (n) {
    var o, e, t, i, r, u, c, a, l, p, s, d;
    return {
      setters: [
        function (n) {
          (o = n.applyDecoratedDescriptor),
            (e = n.inheritsLoose),
            (t = n.initializerDefineProperty),
            (i = n.assertThisInitialized);
        },
        function (n) {
          (r = n.cclegacy), (u = n._decorator), (c = n.CCInteger), (a = n.AudioClip);
        },
        function (n) {
          l = n.dropping;
        },
        function (n) {
          p = n.CoinCount;
        },
        function (n) {
          s = n.sounds;
        },
        function (n) {
          d = n.CoinCollecterInGame;
        },
      ],
      execute: function () {
        var f, C, g, v, y, h, b;
        r._RF.push({}, '7bbaalD+gRCfLw8Bg+Ymqwq', 'coin', void 0);
        var m = u.ccclass,
          I = u.property;
        n(
          'coin',
          ((f = m('coin')),
          (C = I(c)),
          (g = I(a)),
          f(
            ((h = o(
              (y = (function (n) {
                function o() {
                  for (var o, e = arguments.length, r = new Array(e), u = 0; u < e; u++) r[u] = arguments[u];
                  return (o = n.call.apply(n, [this].concat(r)) || this), t(o, 'value', h, i(o)), t(o, 'dropSound', b, i(o)), o;
                }
                e(o, n);
                var r = o.prototype;
                return (
                  (r.specialOnGroundHit = function () {
                    s.play(this.dropSound, 1, 0);
                  }),
                  (r.goToUIPath = function () {
                    return 'Canvas/UIInGameUpper/CurrencyCount/CoinSlot';
                  }),
                  (r.specialGoToUI = function (n) {
                    var o;
                    (d.component.hidden = !1), null == (o = p.component) || o.addCoinCount(this.value);
                  }),
                  o
                );
              })(l)).prototype,
              'value',
              [C],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 10;
                },
              }
            )),
            (b = o(y.prototype, 'dropSound', [g], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (v = y))
          ) || v)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/coinbag.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './levelPrize.ts',
    './Sunflower.ts',
    './UI.ts',
    './SoundsController.ts',
    './SoundManager.ts',
  ],
  function (t) {
    var n, e, o, i, r, c, l, a, u, s, f, p, y, h, d, w;
    return {
      setters: [
        function (t) {
          (n = t.applyDecoratedDescriptor),
            (e = t.inheritsLoose),
            (o = t.initializerDefineProperty),
            (i = t.assertThisInitialized);
        },
        function (t) {
          (r = t.cclegacy), (c = t._decorator), (l = t.CCInteger), (a = t.tween), (u = t.Vec3), (s = t.Vec2), (f = t.TWO_PI);
        },
        function (t) {
          p = t.levelPrize;
        },
        function (t) {
          y = t.sunflower;
        },
        function (t) {
          h = t.UIInGame;
        },
        function (t) {
          d = t.MusicController;
        },
        function (t) {
          w = t.MusicSortEnum;
        },
      ],
      execute: function () {
        var g, v, m, b, P;
        r._RF.push({}, '513f5GsDYtP+7izCdr2puwc', 'coinbag', void 0);
        var _ = c.ccclass,
          M = c.property;
        t(
          'coinbag',
          ((g = _('coinbag')),
          (v = M(l)),
          g(
            ((P = n(
              (b = (function (t) {
                function n() {
                  for (var n, e = arguments.length, r = new Array(e), c = 0; c < e; c++) r[c] = arguments[c];
                  return (n = t.call.apply(t, [this].concat(r)) || this), o(n, 'coinAmount', P, i(n)), n;
                }
                return (
                  e(n, t),
                  (n.prototype.collect = function () {
                    var t = this;
                    this.collectTween.push(
                      a(this.node)
                        .to(0.5, { scale: new u(0, 0, 0) }, { easing: 'quadOut' })
                        .start()
                    );
                    for (
                      var n = f / 3,
                        e = function () {
                          var e = n / 2 - (n * o) / (t.coinAmount - 1),
                            i = y.dropOneCoin(new s(t._worldPositionX, t._worldPositionY + t._height), 2),
                            r = new s(Math.sin(e), Math.cos(e)).multiplyScalar(7);
                          (i.linearVelocity = new s(r.x, 0)),
                            (i.bodyLinearVelocity = r.y),
                            (i.mouseListen = !1),
                            a(i)
                              .to(1, { linearVelocity: new s(0, 0), bodyLinearVelocity: 0 })
                              .call(function () {
                                i.collect();
                              })
                              .to(1, {})
                              .call(function () {
                                h.uiingame.victoryExit();
                              })
                              .start();
                        },
                        o = 0;
                      o < this.coinAmount;
                      o++
                    )
                      e();
                    d.switchMusicSort(w.Leave);
                  }),
                  n
                );
              })(p)).prototype,
              'coinAmount',
              [v],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 5;
                },
              }
            )),
            (m = b))
          ) || m)
        );
        r._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/CoinCollecterInGame.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (e) {
  var o, t, n, i, s, h, r, l, a, c, d;
  return {
    setters: [
      function (e) {
        (o = e.applyDecoratedDescriptor),
          (t = e.inheritsLoose),
          (n = e.initializerDefineProperty),
          (i = e.assertThisInitialized),
          (s = e.createClass);
      },
      function (e) {
        (h = e.cclegacy), (r = e._decorator), (l = e.Node), (a = e.Vec3), (c = e.tween), (d = e.Component);
      },
    ],
    execute: function () {
      var u, w, p, f, _, C;
      h._RF.push({}, '60af0DVfxFNNroqRlBr7pKs', 'CoinCollecterInGame', void 0);
      var v = r.ccclass,
        y = r.property;
      e(
        'CoinCollecterInGame',
        ((u = v('CoinCollecterInGame')),
        (w = y(l)),
        u(
          (((C = (function (e) {
            function o() {
              for (var o, t = arguments.length, s = new Array(t), h = 0; h < t; h++) s[h] = arguments[h];
              return (
                ((o = e.call.apply(e, [this].concat(s)) || this).oldPos = new a()),
                (o._hidden = !1),
                (o._showTween = void 0),
                n(o, 'shower', _, i(o)),
                (o.showerOldPos = new a()),
                (o.showCD = 0),
                o
              );
            }
            t(o, e);
            var h = o.prototype;
            return (
              (h.onLoad = function () {
                (o.component = this),
                  (this.oldPos = this.node.position.clone()),
                  (this.showerOldPos = this.shower.position.clone()),
                  this.node.position.add(new a(0, -1e3, 0));
              }),
              (h.show = function () {
                c(this.node).to(0.5, { position: this.oldPos }, { easing: 'quadOut' }).start();
              }),
              (h.update = function (e) {
                this.hidden || (this.showCD > 0 && (this.showCD -= e), this.showCD <= 0 && (this.hidden = !0));
              }),
              s(o, [
                {
                  key: 'hidden',
                  get: function () {
                    return this._hidden;
                  },
                  set: function (e) {
                    var o,
                      t = this;
                    if (((this.showCD = 5), !e && this._hidden))
                      null == (o = this._showTween) || o.stop(),
                        (this._showTween = c(this.shower)
                          .to(0.5, { position: this.showerOldPos }, { easing: 'quadOut' })
                          .call(function () {
                            t._showTween = null;
                          })
                          .start());
                    else if (e && !this._hidden) {
                      var n;
                      null == (n = this._showTween) || n.stop(),
                        (this._showTween = c(this.shower)
                          .by(0.5, { position: new a(0, -1e3, 0) }, { easing: 'quadIn' })
                          .call(function () {
                            t._showTween = null;
                          })
                          .start());
                    }
                    this._hidden = e;
                  },
                },
              ]),
              o
            );
          })(d)).component = void 0),
          (_ = o((f = C).prototype, 'shower', [w], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
          (p = f))
        ) || p)
      );
      h._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/CoinCount.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './CurrencyCount.ts', './PlayerProperties.ts', './SoundRescourses.ts'],
  function (n) {
    var o, t, e, i, r, u, c, a, l, s;
    return {
      setters: [
        function (n) {
          (o = n.applyDecoratedDescriptor),
            (t = n.inheritsLoose),
            (e = n.initializerDefineProperty),
            (i = n.assertThisInitialized);
        },
        function (n) {
          (r = n.cclegacy), (u = n._decorator), (c = n.AudioClip);
        },
        function (n) {
          a = n.CurrencyCount;
        },
        function (n) {
          l = n.AllPlayerProperties;
        },
        function (n) {
          s = n.sounds;
        },
      ],
      execute: function () {
        var p, C, d, f, h, y;
        r._RF.push({}, 'bd9abRbdZhOt51gHOg9m9Ia', 'CoinCount', void 0);
        var v = u.ccclass,
          P = u.property;
        n(
          'CoinCount',
          ((p = v('CoinCount')),
          (C = P(c)),
          p(
            (((y = (function (n) {
              function o() {
                for (var o, t = arguments.length, r = new Array(t), u = 0; u < t; u++) r[u] = arguments[u];
                return (o = n.call.apply(n, [this].concat(r)) || this), e(o, 'coinCollectSound', h, i(o)), o;
              }
              t(o, n);
              var r = o.prototype;
              return (
                (r.start = function () {
                  (this.shownValue = isNaN(l.currentPlayer.coin) ? 0 : l.currentPlayer.coin), (this.value = this._shownValue);
                }),
                (r.addCoinCount = function (n) {
                  (this.value += n), s.play(this.coinCollectSound, 1, 0.1);
                }),
                (r.decCoinCount = function (n) {
                  this.value -= n;
                }),
                (r.buyCoin = function () {
                  this.addCoinCount(1e4);
                }),
                (r.onValueSet = function (n) {
                  (l.currentPlayer.coin = n), l.savePP();
                }),
                (r.onLoad = function () {
                  o.component = this;
                }),
                o
              );
            })(a)).component = void 0),
            (h = o((f = y).prototype, 'coinCollectSound', [C], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (d = f))
          ) || d)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/commonShot.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './NodePools.ts',
    './Character.ts',
    './Zombie.ts',
    './Square.ts',
    './CharacterManager.ts',
    './ProjectileManager.ts',
    './Particles.ts',
    './LnC.ts',
    './Lane.ts',
    './SoundRescourses.ts',
    './levelController.ts',
    './ModernBalloonZombie.ts',
  ],
  function (e) {
    var i, t, n, o, a, r, l, s, h, c, u, p, d, b, m, f, L, y, g, w, P, v, D, z, S, k, _, C, E, B, I, R;
    return {
      setters: [
        function (e) {
          (i = e.applyDecoratedDescriptor),
            (t = e.initializerDefineProperty),
            (n = e.inheritsLoose),
            (o = e.assertThisInitialized);
        },
        function (e) {
          (a = e.cclegacy),
            (r = e._decorator),
            (l = e.CCFloat),
            (s = e.Size),
            (h = e.Enum),
            (c = e.Prefab),
            (u = e.AudioClip),
            (p = e.Vec3),
            (d = e.Vec2),
            (b = e.AudioSource),
            (m = e.dragonBones);
        },
        function (e) {
          (f = e.ArrayGet), (L = e.NodePools);
        },
        function (e) {
          y = e.Character;
        },
        function (e) {
          (g = e.zombiePoison), (w = e.zombieDamageType), (P = e.Zombie);
        },
        function (e) {
          v = e.Square;
        },
        function (e) {
          (D = e.Rectangle), (z = e.ZombiePool);
        },
        function (e) {
          S = e.projectile;
        },
        function (e) {
          k = e.particle;
        },
        function (e) {
          (_ = e.TileLiquidEnum), (C = e.TileType);
        },
        function (e) {
          E = e.Lane;
        },
        function (e) {
          B = e.sounds;
        },
        function (e) {
          I = e.LevelPlay;
        },
        function (e) {
          R = e.ModernBalloonZombie;
        },
      ],
      execute: function () {
        var F,
          V,
          x,
          U,
          T,
          q,
          O,
          j,
          M,
          K,
          A,
          W,
          H,
          N,
          X,
          G,
          Y,
          Z,
          J,
          Q,
          $,
          ee,
          ie,
          te,
          ne,
          oe,
          ae,
          re,
          le,
          se,
          he,
          ce,
          ue,
          pe,
          de,
          be,
          me,
          fe,
          Le,
          ye,
          ge,
          we,
          Pe,
          ve,
          De,
          ze,
          Se,
          ke,
          _e,
          Ce,
          Ee,
          Be,
          Ie,
          Re,
          Fe,
          Ve,
          xe,
          Ue,
          Te,
          qe,
          Oe,
          je,
          Me,
          Ke,
          Ae,
          We,
          He,
          Ne,
          Xe,
          Ge,
          Ye,
          Ze,
          Je,
          Qe,
          $e,
          ei,
          ii,
          ti,
          ni,
          oi,
          ai,
          ri,
          li,
          si;
        a._RF.push({}, '42744eKEFJOpYjpPM9vfXco', 'commonShot', void 0);
        var hi = r.ccclass,
          ci = r.property,
          ui = e(
            'ProjectileType',
            (function (e) {
              return (e[(e.pea = 0)] = 'pea'), (e[(e.boomerang = 1)] = 'boomerang'), e;
            })({})
          ),
          pi = e(
            'ProjectileEnemyType',
            (function (e) {
              return (e[(e.zombie = 0)] = 'zombie'), (e[(e.plant = 1)] = 'plant'), (e[(e.none = 2)] = 'none'), e;
            })({})
          ),
          di = e(
            'SplashDamage',
            ((F = hi('splashDamage')),
            (V = ci({ type: l, visible: !0 })),
            (x = ci({ type: s, visible: !0 })),
            (U = ci({ type: l, visible: !0 })),
            (T = ci({ type: l, visible: !0 })),
            (q = ci({ type: l, visible: !0 })),
            (O = ci({ type: g, visible: !0 })),
            (j = ci({ type: l, visible: !0 })),
            (M = ci({ type: l, visible: !0 })),
            F(
              ((W = i(
                (A = function (e, i, n, o, a, r, l, h) {
                  void 0 === e && (e = 0),
                    void 0 === i && (i = new s(0, 0)),
                    void 0 === n && (n = 0),
                    void 0 === o && (o = 0),
                    void 0 === a && (a = 0),
                    void 0 === r && (r = new g(0, 0)),
                    void 0 === l && (l = 0),
                    void 0 === h && (h = 0),
                    t(this, 'splashDamage', W, this),
                    t(this, 'splashRange', H, this),
                    t(this, 'chillDuration', N, this),
                    t(this, 'freezeDuration', X, this),
                    t(this, 'butterDuration', G, this),
                    t(this, 'poison', Y, this),
                    t(this, 'stunDuration', Z, this),
                    t(this, 'knockbackDistance', J, this),
                    (this.splashDamage = e),
                    (this.butterDuration = a),
                    (this.splashRange = i),
                    (this.chillDuration = n),
                    (this.freezeDuration = o),
                    (this.poison = r),
                    (this.stunDuration = l),
                    (this.knockbackDistance = h);
                }).prototype,
                'splashDamage',
                [V],
                {
                  configurable: !0,
                  enumerable: !0,
                  writable: !0,
                  initializer: function () {
                    return 0;
                  },
                }
              )),
              (H = i(A.prototype, 'splashRange', [x], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s(0, 0);
                },
              })),
              (N = i(A.prototype, 'chillDuration', [U], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 0;
                },
              })),
              (X = i(A.prototype, 'freezeDuration', [T], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 0;
                },
              })),
              (G = i(A.prototype, 'butterDuration', [q], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 0;
                },
              })),
              (Y = i(A.prototype, 'poison', [O], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new g(0, 0);
                },
              })),
              (Z = i(A.prototype, 'stunDuration', [j], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 0;
                },
              })),
              (J = i(A.prototype, 'knockbackDistance', [M], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 0;
                },
              })),
              (K = A))
            ) || K)
          );
        h(w), h(_), h(ui);
        e(
          'commonShot',
          ((Q = hi('commonShot')),
          ($ = ci(Boolean)),
          (ee = ci({
            type: Boolean,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (ie = ci({
            type: Boolean,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (te = ci({
            type: Boolean,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (ne = ci({
            type: c,
            visible: function () {
              return this.canBeYellowIgnited && this.showCommonShotFeaturesInEditor;
            },
          })),
          (oe = ci({
            type: c,
            visible: function () {
              return this.canBeBlueIgnited && this.showCommonShotFeaturesInEditor;
            },
          })),
          (ae = ci({
            type: Boolean,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (re = ci({
            type: Boolean,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (le = ci({
            type: Boolean,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (se = ci({
            type: Boolean,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (he = ci({
            type: l,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (ce = ci(s)),
          (ue = ci({
            type: [di],
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
            displayName: 'SplashDamage',
          })),
          (pe = ci({
            type: _,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (de = ci({
            type: l,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (be = ci({
            type: w,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (me = ci({
            type: g,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (fe = ci({
            type: l,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (Le = ci({
            type: l,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (ye = ci({
            type: Boolean,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (ge = ci({
            type: Boolean,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (we = ci({
            type: Boolean,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (Pe = ci({
            type: l,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (ve = ci({
            type: ui,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (De = ci({
            type: [u],
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (ze = ci({
            type: [c],
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (Se = ci({
            type: l,
            min: 0,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (ke = ci({
            type: l,
            tooltip: 'Stunning Delay',
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (_e = ci({
            type: l,
            tooltip: 'Butter Delay',
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          (Ce = ci(l)),
          (Ee = ci({
            type: Boolean,
            visible: function () {
              return this.showCommonShotFeaturesInEditor;
            },
          })),
          Q(
            ((Re = i(
              (Ie = (function (e) {
                function i() {
                  for (var i, n = arguments.length, a = new Array(n), r = 0; r < n; r++) a[r] = arguments[r];
                  return (
                    (i = e.call.apply(e, [this].concat(a)) || this),
                    t(i, 'showCommonShotFeaturesInEditor', Re, o(i)),
                    t(i, 'particleAtFoot', Fe, o(i)),
                    t(i, 'canBeYellowIgnited', Ve, o(i)),
                    t(i, 'canBeBlueIgnited', xe, o(i)),
                    t(i, 'yellowIgnited', Ue, o(i)),
                    t(i, 'blueIgnited', Te, o(i)),
                    t(i, 'armorKnockSound', qe, o(i)),
                    t(i, 'bodyKnockSound', Oe, o(i)),
                    t(i, 'armorProtection', je, o(i)),
                    t(i, 'onFire', Me, o(i)),
                    t(i, 'damageScale', Ke, o(i)),
                    (i.parentLock = !1),
                    (i.enemyType = pi.zombie),
                    (i.maxDistance = 1 / 0),
                    (i.maxDistance_ = 1 / 0),
                    t(i, 'size', Ae, o(i)),
                    (i.size_ = new s(12, 12)),
                    (i._bodyRec = new D()),
                    t(i, 'splashDamages', We, o(i)),
                    (i.splashDamages_ = []),
                    t(i, 'tileLiquid', He, o(i)),
                    (i.tileLiquid_ = _.none),
                    t(i, 'tileLiquidDuration', Ne, o(i)),
                    (i.tileLiquidDuration_ = 0),
                    t(i, 'damageType', Xe, o(i)),
                    t(i, 'poison', Ge, o(i)),
                    (i.poison_ = new g(0, 0)),
                    t(i, 'chill', Ye, o(i)),
                    (i.chill_ = 0),
                    t(i, 'freeze', Ze, o(i)),
                    (i.freeze_ = 0),
                    t(i, 'followRotation', Je, o(i)),
                    t(i, 'screenShaker', Qe, o(i)),
                    t(i, 'balloonKiller', $e, o(i)),
                    t(i, 'knockbackDistance', ei, o(i)),
                    (i.knockbackDistance_ = 0),
                    t(i, 'projectileType', ii, o(i)),
                    t(i, 'PopSound', ti, o(i)),
                    t(i, 'PopParticle', ni, o(i)),
                    (i.originalP = new p(0, 0, 0)),
                    t(i, 'damage', oi, o(i)),
                    (i.damage_ = 0),
                    t(i, 'stun', ai, o(i)),
                    (i.stun_ = 0),
                    t(i, 'butter', ri, o(i)),
                    (i.butter_ = 0),
                    t(i, 'popSoundVolume', li, o(i)),
                    (i.havePeaBuff = !1),
                    (i.peaBuff = null),
                    (i.targetLocked = null),
                    (i.setLine = !0),
                    (i.detectEnemyOn = !0),
                    (i.acceleration = new d(0, 0)),
                    (i.deceleration = new d(0, 0)),
                    (i.linearVelocity = new d(0, 0)),
                    (i.bodyOmega = 0),
                    (i.bodyLinearVelocity = 0),
                    (i.gravity = 0),
                    t(i, 'plantHeatOnPop', si, o(i)),
                    (i.switching = !1),
                    (i.dead = !1),
                    i
                  );
                }
                n(i, e);
                var a = i.prototype;
                return (
                  (a.copy = function (e, i, t, n, o, a, r, l, s, h) {
                    var c = this;
                    void 0 === i && (i = !0),
                      void 0 === t && (t = !0),
                      void 0 === n && (n = !0),
                      void 0 === o && (o = !0),
                      void 0 === a && (a = !0),
                      void 0 === r && (r = !0),
                      void 0 === l && (l = !0),
                      void 0 === s && (s = !0),
                      void 0 === h && (h = !0),
                      (this.enemyType = e.enemyType),
                      e.havePeaBuff && this.addPeaBuff(),
                      i && (this.damage_ = e.damage_),
                      (this.splashDamages_ = []),
                      e.splashDamages_.forEach(function (e) {
                        var i = new di();
                        (i.splashDamage = e.splashDamage),
                          (i.splashRange = e.splashRange),
                          t && (i.chillDuration = e.chillDuration),
                          n && (i.freezeDuration = e.freezeDuration),
                          o && (i.stunDuration = e.stunDuration),
                          r && (i.knockbackDistance = e.knockbackDistance),
                          l && (i.butterDuration = e.butterDuration),
                          s && (i.poison = e.poison),
                          c.splashDamages_.push(i);
                      }),
                      t && (this.chill_ = e.chill_),
                      n && (this.freeze_ = e.freeze_),
                      h &&
                        ((this.linearVelocity = e.linearVelocity.clone()),
                        (this.acceleration = e.acceleration.clone()),
                        (this.deceleration = e.deceleration.clone()),
                        (this.gravity = e.gravity),
                        (this.bodyLinearVelocity = e.bodyLinearVelocity),
                        (this.height = e.height)),
                      o && (this.stun_ = e.stun_),
                      a && ((this.tileLiquid_ = e.tileLiquid_), (this.tileLiquidDuration_ = e.tileLiquidDuration_)),
                      r && (this.knockbackDistance_ = e.knockbackDistance_),
                      l && (this.butter_ = e.butter_),
                      s && (this.poison_ = e.poison_);
                  }),
                  (a.animationListener = function (e) {}),
                  (a.animationCompleteListener = function () {}),
                  (a.bodyRec = function () {
                    return this.dead ? new D() : this._bodyRec;
                  }),
                  (a._setBodyRec = function (e, i) {
                    var t = i.clone().add(e.clone().negative()),
                      n = e.clone().add(t.clone().multiplyScalar(0.5));
                    this._bodyRec = D.createRectangleCenter(
                      n,
                      Math.abs(t.x) + this.size_.width,
                      Math.abs(t.y) + this.size_.height
                    );
                  }),
                  (a.setSplashDamages = function (e) {
                    this.splashDamages_ = e;
                  }),
                  (a.setTileLiquid = function (e, i) {
                    (this.tileLiquid_ = e), (this.tileLiquidDuration_ = i);
                  }),
                  (a.characterOnSquareChange = function (e, i) {
                    var t;
                    if (
                      (this.maxDistance_--,
                      this.maxDistance_ <= -1 && this.fade(),
                      this.onFire && 9 != i.cIndex && -1 != i.cIndex && i.iceTile)
                    )
                      null == (t = i.iceTile) || t.die(), this.pop();
                    else if (this.onFire && 9 == i.cIndex && this.inLane.iceTile) {
                      var n;
                      null == (n = this.inLane.iceTile) || n.die(), this.pop();
                    }
                    this.specialOnSquareChange(e, i);
                  }),
                  (a.specialOnSquareChange = function (e, i) {}),
                  (a.setPoison = function (e, i) {
                    this.poison_ = new g(e, i);
                  }),
                  (a.setChill = function (e) {
                    this.chill_ = e;
                  }),
                  (a.setFreeze = function (e) {
                    this.freeze_ = e;
                  }),
                  (a.dealSplashDamage = function (e, i) {
                    var t = this;
                    void 0 === e && (e = null),
                      this.splashDamages_.forEach(function (i) {
                        if (i.splashDamage >= 0 && i.splashRange.width > 0 && i.splashRange.height > 0) {
                          var n = D.createRectangleCenter(
                              new d(t.node.worldPosition.x, t.inLane.node.worldPosition.y),
                              i.splashRange.width * v.SquareDisW,
                              i.splashRange.height * v.SquareDisH
                            ),
                            o = [],
                            a = [];
                          i.splashRange.height > 9
                            ? (o = z.pool().concat())
                            : i.splashRange.height > 7
                            ? ((o = t.inLane
                                .zombiePool()
                                .concat(
                                  t.inLane.UpperLane.UpperLane.UpperLane.UpperLane.zombiePool(),
                                  t.inLane.UpperLane.UpperLane.UpperLane.zombiePool(),
                                  t.inLane.UpperLane.UpperLane.zombiePool(),
                                  t.inLane.UpperLane.zombiePool(),
                                  t.inLane.LowerLane.zombiePool(),
                                  t.inLane.LowerLane.LowerLane.zombiePool(),
                                  t.inLane.LowerLane.LowerLane.LowerLane.zombiePool(),
                                  t.inLane.LowerLane.LowerLane.LowerLane.LowerLane.zombiePool()
                                )),
                              (a = t.inLane
                                .tombPool()
                                .concat(
                                  t.inLane.UpperLane.UpperLane.UpperLane.UpperLane.tombPool(),
                                  t.inLane.UpperLane.UpperLane.UpperLane.tombPool(),
                                  t.inLane.UpperLane.UpperLane.tombPool(),
                                  t.inLane.UpperLane.tombPool(),
                                  t.inLane.LowerLane.tombPool(),
                                  t.inLane.LowerLane.LowerLane.tombPool(),
                                  t.inLane.LowerLane.LowerLane.LowerLane.tombPool(),
                                  t.inLane.LowerLane.LowerLane.LowerLane.LowerLane.tombPool()
                                )))
                            : i.splashRange.height > 5
                            ? ((o = t.inLane
                                .zombiePool()
                                .concat(
                                  t.inLane.UpperLane.UpperLane.UpperLane.zombiePool(),
                                  t.inLane.UpperLane.UpperLane.zombiePool(),
                                  t.inLane.UpperLane.zombiePool(),
                                  t.inLane.LowerLane.zombiePool(),
                                  t.inLane.LowerLane.LowerLane.zombiePool(),
                                  t.inLane.LowerLane.LowerLane.LowerLane.zombiePool()
                                )),
                              (a = t.inLane
                                .tombPool()
                                .concat(
                                  t.inLane.UpperLane.UpperLane.UpperLane.tombPool(),
                                  t.inLane.UpperLane.UpperLane.tombPool(),
                                  t.inLane.UpperLane.tombPool(),
                                  t.inLane.LowerLane.tombPool(),
                                  t.inLane.LowerLane.LowerLane.tombPool(),
                                  t.inLane.LowerLane.LowerLane.LowerLane.tombPool()
                                )))
                            : i.splashRange.height > 3
                            ? ((o = t.inLane
                                .zombiePool()
                                .concat(
                                  t.inLane.UpperLane.UpperLane.zombiePool(),
                                  t.inLane.UpperLane.zombiePool(),
                                  t.inLane.LowerLane.zombiePool(),
                                  t.inLane.LowerLane.LowerLane.zombiePool()
                                )),
                              (a = t.inLane
                                .tombPool()
                                .concat(
                                  t.inLane.UpperLane.UpperLane.tombPool(),
                                  t.inLane.UpperLane.tombPool(),
                                  t.inLane.LowerLane.tombPool(),
                                  t.inLane.LowerLane.LowerLane.tombPool()
                                )))
                            : i.splashRange.height > 1
                            ? ((o = t.inLane
                                .zombiePool()
                                .concat(t.inLane.UpperLane.zombiePool(), t.inLane.LowerLane.zombiePool())),
                              (a = t.inLane.tombPool().concat(t.inLane.UpperLane.tombPool(), t.inLane.LowerLane.tombPool())))
                            : ((o = t.inLane.zombiePool().concat()), (a = t.inLane.tombPool().concat()));
                          var r = [];
                          o.forEach(function (e) {
                            n.judgeCrossRec(e.bodyRec) && r.push(e);
                          }),
                            r.forEach(function (n) {
                              n != e && t.dealDamageToTarget(n, !1, i);
                            }),
                            a.forEach(function (e) {
                              i.splashDamage > 0 &&
                                n.judgeCrossRec(e.bodyRec) &&
                                e.dealDamage(i.splashDamage * (t.havePeaBuff ? 1.5 : 1) * t.damageScale);
                            });
                        }
                      });
                  }),
                  (a.rotate = function () {
                    if (this.followRotation) {
                      var e = this.linearVelocity;
                      this.node.angle = (Math.atan2(e.y + this.bodyLinearVelocity, e.x) / Math.PI) * 180;
                    }
                  }),
                  (a.hitFloor = function (e) {
                    this.enemyType != pi.plant && this.dealSplashDamage(), this.specialOnGroundHit(this.inLnC) && this.pop();
                  }),
                  (a.hitBorderOrGround = function (e) {
                    if (
                      !this.fallingInSky &&
                      (((this.shadeWorldPosition.x <= 0 && this.linearVelocity.x <= 0) ||
                        (this.shadeWorldPosition.x >= 1200 && this.linearVelocity.x >= 0) ||
                        (this.shadeWorldPosition.y < -100 && this.linearVelocity.y <= 0) ||
                        (this.shadeWorldPosition.y >= 700 && this.linearVelocity.y >= 0)) &&
                        this.fade(),
                      this.height <= 0)
                    ) {
                      this.height = 0;
                      var i = this.inLnC.getTileType();
                      i == C.sky
                        ? ((this.linearVelocity = new d(0, 0)),
                          (this.acceleration = new d(0, 0)),
                          (this.deceleration = new d(0, 0)),
                          (this.gravity = 0),
                          this.fallInSky(!1),
                          this.fade(!1))
                        : i == C.sea
                        ? ((this.linearVelocity = new d(0, 0)),
                          (this.acceleration = new d(0, 0)),
                          (this.deceleration = new d(0, 0)),
                          k.spawnSeaSplash(this.inLane.LaneIndex, this.node.worldPosition),
                          this.fade())
                        : i == C.water
                        ? (k.spawnWaterSplash(this.inLane.LaneIndex, this.node.worldPosition), this.fade())
                        : this.hitFloor(e);
                    }
                  }),
                  (a.specialOnGroundHit = function (e) {
                    return !0;
                  }),
                  (a.setKnockBack = function (e) {
                    return (this.knockbackDistance_ = e), this;
                  }),
                  (a.setDamage = function (e) {
                    return (this.damage_ = e), this;
                  }),
                  (a.setStun = function (e) {
                    return (this.stun_ = e), this;
                  }),
                  (a.setButter = function (e) {
                    return (this.butter_ = e), this;
                  }),
                  (a.playPopSound = function () {
                    B.play(f.getRandom(this.PopSound), this.popSoundVolume, 0.1);
                  }),
                  (a.playParticle = function () {
                    if ((this.screenShaker && I.shakeScreen(), this.PopParticle.length)) {
                      var e;
                      ((e = L.instantiatePooly(f.getRandom(this.PopParticle))).parent = this.node.parent),
                        e.setScale(this.linearVelocity.x > 0 ? this.node.scale.x : -this.node.scale.x, this.node.scale.y);
                      var i = this.realWorldPosition;
                      e.setWorldPosition(
                        this.particleAtFoot ? new p(this._worldPositionX, this._worldPositionY) : new p(i.x, i.y)
                      );
                    }
                  }),
                  (a.selfDisable = function (e) {
                    'die' == e.name &&
                      ((this.linearVelocity = new d(0, 0)),
                      (this.bodyLinearVelocity = 0),
                      (this.gravity = 0),
                      L.destroyPooly(this.node));
                  }),
                  (a.characterOnLoad = function () {
                    this.getComponent(b) || this.addComponent(b),
                      (this.db.enableBatch = !0),
                      this.db.on(m.EventObject.FRAME_EVENT, this.animationListener, this),
                      this.db.on(m.EventObject.LOOP_COMPLETE, this.animationCompleteListener, this);
                  }),
                  (a.addPeaBuff = function () {
                    this.havePeaBuff ||
                      this.peaBuff ||
                      ((this.havePeaBuff = !0),
                      (this.peaBuff = L.instantiatePooly(k.prjPeaBuff())),
                      (this.peaBuff.parent = this.node));
                  }),
                  (a.initialize = function () {
                    (this.detectEnemyOn = !0),
                      (this.maxDistance_ = this.maxDistance),
                      (this.switching = !1),
                      (this.size_ = this.size),
                      this.setKnockBack(this.knockbackDistance),
                      this.setDamage(this.damage),
                      this.setStun(this.stun),
                      this.setButter(this.butter),
                      this.setSplashDamages(this.splashDamages),
                      (this.poison_ = this.poison),
                      (this.chill_ = this.chill),
                      (this.freeze_ = this.freeze),
                      this._setBodyRec(new d(), new d()),
                      (this.dead = !1),
                      (this.parentLock = !1),
                      (this.tileLiquid_ = this.tileLiquid),
                      (this.tileLiquidDuration_ = this.tileLiquidDuration),
                      -1 != this.db.armature().animation.animationNames.indexOf('Idle') && this.db.playAnimation('Idle'),
                      this.db.addEventListener(m.EventObject.FRAME_EVENT, this.selfDisable, this);
                  }),
                  (a.setLockParent = function (e) {
                    this.inLane && this.inLane.deletePlantPrj(this),
                      this.node.setParent(v.getLane(e).getComponent(E).prjLayer, !0);
                    var i = v.getLane(e).getComponent(E);
                    i.addPlantPrj(this), (this.inLane = i), (this.parentLock = !0);
                  }),
                  (a.specialOnLaneChange = function (e, i) {}),
                  (a.characterOnLaneChange = function (e, i) {
                    this.parentLock ||
                      (this.node.setParent(i.prjLayer, !0),
                      null == e || e.deletePlantPrj(this),
                      null == i || i.addPlantPrj(this)),
                      this.specialOnLaneChange(e, i);
                  }),
                  (a.characterOnEnable = function () {
                    this.initialize();
                  }),
                  (a.characterOnDisable = function () {
                    (this.targetLocked = null), S.disableProjectile(this.node);
                  }),
                  (a.fade = function (e) {
                    void 0 === e && (e = !0),
                      (this.dead = e),
                      this._setBodyRec(new d(), new d()),
                      (this.targetLocked = null),
                      (this.linearVelocity = new d(0, 0)),
                      (this.bodyLinearVelocity = 0),
                      (this.gravity = 0),
                      (this.acceleration = new d()),
                      (this.deceleration = new d()),
                      this.havePeaBuff &&
                        this.peaBuff &&
                        ((this.havePeaBuff = !1), L.destroyPooly(this.peaBuff), (this.peaBuff = null));
                  }),
                  (a.onPop = function () {}),
                  (a.pop = function () {
                    var e;
                    this.plantHeatOnPop && (null == (e = this.inLnC) || e.plantHeat()),
                      this.tileLiquid_ > 0 &&
                        this.tileLiquidDuration_ > 0 &&
                        this.inLnC.addTileLiquid(this.tileLiquid_, this.tileLiquidDuration_),
                      this.playParticle(),
                      this.playPopSound(),
                      this.onPop(),
                      this.fade();
                  }),
                  (a.dealDamageToTarget = function (e, i, t) {
                    var n;
                    void 0 === i && (i = !0), void 0 === t && (t = null);
                    var o = null;
                    this.particleAtFoot
                      ? (o = new d(e._worldPositionX - this._worldPositionX, e.zombieHeight).normalize().multiplyScalar(35))
                      : this.gravity > 0 && this.damage >= 40 && (o = new d(this.linearVelocity.x, this.bodyLinearVelocity)),
                      t ||
                        (t = new di(
                          this.damage_,
                          new s(),
                          this.chill_,
                          this.freeze_,
                          this.butter_,
                          this.poison_,
                          this.stun_,
                          this.knockbackDistance_
                        )),
                      i && this.dealSplashDamage(e),
                      e.knockBackable && t.knockbackDistance && e.knockBackBy(new d(t.knockbackDistance, 0), !0, 0.1, !0, !1),
                      t.stunDuration && e.stun(t.stunDuration),
                      this.balloonKiller && i && (null == e || null == (n = e.getComponent(R)) || n.destroyBalloon()),
                      t.butterDuration > 0 && e.setButter(t.butterDuration),
                      t.poison.isValid() && e.setPoison(t.poison.DPS, t.poison.duration),
                      t.chillDuration > 0 && e.setChill(t.chillDuration),
                      t.freezeDuration > 0 && e.setFreeze(t.freezeDuration),
                      t.splashDamage > 0 &&
                        e.dealDamage(
                          t.splashDamage * this.damageScale * (this.havePeaBuff ? 1.5 : 1),
                          this.armorProtection,
                          this.armorKnockSound,
                          this.bodyKnockSound,
                          o,
                          this.damageType
                        );
                  }),
                  (a.dealDamageToTargetPlant = function (e) {
                    e.dealDamage(this.damage * this.damageScale, this.bodyLinearVelocity < 0 ? 1 : 2);
                  }),
                  (a.detectEnemyNormal = function (e) {
                    var i,
                      t,
                      n = this;
                    if (this.inLane && this.detectEnemyOn)
                      if (
                        (null != (i = this.targetLocked) &&
                          null != (i = i.getComponent(P)) &&
                          i.dead &&
                          (this.targetLocked = null),
                        this.enemyType == pi.zombie)
                      ) {
                        var o,
                          a = null;
                        if (
                          (null == (o = this.inLane) ||
                            o.zombiePool().forEach(function (e) {
                              var i;
                              (n.targetLocked && (null == (i = a) ? void 0 : i.node) == n.targetLocked) ||
                                (e.bodyRec.judgeCrossRec(n.bodyRec()) &&
                                  (!n.targetLocked || (n.targetLocked && e.node == n.targetLocked)) &&
                                  (!a || e.bodyRec.prjX().x < a.bodyRec.prjX().x) &&
                                  (a = e));
                            }),
                          a)
                        )
                          this.dealDamageToTarget(a), this.pop();
                        else {
                          var r,
                            l = null;
                          null == (r = this.inLane) ||
                            r.tombPool().forEach(function (e) {
                              e.bodyRec.judgeCrossRec(n.bodyRec()) &&
                                (!n.targetLocked || (n.targetLocked && e.node == n.targetLocked)) &&
                                (l = e);
                            }),
                            l &&
                              (l.dealDamage(this.damage_ * this.damageScale * (this.havePeaBuff ? 1.5 : 1)),
                              this.dealSplashDamage(null, l),
                              this.pop());
                        }
                      } else
                        this.enemyType == pi.plant &&
                          (null == (t = this.inLane) ||
                            t.plantPool().forEach(function (e) {
                              n.dead ||
                                (e.bodyRec.judgeCrossRec(n.bodyRec()) &&
                                  (!n.targetLocked || (n.targetLocked && e.node == n.targetLocked)) &&
                                  (n.dealDamageToTargetPlant(e), n.pop()));
                            }));
                  }),
                  (a.detectEnemy = function (e) {
                    this.detectEnemyNormal(e);
                  }),
                  (a.move = function (e) {
                    var i = this.realWorldPosition.clone(),
                      t = 0.5 * e * 60,
                      n = 0.55 * e * 60,
                      o = this.shadeWorldPosition,
                      a = this.height,
                      r = this.linearVelocity;
                    if (
                      (this.bodyOmega && (this.node.angle += 60 * this.bodyOmega * e),
                      (this.worldPosition = new d(o.x + r.x * t, o.y + r.y * t)),
                      (this.height = Math.max(a + this.bodyLinearVelocity * t, 0)),
                      (this.bodyLinearVelocity -= this.gravity * n),
                      0 != this.acceleration.x || 0 != this.acceleration.y)
                    ) {
                      var l = this.linearVelocity.clone().add(this.acceleration.clone().multiplyScalar(60 * e));
                      Math.abs(l.x) < Math.abs(this.linearVelocity.x) && (l.x = this.linearVelocity.x),
                        Math.abs(l.y) < Math.abs(this.linearVelocity.y) && (l.y = this.linearVelocity.y),
                        (this.linearVelocity = l);
                    }
                    if (0 != this.deceleration.x || 0 != this.deceleration.y) {
                      var s = this.linearVelocity.clone().add(this.deceleration.clone().multiplyScalar(60 * e));
                      s.x * this.linearVelocity.x <= 0
                        ? (s.x = 0)
                        : Math.abs(s.x) > Math.abs(this.linearVelocity.x) && (s.x = this.linearVelocity.x),
                        s.y * this.linearVelocity.y <= 0
                          ? (s.y = 0)
                          : Math.abs(s.y) > Math.abs(this.linearVelocity.y) && (s.y = this.linearVelocity.y),
                        (this.linearVelocity = s);
                    }
                    var h = this.realWorldPosition.clone();
                    this._setBodyRec(i, h);
                  }),
                  (a.characterUpdate = function (e) {
                    this.dead ||
                      this.fallingInSky ||
                      (this.rotate(), this.switching || this.move(e), this.detectEnemy(e), this.hitBorderOrGround(e));
                  }),
                  (a.characterLateUpdate = function () {
                    var e;
                    this.dead && (null == (e = this.inLane) || e.deletePlantPrj(this), L.destroyPooly(this.node));
                  }),
                  i
                );
              })(y)).prototype,
              'showCommonShotFeaturesInEditor',
              [$],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return !0;
                },
              }
            )),
            (Fe = i(Ie.prototype, 'particleAtFoot', [ee], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !1;
              },
            })),
            (Ve = i(Ie.prototype, 'canBeYellowIgnited', [ie], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !1;
              },
            })),
            (xe = i(Ie.prototype, 'canBeBlueIgnited', [te], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !1;
              },
            })),
            (Ue = i(Ie.prototype, 'yellowIgnited', [ne], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (Te = i(Ie.prototype, 'blueIgnited', [oe], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (qe = i(Ie.prototype, 'armorKnockSound', [ae], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !0;
              },
            })),
            (Oe = i(Ie.prototype, 'bodyKnockSound', [re], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !0;
              },
            })),
            (je = i(Ie.prototype, 'armorProtection', [le], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !0;
              },
            })),
            (Me = i(Ie.prototype, 'onFire', [se], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !1;
              },
            })),
            (Ke = i(Ie.prototype, 'damageScale', [he], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 1;
              },
            })),
            (Ae = i(Ie.prototype, 'size', [ce], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new s(12, 12);
              },
            })),
            (We = i(Ie.prototype, 'splashDamages', [ue], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (He = i(Ie.prototype, 'tileLiquid', [pe], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return _.none;
              },
            })),
            (Ne = i(Ie.prototype, 'tileLiquidDuration', [de], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 0;
              },
            })),
            (Xe = i(Ie.prototype, 'damageType', [be], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return w.physicle;
              },
            })),
            (Ge = i(Ie.prototype, 'poison', [me], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new g(0, 0);
              },
            })),
            (Ye = i(Ie.prototype, 'chill', [fe], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 0;
              },
            })),
            (Ze = i(Ie.prototype, 'freeze', [Le], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 0;
              },
            })),
            (Je = i(Ie.prototype, 'followRotation', [ye], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !1;
              },
            })),
            (Qe = i(Ie.prototype, 'screenShaker', [ge], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !1;
              },
            })),
            ($e = i(Ie.prototype, 'balloonKiller', [we], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !1;
              },
            })),
            (ei = i(Ie.prototype, 'knockbackDistance', [Pe], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 0;
              },
            })),
            (ii = i(Ie.prototype, 'projectileType', [ve], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return ui.pea;
              },
            })),
            (ti = i(Ie.prototype, 'PopSound', [De], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (ni = i(Ie.prototype, 'PopParticle', [ze], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (oi = i(Ie.prototype, 'damage', [Se], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 20;
              },
            })),
            (ai = i(Ie.prototype, 'stun', [ke], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 0;
              },
            })),
            (ri = i(Ie.prototype, 'butter', [_e], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 0;
              },
            })),
            (li = i(Ie.prototype, 'popSoundVolume', [Ce], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 1;
              },
            })),
            (si = i(Ie.prototype, 'plantHeatOnPop', [Ee], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !1;
              },
            })),
            (Be = Ie))
          ) || Be)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Conveyor.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './SoundRescourses.ts',
    './SoundsController.ts',
    './Plants.ts',
    './CharacterManager.ts',
    './CardFeatureTotal.ts',
    './NodePools.ts',
    './Droppings.ts',
    './cardSelectAlmanac.ts',
    './UI.ts',
    './levelController.ts',
  ],
  function (t) {
    var n, o, e, i, a, r, s, l, c, u, d, h, f, p, g, y, C, v, w, m, P, S, D, E, M, b, x;
    return {
      setters: [
        function (t) {
          (n = t.applyDecoratedDescriptor),
            (o = t.initializerDefineProperty),
            (e = t.inheritsLoose),
            (i = t.assertThisInitialized);
        },
        function (t) {
          (a = t.cclegacy),
            (r = t._decorator),
            (s = t.Node),
            (l = t.dragonBones),
            (c = t.Vec3),
            (u = t.tween),
            (d = t.input),
            (h = t.Input),
            (f = t.AudioSource),
            (p = t.EventMouse),
            (g = t.KeyCode),
            (y = t.Component);
        },
        function (t) {
          C = t.sounds;
        },
        function (t) {
          v = t.SoundFXController;
        },
        function (t) {
          w = t.PlantEnum;
        },
        function (t) {
          m = t.PlantPool;
        },
        function (t) {
          P = t.CardFeatureTotal;
        },
        function (t) {
          (S = t.destroyPooly), (D = t.NodePools);
        },
        function (t) {
          E = t.droppings;
        },
        function (t) {
          M = t.cardSelectAlmanac;
        },
        function (t) {
          b = t.UIInGame;
        },
        function (t) {
          x = t.LevelPlay;
        },
      ],
      execute: function () {
        var k, K, T, F, W, O, _, L, z, I, N, A, U, B, Y, R, X, V, Z, q, G, j, H;
        a._RF.push({}, '0294doUe4ZF+59/PPrQglV6', 'Conveyor', void 0);
        var Q = r.ccclass,
          J = r.property,
          $ =
            (t('ConveyorDropDelayCondition', function () {
              (this.Delay = 0), (this.MaxPackets = 100);
            }),
            t('ConveyorPlant', function () {
              (this.MaxCount = 1 / 0),
                (this.MaxWeightFactor = 1),
                (this.MinCount = -1),
                (this.MinWeightFactor = 1),
                (this.PlantType = w.Peashooter),
                (this.Weight = 15);
            }),
            t('ConveyorSpeedCondition', function () {
              (this.MaxPackets = 0), (this.Speed = 100);
            }),
            (k = Q('Slot In Conveyor')),
            (K = J(s)),
            k(
              ((W = n(
                (F = function () {
                  (this.card = null), o(this, 'slot', W, this);
                }).prototype,
                'slot',
                [K],
                {
                  configurable: !0,
                  enumerable: !0,
                  writable: !0,
                  initializer: function () {
                    return null;
                  },
                }
              )),
              (T = F))
            ) || T);
        t(
          'Conveyor',
          ((O = Q('Conveyor')),
          (_ = J(l.ArmatureDisplay)),
          (L = J(l.ArmatureDisplay)),
          (z = J($)),
          (I = J($)),
          (N = J(s)),
          (A = J(s)),
          (U = J(s)),
          O(
            (((H = (function (t) {
              function n() {
                for (var n, e = arguments.length, a = new Array(e), r = 0; r < e; r++) a[r] = arguments[r];
                return (
                  ((n = t.call.apply(t, [this].concat(a)) || this).dropDelayConditions = []),
                  (n.dropCountdown = 0),
                  (n.plantList = []),
                  (n.speedConditions = []),
                  o(n, 'conveyor1', R, i(n)),
                  o(n, 'conveyor2', X, i(n)),
                  o(n, 'lane1slots', V, i(n)),
                  o(n, 'lane2slots', Z, i(n)),
                  o(n, 'lane1', q, i(n)),
                  o(n, 'lane2', G, i(n)),
                  o(n, 'cards', j, i(n)),
                  (n.shown = !1),
                  (n.audioSource = null),
                  (n.oldPos = new c()),
                  (n.willKeychooseCard = void 0),
                  n
                );
              }
              e(n, t), (n.createConveyor = function () {});
              var a = n.prototype;
              return (
                (a.show = function () {
                  this.shown ||
                    (C.playConveyorArrive(),
                    this.audioSource.play(),
                    (this.shown = !0),
                    u(this.node).to(0.4, { position: this.oldPos }, { easing: 'quadOut' }).start(),
                    d.on(h.EventType.KEY_DOWN, this.onKeyDown, this));
                }),
                (a.hide = function () {
                  this.shown &&
                    (this.audioSource.stop(),
                    (this.shown = !1),
                    u(this.node)
                      .by(0.4, { position: new c(0, 1e3, 0) }, { easing: 'quadOut' })
                      .start(),
                    d.off(h.EventType.KEY_DOWN, this.onKeyDown, this));
                }),
                (a.addCard = function (t) {
                  this.plantList.push(t);
                }),
                (a.removeCard = function (t) {
                  var n = this;
                  this.plantList.concat().forEach(function (o) {
                    if (o.PlantType == t) {
                      var e = n.plantList.indexOf(o);
                      n.plantList.splice(e, 1);
                    }
                  });
                }),
                (a.onLoad = function () {
                  (this.dropCountdown = 0),
                    (this.audioSource = this.getComponent(f)),
                    (this.shown = !1),
                    (n.component = this),
                    (this.oldPos = this.node.position.clone()),
                    this.node.position.add3f(0, 1e3, 0);
                }),
                (a.spliceCard = function (t) {
                  var n = this;
                  if (null != t) {
                    var o = !1;
                    if (
                      (this.lane1slots.forEach(function (e) {
                        o ||
                          (t == e.card &&
                            (e.card.node.off(s.EventType.MOUSE_DOWN, n.cardMouseDown, n),
                            S(e.card.node),
                            (e.card = null),
                            (o = !0)));
                      }),
                      this.lane2slots.forEach(function (e) {
                        o ||
                          (t == e.card &&
                            (e.card.node.off(s.EventType.MOUSE_DOWN, n.cardMouseDown, n),
                            S(e.card.node),
                            (e.card = null),
                            (o = !0)));
                      }),
                      o)
                    ) {
                      for (var e = 0; e < this.lane1slots.length - 1; e++)
                        !this.lane1slots[e].card &&
                          this.lane1slots[e + 1].card &&
                          ((this.lane1slots[e].card = this.lane1slots[e + 1].card), (this.lane1slots[e + 1].card = null));
                      for (var i = 0; i < this.lane2slots.length - 1; i++)
                        !this.lane2slots[i].card &&
                          this.lane2slots[i + 1].card &&
                          ((this.lane2slots[i].card = this.lane2slots[i + 1].card), (this.lane2slots[i + 1].card = null));
                      (this.dropCountdown = Math.min(this.dropCountdown, this.getDelay())), (this.willKeychooseCard = null);
                    }
                  }
                }),
                (a.getCards = function () {
                  var t = [];
                  return (
                    this.lane1slots.concat(this.lane2slots).forEach(function (n) {
                      n.card && t.push(n.card);
                    }),
                    t
                  );
                }),
                (a.chooseCard = function (t, n) {
                  b.uiingame.currentFreeSeedPacket != t
                    ? (b.uiingame.currentFreeSeedPacket && (b.uiingame.currentFreeSeedPacket.getComponent(M).index = 0),
                      (b.uiingame.index = -1),
                      b.uiingame.tryChangingIndex(-1),
                      (b.uiingame.currentFreeSeedPacket = t),
                      (n.index = 1),
                      b.uiingame.tryChangingIndex(8),
                      (this.willKeychooseCard = t))
                    : ((b.uiingame.index = -1), b.uiingame.tryChangingIndex(-1));
                }),
                (a.sendPlant = function (t, n) {
                  if (null != t) {
                    var o = this.lane2slots,
                      e = this.lane2;
                    1 == n && ((o = this.lane1slots), (e = this.lane1));
                    for (var i = null, a = 0; a < o.length; a++)
                      if (null == o[a].card) {
                        i = o[a];
                        break;
                      }
                    if (!i) return;
                    var r = D.instantiatePooly(E.PlantSeedPacket);
                    (r.parent = this.cards), (r.worldPosition = e.worldPosition);
                    var l = r.getComponent(P);
                    l.cardGrouper(t);
                    var c = l.getComponent(M);
                    (c.free = !0), (c.suncostShown = !1), (i.card = l), r.on(s.EventType.MOUSE_DOWN, this.cardMouseDown, this);
                  }
                }),
                (a.cardMouseDown = function (t) {
                  if (t.getButton() == p.BUTTON_LEFT) {
                    var n = t.currentTarget.getComponent(M),
                      o = n.getComponent(P);
                    this.chooseCard(o, n);
                  }
                }),
                (a.getRandomPlantByWeight = function (t, n) {
                  var o = this,
                    e = null,
                    i = [],
                    a = 0,
                    r = m.pool().concat(),
                    s = this.plantList.concat();
                  this.schedule(
                    function () {
                      if (s[i.length]) {
                        var l = o.getPlantWeight(s[i.length], r);
                        if (((a += l), i.push(a), i.length == s.length)) {
                          for (var c = Math.random() * a, u = 0; u < i.length; u++)
                            if (c < i[u]) {
                              (e = o.plantList[u].PlantType), o.sendPlant(e, t <= n ? 1 : 2);
                              break;
                            }
                          o.dropCountdown = o.getDelay();
                        }
                      }
                    },
                    0.033,
                    s.length,
                    0
                  );
                }),
                (a.getPlantWeight = function (t, n) {
                  if (t) {
                    var o = 0;
                    n.concat().forEach(function (e) {
                      if (!(o >= t.MaxCount) && e.ID == t.PlantType) {
                        o += e.plantCount();
                        var i = n.indexOf(e);
                        -1 != i && n.splice(i, 1);
                      }
                    }),
                      o < t.MaxCount &&
                        this.lane1slots.concat(this.lane2slots).forEach(function (n) {
                          var e;
                          (null == n || null == (e = n.card) ? void 0 : e.ID) == t.PlantType && o++;
                        });
                    var e = t.Weight + 0;
                    return o >= t.MaxCount && (e *= t.MaxWeightFactor), o <= t.MinCount && (e *= t.MinWeightFactor), e;
                  }
                }),
                (a.getDelay = function () {
                  var t,
                    n = 0;
                  this.lane1slots.concat(this.lane2slots).forEach(function (t) {
                    t.card && n++;
                  });
                  var o = 1 / 0,
                    e = 1 / 0,
                    i = null == (t = this.dropDelayConditions) ? void 0 : t.concat();
                  i || (i = []);
                  for (var a = 0; a < i.length; a++)
                    n <= i[a].MaxPackets && o > i[a].MaxPackets && ((e = i[a].Delay), (o = i[a].MaxPackets));
                  return console.log(n, e), e;
                }),
                (a.getSpeed = function () {
                  if (!x.gameStarted || x.component.gameWon) return 0;
                  var t = 0;
                  this.lane1slots.concat(this.lane2slots).forEach(function (n) {
                    n.card && t++;
                  });
                  var n = 100;
                  return (
                    this.speedConditions.forEach(function (o) {
                      t > o.MaxPackets && 0 <= o.MaxPackets && (n = o.Speed);
                    }),
                    n
                  );
                }),
                (a.onKeyDown = function (t) {
                  if (t.keyCode == g.KEY_Z || t.keyCode == g.KEY_X) {
                    var n = this.getCards();
                    if (0 == n.length) return;
                    if (8 != b.index)
                      this.willKeychooseCard
                        ? this.chooseCard(this.willKeychooseCard, this.willKeychooseCard.getComponent(M))
                        : this.chooseCard(n[0], n[0].getComponent(M));
                    else if (this.willKeychooseCard) {
                      var o = n.indexOf(this.willKeychooseCard);
                      t.keyCode == g.KEY_Z ? o-- : t.keyCode == g.KEY_X && o++,
                        o < 0 ? (o = n.length - 1) : (o %= n.length),
                        this.chooseCard(n[o], n[o].getComponent(M));
                    }
                  }
                }),
                (a.update = function (t) {
                  this.audioSource.volume = 0.05 * v.SoundFXVolume;
                  var n = this.getSpeed();
                  if (n > 0 && (this.dropCountdown > 0 && (this.dropCountdown -= t), this.shown && this.dropCountdown <= 0)) {
                    var o = 0;
                    this.lane1slots.forEach(function (t) {
                      t.card && o++;
                    });
                    var e = 0;
                    this.lane2slots.forEach(function (t) {
                      t.card && e++;
                    }),
                      (this.dropCountdown = 1 / 0),
                      this.getRandomPlantByWeight(o, e);
                  }
                  (this.conveyor1.timeScale = n / 100),
                    (this.conveyor2.timeScale = n / 100),
                    n > 0 &&
                      this.lane1slots.concat(this.lane2slots).forEach(function (o) {
                        if (null != o.card && o.card.node.worldPosition.x > o.slot.worldPosition.x) {
                          var e = o.card.node.worldPosition.clone();
                          o.card.node.worldPosition = new c(e.x - (t * n) / 1.85, e.y, e.z);
                        }
                      });
                }),
                n
              );
            })(y)).component = void 0),
            (R = n((Y = H).prototype, 'conveyor1', [_], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (X = n(Y.prototype, 'conveyor2', [L], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (V = n(Y.prototype, 'lane1slots', [z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Z = n(Y.prototype, 'lane2slots', [I], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (q = n(Y.prototype, 'lane1', [N], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (G = n(Y.prototype, 'lane2', [A], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (j = n(Y.prototype, 'cards', [U], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (B = Y))
          ) || B)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/CowboyBasicZombie.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Zombie.ts'],
  function (t) {
    var i, e, o, n, a, r, s, l, c, h, u;
    return {
      setters: [
        function (t) {
          (i = t.applyDecoratedDescriptor),
            (e = t.inheritsLoose),
            (o = t.initializerDefineProperty),
            (n = t.assertThisInitialized),
            (a = t.createClass);
        },
        function (t) {
          (r = t.cclegacy), (s = t._decorator), (l = t.Prefab), (c = t.CCFloat), (h = t.Vec3);
        },
        function (t) {
          u = t.Zombie;
        },
      ],
      execute: function () {
        var p, b, H, d, f, m, v;
        r._RF.push({}, '05629xIOKpOB4rSKMfv4RIu', 'CowboyBasicZombie', void 0);
        var y = s.ccclass,
          g = s.property;
        t(
          'CowboyBasicZombie',
          ((p = y('CowboyBasicZombie')),
          (b = g(l)),
          (H = g(c)),
          p(
            ((m = i(
              (f = (function (t) {
                function i() {
                  for (var i, e = arguments.length, a = new Array(e), r = 0; r < e; r++) a[r] = arguments[r];
                  return (
                    (i = t.call.apply(t, [this].concat(a)) || this),
                    o(i, 'zombieHat', m, n(i)),
                    o(i, 'dropHatHitPoint', v, n(i)),
                    (i._haveHat = !0),
                    i
                  );
                }
                e(i, t);
                var r = i.prototype;
                return (
                  (r.onArmorAdded = function (t) {
                    this.haveHat = !1;
                  }),
                  (r.specialZombieOnEnable = function () {
                    this.armors.length <= 0 ? (this.haveHat = !0) : (this.haveHat = !1);
                  }),
                  (r.dropHat = function () {
                    this.drop(
                      this.zombieHat,
                      this.zombieHeight,
                      new h(this.shadeSocket.worldPosition.x, this._worldPositionY, 0),
                      null,
                      this.inLane.zombieLayer
                    ).setSiblingIndex(this.node.getSiblingIndex() - 1),
                      (this.haveHat = !1);
                  }),
                  (r.onDamaged = function (t, i) {
                    this.haveHat && t > this.dropHatHitPoint && i <= this.dropHatHitPoint && this.dropHat();
                  }),
                  a(i, [
                    {
                      key: 'haveHat',
                      get: function () {
                        return this._haveHat;
                      },
                      set: function (t) {
                        var i;
                        null == this ||
                          null == (i = this.db) ||
                          null == (i = i.armature()) ||
                          null == (i = i.getSlot('hat_HEAD')) ||
                          i._setDisplayIndex(t ? 0 : -1),
                          (this._haveHat = t);
                      },
                    },
                  ]),
                  i
                );
              })(u)).prototype,
              'zombieHat',
              [b],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (v = i(f.prototype, 'dropHatHitPoint', [H], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 150;
              },
            })),
            (d = f))
          ) || d)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/CranJelly.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Peashooter.ts',
    './NodePools.ts',
    './Square.ts',
    './Character.ts',
    './Plant.ts',
  ],
  function (e) {
    var t, n, r, a, i, o, l, s, c, u, h, f, p, y;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (n = e.inheritsLoose),
            (r = e.initializerDefineProperty),
            (a = e.assertThisInitialized);
        },
        function (e) {
          (i = e.cclegacy), (o = e._decorator), (l = e.Prefab), (s = e.Vec3), (c = e.Vec2);
        },
        function (e) {
          u = e.peaShooter;
        },
        function (e) {
          h = e.NodePools;
        },
        function (e) {
          f = e.Square;
        },
        function (e) {
          p = e.CharacterType;
        },
        function (e) {
          y = e.Plant;
        },
      ],
      execute: function () {
        var P, b, d, v, C;
        i._RF.push({}, '779f1NAnaNMAr0lVYwAL9er', 'CranJelly', void 0);
        var m = o.ccclass,
          J = o.property;
        e(
          'CranJellyPlant',
          ((P = m('CranJellyPlant')),
          (b = J(l)),
          P(
            ((C = t(
              (v = (function (e) {
                function t() {
                  for (var t, n = arguments.length, i = new Array(n), o = 0; o < n; o++) i[o] = arguments[o];
                  return (t = e.call.apply(e, [this].concat(i)) || this), r(t, 'CranJellyPrj', C, a(t)), t;
                }
                n(t, e);
                var i = t.prototype;
                return (
                  (i.animationListener = function (e) {
                    if ('summon' == e.name) {
                      var t = h.instantiatePooly(this.CranJellyPrj);
                      u.shootOnePea(
                        t,
                        new s(f.getSquareWorldPosition(0, 0).x, this.inLane.floorY),
                        -5,
                        this.inLane.prjLayer,
                        new c(15, 0),
                        p.zombie
                      );
                    }
                  }),
                  (i.specialPlantOnEnable = function () {
                    var e = this;
                    this.scheduleOnce(function () {
                      e.die();
                    }, 0),
                      (this.foodable = !1),
                      (this.invincible = !0),
                      (this.eaterDetectable = !1),
                      (this.smasherDetectable = !1);
                  }),
                  t
                );
              })(y)).prototype,
              'CranJellyPrj',
              [b],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (d = v))
          ) || d)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/cranjellyProjectile.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './commonShot.ts', './LnC.ts'],
  function (e) {
    var n, t, o, i, a, l, r, c, d, u;
    return {
      setters: [
        function (e) {
          (n = e.applyDecoratedDescriptor),
            (t = e.inheritsLoose),
            (o = e.initializerDefineProperty),
            (i = e.assertThisInitialized);
        },
        function (e) {
          (a = e.cclegacy), (l = e._decorator), (r = e.CCFloat);
        },
        function (e) {
          (c = e.ProjectileEnemyType), (d = e.commonShot);
        },
        function (e) {
          u = e.TileLiquidEnum;
        },
      ],
      execute: function () {
        var s, p, y, h, f;
        a._RF.push({}, '11147O0PlhImq2C02SJplO+', 'cranjellyProjectile', void 0);
        var m = l.ccclass,
          g = l.property;
        e(
          'cranjellyPrj',
          ((s = m('cranjellyPrj')),
          (p = g(r)),
          s(
            ((f = n(
              (h = (function (e) {
                function n() {
                  for (var n, t = arguments.length, a = new Array(t), l = 0; l < t; l++) a[l] = arguments[l];
                  return (n = e.call.apply(e, [this].concat(a)) || this), o(n, 'DPS', f, i(n)), (n.defeatedCount = 0), n;
                }
                t(n, e);
                var a = n.prototype;
                return (
                  (a.animationListener = function (e) {
                    var n;
                    'playIdle' == e.name && ((this.switching = !1), null == (n = this.db) || n.playAnimation('Idle0', 1 / 0));
                  }),
                  (a.animationCompleteListener = function () {
                    var e;
                    this.switching && ((this.switching = !1), null == (e = this.db) || e.playAnimation('Idle0', 1 / 0));
                  }),
                  (a.detectEnemy = function (e) {
                    var n,
                      t,
                      o,
                      i = this;
                    this.enemyType == c.zombie
                      ? (null == (t = this.inLane) ||
                          t
                            .zombiePool()
                            .concat()
                            .forEach(function (n) {
                              if (
                                (!i.targetLocked || (null == n ? void 0 : n.node) != i.targetLocked) &&
                                n.bodyRec.judgeCrossRec(i.bodyRec())
                              ) {
                                var t, o;
                                n.dealDamage(
                                  i.DPS * e,
                                  i.armorProtection,
                                  i.armorKnockSound,
                                  i.bodyKnockSound,
                                  null,
                                  i.damageType,
                                  !0
                                );
                                var a = i.defeatedCount;
                                n.isAlive() || (i.inLnC.addTileLiquid(u.cranJellyJuice, 30), a++),
                                  i.defeatedCount < 4 && a >= 4 && (null == (t = i.db) || t.playAnimation('Idle1', 1 / 0)),
                                  i.defeatedCount < 8 && a >= 8 && (null == (o = i.db) || o.playAnimation('Idle2', 1 / 0)),
                                  (i.defeatedCount = a);
                              }
                            }),
                        null == (o = this.inLane) ||
                          o
                            .tombPool()
                            .concat()
                            .forEach(function (n) {
                              (i.targetLocked && (null == n ? void 0 : n.node) == i.targetLocked) ||
                                (n.bodyRec.judgeCrossRec(i.bodyRec()) && n.dealDamage(i.DPS * e));
                            }))
                      : this.enemyType == c.plant &&
                        (null == (n = this.inLane) ||
                          n.plantPool().forEach(function (e) {
                            i.dead ||
                              (e.bodyRec.judgeCrossRec(i.bodyRec()) &&
                                (!i.targetLocked || (i.targetLocked && e.node == i.targetLocked)) &&
                                (i.dealDamageToTargetPlant(e), i.pop()));
                          }));
                  }),
                  (a.pop = function () {}),
                  (a.characterOnEnable = function () {
                    var e;
                    (this.defeatedCount = 0),
                      this.initialize(),
                      (this.switching = !0),
                      null == (e = this.db) || e.playAnimation('Start', 1);
                  }),
                  n
                );
              })(d)).prototype,
              'DPS',
              [p],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 3e3;
                },
              }
            )),
            (y = h))
          ) || y)
        );
        a._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/CurrencyCount.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (e) {
  var t, n, r, o, a, i, s, u, l, h, c, f, p;
  return {
    setters: [
      function (e) {
        (t = e.applyDecoratedDescriptor),
          (n = e.inheritsLoose),
          (r = e.initializerDefineProperty),
          (o = e.assertThisInitialized),
          (a = e.createClass);
      },
      function (e) {
        (i = e.cclegacy),
          (s = e._decorator),
          (u = e.Label),
          (l = e.CCInteger),
          (h = e.UITransform),
          (c = e.Vec3),
          (f = e.tween),
          (p = e.Component);
      },
    ],
    execute: function () {
      var w, b, m, g, v, y, d, C, _;
      i._RF.push({}, 'e6e50mmoUtIBoehQwOpMZPz', 'CurrencyCount', void 0);
      var L = s.ccclass,
        V = s.property;
      e(
        'CurrencyCount',
        ((w = L('CurrencyCount')),
        (b = V(u)),
        (m = V(Boolean)),
        (g = V(l)),
        w(
          ((d = t(
            (y = (function (e) {
              function t() {
                for (var t, n = arguments.length, a = new Array(n), i = 0; i < n; i++) a[i] = arguments[i];
                return (
                  (t = e.call.apply(e, [this].concat(a)) || this),
                  r(t, 'showerLabel', d, o(t)),
                  r(t, 'thousandComma', C, o(t)),
                  (t._shownValue = 0),
                  r(t, 'maxWidth', _, o(t)),
                  (t._value = 0),
                  t
                );
              }
              return (
                n(t, e),
                (t.prototype.onValueSet = function (e) {}),
                a(t, [
                  {
                    key: 'shownValue',
                    get: function () {
                      return this._shownValue;
                    },
                    set: function (e) {
                      if (((this._shownValue = e), this.showerLabel)) {
                        var t = Math.round(e);
                        if (this.thousandComma) {
                          for (var n = []; t > 0; ) n.push(t % 1e3), (t = Math.floor(t / 1e3));
                          var r = '';
                          0 == Math.round(e)
                            ? (r = '0')
                            : n.reverse().forEach(function (e, t) {
                                for (var o = e.toString(); 0 != t && o.length < 3; ) o = '0' + o;
                                (r += o), t != n.length - 1 && (r += ',');
                              }),
                            (this.showerLabel.string = r);
                        } else this.showerLabel.string = Math.round(e).toString();
                        var o = Math.min(1, this.maxWidth / this.showerLabel.getComponent(h).width);
                        this.showerLabel.node.scale = new c(o, o, o);
                      }
                    },
                  },
                  {
                    key: 'value',
                    get: function () {
                      return this._value;
                    },
                    set: function (e) {
                      this.onValueSet(e),
                        Math.abs(e - this._value) < 2 ? (this.shownValue = e) : f(this).to(0.5, { shownValue: e }).start(),
                        (this._value = e);
                    },
                  },
                ]),
                t
              );
            })(p)).prototype,
            'showerLabel',
            [b],
            { configurable: !0, enumerable: !0, writable: !0, initializer: null }
          )),
          (C = t(y.prototype, 'thousandComma', [m], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return !0;
            },
          })),
          (_ = t(y.prototype, 'maxWidth', [g], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return 170;
            },
          })),
          (v = y))
        ) || v)
      );
      i._RF.pop();
    },
  };
});

System.register('chunks:///_virtual/debug-view-runtime-control.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (t) {
  var e, o, i, n, s, l, r, a, g, h, p, c, C, d, m, u, L;
  return {
    setters: [
      function (t) {
        (e = t.applyDecoratedDescriptor), (o = t.inheritsLoose), (i = t.initializerDefineProperty), (n = t.assertThisInitialized);
      },
      function (t) {
        (s = t.cclegacy),
          (l = t._decorator),
          (r = t.Node),
          (a = t.Color),
          (g = t.Canvas),
          (h = t.UITransform),
          (p = t.instantiate),
          (c = t.Label),
          (C = t.RichText),
          (d = t.Toggle),
          (m = t.Button),
          (u = t.director),
          (L = t.Component);
      },
    ],
    execute: function () {
      var f, M, b, v, T, S, x, E, I;
      s._RF.push({}, 'b2bd1+njXxJxaFY3ymm06WU', 'debug-view-runtime-control', void 0);
      var A = l.ccclass,
        y = l.property;
      t(
        'DebugViewRuntimeControl',
        ((f = A('internal.DebugViewRuntimeControl')),
        (M = y(r)),
        (b = y(r)),
        (v = y(r)),
        f(
          ((x = e(
            (S = (function (t) {
              function e() {
                for (var e, o = arguments.length, s = new Array(o), l = 0; l < o; l++) s[l] = arguments[l];
                return (
                  (e = t.call.apply(t, [this].concat(s)) || this),
                  i(e, 'compositeModeToggle', x, n(e)),
                  i(e, 'singleModeToggle', E, n(e)),
                  i(e, 'EnableAllCompositeModeButton', I, n(e)),
                  (e._single = 0),
                  (e.strSingle = [
                    'No Single Debug',
                    'Vertex Color',
                    'Vertex Normal',
                    'Vertex Tangent',
                    'World Position',
                    'Vertex Mirror',
                    'Face Side',
                    'UV0',
                    'UV1',
                    'UV Lightmap',
                    'Project Depth',
                    'Linear Depth',
                    'Fragment Normal',
                    'Fragment Tangent',
                    'Fragment Binormal',
                    'Base Color',
                    'Diffuse Color',
                    'Specular Color',
                    'Transparency',
                    'Metallic',
                    'Roughness',
                    'Specular Intensity',
                    'IOR',
                    'Direct Diffuse',
                    'Direct Specular',
                    'Direct All',
                    'Env Diffuse',
                    'Env Specular',
                    'Env All',
                    'Emissive',
                    'Light Map',
                    'Shadow',
                    'AO',
                    'Fresnel',
                    'Direct Transmit Diffuse',
                    'Direct Transmit Specular',
                    'Env Transmit Diffuse',
                    'Env Transmit Specular',
                    'Transmit All',
                    'Direct Internal Specular',
                    'Env Internal Specular',
                    'Internal All',
                    'Fog',
                  ]),
                  (e.strComposite = [
                    'Direct Diffuse',
                    'Direct Specular',
                    'Env Diffuse',
                    'Env Specular',
                    'Emissive',
                    'Light Map',
                    'Shadow',
                    'AO',
                    'Normal Map',
                    'Fog',
                    'Tone Mapping',
                    'Gamma Correction',
                    'Fresnel',
                    'Transmit Diffuse',
                    'Transmit Specular',
                    'Internal Specular',
                    'TT',
                  ]),
                  (e.strMisc = ['CSM Layer Coloration', 'Lighting With Albedo']),
                  (e.compositeModeToggleList = []),
                  (e.singleModeToggleList = []),
                  (e.miscModeToggleList = []),
                  (e.textComponentList = []),
                  (e.labelComponentList = []),
                  (e.textContentList = []),
                  (e.hideButtonLabel = void 0),
                  (e._currentColorIndex = 0),
                  (e.strColor = ['<color=#ffffff>', '<color=#000000>', '<color=#ff0000>', '<color=#00ff00>', '<color=#0000ff>']),
                  (e.color = [a.WHITE, a.BLACK, a.RED, a.GREEN, a.BLUE]),
                  e
                );
              }
              o(e, t);
              var s = e.prototype;
              return (
                (s.start = function () {
                  if (this.node.parent.getComponent(g)) {
                    var t = this.node.parent.getComponent(h),
                      e = 0.5 * t.width,
                      o = 0.5 * t.height,
                      i = 0.1 * e - e,
                      n = o - 0.1 * o,
                      s = this.node.getChildByName('MiscMode'),
                      l = p(s);
                    (l.parent = this.node), (l.name = 'Buttons');
                    var r = p(s);
                    (r.parent = this.node), (r.name = 'Titles');
                    for (var u = 0; u < 2; u++) {
                      var L = p(this.EnableAllCompositeModeButton.getChildByName('Label'));
                      L.setPosition(i + (u > 0 ? 450 : 150), n, 0), L.setScale(0.75, 0.75, 0.75), (L.parent = r);
                      var f = L.getComponent(c);
                      (f.string = u ? '----------Composite Mode----------' : '----------Single Mode----------'),
                        (f.color = a.WHITE),
                        (f.overflow = 0),
                        (this.labelComponentList[this.labelComponentList.length] = f);
                    }
                    n -= 20;
                    for (var M = 0, b = 0; b < this.strSingle.length; b++, M++) {
                      b === this.strSingle.length >> 1 && ((i += 200), (M = 0));
                      var v = b ? p(this.singleModeToggle) : this.singleModeToggle;
                      v.setPosition(i, n - 20 * M, 0), v.setScale(0.5, 0.5, 0.5), (v.parent = this.singleModeToggle.parent);
                      var T = v.getComponentInChildren(C);
                      (T.string = this.strSingle[b]),
                        (this.textComponentList[this.textComponentList.length] = T),
                        (this.textContentList[this.textContentList.length] = T.string),
                        v.on(d.EventType.TOGGLE, this.toggleSingleMode, this),
                        (this.singleModeToggleList[b] = v);
                    }
                    (i += 200),
                      this.EnableAllCompositeModeButton.setPosition(i + 15, n, 0),
                      this.EnableAllCompositeModeButton.setScale(0.5, 0.5, 0.5),
                      this.EnableAllCompositeModeButton.on(m.EventType.CLICK, this.enableAllCompositeMode, this),
                      (this.EnableAllCompositeModeButton.parent = l);
                    var S = this.EnableAllCompositeModeButton.getComponentInChildren(c);
                    this.labelComponentList[this.labelComponentList.length] = S;
                    var x = p(this.EnableAllCompositeModeButton);
                    x.setPosition(i + 90, n, 0),
                      x.setScale(0.5, 0.5, 0.5),
                      x.on(m.EventType.CLICK, this.changeTextColor, this),
                      (x.parent = l),
                      ((S = x.getComponentInChildren(c)).string = 'TextColor'),
                      (this.labelComponentList[this.labelComponentList.length] = S);
                    var E = p(this.EnableAllCompositeModeButton);
                    E.setPosition(i + 200, n, 0),
                      E.setScale(0.5, 0.5, 0.5),
                      E.on(m.EventType.CLICK, this.hideUI, this),
                      (E.parent = this.node.parent),
                      ((S = E.getComponentInChildren(c)).string = 'Hide UI'),
                      (this.labelComponentList[this.labelComponentList.length] = S),
                      (this.hideButtonLabel = S),
                      (n -= 40);
                    for (var I = 0; I < this.strMisc.length; I++) {
                      var A = p(this.compositeModeToggle);
                      A.setPosition(i, n - 20 * I, 0), A.setScale(0.5, 0.5, 0.5), (A.parent = s);
                      var y = A.getComponentInChildren(C);
                      (y.string = this.strMisc[I]),
                        (this.textComponentList[this.textComponentList.length] = y),
                        (this.textContentList[this.textContentList.length] = y.string),
                        (A.getComponent(d).isChecked = !!I),
                        A.on(d.EventType.TOGGLE, I ? this.toggleLightingWithAlbedo : this.toggleCSMColoration, this),
                        (this.miscModeToggleList[I] = A);
                    }
                    n -= 150;
                    for (var D = 0; D < this.strComposite.length; D++) {
                      var B = D ? p(this.compositeModeToggle) : this.compositeModeToggle;
                      B.setPosition(i, n - 20 * D, 0), B.setScale(0.5, 0.5, 0.5), (B.parent = this.compositeModeToggle.parent);
                      var w = B.getComponentInChildren(C);
                      (w.string = this.strComposite[D]),
                        (this.textComponentList[this.textComponentList.length] = w),
                        (this.textContentList[this.textContentList.length] = w.string),
                        B.on(d.EventType.TOGGLE, this.toggleCompositeMode, this),
                        (this.compositeModeToggleList[D] = B);
                    }
                  } else console.error('debug-view-runtime-control should be child of Canvas');
                }),
                (s.isTextMatched = function (t, e) {
                  var o = new String(t),
                    i = o.search('>');
                  return -1 === i ? t === e : (o = (o = o.substr(i + 1)).substr(0, o.search('<'))) === e;
                }),
                (s.toggleSingleMode = function (t) {
                  for (var e = u.root.debugView, o = t.getComponentInChildren(C), i = 0; i < this.strSingle.length; i++)
                    this.isTextMatched(o.string, this.strSingle[i]) && (e.singleMode = i);
                }),
                (s.toggleCompositeMode = function (t) {
                  for (var e = u.root.debugView, o = t.getComponentInChildren(C), i = 0; i < this.strComposite.length; i++)
                    this.isTextMatched(o.string, this.strComposite[i]) && e.enableCompositeMode(i, t.isChecked);
                }),
                (s.toggleLightingWithAlbedo = function (t) {
                  u.root.debugView.lightingWithAlbedo = t.isChecked;
                }),
                (s.toggleCSMColoration = function (t) {
                  u.root.debugView.csmLayerColoration = t.isChecked;
                }),
                (s.enableAllCompositeMode = function (t) {
                  var e = u.root.debugView;
                  e.enableAllCompositeMode(!0);
                  for (var o = 0; o < this.compositeModeToggleList.length; o++) {
                    this.compositeModeToggleList[o].getComponent(d).isChecked = !0;
                  }
                  var i = this.miscModeToggleList[0].getComponent(d);
                  (i.isChecked = !1),
                    (e.csmLayerColoration = !1),
                    ((i = this.miscModeToggleList[1].getComponent(d)).isChecked = !0),
                    (e.lightingWithAlbedo = !0);
                }),
                (s.hideUI = function (t) {
                  var e = this.node.getChildByName('Titles'),
                    o = !e.active;
                  (this.singleModeToggleList[0].parent.active = o),
                    (this.miscModeToggleList[0].parent.active = o),
                    (this.compositeModeToggleList[0].parent.active = o),
                    (this.EnableAllCompositeModeButton.parent.active = o),
                    (e.active = o),
                    (this.hideButtonLabel.string = o ? 'Hide UI' : 'Show UI');
                }),
                (s.changeTextColor = function (t) {
                  this._currentColorIndex++, this._currentColorIndex >= this.strColor.length && (this._currentColorIndex = 0);
                  for (var e = 0; e < this.textComponentList.length; e++)
                    this.textComponentList[e].string =
                      this.strColor[this._currentColorIndex] + this.textContentList[e] + '</color>';
                  for (var o = 0; o < this.labelComponentList.length; o++)
                    this.labelComponentList[o].color = this.color[this._currentColorIndex];
                }),
                (s.onLoad = function () {}),
                (s.update = function (t) {}),
                e
              );
            })(L)).prototype,
            'compositeModeToggle',
            [M],
            {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            }
          )),
          (E = e(S.prototype, 'singleModeToggle', [b], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return null;
            },
          })),
          (I = e(S.prototype, 'EnableAllCompositeModeButton', [v], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return null;
            },
          })),
          (T = S))
        ) || T)
      );
      s._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/DoomShroom.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './CherryBomb.ts',
    './NodePools.ts',
    './levelController.ts',
    './CharacterManager.ts',
    './Square.ts',
    './Zombie.ts',
    './SoundsController.ts',
  ],
  function (e) {
    var o, n, i, t, r, a, l, c, s, u, L, p, h, m, d, f, b;
    return {
      setters: [
        function (e) {
          (o = e.applyDecoratedDescriptor),
            (n = e.inheritsLoose),
            (i = e.initializerDefineProperty),
            (t = e.assertThisInitialized);
        },
        function (e) {
          (r = e.cclegacy), (a = e._decorator), (l = e.Color), (c = e.Prefab), (s = e.AudioClip), (u = e.AudioSource);
        },
        function (e) {
          L = e.CherryBombPlant;
        },
        function (e) {
          p = e.NodePools;
        },
        function (e) {
          h = e.LevelPlay;
        },
        function (e) {
          m = e.Rectangle;
        },
        function (e) {
          d = e.Square;
        },
        function (e) {
          f = e.zombieDamageType;
        },
        function (e) {
          b = e.SoundFXController;
        },
      ],
      execute: function () {
        var P, C, S, w, y, g, D, z, U;
        r._RF.push({}, 'c950ccw81lBlqi8LDZMzMjh', 'DoomShroom', void 0);
        var v = a.ccclass,
          R = a.property;
        e(
          'DoomShroomPlant',
          ((P = v('DoomShroomPlant')),
          (C = R(l)),
          (S = R(c)),
          (w = R(s)),
          P(
            ((D = o(
              (g = (function (e) {
                function o() {
                  for (var o, n = arguments.length, r = new Array(n), a = 0; a < n; a++) r[a] = arguments[a];
                  return (
                    (o = e.call.apply(e, [this].concat(r)) || this),
                    i(o, 'doomColor', D, t(o)),
                    i(o, 'doomParticle', z, t(o)),
                    i(o, 'doomSound', U, t(o)),
                    o
                  );
                }
                return (
                  n(o, e),
                  (o.prototype.animationListener = function (e) {
                    if ('explode' == e.name) {
                      var o = p.instantiatePooly(this.doomParticle);
                      (o.parent = this.inLane.prjLayer),
                        (o.worldPosition = this.node.worldPosition),
                        h.shakeScreen(3),
                        this.getComponent(u).playOneShot(this.doomSound, b.SoundFXVolume),
                        (h.screenFlashLeftColor = this.doomColor);
                      var n = this.inLane
                          .zombiePool()
                          .concat(
                            this.inLane.UpperLane.UpperLane.UpperLane.zombiePool(),
                            this.inLane.UpperLane.UpperLane.zombiePool(),
                            this.inLane.UpperLane.zombiePool(),
                            this.inLane.LowerLane.zombiePool(),
                            this.inLane.LowerLane.LowerLane.zombiePool(),
                            this.inLane.LowerLane.LowerLane.LowerLane.zombiePool()
                          ),
                        i = this.inLane
                          .tombPool()
                          .concat(
                            this.inLane.UpperLane.UpperLane.UpperLane.tombPool(),
                            this.inLane.UpperLane.UpperLane.tombPool(),
                            this.inLane.UpperLane.tombPool(),
                            this.inLane.LowerLane.tombPool(),
                            this.inLane.LowerLane.LowerLane.tombPool(),
                            this.inLane.LowerLane.LowerLane.LowerLane.tombPool()
                          ),
                        t = [
                          m.createRectangleNodeCenter(this.inLnC.node, 7 * d.SquareDisW, 3 * d.SquareDisH),
                          m.createRectangleNodeCenter(this.inLnC.node, 3 * d.SquareDisW, 7 * d.SquareDisH),
                          m.createRectangleNodeCenter(this.inLnC.node, 5 * d.SquareDisW, 5 * d.SquareDisH),
                        ],
                        r = [],
                        a = [];
                      t.forEach(function (e) {
                        n.forEach(function (o) {
                          -1 == r.indexOf(o) && e.judgeCrossRec(o.bodyRec) && r.push(o);
                        }),
                          i.forEach(function (o) {
                            -1 == a.indexOf(o) && e.judgeCrossRec(o.bodyRec) && a.push(o);
                          });
                      }),
                        r.forEach(function (e) {
                          e.dealDamage(1800, !1, !1, !1, null, f.fire);
                        }),
                        a.forEach(function (e) {
                          e.dealDamage(1800);
                        }),
                        this.inLnC.getAllPlants().forEach(function (e) {
                          e.kill();
                        }),
                        this.die(),
                        (this.inLnC.crackleCountdown = 180);
                    }
                  }),
                  o
                );
              })(L)).prototype,
              'doomColor',
              [C],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new l(255, 255, 255, 255);
                },
              }
            )),
            (z = o(g.prototype, 'doomParticle', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (U = o(g.prototype, 'doomSound', [w], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (y = g))
          ) || y)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Dragonbruit.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './CharacterManager.ts',
    './Character.ts',
    './Square.ts',
    './LnC.ts',
    './Zombie.ts',
    './NodePools.ts',
    './CabbagePult.ts',
    './dragonBruitSound.ts',
    './commonShot.ts',
    './Plants.ts',
  ],
  function (n) {
    var t, e, o, i, a, r, s, l, c, u, h, d, b, p, y, f, g, m, P, L, C, j, R, v;
    return {
      setters: [
        function (n) {
          (t = n.applyDecoratedDescriptor),
            (e = n.inheritsLoose),
            (o = n.initializerDefineProperty),
            (i = n.assertThisInitialized);
        },
        function (n) {
          (a = n.cclegacy), (r = n._decorator), (s = n.Prefab), (l = n.Node), (c = n.Size);
        },
        function (n) {
          (u = n.PlantType), (h = n.Plant);
        },
        function (n) {
          (d = n.ZombiePool), (b = n.TombPool), (p = n.Rectangle);
        },
        function (n) {
          y = n.CharacterType;
        },
        function (n) {
          f = n.Square;
        },
        function (n) {
          g = n.LnC;
        },
        function (n) {
          m = n.zombiePoison;
        },
        function (n) {
          P = n.NodePools;
        },
        function (n) {
          L = n.cabbagePult;
        },
        function (n) {
          C = n.dragonBruitSound;
        },
        function (n) {
          (j = n.commonShot), (R = n.SplashDamage);
        },
        function (n) {
          v = n.PlantEnum;
        },
      ],
      execute: function () {
        var w, S, E, z, O, A, D, I, x, X, _, k, F, M, N;
        a._RF.push({}, '0b3b6C/ecFEMpYuW0VuFKGA', 'Dragonbruit', void 0);
        var B = r.ccclass,
          T = r.property;
        n(
          'DragonbruitPlant',
          ((w = B('Dragonbruit')),
          (S = T(Number)),
          (E = T(s)),
          (z = T(s)),
          (O = T(s)),
          (A = T(s)),
          (D = T(l)),
          w(
            ((X = t(
              (x = (function (n) {
                function t() {
                  for (var t, e = arguments.length, a = new Array(e), r = 0; r < e; r++) a[r] = arguments[r];
                  return (
                    (t = n.call.apply(n, [this].concat(a)) || this),
                    o(t, 'shootInterval', X, i(t)),
                    o(t, 'projectile0', _, i(t)),
                    o(t, 'projectile1', k, i(t)),
                    o(t, 'projectile2', F, i(t)),
                    o(t, 'projectileMega', M, i(t)),
                    (t.currentPrj = null),
                    (t.busy = 0),
                    (t.ready = !1),
                    (t.readying = !0),
                    o(t, 'cabbageSpawnPoint', N, i(t)),
                    (t.shooting = !1),
                    (t.dropping = !1),
                    (t.detecter = null),
                    t
                  );
                }
                e(t, n);
                var a = t.prototype;
                return (
                  (a._shoot = function (n, t, e) {
                    var o = P.instantiatePooly(t);
                    L.lobOneCabbageOnZombie(
                      o,
                      this.inLnC.plantPoint.worldPosition,
                      this.cabbageSpawnPoint.getWorldPosition().y - this.inLnC.plantPoint.worldPosition.y,
                      this.inLane.prjLayer,
                      n,
                      2,
                      y.zombie,
                      e
                    );
                    var i = o.getComponent(j);
                    return (
                      this.darkModeOn &&
                        (i.setPoison(40, 3), i.setSplashDamages([new R(50, new c(2, 1), 0, 0, 0, new m(40, 3), 0, 0)])),
                      (this.shooting = !1),
                      i
                    );
                  }),
                  (a._shootOnNode = function (n, t, e) {
                    var o = P.instantiatePooly(t);
                    L.lobOneCabbageOnNode(
                      o,
                      this.inLnC.plantPoint.worldPosition,
                      this.cabbageSpawnPoint.getWorldPosition().y - this.inLnC.plantPoint.worldPosition.y,
                      this.inLane.prjLayer,
                      n,
                      2,
                      y.zombie,
                      e
                    );
                    var i = o.getComponent(j);
                    return (
                      this.darkModeOn &&
                        (i.setPoison(40, 3), i.setSplashDamages([new R(50, new c(2, 1), 0, 0, 0, new m(40, 3), 0, 0)])),
                      (this.shooting = !1),
                      i
                    );
                  }),
                  (a.specialPlantFood = function (n) {
                    (this.ready = !1), (this.readying = !1), (this.busy = 1 / 0), this.getComponent(C).playFoodSound();
                    var t = this.anmControl;
                    t.playAnimation('Food', 1), (t.IdleAnim = 'Idle');
                  }),
                  (a.specialPlantFoodEnd = function () {
                    this.busy = 0;
                  }),
                  (a.shootOnTarget = function () {
                    var n,
                      t,
                      e,
                      o = this,
                      i = null,
                      a = 1 / 0;
                    null == (n = this.inLane) ||
                      n
                        .zombiePool()
                        .concat()
                        .forEach(function (n) {
                          n.bodyRec.prjX().x < a && n.bodyRec.judgeCrossRec(o.detecter) && ((i = n), (a = n.bodyRec.prjX().x));
                        });
                    var r = null,
                      s = 1 / 0;
                    null == (t = this.inLane) ||
                      null == (t = t.UpperLane) ||
                      t
                        .zombiePool()
                        .concat()
                        .forEach(function (n) {
                          n.bodyRec.prjX().x < s && n.bodyRec.judgeCrossRec(o.detecter) && ((r = n), (s = n.bodyRec.prjX().x));
                        });
                    var l = null,
                      c = 1 / 0;
                    null == (e = this.inLane) ||
                      null == (e = e.LowerLane) ||
                      e
                        .zombiePool()
                        .concat()
                        .forEach(function (n) {
                          n.bodyRec.prjX().x < c && n.bodyRec.judgeCrossRec(o.detecter) && ((l = n), (c = n.bodyRec.prjX().x));
                        }),
                      [l, i, r].forEach(function (n) {
                        n && o._shoot(n, o.currentPrj, !1);
                      });
                    var u = null;
                    if (!r) {
                      var h,
                        d = 1 / 0;
                      null == (h = this.inLane) ||
                        null == (h = h.UpperLane) ||
                        h
                          .tombPool()
                          .concat()
                          .forEach(function (n) {
                            n.bodyRec.prjX().x < d && n.bodyRec.judgeCrossRec(o.detecter) && ((u = n), (d = n.bodyRec.prjX().x));
                          });
                    }
                    var b = null;
                    if (!i) {
                      var p,
                        y = 1 / 0;
                      null == (p = this.inLane) ||
                        p
                          .tombPool()
                          .concat()
                          .forEach(function (n) {
                            n.bodyRec.prjX().x < y && n.bodyRec.judgeCrossRec(o.detecter) && ((b = n), (y = n.bodyRec.prjX().x));
                          });
                    }
                    var f = null;
                    if (!l) {
                      var g,
                        m = 1 / 0;
                      null == (g = this.inLane) ||
                        null == (g = g.LowerLane) ||
                        g
                          .tombPool()
                          .concat()
                          .forEach(function (n) {
                            n.bodyRec.prjX().x < m && n.bodyRec.judgeCrossRec(o.detecter) && ((f = n), (m = n.bodyRec.prjX().x));
                          });
                    }
                    [f, b, u].forEach(function (n) {
                      n && o._shootOnNode(n.node, o.currentPrj, !1);
                    });
                  }),
                  (a.shootOnAll = function () {
                    var n = this;
                    d
                      .pool()
                      .concat()
                      .forEach(function (t) {
                        n._shoot(t, n.projectileMega, !0);
                      }),
                      b
                        .pool()
                        .concat()
                        .forEach(function (t) {
                          n._shootOnNode(t.node, n.projectileMega, !0);
                        });
                  }),
                  (a.waterable = function () {
                    return !(this.shooting || this.readying || this.ready || this.dropping);
                  }),
                  (a.babyAnimationListner = function (n) {}),
                  (a.spawnBabies = function () {
                    for (var n = [], t = [], e = 0; e < 45 && n.length < 3 && t.length + 3 <= 45; ) {
                      var o = f.getRandomSquare().getComponent(g);
                      -1 == t.indexOf(o) && (o.plantable() && n.push(o), t.push(o), e++);
                    }
                    n.forEach(function (n) {
                      if (n.plantable()) {
                        var t = n.spawnPlantByPlantEnum(v.BabyDragonbruit);
                        t && (n.pushPlant(t), (t.plantType = u.plant), t.anmControl.playAnimation('Spawn', 1)), n.selection();
                      }
                    });
                  }),
                  (a.animationListener = function (n) {
                    switch (n.name) {
                      case 'Shoot':
                        (this.anmControl.IdleAnim = 'Idle'), this.shootOnTarget(), (this.shooting = !1);
                        break;
                      case 'getReady':
                        this.ready = !0;
                        break;
                      case 'foodShoot':
                        this.shootOnAll(), this.getComponent(C).playFoodShootSound();
                        break;
                      case 'foodEnd':
                        this.foodEnd();
                        break;
                      case 'chew':
                        this.getComponent(C).playChewSound();
                        break;
                      case 'deadShoot':
                        this.spawnBabies();
                        break;
                      case 'boom':
                        this.getComponent(C).playDeadShootSound();
                    }
                    this.babyAnimationListner(n);
                  }),
                  (a.babyOnEnable = function () {}),
                  (a.specialPlantOnEnable = function () {
                    (this.shooting = !1),
                      (this.currentPrj = this.projectile0),
                      (this.ready = !1),
                      (this.readying = !1),
                      (this.busy = 0),
                      (this.anmControl.IdleAnim = 'Idle'),
                      this.babyOnEnable();
                  }),
                  (a.playReady = function () {
                    (this.readying = !0), (this.busy = 60 * (this.shootInterval - 4.5));
                    var n = this.anmControl;
                    n.playAnimation(
                      'Ready',
                      1,
                      (4.5 / this.shootInterval) * 0.1,
                      this.shootInterval > 4.5 ? 1 : 4.5 / this.shootInterval
                    ),
                      (n.IdleAnim = 'Idle_Ready');
                  }),
                  (a.setDetecters = function () {
                    this.detecter = p.createRectangleNodeSide(
                      this.inLnC.node,
                      f.SquareDisW * (9 - this.inLnC.cIndex),
                      3 * f.SquareDisH
                    );
                  }),
                  (a.detectEnemies = function () {
                    for (
                      var n = this.inLane.UpperLane.zombiePool(),
                        t = this.inLane.zombiePool(),
                        e = this.inLane.LowerLane.zombiePool(),
                        o = n.concat(t, e),
                        i = 0;
                      i < o.length;
                      i++
                    ) {
                      var a;
                      if (null != (a = this.detecter) && a.judgeCrossRec(o[i].bodyRec)) return !0;
                    }
                    for (
                      var r = this.inLane.UpperLane.tombPool(),
                        s = this.inLane.tombPool(),
                        l = this.inLane.LowerLane.tombPool(),
                        c = r.concat(s, l),
                        u = 0;
                      u < c.length;
                      u++
                    ) {
                      var h;
                      if (null != (h = this.detecter) && h.judgeCrossRec(c[u].bodyRec)) return !0;
                    }
                    return !1;
                  }),
                  (a.shootAnimation = function () {
                    this.getComponent(C).playShootSound(),
                      this.anmControl.playAnimation('Shoot', 1, 0.1),
                      (this.ready = !1),
                      (this.readying = !1),
                      (this.shooting = !0);
                  }),
                  (a.specialPlantOnSquareChange = function (n, t) {
                    this.setDetecters();
                  }),
                  (a.specialPlantUpdate = function (n) {
                    this.busy > 0 && !this.readying && (this.busy -= 60 * n),
                      this.busy <= 0 && ((this.busy = 0), this.playReady()),
                      this.ready && this.detectEnemies() && this.shootAnimation();
                  }),
                  t
                );
              })(h)).prototype,
              'shootInterval',
              [S],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 7;
                },
              }
            )),
            (_ = t(x.prototype, 'projectile0', [E], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (k = t(x.prototype, 'projectile1', [z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (F = t(x.prototype, 'projectile2', [O], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (M = t(x.prototype, 'projectileMega', [A], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (N = t(x.prototype, 'cabbageSpawnPoint', [D], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (I = x))
          ) || I)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/DragonbruitBaby.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Dragonbruit.ts',
    './dragonBruitSound.ts',
    './CharacterManager.ts',
    './Square.ts',
    './Plants.ts',
  ],
  function (e) {
    var t, n, o, r, i, a, s, c, u;
    return {
      setters: [
        function (e) {
          t = e.inheritsLoose;
        },
        function (e) {
          (n = e.cclegacy), (o = e._decorator), (r = e.Vec2);
        },
        function (e) {
          i = e.DragonbruitPlant;
        },
        function (e) {
          a = e.dragonBruitSound;
        },
        function (e) {
          s = e.Rectangle;
        },
        function (e) {
          c = e.Square;
        },
        function (e) {
          u = e.PlantEnum;
        },
      ],
      execute: function () {
        var l;
        n._RF.push({}, 'fc55cjG2QlDlqEHOc4y+Mqz', 'DragonbruitBaby', void 0);
        var h = o.ccclass;
        o.property,
          e(
            'DragonbruitBabyPlant',
            h('DragonbruitBaby')(
              (l = (function (e) {
                function n() {
                  return e.apply(this, arguments) || this;
                }
                t(n, e);
                var o = n.prototype;
                return (
                  (o.babyAnimationListner = function (e) {
                    if ('busy=0' == e.name) (this.busy = 0), (this.dropping = !1);
                    else if ('drop' == e.name) {
                      var t;
                      this.getComponent(a).playDropSound(), this.getComponent(a).playFoodSound();
                      var n = s.createRectangleNodeCenter(this.inLnC.node, c.SquareDisW, c.SquareDisH);
                      null == (t = this.inLane) ||
                        t.zombiePool().forEach(function (e) {
                          e.knockBackable && e.bodyRec.judgeCrossRec(n) && e.knockBackBy(new r(1, 0));
                        }),
                        (this.eaterDetectable = !0),
                        (this.smasherDetectable = !0);
                    } else
                      'Grow' == e.name
                        ? this.inLnC.plantable(!1) && this.inLnC.spawnPlantByPlantEnum(u.Dragonbruit)
                        : 'selfKill' == e.name && (this.die(), this.node.destroy());
                  }),
                  (o.shootOnTarget = function () {
                    var e,
                      t = this,
                      n = null,
                      o = 1 / 0;
                    if (
                      (null == (e = this.inLane) ||
                        e
                          .zombiePool()
                          .concat()
                          .forEach(function (e) {
                            e.bodyRec.prjX().x < o && e.bodyRec.judgeCrossRec(t.detecter) && ((n = e), (o = e.bodyRec.prjX().x));
                          }),
                      n)
                    )
                      this._shoot(n, this.currentPrj, !1);
                    else {
                      var r = null,
                        i = 1 / 0;
                      this.inLane
                        .tombPool()
                        .concat()
                        .forEach(function (e) {
                          i > e.bodyRec.prjX().x && e.bodyRec.judgeCrossRec(t.detecter) && ((r = e), (i = e.bodyRec.prjX().x));
                        }),
                        r && this._shootOnNode(r.node, this.currentPrj, !1);
                    }
                  }),
                  (o.detectEnemies = function () {
                    for (var e = this.inLane.zombiePool(), t = 0; t < e.length; t++) {
                      var n;
                      if (null != (n = this.detecter) && n.judgeCrossRec(e[t].bodyRec)) return !0;
                    }
                    for (var o = this.inLane.tombPool(), r = 0; r < o.length; r++) {
                      var i;
                      if (null != (i = this.detecter) && i.judgeCrossRec(o[r].bodyRec)) return !0;
                    }
                    return !1;
                  }),
                  (o.setDetecters = function () {
                    this.detecter = s.createRectangleNodeSide(
                      this.inLnC.node,
                      c.SquareDisW * (9 - this.inLnC.cIndex),
                      c.SquareDisH
                    );
                  }),
                  (o.babyOnEnable = function () {
                    this.anmControl.playAnimation('Spawn', 1),
                      (this.busy = 1 / 0),
                      (this.eaterDetectable = !1),
                      (this.smasherDetectable = !1),
                      (this.dropping = !0);
                  }),
                  n
                );
              })(i))
            ) || l
          );
        n._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/dragonBruitSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './plantSound.ts'],
  function (o) {
    var n, t, e, i, r, u, a, d, l;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (i = o.assertThisInitialized);
        },
        function (o) {
          (r = o.cclegacy), (u = o._decorator), (a = o.AudioClip);
        },
        function (o) {
          d = o.ArrayGet;
        },
        function (o) {
          l = o.plantSound;
        },
      ],
      execute: function () {
        var s, S, p, c, h, f, y, b, g, m, w, z, R, v, D, O, B;
        r._RF.push({}, '9d3199kJDNGGq38wwSuV6K9', 'dragonBruitSound', void 0);
        var F = u.ccclass,
          _ = u.property;
        o(
          'dragonBruitSound',
          ((s = F('dragonBruitSound')),
          (S = _([a])),
          (p = _([a])),
          (c = _([a])),
          (h = _([a])),
          (f = _([a])),
          (y = _([a])),
          (b = _([a])),
          s(
            ((w = n(
              (m = (function (o) {
                function n() {
                  for (var n, t = arguments.length, r = new Array(t), u = 0; u < t; u++) r[u] = arguments[u];
                  return (
                    (n = o.call.apply(o, [this].concat(r)) || this),
                    e(n, 'chewSounds', w, i(n)),
                    e(n, 'shootSounds', z, i(n)),
                    e(n, 'foodShootSounds', R, i(n)),
                    e(n, 'foodSounds', v, i(n)),
                    e(n, 'deathSounds', D, i(n)),
                    e(n, 'deadShootSounds', O, i(n)),
                    e(n, 'dropSounds', B, i(n)),
                    n
                  );
                }
                t(n, o);
                var r = n.prototype;
                return (
                  (r.playChewSound = function () {
                    this.playOneShot(d.getRandom(this.chewSounds));
                  }),
                  (r.playShootSound = function () {
                    this.playOneShot(d.getRandom(this.shootSounds));
                  }),
                  (r.playFoodShootSound = function () {
                    this.playOneShot(d.getRandom(this.foodShootSounds));
                  }),
                  (r.playFoodSound = function () {
                    this.playOneShot(d.getRandom(this.foodSounds));
                  }),
                  (r.playDeathSound = function () {
                    this.playOneShot(d.getRandom(this.deathSounds));
                  }),
                  (r.playDeadShootSound = function () {
                    this.playOneShot(d.getRandom(this.deadShootSounds));
                  }),
                  (r.playDropSound = function () {
                    this.playOneShot(d.getRandom(this.dropSounds));
                  }),
                  n
                );
              })(l)).prototype,
              'chewSounds',
              [S],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (z = n(m.prototype, 'shootSounds', [p], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (R = n(m.prototype, 'foodShootSounds', [c], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (v = n(m.prototype, 'foodSounds', [h], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (D = n(m.prototype, 'deathSounds', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (O = n(m.prototype, 'deadShootSounds', [y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (B = n(m.prototype, 'dropSounds', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (g = m))
          ) || g)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/dropping.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './CharacterManager.ts',
    './Character.ts',
    './Square.ts',
    './Mouse.ts',
    './levelController.ts',
    './UI.ts',
  ],
  function (i) {
    var t, e, n, o, s, a, l, r, c, h, d, u, p, f, g, y, w, m, v, C;
    return {
      setters: [
        function (i) {
          (t = i.applyDecoratedDescriptor),
            (e = i.inheritsLoose),
            (n = i.initializerDefineProperty),
            (o = i.assertThisInitialized);
        },
        function (i) {
          (s = i.cclegacy),
            (a = i._decorator),
            (l = i.CCFloat),
            (r = i.Vec2),
            (c = i.KeyCode),
            (h = i.tween),
            (d = i.find),
            (u = i.input),
            (p = i.Input),
            (f = i.UITransform);
        },
        function (i) {
          g = i.Rectangle;
        },
        function (i) {
          y = i.Character;
        },
        function (i) {
          w = i.Square;
        },
        function (i) {
          m = i.Mouse;
        },
        function (i) {
          v = i.LevelPlay;
        },
        function (i) {
          C = i.UIInGame;
        },
      ],
      execute: function () {
        var b, I, U, x, P, T, V, L, D;
        s._RF.push({}, '7a0e0GwYE1IcZ6i5htuJ5IJ', 'dropping', void 0);
        var R = a.ccclass,
          S = a.property;
        i(
          'dropping',
          ((b = R('dropping')),
          (I = S(Boolean)),
          (U = S(Number)),
          (x = S(l)),
          b(
            ((V = t(
              (T = (function (i) {
                function t() {
                  for (var t, e = arguments.length, s = new Array(e), a = 0; a < e; a++) s[a] = arguments[a];
                  return (
                    ((t = i.call.apply(i, [this].concat(s)) || this).collected = !1),
                    (t.linearVelocity = new r(0, 0)),
                    (t.bodyLinearVelocity = 0),
                    (t.gravity = 0),
                    (t.ui = void 0),
                    n(t, 'willFade', V, o(t)),
                    n(t, 'existTime', L, o(t)),
                    (t.fadingCountdown = 0),
                    (t.fadingStarted = !1),
                    (t.mouse = null),
                    n(t, 'scale', D, o(t)),
                    (t.mouseListen = !0),
                    t
                  );
                }
                e(t, i);
                var s = t.prototype;
                return (
                  (s.goToUIPath = function () {
                    return '';
                  }),
                  (s.onKeyDown = function (i) {
                    i.keyCode == c.KEY_A && this.goToUI(this.ui);
                  }),
                  (s.specialOnGroundHit = function () {}),
                  (s.onGroundHit = function () {
                    (this.linearVelocity = new r(0, 0)),
                      (this.bodyLinearVelocity = 0),
                      (this.gravity = 0),
                      this.fadingOn(),
                      this.specialOnGroundHit();
                  }),
                  (s.move = function (i) {
                    if (!this.collected) {
                      var t = 0.5 * i * 60,
                        e = 0.55 * i * 60,
                        n = this.shadeWorldPosition,
                        o = this.height,
                        s = this.linearVelocity;
                      (this.worldPosition = new r(n.x + s.x * t, n.y + s.y * t)),
                        (this.height = Math.max(0, o + this.bodyLinearVelocity * t)),
                        (this.bodyLinearVelocity -= this.gravity * e),
                        this.height <= 0 && o > 0 && this.onGroundHit(),
                        w.lawnRec.judgeInRecNode(this.node) ||
                          (((this.linearVelocity.x < 0 && this.node.worldPosition.x < w.lawnRec.prjX().x) ||
                            (this.linearVelocity.x > 0 && this.node.worldPosition.x > w.lawnRec.prjX().y)) &&
                            (this.linearVelocity.x *= -1),
                          ((this.linearVelocity.y < 0 && this.node.worldPosition.y < w.lawnRec.prjY().x) ||
                            (this.linearVelocity.y > 0 && this.node.worldPosition.y > w.lawnRec.prjY().y)) &&
                            (this.linearVelocity.y *= -1));
                    }
                  }),
                  (s.fadingOn = function () {
                    !this.fadingStarted && this.willFade && ((this.fadingCountdown = this.existTime), (this.fadingStarted = !0));
                  }),
                  (s.specialGoToUI = function (i) {}),
                  (s.specialUICall = function (i) {}),
                  (s.collect = function () {
                    this.goToUI(this.ui);
                  }),
                  (s.specialCollectable = function () {
                    return !0;
                  }),
                  (s.goToUI = function (i) {
                    var t = this;
                    if (i && !this.collected && this.specialCollectable()) {
                      var e;
                      (this.collected = !0),
                        this.unschedule(this.fade),
                        this.specialGoToUI(i),
                        (this.linearVelocity = new r(0, 0)),
                        (this.bodyLinearVelocity = 0),
                        (this.gravity = 0);
                      null != C && null != (e = C.uiingame) && e.uiHidden
                        ? (this.shrinkAway(), this.specialUICall(i))
                        : h(this)
                            .to(
                              1,
                              { height: 0, worldPositionX: i.worldPosition.x, worldPositionY: i.worldPosition.y },
                              { easing: 'quadOut' }
                            )
                            .call(function () {
                              t.fade(), t.specialUICall(i);
                            })
                            .start();
                    }
                  }),
                  (s.fade = function () {
                    (this.fadingStarted = !1), this.fadeAway(), (this.collected = !0);
                  }),
                  (s.characterOnLoad = function () {
                    (this.mouse = d('Mouse')), (this.ui = d(this.goToUIPath()));
                  }),
                  (s.characterOnEnable = function () {
                    (this.fadingStarted = !1),
                      (this.fadingCountdown = this.existTime),
                      (this.collected = !1),
                      (this.mouseListen = !0),
                      u.on(p.EventType.KEY_DOWN, this.onKeyDown, this),
                      u.on(p.EventType.KEY_UP, this.onKeyDown, this);
                  }),
                  (s.specialDroppingOnEnable = function () {}),
                  (s.specialDroppingUpdate = function (i, t) {}),
                  (s.specialDroppingFadable = function () {
                    return !0;
                  }),
                  (s.characterUpdate = function (i) {
                    this.move(i);
                    var t = g.createRectangleNodeCenter(
                      this.node,
                      this.node.getComponent(f).width * this.scale * this.originalScale,
                      this.node.getComponent(f).width * this.scale * this.originalScale
                    );
                    this.collected ||
                      (v.component.gameWon && this.mouseListen && this.collect(),
                      this.fadingStarted &&
                        (this.fadingCountdown >= 0 && this.specialDroppingFadable() && (this.fadingCountdown -= i),
                        this.fadingCountdown <= 0 && this.fade()),
                      this.mouseListen && (t.judgeInRecNode(this.mouse) || t.judgeCrossLine(m.moveLine)) && this.goToUI(this.ui));
                    this.specialDroppingUpdate(i, t);
                  }),
                  t
                );
              })(y)).prototype,
              'willFade',
              [I],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return !0;
                },
              }
            )),
            (L = t(T.prototype, 'existTime', [U], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 7;
              },
            })),
            (D = t(T.prototype, 'scale', [x], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 0.33;
              },
            })),
            (P = T))
          ) || P)
        );
        s._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/Droppings.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (n) {
  var e, i, t, r, o, l, u, a, c;
  return {
    setters: [
      function (n) {
        (e = n.applyDecoratedDescriptor), (i = n.inheritsLoose), (t = n.initializerDefineProperty), (r = n.assertThisInitialized);
      },
      function (n) {
        (o = n.cclegacy), (l = n._decorator), (u = n.Prefab), (a = n.find), (c = n.Component);
      },
    ],
    execute: function () {
      var p, s, d, f, b, g, m, S, y, v, h, P, z, w, T, D, L, k, F, G, C, M, _;
      o._RF.push({}, 'bd3806Rl7pDnKBi2ulhB2Lf', 'Droppings', void 0);
      var x = l.ccclass,
        B = l.property,
        R = n(
          'droppings',
          (function () {
            function n() {}
            return (
              (n.registerSun = function (n) {
                -1 == this.controller.sunPool.indexOf(n) && this.controller.sunPool.push(n);
              }),
              (n.deleteSun = function (n) {
                var e = this.controller.sunPool.indexOf(n);
                -1 != e && this.controller.sunPool.splice(e, 1);
              }),
              n
            );
          })()
        );
      (R.controller = null),
        (R.SunTiny = void 0),
        (R.SunSmall = void 0),
        (R.SunMid = void 0),
        (R.SunLarge = void 0),
        (R.CoinSilver = void 0),
        (R.CoinGold = void 0),
        (R.Gem = void 0),
        (R.plantFood = void 0),
        (R.PlantSeedPacket = void 0),
        (R.layer = void 0);
      n(
        'Droppings',
        ((p = x('Droppings')),
        (s = B(u)),
        (d = B(u)),
        (f = B(u)),
        (b = B(u)),
        (g = B(u)),
        (m = B(u)),
        (S = B(u)),
        (y = B(u)),
        (v = B(u)),
        (h = B(u)),
        p(
          ((w = e(
            (z = (function (n) {
              function e() {
                for (var e, i = arguments.length, o = new Array(i), l = 0; l < i; l++) o[l] = arguments[l];
                return (
                  (e = n.call.apply(n, [this].concat(o)) || this),
                  t(e, 'sunTiny', w, r(e)),
                  t(e, 'sunSmall', T, r(e)),
                  t(e, 'sunMid', D, r(e)),
                  t(e, 'sunLarge', L, r(e)),
                  t(e, 'coinSilver', k, r(e)),
                  t(e, 'coinGold', F, r(e)),
                  t(e, 'gem', G, r(e)),
                  t(e, 'plantFood', C, r(e)),
                  t(e, 'plantSeedPacketTemplate', M, r(e)),
                  t(e, 'zombieSeedPacketTemplate', _, r(e)),
                  (e.sunPool = []),
                  e
                );
              }
              i(e, n);
              var o = e.prototype;
              return (
                (o.onLoad = function () {
                  (R.controller = this),
                    (R.SunTiny = this.sunTiny),
                    (R.SunSmall = this.sunSmall),
                    (R.SunMid = this.sunMid),
                    (R.SunLarge = this.sunLarge),
                    (R.Gem = this.gem),
                    (R.CoinGold = this.coinGold),
                    (R.CoinSilver = this.coinSilver),
                    (R.plantFood = this.plantFood),
                    (R.PlantSeedPacket = this.plantSeedPacketTemplate),
                    (R.layer = a('Canvas/Dropping'));
                }),
                (o.update = function (n) {}),
                e
              );
            })(c)).prototype,
            'sunTiny',
            [s],
            {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            }
          )),
          (T = e(z.prototype, 'sunSmall', [d], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return null;
            },
          })),
          (D = e(z.prototype, 'sunMid', [f], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return null;
            },
          })),
          (L = e(z.prototype, 'sunLarge', [b], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return null;
            },
          })),
          (k = e(z.prototype, 'coinSilver', [g], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return null;
            },
          })),
          (F = e(z.prototype, 'coinGold', [m], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return null;
            },
          })),
          (G = e(z.prototype, 'gem', [S], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return null;
            },
          })),
          (C = e(z.prototype, 'plantFood', [y], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return null;
            },
          })),
          (M = e(z.prototype, 'plantSeedPacketTemplate', [v], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return null;
            },
          })),
          (_ = e(z.prototype, 'zombieSeedPacketTemplate', [h], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return null;
            },
          })),
          (P = z))
        ) || P)
      );
      o._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/EgyptCamelZombie.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Zombie.ts', './Zombies.ts'],
  function (t) {
    var i, e, n, o, a, s, h, l;
    return {
      setters: [
        function (t) {
          i = t.inheritsLoose;
        },
        function (t) {
          (e = t.cclegacy), (n = t._decorator), (o = t.dragonBones);
        },
        function (t) {
          (a = t.zombieDamageType), (s = t.Zombie);
        },
        function (t) {
          (h = t.zombies), (l = t.ZombieEnum);
        },
      ],
      execute: function () {
        var r;
        e._RF.push({}, '903d7QmPIBIXqjTmEkaYa1s', 'EgyptCamelZombie', void 0);
        var d = n.ccclass;
        n.property,
          t(
            'EgyptCamelZombie',
            d('EgyptCamelZombie')(
              (r = (function (t) {
                function e() {
                  for (var i, e = arguments.length, n = new Array(e), o = 0; o < e; o++) n[o] = arguments[o];
                  return (
                    ((i = t.call.apply(t, [this].concat(n)) || this).teamAmount = 0),
                    (i.team = []),
                    (i.innerZombieEnum = l.egypt_basic),
                    (i.defaultShowSlot = 0),
                    (i.innerZombie = void 0),
                    (i.innerHealth = void 0),
                    (i.idling = !1),
                    (i.busy = 0),
                    i
                  );
                }
                i(e, t);
                var n = e.prototype;
                return (
                  (n.onDamaged = function (t, i) {
                    var e, n, o;
                    i < this.toughness / 2
                      ? null == (e = this.body.body.armature().getSlot('PLANK')) || e._setDisplayIndex(this.defaultShowSlot + 2)
                      : i < this.toughness
                      ? null == (n = this.body.body.armature().getSlot('PLANK')) || n._setDisplayIndex(this.defaultShowSlot + 1)
                      : null == (o = this.body.body.armature().getSlot('PLANK')) || o._setDisplayIndex(this.defaultShowSlot);
                  }),
                  (n.spawnTeam = function () {
                    for (var t = this, i = [], n = 2; n <= this.teamAmount; n++) {
                      var o = h.getZombie(l.egypt_camel),
                        a = o.getComponent(e);
                      (a.teamAmount = 0),
                        (a.defaultShowSlot = n == this.teamAmount ? 6 : 3),
                        (o.parent = this.node.parent),
                        a.onDamaged(a.toughness, a.toughness),
                        (a.worldPosition = this.shadeWorldPosition.add2f(60 * (n - 1), 0)),
                        this.team.push(a),
                        i.push(a);
                    }
                    return (
                      this.scheduleOnce(function () {
                        t.team.forEach(function (i) {
                          (i.team = t.team.concat()), (i.randomSpeed = t.randomSpeed);
                        });
                      }, 0),
                      i
                    );
                  }),
                  (n.onChill = function (t) {
                    this.dead ||
                      this.team.forEach(function (i) {
                        i.chill = t;
                      });
                  }),
                  (n.onFrozen = function (t) {
                    this.dead ||
                      this.team.forEach(function (i) {
                        i.freeze = t;
                      });
                  }),
                  (n.spawnZombie = function () {
                    var t = this.innerZombie;
                    return t
                      ? ((t.havePlantfood = this.havePlantfood),
                        (this.havePlantfood = !1),
                        (t.node.parent = this.node.parent),
                        t.node.setSiblingIndex(this.node.getSiblingIndex()),
                        (t.worldPosition = this.shadeWorldPosition),
                        t.playIdle(),
                        (t.switching = !0),
                        t.body.getComponent(o.ArmatureDisplay).once(
                          o.EventObject.LOOP_COMPLETE,
                          function () {
                            (t.switching = !1), t.isAlive() && t.playWalk();
                          },
                          t
                        ),
                        t)
                      : null;
                  }),
                  (n.damageExtend = function () {
                    return !0;
                  }),
                  (n.dealDamage = function (t, i, e, n, o, s, h) {
                    if (
                      (void 0 === t && (t = 0),
                      void 0 === i && (i = !0),
                      void 0 === e && (e = !0),
                      void 0 === n && (n = !0),
                      void 0 === o && (o = null),
                      void 0 === s && (s = a.physicle),
                      void 0 === h && (h = !0),
                      i)
                    ) {
                      var l = this.totalHealth() - t;
                      if (l <= 0) {
                        var r = this.spawnZombie();
                        this.damageExtend() && r.dealDamage(-l + (r.toughness - this.innerHealth), !0, e, n, o, s),
                          r.isAlive() ? r.copyBuff(this) : r.clearBuff(),
                          this.playDie();
                      }
                      return this.dealNormalDamage(t, i, e, n, o, s, h);
                    }
                    if (t >= this.innerHealth && !this.damageExtend()) {
                      var d = this.spawnZombie();
                      return (
                        d.dealDamage(d.health - this.innerHealth, !1, e, n, o, s),
                        d.isAlive() ? d.copyBuff(this) : d.clearBuff(),
                        this.playDie(),
                        0
                      );
                    }
                    if (((this.innerHealth -= t), this.innerHealth <= 0)) {
                      var u = this.spawnZombie();
                      u.dealDamage(u.totalToughness(), !1, e, n, o, s),
                        u.isAlive() ? u.copyBuff(this) : u.clearBuff(),
                        this.playDie();
                    }
                    return this.dealNormalDamage(t, i, e, n, o, s, h);
                  }),
                  (n.additionalZombies = function () {
                    return this.spawnTeam();
                  }),
                  (n.specialZombieOnEnable = function () {
                    (this.idling = !1),
                      (this.busy = 3 * Math.random()),
                      this.onDamaged(this.toughness, this.toughness),
                      (this.innerZombie = h.getZombie(this.innerZombieEnum).getComponent(s)),
                      (this.innerHealth = this.innerZombie.toughness),
                      (this.team = []),
                      this.team.push(this);
                  }),
                  (n.onDirtSpawned = function (t) {
                    var i = this;
                    0 == t &&
                      this.team.concat().forEach(function (t, e) {
                        t != i && t.isAlive() && t.playDirtSpawn(0.1 * e);
                      });
                  }),
                  (n.allowWalk = function () {
                    return !this.idling;
                  }),
                  (n.specialZombieUpdate = function (t) {
                    var i = this;
                    if (t > 0)
                      if (
                        (this.team.concat().forEach(function (t) {
                          if (!t.isAlive()) {
                            var e = i.team.indexOf(t);
                            -1 != e && i.team.splice(e, 1);
                          }
                        }),
                        this.busy <= 0 && !this.eating)
                      ) {
                        var e = this.team.indexOf(this),
                          n = !0;
                        e + 1 < this.team.length &&
                          this.team[e + 1].shadeSocket.worldPosition.x - 80 > this.shadeSocket.worldPosition.x &&
                          (n = !1),
                          e >= 1 &&
                            this.team[e - 1].shadeSocket.worldPosition.x + 50 > this.shadeSocket.worldPosition.x &&
                            (n = !1),
                          n
                            ? (this.playWalk(0.3), (this.busy = 0.7), (this.idling = !1))
                            : (this.idling || this.playIdle(0.3), (this.busy = 1), (this.idling = !0));
                      } else this.busy -= t;
                  }),
                  (n.playSpecialZombieDie = function (t) {
                    this.onDamaged(-1, -1), this.judgeDeath(0);
                  }),
                  e
                );
              })(s))
            ) || r
          );
        e._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/EgyptExplorerZombie.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Zombie.ts'],
  function (t) {
    var e, i, n, o, a;
    return {
      setters: [
        function (t) {
          e = t.inheritsLoose;
        },
        function (t) {
          (i = t.cclegacy), (n = t._decorator);
        },
        function (t) {
          (o = t.zombieDamageType), (a = t.Zombie);
        },
      ],
      execute: function () {
        var r;
        i._RF.push({}, 'b2f1aUCacBJN7aRLMnfdbLh', 'EgyptExplorerZombie', void 0);
        var c = n.ccclass;
        n.property,
          t(
            'EgyptExplorerZombie',
            c('EgyptExplorerZombie')(
              (r = (function (t) {
                function i() {
                  for (var e, i = arguments.length, n = new Array(i), o = 0; o < i; o++) n[o] = arguments[o];
                  return ((e = t.call.apply(t, [this].concat(n)) || this).ignited = void 0), e;
                }
                e(i, t);
                var n = i.prototype;
                return (
                  (n.detectPlant = function (t) {
                    var e = this;
                    this.ignited
                      ? (t > 0 &&
                          this.detectPlantOn() &&
                          !this.ignorePlants() &&
                          this.inLane
                            .plantPool()
                            .concat()
                            .forEach(function (t) {
                              !t.dead &&
                                t.eaterDetectable &&
                                !t.short_ &&
                                e.plantDetectorRec.judgeCrossRec(t.bodyRec) &&
                                t.burn();
                            }),
                        this.eating && this.playWalk())
                      : this.defaultDetectPlant(t);
                  }),
                  (n.dealDamage = function (t, e, i, n, a, r, c) {
                    return (
                      void 0 === t && (t = 0),
                      void 0 === e && (e = !0),
                      void 0 === i && (i = !0),
                      void 0 === n && (n = !0),
                      void 0 === a && (a = null),
                      void 0 === r && (r = o.physicle),
                      void 0 === c && (c = !0),
                      r == o.fire && this.ignite(),
                      this.dealNormalDamage(t, e, i, n, a, r, c)
                    );
                  }),
                  (n.ignite = function (t) {
                    void 0 === t && (t = !0);
                    var e = t ? 0 : -1;
                    (this.ignited = t),
                      (this.plantDetectorRecOffset.x = t ? -72 : 0),
                      (this.bodyRecOffset.x = t ? -32 : 0),
                      (this.bodyRecSize.width = t ? 72 : 48),
                      this.body.body
                        .armature()
                        .getSlots()
                        .forEach(function (t) {
                          t.name.includes('FIRE') && t._setDisplayIndex(e);
                        });
                  }),
                  (n.onChill = function (t) {
                    this.ignite(!1);
                  }),
                  (n.specialZombieOnEnable = function () {
                    this.ignite();
                  }),
                  (n.playSpecialZombieDieForced = function () {
                    this.ignite(!1);
                  }),
                  i
                );
              })(a))
            ) || r
          );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/EgyptGargantuarZombie.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './GargantuarZombie.ts',
    './Zombies.ts',
    './NodePools.ts',
    './SoundRescourses.ts',
    './Zombie.ts',
  ],
  function (t) {
    var e, n, a, i, o, r, s, c, l, u, p, d, h, b;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor),
            (n = t.inheritsLoose),
            (a = t.initializerDefineProperty),
            (i = t.assertThisInitialized);
        },
        function (t) {
          (o = t.cclegacy), (r = t._decorator), (s = t.Prefab), (c = t.dragonBones);
        },
        function (t) {
          l = t.GargantuarZombie;
        },
        function (t) {
          (u = t.ZombieEnum), (p = t.zombies);
        },
        function (t) {
          d = t.NodePools;
        },
        function (t) {
          h = t.sounds;
        },
        function (t) {
          b = t.Zombie;
        },
      ],
      execute: function () {
        var m, y, g, f, P;
        o._RF.push({}, '2be45+TaeFJzZEWyDltsHWd', 'EgyptGargantuarZombie', void 0);
        var v = r.ccclass,
          E = r.property;
        t(
          'EgyptGargantuarZombie',
          ((m = v('EgyptGargantuarZombie')),
          (y = E(s)),
          m(
            ((P = e(
              (f = (function (t) {
                function e() {
                  for (var e, n = arguments.length, o = new Array(n), r = 0; r < n; r++) o[r] = arguments[r];
                  return (
                    (e = t.call.apply(t, [this].concat(o)) || this),
                    a(e, 'pharaohBreakParticle', P, i(e)),
                    (e.impEnum = u.egypt_imp),
                    e
                  );
                }
                n(e, t);
                var o = e.prototype;
                return (
                  (o.specialGargantuarOnEnable = function () {
                    this.body.body
                      .armature()
                      .getSlots()
                      .forEach(function (t) {
                        t.name.includes('PHARAOH') && t._setDisplayIndex(0);
                      });
                  }),
                  (o.specialGargantuarAnimationListener = function (t) {
                    if ('pharaoh' == t.name && this.isInLawn() && Math.random() < 0.75) {
                      var e = p.getZombie(u.egypt_basic);
                      e.parent = this.node.parent;
                      var n = d.instantiatePooly(this.pharaohBreakParticle);
                      (n.parent = this.inLane.prjLayer),
                        (n.worldPosition = this.node.worldPosition),
                        h.playTombBreak(),
                        this.body.body
                          .armature()
                          .getSlots()
                          .forEach(function (t) {
                            t.name.includes('PHARAOH') && t._setDisplayIndex(-1);
                          });
                      var a = e.getComponent(b);
                      (a.switching = !0),
                        a.body.playAnimation('Spawn', 1),
                        (a.reversed = !this.reversed),
                        (a.worldPosition = this._worldPosition),
                        (a.walking = !1),
                        a.db.once(
                          c.EventObject.COMPLETE,
                          function (t) {
                            (a.switching = !1), a.isAlive() && a.playWalk();
                          },
                          a
                        );
                    }
                  }),
                  e
                );
              })(l)).prototype,
              'pharaohBreakParticle',
              [y],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (g = f))
          ) || g)
        );
        o._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/EgyptPharaohZombie.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './EgyptCamelZombie.ts', './Zombies.ts'],
  function (e) {
    var t, o, n, a, r, i, s, u;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (o = e.inheritsLoose),
            (n = e.initializerDefineProperty),
            (a = e.assertThisInitialized);
        },
        function (e) {
          (r = e.cclegacy), (i = e._decorator);
        },
        function (e) {
          s = e.EgyptCamelZombie;
        },
        function (e) {
          u = e.ZombieEnum;
        },
      ],
      execute: function () {
        var l, p, c, m, y;
        r._RF.push({}, 'd54e7UpaztKypU+27g30c8H', 'EgyptPharaohZombie', void 0);
        var d = i.ccclass,
          h = i.property;
        e(
          'EgyptPharaohZombie',
          ((l = d('EgyptPharaohZombie')),
          (p = h(Boolean)),
          l(
            ((y = t(
              (m = (function (e) {
                function t() {
                  for (var t, o = arguments.length, r = new Array(o), i = 0; i < o; i++) r[i] = arguments[i];
                  return (
                    ((t = e.call.apply(e, [this].concat(r)) || this).innerZombieEnum = u.egypt_pharaoh_inner),
                    n(t, 'extendDamage', y, a(t)),
                    t
                  );
                }
                o(t, e);
                var r = t.prototype;
                return (
                  (r.onDamaged = function (e, t) {
                    var o, n, a, r;
                    t <= 0
                      ? null == (o = this.body.body.armature().getSlot('armor')) || o._setDisplayIndex(-1)
                      : t < this.toughness / 3
                      ? null == (n = this.body.body.armature().getSlot('armor')) || n._setDisplayIndex(2)
                      : t < (2 * this.toughness) / 3
                      ? null == (a = this.body.body.armature().getSlot('armor')) || a._setDisplayIndex(1)
                      : null == (r = this.body.body.armature().getSlot('armor')) || r._setDisplayIndex(0);
                  }),
                  (r.damageExtend = function () {
                    return this.extendDamage;
                  }),
                  (r.additionalZombies = function () {
                    return [];
                  }),
                  (r.spawnTeam = function () {
                    return [];
                  }),
                  (r.specialZombieUpdate = function (e) {}),
                  t
                );
              })(s)).prototype,
              'extendDamage',
              [p],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return !1;
                },
              }
            )),
            (c = m))
          ) || c)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/EgyptRaZombie.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Zombie.ts',
    './Droppings.ts',
    './NodePools.ts',
    './SoundsController.ts',
    './Sunflower.ts',
  ],
  function (o) {
    var i, n, t, r, e, a, s, b, l, u, c, h, f, d, p, g, S, w;
    return {
      setters: [
        function (o) {
          (i = o.applyDecoratedDescriptor),
            (n = o.inheritsLoose),
            (t = o.initializerDefineProperty),
            (r = o.assertThisInitialized);
        },
        function (o) {
          (e = o.cclegacy),
            (a = o._decorator),
            (s = o.Node),
            (b = o.AudioClip),
            (l = o.CCInteger),
            (u = o.dragonBones),
            (c = o.Vec2),
            (h = o.TWO_PI),
            (f = o.tween);
        },
        function (o) {
          d = o.Zombie;
        },
        function (o) {
          p = o.droppings;
        },
        function (o) {
          g = o.ArrayGet;
        },
        function (o) {
          S = o.SoundFXController;
        },
        function (o) {
          w = o.sunflower;
        },
      ],
      execute: function () {
        var y, m, A, v, E, V, P, Z, O, R, x;
        e._RF.push({}, 'a86047FcJdMKYD0NmnuSYGN', 'EgyptRaZombie', void 0);
        var z = a.ccclass,
          D = a.property;
        o(
          'EgyptRaZombie',
          ((y = z('EgyptRaZombie')),
          (m = D(s)),
          (A = D([b])),
          (v = D([b])),
          (E = D(l)),
          y(
            ((Z = i(
              (P = (function (o) {
                function i() {
                  for (var i, n = arguments.length, e = new Array(n), a = 0; a < n; a++) e[a] = arguments[a];
                  return (
                    ((i = o.call.apply(o, [this].concat(e)) || this).absorbing = !1),
                    t(i, 'absorber', Z, r(i)),
                    t(i, 'absorbSounds', O, r(i)),
                    t(i, 'absorbBG', R, r(i)),
                    t(i, 'maxAbsorbValue', x, r(i)),
                    (i.absorbedValue = []),
                    (i.willAbsorbSun = []),
                    i
                  );
                }
                n(i, o);
                var e = i.prototype;
                return (
                  (e.playSpecialZombieDieForced = function () {
                    this.willAbsorbSun.forEach(function (o) {
                      o.switchMode('Normal'), (o.absorber = null);
                    }),
                      (this.willAbsorbSun = []);
                  }),
                  (e.absorbStart = function () {
                    this.switching ||
                      ((this.willAbsorbSun = []),
                      (this.walking = !1),
                      (this.switching = !0),
                      (this.absorbing = !0),
                      this.body.playAnimation('AbsorbStart', 1, 0.2),
                      this.audioSource.playOneShot(g.getRandom(this.absorbBG), S.SoundFXVolume),
                      this.audioSource.playOneShot(g.getRandom(this.absorbSounds), S.SoundFXVolume));
                  }),
                  (e.absorbEnd = function () {
                    var o = this;
                    this.absorbing &&
                      ((this.absorbing = !1),
                      this.body.playAnimation('AbsorbEnd', 1),
                      this.db.once(
                        u.EventObject.COMPLETE,
                        function () {
                          (o.switching = !1), o.dead || o.playWalk();
                        },
                        this
                      ),
                      this.willAbsorbSun.forEach(function (o) {
                        o.absorber = null;
                      }));
                  }),
                  (e.playSpecialZombieDie = function (o) {
                    var i = this;
                    this.willAbsorbSun.forEach(function (o) {
                      o.absorber = null;
                    });
                    var n = 0;
                    this.absorbedValue.length >= 2 && (n = -h / 6),
                      this.absorbedValue.forEach(function (o) {
                        w.produceSun(o, i.node.worldPosition, i.zombieHeight / 2).forEach(function (o) {
                          (o.linearVelocity = new c(10 * Math.sin(n), 0)),
                            (o.bodyLinearVelocity = 10 * Math.cos(n)),
                            (o.gravity = 0),
                            i.absorbedValue.length >= 2 && (n += h / 3 / (i.absorbedValue.length - 1)),
                            f(o).to(0.6, { bodyLinearVelocity: 0 }).start(),
                            f(o)
                              .to(0.6, { linearVelocity: new c(0, 0) })
                              .start();
                        });
                      });
                  }),
                  (e.detectPlantOn = function () {
                    return !this.switching;
                  }),
                  (e.specialZombieOnEnable = function () {
                    (this.willAbsorbSun = []), (this.absorbedValue = []), (this.absorbing = !1);
                  }),
                  (e.specialZombieUpdate = function (o) {
                    var i = this;
                    if (this.isInLawn() && o > 0) {
                      var n = 0;
                      this.absorbedValue.forEach(function (o) {
                        n += o;
                      }),
                        this.willAbsorbSun.forEach(function (o) {
                          n += o.value;
                        });
                      var t,
                        r = 1e3,
                        e = !1;
                      if (
                        (p.controller.sunPool.concat().forEach(function (o) {
                          (o.absorber && o.absorber != i) || (e = !0), e && r > o.value && (r = o.value);
                        }),
                        (e && p.controller.sunPool.length > 0 && n + r <= this.maxAbsorbValue) || this.willAbsorbSun.length > 0
                          ? this.absorbStart()
                          : this.absorbEnd(),
                        this.absorbing)
                      )
                        null == (t = p.controller) ||
                          t.sunPool.concat().forEach(function (o) {
                            !o.absorber &&
                              n + o.value <= i.maxAbsorbValue &&
                              -1 == i.willAbsorbSun.indexOf(o) &&
                              (i.willAbsorbSun.push(o), (n += o.value), (o.absorber = i));
                          }),
                          this.willAbsorbSun.concat().forEach(function (o) {
                            var n = i.willAbsorbSun.indexOf(o);
                            o.collected && -1 != n ? i.willAbsorbSun.splice(n, 1) : o.switchMode('Red');
                          });
                    }
                  }),
                  i
                );
              })(d)).prototype,
              'absorber',
              [m],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (O = i(P.prototype, 'absorbSounds', [A], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (R = i(P.prototype, 'absorbBG', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (x = i(P.prototype, 'maxAbsorbValue', [E], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 250;
              },
            })),
            (V = P))
          ) || V)
        );
        e._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/EgyptSandStormParticle.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './ParticleSelfdestroy.ts', './NodePools.ts', './SoundRescourses.ts'],
  function (e) {
    var t, n, i, o, r, a, l, s, d, u, p, c;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (n = e.inheritsLoose),
            (i = e.initializerDefineProperty),
            (o = e.assertThisInitialized);
        },
        function (e) {
          (r = e.cclegacy), (a = e._decorator), (l = e.AudioClip), (s = e.Prefab);
        },
        function (e) {
          d = e.ParticleSelfdestroy;
        },
        function (e) {
          (u = e.ArrayGet), (p = e.instantiatePooly);
        },
        function (e) {
          c = e.sounds;
        },
      ],
      execute: function () {
        var h, S, f, y, b, g, m, P, D, v, w, T, z;
        r._RF.push({}, '5dcd14Ew+VGl46/gjHvvHhB', 'EgyptSandStormParticle', void 0);
        var A = a.ccclass,
          R = a.property;
        e(
          'EgyptSandStormParticle',
          ((h = A('EgyptSandStormParticle')),
          (S = R([l])),
          (f = R([l])),
          (y = R([l])),
          (b = R([l])),
          (g = R(s)),
          h(
            ((D = t(
              (P = (function (e) {
                function t() {
                  for (var t, n = arguments.length, r = new Array(n), a = 0; a < n; a++) r[a] = arguments[a];
                  return (
                    (t = e.call.apply(e, [this].concat(r)) || this),
                    i(t, 'endSounds', D, o(t)),
                    i(t, 'startSounds', v, o(t)),
                    i(t, 'startOffSounds', w, o(t)),
                    i(t, 'loopSounds', T, o(t)),
                    (t.loopSound = void 0),
                    i(t, 'parThere', z, o(t)),
                    (t.particleSDThere = void 0),
                    (t.ended = !1),
                    t
                  );
                }
                n(t, e);
                var r = t.prototype;
                return (
                  (r.end = function () {
                    var e;
                    (this.ended = !0),
                      this.db.playAnimation('Die', 1 / 0),
                      null == (e = this.particleSDThere) || null == (e = e.db) || e.playAnimation('Die', 1 / 0),
                      (this.particleSDThere = null),
                      c.play(u.getRandom(this.endSounds));
                  }),
                  (r.onSettled = function () {
                    var e = p(this.parThere);
                    (e.parent = this.node.parent),
                      (e.scale = this.node.scale),
                      (e.worldPosition = this.node.worldPosition),
                      e.setSiblingIndex(0),
                      (this.particleSDThere = e.getComponent(d)),
                      this.particleSDThere.db.playAnimation('Idle', 1 / 0);
                  }),
                  (r.specialOnEnable = function () {
                    (this.particleSDThere = null),
                      (this.ended = !1),
                      this.db.playAnimation('Idle', 1 / 0),
                      (this.loopSound = u.getRandom(this.loopSounds)),
                      c.play(u.getRandom(this.startSounds)),
                      c.play(u.getRandom(this.startOffSounds));
                  }),
                  (r.update = function (e) {
                    this.particleSDThere &&
                      ((this.particleSDThere.node.worldPosition = this.node.worldPosition),
                      (this.particleSDThere.node.worldScale = this.node.worldScale)),
                      this.ended || c.play(this.loopSound);
                  }),
                  t
                );
              })(d)).prototype,
              'endSounds',
              [S],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (v = t(P.prototype, 'startSounds', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (w = t(P.prototype, 'startOffSounds', [y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (T = t(P.prototype, 'loopSounds', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (z = t(P.prototype, 'parThere', [g], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (m = P))
          ) || m)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/EgyptTombRaiserZombie.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Zombie.ts',
    './SoundsController.ts',
    './NodePools.ts',
    './CabbagePult.ts',
    './Square.ts',
    './LnC.ts',
    './Character.ts',
  ],
  function (n) {
    var i, t, e, o, r, a, u, s, l, c, h, b, p, d, m, f, y, w, g;
    return {
      setters: [
        function (n) {
          (i = n.applyDecoratedDescriptor),
            (t = n.inheritsLoose),
            (e = n.initializerDefineProperty),
            (o = n.assertThisInitialized);
        },
        function (n) {
          (r = n.cclegacy),
            (a = n._decorator),
            (u = n.AudioClip),
            (s = n.Prefab),
            (l = n.Node),
            (c = n.CCInteger),
            (h = n.Vec3),
            (b = n.dragonBones);
        },
        function (n) {
          p = n.Zombie;
        },
        function (n) {
          d = n.SoundFXController;
        },
        function (n) {
          m = n.NodePools;
        },
        function (n) {
          f = n.cabbagePult;
        },
        function (n) {
          y = n.Square;
        },
        function (n) {
          w = n.LnC;
        },
        function (n) {
          g = n.CharacterType;
        },
      ],
      execute: function () {
        var C, P, S, v, L, T, x, I, A, E, Z, k, z;
        r._RF.push({}, 'b4e80QiamVIgZWmcAophNZ9', 'EgyptTombRaiserZombie', void 0);
        var R = a.ccclass,
          O = a.property;
        n(
          'EgyptTombRaiserZombie',
          ((C = R('EgyptTombRaiserZombie')),
          (P = O(u)),
          (S = O(u)),
          (v = O(s)),
          (L = O(l)),
          (T = O(c)),
          C(
            ((A = i(
              (I = (function (n) {
                function i() {
                  for (var i, t = arguments.length, r = new Array(t), a = 0; a < t; a++) r[a] = arguments[a];
                  return (
                    (i = n.call.apply(n, [this].concat(r)) || this),
                    e(i, 'pukeSound', A, o(i)),
                    e(i, 'throwSound', E, o(i)),
                    e(i, 'boneProjectile', Z, o(i)),
                    e(i, 'throwPoint', k, o(i)),
                    e(i, 'maxThrowTime', z, o(i)),
                    (i.busy = 6),
                    i
                  );
                }
                t(i, n);
                var r = i.prototype;
                return (
                  (r.specialAnimationListener = function (n) {
                    if ('throw' == n.name && this.isAlive()) {
                      this.audioSource.playOneShot(this.throwSound, d.SoundFXVolume);
                      for (var i = null, t = Math.max(this.inLnC.cIndex - 2, 1), e = 0; e < 40 && !i; e++) {
                        var o = y.getRandomSquare(0, 4, t, this.inLnC.cIndex + 1).getComponent(w);
                        o.tombable() && (i = o);
                      }
                      i || (i = y.getRandomSquare(0, 4, t, this.inLnC.cIndex + 1).getComponent(w));
                      var r = m.instantiatePooly(this.boneProjectile);
                      f.lobOneCabbageOnNode(
                        r,
                        new h(this.throwPoint.worldPosition.x, this.node.worldPosition.y, this.node.worldPosition.z),
                        this.throwPoint.worldPosition.y - this.node.worldPosition.y,
                        this.inLane.prjLayer,
                        i.plantPoint,
                        1,
                        g.default,
                        !0,
                        40
                      );
                    }
                    'puke' == n.name && this.isAlive() && this.audioSource.playOneShot(this.pukeSound, d.SoundFXVolume);
                  }),
                  (r.specialZombieOnEnable = function () {
                    this.busy = 6;
                  }),
                  (r.throwBoneAnimation = function () {
                    var n = this;
                    this.correctShadeWP(),
                      (this.busy = 6),
                      (this.switching = !0),
                      (this.walking = !1),
                      this.body.playAnimation('Throw', this.maxThrowTime),
                      this.db.on(
                        b.EventObject.COMPLETE,
                        function () {
                          n.isAlive() && n.playWalk(), (n.switching = !1);
                        },
                        this
                      );
                  }),
                  (r.areaThrowable = function () {
                    var n = this,
                      i = !1;
                    return (
                      [0, 1, 2, 3, 4].forEach(function (t) {
                        [n.inLnC.cIndex - 2, n.inLnC.cIndex - 1, n.inLnC.cIndex, n.inLnC.cIndex + 1].forEach(function (n) {
                          i || n <= 0 || n > 8 || (i = y.getSquare(t, n).getComponent(w).tombable());
                        });
                      }),
                      i
                    );
                  }),
                  (r.specialZombieUpdate = function (n) {
                    var i;
                    this.isInLawn() &&
                      this.walking &&
                      (null == (i = this.inLnC) ? void 0 : i.cIndex) > 2 &&
                      this.areaThrowable() &&
                      (this.busy > 0 && (this.busy -= n), this.busy <= 0 && this.throwBoneAnimation());
                  }),
                  i
                );
              })(p)).prototype,
              'pukeSound',
              [P],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (E = i(I.prototype, 'throwSound', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Z = i(I.prototype, 'boneProjectile', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (k = i(I.prototype, 'throwPoint', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (z = i(I.prototype, 'maxThrowTime', [T], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 2;
              },
            })),
            (x = I))
          ) || x)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/electricPea.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './NodePools.ts',
    './ParticleSelfdestroy.ts',
    './cactusThorn.ts',
    './CharacterManager.ts',
    './Square.ts',
    './Zombie.ts',
    './electricPeaPointer.ts',
  ],
  function (e) {
    var t, o, n, i, r, a, l, s, c, u, h, d, P, f, p, w, g, v, y, C, m;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (o = e.inheritsLoose),
            (n = e.initializerDefineProperty),
            (i = e.assertThisInitialized);
        },
        function (e) {
          (r = e.cclegacy),
            (a = e._decorator),
            (l = e.Prefab),
            (s = e.CCFloat),
            (c = e.CCInteger),
            (u = e.Vec3),
            (h = e.Vec2),
            (d = e.HALF_PI);
        },
        function (e) {
          (P = e.NodePools), (f = e.instantiatePooly), (p = e.ArrayGet);
        },
        function (e) {
          w = e.ParticleSelfdestroy;
        },
        function (e) {
          g = e.cactusThorn;
        },
        function (e) {
          v = e.Rectangle;
        },
        function (e) {
          y = e.Square;
        },
        function (e) {
          C = e.zombieDamageType;
        },
        function (e) {
          m = e.electricPeaPointer;
        },
      ],
      execute: function () {
        var b, D, S, L, x, _, z, I, R, T, M, j, A;
        r._RF.push({}, '5747f2zKqhFKKw9UDDpUcpo', 'electricPea', void 0);
        var E = a.ccclass,
          F = a.property;
        e(
          'electricPea',
          ((b = E('electricPea')),
          (D = F(l)),
          (S = F(l)),
          (L = F(s)),
          (x = F(s)),
          (_ = F(c)),
          b(
            ((R = t(
              (I = (function (e) {
                function t() {
                  for (var t, o = arguments.length, r = new Array(o), a = 0; a < o; a++) r[a] = arguments[a];
                  return (
                    (t = e.call.apply(e, [this].concat(r)) || this),
                    n(t, 'footPar', R, i(t)),
                    (t.footPSD = void 0),
                    n(t, 'curvePar', T, i(t)),
                    n(t, 'eleCurveInterval', M, i(t)),
                    (t.eleCurveCD = 0),
                    n(t, 'eleCurveDamage', j, i(t)),
                    n(t, 'eleCurveMaxTarget', A, i(t)),
                    t
                  );
                }
                o(t, e);
                var r = t.prototype;
                return (
                  (r.characterOnEnable = function () {
                    this.initialize(),
                      (this.maxPierceAmount_ = 1 / 0),
                      (this.dealtTargetAmount = 0),
                      (this.contactingEnemies = []),
                      (this.footPSD = null),
                      (this.eleCurveCD = 0);
                  }),
                  (r.spawnFootParticle = function () {
                    var e = P.instantiatePooly(this.footPar);
                    (e.parent = this.node.parent),
                      (e.worldPosition = new u(this._worldPositionX, this._worldPositionY)),
                      e.setSiblingIndex(0),
                      (this.footPSD = e.getComponent(w)),
                      this.footPSD.db.playAnimation('Idle', 1 / 0);
                  }),
                  (r.characterOnDisable = function () {
                    var e;
                    null == (e = this.footPSD) || null == (e = e.db) || e.playAnimation('Die', 1), (this.footPSD = null);
                  }),
                  (r.specialOnLaneChange = function (e, t) {
                    var o, n;
                    null == (o = this.footPSD) || null == (o = o.node) || o.setParent(t.prjLayer),
                      null == (n = this.footPSD) || null == (n = n.node) || n.setSiblingIndex(0);
                  }),
                  (r.detectCurveEnemies = function () {
                    var e = this,
                      t = v.createRectangleCenter(
                        new h(this._worldPositionX, y.getLnC(this.lIndex, 0).node.worldPosition.y),
                        2 * y.SquareDisW,
                        2 * y.SquareDisH
                      ),
                      o = 0;
                    this.inLane.UpperLane.zombiePool()
                      .concat(this.inLane.LowerLane.zombiePool(), this.inLane.zombiePool())
                      .forEach(function (n) {
                        if (o < e.eleCurveMaxTarget && t.judgeCrossRec(n.bodyRec)) {
                          o++;
                          var i = f(e.curvePar);
                          (i.parent = n.inLane.prjLayer),
                            (i.worldPosition = new u(e._worldPositionX, e._worldPositionY + e._height, 10));
                          var r = new u(n.shadeSocket.worldPosition.x, n._worldPositionY + e.height, 10),
                            a = f(p.getRandom(e.PopParticle));
                          (a.parent = n.inLane.prjLayer), (a.worldPosition = new u(r.x, r.y, 10));
                          var l = r.clone().add(e.node.worldPosition.clone().negative());
                          (i.worldScale = new u(l.length() / 160, e.node.worldScale.x, 1)),
                            (i.angle = (90 * Math.atan2(l.y, l.x)) / d);
                          var s = i.getComponent(m);
                          (s.toPos = new h(r.x, r.y)),
                            (s.fromCharacter = e),
                            n.dealDamage(e.eleCurveDamage, !0, !1, !1, null, C.electricity);
                        }
                      }),
                      o < this.eleCurveMaxTarget &&
                        this.inLane.UpperLane.tombPool()
                          .concat(this.inLane.LowerLane.tombPool(), this.inLane.tombPool())
                          .forEach(function (n) {
                            if (o < e.eleCurveMaxTarget && t.judgeCrossRec(n.bodyRec)) {
                              o++;
                              var i = f(e.curvePar);
                              (i.parent = n.inLane.prjLayer),
                                (i.worldPosition = new u(e._worldPositionX, e._worldPositionY + e._height, 10));
                              var r = new u(n.shadeSocket.worldPosition.x, n._worldPositionY + e.height, 10),
                                a = f(p.getRandom(e.PopParticle));
                              (a.parent = n.inLane.prjLayer), (a.worldPosition = new u(r.x, r.y, 10));
                              var l = r.clone().add(e.node.worldPosition.clone().negative());
                              (i.worldScale = new u(l.length() / 160, e.node.worldScale.x, 1)),
                                (i.angle = (90 * Math.atan2(l.y, l.x)) / d);
                              var s = i.getComponent(m);
                              (s.toPos = new h(r.x, r.y)), (s.fromCharacter = e), n.dealDamage(e.eleCurveDamage);
                            }
                          }),
                      o && (this.playPopSound(), (this.eleCurveCD = this.eleCurveInterval));
                  }),
                  (r.characterUpdate = function (e) {
                    this.dead ||
                      this.fallingInSky ||
                      (this.rotate(),
                      this.switching || this.move(e),
                      this.detectEnemy(e),
                      this.hitBorderOrGround(e),
                      this.footPSD || this.spawnFootParticle(),
                      (this.footPSD.node.worldPosition = new u(this._worldPositionX, this._worldPositionY)),
                      (this.footPSD.node.scale = new u(this.node.scale.x, this.height / 75)),
                      this.eleCurveCD > 0 ? (this.eleCurveCD -= e) : this.detectCurveEnemies());
                  }),
                  t
                );
              })(g)).prototype,
              'footPar',
              [D],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (T = t(I.prototype, 'curvePar', [S], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (M = t(I.prototype, 'eleCurveInterval', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 0.5;
              },
            })),
            (j = t(I.prototype, 'eleCurveDamage', [x], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 20;
              },
            })),
            (A = t(I.prototype, 'eleCurveMaxTarget', [_], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 2;
              },
            })),
            (z = I))
          ) || z)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/electricPeaMega.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './commonShot.ts',
    './Peashooter.ts',
    './NodePools.ts',
    './Character.ts',
    './ParticleSelfdestroy.ts',
  ],
  function (t) {
    var o, e, i, n, r, a, l, s, c, h, u, d, P, f, p, y;
    return {
      setters: [
        function (t) {
          (o = t.applyDecoratedDescriptor),
            (e = t.inheritsLoose),
            (i = t.initializerDefineProperty),
            (n = t.assertThisInitialized);
        },
        function (t) {
          (r = t.cclegacy), (a = t._decorator), (l = t.CCInteger), (s = t.Prefab), (c = t.Vec2), (h = t.Vec3);
        },
        function (t) {
          u = t.commonShot;
        },
        function (t) {
          d = t.peaShooter;
        },
        function (t) {
          (P = t.instantiatePooly), (f = t.NodePools);
        },
        function (t) {
          p = t.CharacterType;
        },
        function (t) {
          y = t.ParticleSelfdestroy;
        },
      ],
      execute: function () {
        var S, g, m, w, b, D, v, C, x;
        r._RF.push({}, 'e35cb1gTrZJSLgx8nCxeiNV', 'electricPeaMega', void 0);
        var _ = a.ccclass,
          z = a.property;
        t(
          'electricPeaMega',
          ((S = _('electricPeaMega')),
          (g = z(l)),
          (m = z(s)),
          (w = z(s)),
          S(
            ((v = o(
              (D = (function (t) {
                function o() {
                  for (var o, e = arguments.length, r = new Array(e), a = 0; a < e; a++) r[a] = arguments[a];
                  return (
                    (o = t.call.apply(t, [this].concat(r)) || this),
                    i(o, 'maxChildCount', v, n(o)),
                    i(o, 'childPrj', C, n(o)),
                    i(o, 'footPar', x, n(o)),
                    (o.footPSD = void 0),
                    o
                  );
                }
                e(o, t);
                var r = o.prototype;
                return (
                  (r.specialOnLaneChange = function (t, o) {
                    var e, i;
                    null == (e = this.footPSD) || null == (e = e.node) || e.setParent(o.prjLayer),
                      null == (i = this.footPSD) || null == (i = i.node) || i.setSiblingIndex(0);
                  }),
                  (r.characterOnDisable = function () {
                    var t;
                    null == (t = this.footPSD) || null == (t = t.db) || t.playAnimation('Die', 1), (this.footPSD = null);
                  }),
                  (r.onPop = function () {
                    for (var t = 0; t < this.maxChildCount; t++) {
                      var o = P(this.childPrj),
                        e = new c(Math.random() - 0.5, Math.random() - 0.5).normalize(),
                        i = this.worldPosition.clone().add(e.clone().multiplyScalar(20));
                      d.shootOnePea(
                        o,
                        new h(i.x, i.y),
                        this.height + 1,
                        this.node.parent,
                        e.clone().multiplyScalar(10),
                        p.zombie
                      );
                    }
                  }),
                  (r.spawnFootParticle = function () {
                    var t = f.instantiatePooly(this.footPar);
                    (t.parent = this.node.parent),
                      (t.worldPosition = new h(this._worldPositionX, this._worldPositionY)),
                      t.setSiblingIndex(0),
                      (this.footPSD = t.getComponent(y)),
                      this.footPSD.db.playAnimation('Idle', 1 / 0);
                  }),
                  (r.characterUpdate = function (t) {
                    this.dead ||
                      this.fallingInSky ||
                      (this.rotate(),
                      this.switching || this.move(t),
                      this.detectEnemy(t),
                      this.hitBorderOrGround(t),
                      this.footPSD || this.spawnFootParticle(),
                      this.footPSD &&
                        ((this.footPSD.node.worldPosition = new h(this._worldPositionX, this._worldPositionY)),
                        (this.footPSD.node.scale = new h(2 * this.node.scale.x, this.height / 75))));
                  }),
                  o
                );
              })(u)).prototype,
              'maxChildCount',
              [g],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 6;
                },
              }
            )),
            (C = o(D.prototype, 'childPrj', [m], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (x = o(D.prototype, 'footPar', [w], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (b = D))
          ) || b)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/electricPeaPointer.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './ParticleSelfdestroy.ts'],
  function (t) {
    var r, e, o, i, n, a, c;
    return {
      setters: [
        function (t) {
          r = t.inheritsLoose;
        },
        function (t) {
          (e = t.cclegacy), (o = t._decorator), (i = t.Vec2), (n = t.Vec3), (a = t.HALF_PI);
        },
        function (t) {
          c = t.ParticleSelfdestroy;
        },
      ],
      execute: function () {
        var l;
        e._RF.push({}, '92ebd75LA1F45Mybv+CV6zb', 'electricPeaPointer', void 0);
        var s = o.ccclass;
        o.property,
          t(
            'electricPeaPointer',
            s('electricPeaPointer')(
              (l = (function (t) {
                function e() {
                  for (var r, e = arguments.length, o = new Array(e), i = 0; i < e; i++) o[i] = arguments[i];
                  return ((r = t.call.apply(t, [this].concat(o)) || this).toPos = null), (r.fromCharacter = null), r;
                }
                r(e, t);
                var o = e.prototype;
                return (
                  (o.specialOnEnable = function () {
                    (this.toPos = null), (this.fromCharacter = null);
                  }),
                  (o.update = function (t) {
                    if (this.fromCharacter && this.toPos) {
                      if (!this.fromCharacter.enabled) return (this.fromCharacter = null), void (this.toPos = null);
                      var r = this.toPos
                        .clone()
                        .add(
                          new i(
                            this.fromCharacter._worldPositionX,
                            this.fromCharacter._worldPositionY + this.fromCharacter._height
                          ).negative()
                        );
                      (this.node.worldPosition = new n(
                        this.fromCharacter._worldPositionX,
                        this.fromCharacter._worldPositionY + this.fromCharacter._height
                      )),
                        (this.node.worldScale = new n(r.length() / 160, this.fromCharacter.node.worldScale.x, 1)),
                        (this.node.angle = (90 * Math.atan2(r.y, r.x)) / a);
                    }
                  }),
                  e
                );
              })(c))
            ) || l
          );
        e._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/ElectricPeashooter.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Peashooter.ts',
    './electricPeashooterSound.ts',
    './CharacterManager.ts',
    './NodePools.ts',
  ],
  function (o) {
    var e, t, n, a, r, i, l, s, c, h, p, d, u;
    return {
      setters: [
        function (o) {
          (e = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (n = o.initializerDefineProperty),
            (a = o.assertThisInitialized);
        },
        function (o) {
          (r = o.cclegacy), (i = o._decorator), (l = o.Prefab), (s = o.Vec2);
        },
        function (o) {
          c = o.PeashooterPlant;
        },
        function (o) {
          h = o.electricPeashooterSound;
        },
        function (o) {
          (p = o.ZombiePool), (d = o.TombPool);
        },
        function (o) {
          u = o.ArrayGet;
        },
      ],
      execute: function () {
        var f, m, P, y, g;
        r._RF.push({}, 'f618dsR+RhGcLz5X0e8qG7Z', 'ElectricPeashooter', void 0);
        var v = i.ccclass,
          S = i.property;
        o(
          'ElectricPeashooter',
          ((f = v('ElectricPeashooter')),
          (m = S(l)),
          f(
            ((g = e(
              (y = (function (o) {
                function e() {
                  for (var e, t = arguments.length, r = new Array(t), i = 0; i < t; i++) r[i] = arguments[i];
                  return ((e = o.call.apply(o, [this].concat(r)) || this).minShootInterval = 2.4), n(e, 'peaMega', g, a(e)), e;
                }
                t(e, o);
                var r = e.prototype;
                return (
                  (r.animationListener = function (o) {
                    var e = this;
                    if ('shootStart' == o.name) this.getComponent(h).playShootStart();
                    else if ('Shoot' == o.name)
                      this.getComponent(h).playShootSound(), this._shoot(!1, !1, this.pea, 5, new s(1, 0));
                    else if ('foodShoot' == o.name) {
                      this.getComponent(h).playFoodShoot();
                      for (
                        var t = function () {
                            var o = null,
                              t = 1 / 0;
                            p.pool().length &&
                              u
                                .getRandom(p.pool())
                                .inLane.zombiePool()
                                .forEach(function (n) {
                                  var a = n.bodyRec.prjX();
                                  a.y > e._worldPositionX && a.x < t && ((o = n), (t = a.x));
                                });
                            !o &&
                              d.pool().length &&
                              u
                                .getRandom(d.pool())
                                .inLane.tombPool()
                                .forEach(function (n) {
                                  var a = n.bodyRec.prjX();
                                  a.y > e._worldPositionX && a.x < t && ((o = n), (t = a.x));
                                });
                            var n = new s(1, 0);
                            (n = o
                              ? o.worldPosition.clone().add(e.worldPosition.clone().negative())
                              : new s(1, Math.random() - 0.5)),
                              e._shoot(!1, !1, e.peaMega, 20, n);
                          },
                          n = 0;
                        n < this.foodPeaMaxCount;
                        n++
                      )
                        t();
                    } else 'foodEnd' == o.name ? this.foodEnd() : 'rand' == o.name && this.getComponent(h).playRandom();
                  }),
                  (r.specialPlantFood = function (o) {
                    this.anmControl.playAnimation('Food', 1);
                  }),
                  e
                );
              })(c)).prototype,
              'peaMega',
              [m],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (P = y))
          ) || P)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/electricPeashooterSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './peaShooterSound.ts', './NodePools.ts', './SoundRescourses.ts'],
  function (o) {
    var t, e, n, r, i, a, u, s, c, l;
    return {
      setters: [
        function (o) {
          (t = o.applyDecoratedDescriptor),
            (e = o.inheritsLoose),
            (n = o.initializerDefineProperty),
            (r = o.assertThisInitialized);
        },
        function (o) {
          (i = o.cclegacy), (a = o._decorator), (u = o.AudioClip);
        },
        function (o) {
          s = o.peaShooterSound;
        },
        function (o) {
          c = o.ArrayGet;
        },
        function (o) {
          l = o.sounds;
        },
      ],
      execute: function () {
        var d, p, S, h, f, y, b, m, g;
        i._RF.push({}, '9cee5nTjRpOcI/61CE/iUH0', 'electricPeashooterSound', void 0);
        var v = a.ccclass,
          P = a.property;
        o(
          'electricPeashooterSound',
          ((d = v('electricPeashooterSound')),
          (p = P([u])),
          (S = P([u])),
          (h = P(u)),
          d(
            ((b = t(
              (y = (function (o) {
                function t() {
                  for (var t, e = arguments.length, i = new Array(e), a = 0; a < e; a++) i[a] = arguments[a];
                  return (
                    (t = o.call.apply(o, [this].concat(i)) || this),
                    n(t, 'foodShootSounds', b, r(t)),
                    n(t, 'shootStartSounds', m, r(t)),
                    n(t, 'randomSound', g, r(t)),
                    t
                  );
                }
                e(t, o);
                var i = t.prototype;
                return (
                  (i.playFoodShoot = function () {
                    this.playOneShotFromArray(this.foodShootSounds);
                  }),
                  (i.playShootStart = function () {
                    l.play(c.getRandom(this.shootStartSounds), 0.5, 0.2);
                  }),
                  (i.playRandom = function () {
                    this.playOneShot(this.randomSound);
                  }),
                  t
                );
              })(s)).prototype,
              'foodShootSounds',
              [p],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (m = t(y.prototype, 'shootStartSounds', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (g = t(y.prototype, 'randomSound', [h], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (f = y))
          ) || f)
        );
        i._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/ElectronAPI.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (e) {
  var n, t, r, i;
  return {
    setters: [
      function (e) {
        n = e.inheritsLoose;
      },
      function (e) {
        (t = e.cclegacy), (r = e._decorator), (i = e.Component);
      },
    ],
    execute: function () {
      var o;
      t._RF.push({}, '36a7d3zGF5EObC1EAYiqHKr', 'ElectronAPI', void 0);
      var c = r.ccclass,
        s = (r.property, window.electron);
      e(
        'default',
        c('ElectronAPI')(
          (o = (function (e) {
            function t() {
              return e.apply(this, arguments) || this;
            }
            return (
              n(t, e),
              (t.center = function () {
                null == s || s.ipcRenderer.send('e_center');
              }),
              (t.fullScreen = function () {
                null == s || s.ipcRenderer.send('e_fullScreen');
              }),
              (t.window = function () {
                null == s || s.ipcRenderer.send('e_window'), this.setSize(1138, 640);
              }),
              (t.openDevTools = function () {
                s.ipcRenderer.send('e_openDevTools');
              }),
              (t.closeDevTools = function () {
                s.ipcRenderer.send('e_closeDevTools');
              }),
              (t.setSize = function (e, n) {
                null == s || s.ipcRenderer.send('e_setSize', e.toString(), n.toString());
              }),
              (t.setResolution = function (e, n) {
                null == s || s.ipcRenderer.send('e_setResolution', e.toString(), n.toString());
              }),
              (t.isFullScreen = function () {
                return !!s && s.ipcRenderer.sendSync('e_isFullScreen');
              }),
              (t.setScreenResolution = function (e, n) {
                1 == this.isFullScreen() ? this.setResolution(e, n) : this.setSize(e, n);
              }),
              (t.nircmdUD = function (e) {
                null == s || s.ipcRenderer.send('e_nircmdUD', e);
              }),
              (t.getMassage = function () {
                return null == s ? void 0 : s.ipcRenderer.sendSync('e_getMassage');
              }),
              (t.getAllResolutions = function () {
                return null == s ? void 0 : s.ipcRenderer.sendSync('e_getAllResolutions');
              }),
              (t.getCurrentResolution = function () {
                return null == s ? void 0 : s.ipcRenderer.sendSync('e_getCurrentResolution');
              }),
              (t.quit = function () {
                null == s || s.ipcRenderer.send('e_quit');
              }),
              t
            );
          })(i))
        ) || o
      );
      t._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/FirePeashooter.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Peashooter.ts',
    './peaShooterSound.ts',
    './GroundFire.ts',
    './Zombie.ts',
    './firePeashooterSound.ts',
    './CharacterManager.ts',
    './Square.ts',
  ],
  function (o) {
    var n, e, t, i, r, a, s, d, u, c, l, f, h, p, S, C;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (e = o.inheritsLoose),
            (t = o.initializerDefineProperty),
            (i = o.assertThisInitialized);
        },
        function (o) {
          (r = o.cclegacy), (a = o._decorator), (s = o.CCFloat), (d = o.Vec2);
        },
        function (o) {
          u = o.PeashooterPlant;
        },
        function (o) {
          c = o.peaShooterSound;
        },
        function (o) {
          (l = o.GroundFireColorEnum), (f = o.GroundFireSpreadStyleEnum);
        },
        function (o) {
          h = o.zombieDamageType;
        },
        function (o) {
          p = o.firePeashooterSound;
        },
        function (o) {
          S = o.Rectangle;
        },
        function (o) {
          C = o.Square;
        },
      ],
      execute: function () {
        var m, y, P, g, F;
        r._RF.push({}, '67fa4yb6mdHHpWZItQHTXzE', 'FirePeashooter', void 0);
        var D = a.ccclass,
          L = a.property;
        o(
          'FirePeashooterPlant',
          ((m = D('FirePeashooterPlant')),
          (y = L(s)),
          m(
            ((F = n(
              (g = (function (o) {
                function n() {
                  for (var n, e = arguments.length, r = new Array(e), a = 0; a < e; a++) r[a] = arguments[a];
                  return (
                    (n = o.call.apply(o, [this].concat(r)) || this),
                    t(n, 'foodDuration', F, i(n)),
                    (n.foodCountDown = 0),
                    (n.foodStarted = !1),
                    (n.foodFire = []),
                    n
                  );
                }
                e(n, o);
                var r = n.prototype;
                return (
                  (r.specialPlantOnEnable = function () {
                    this.initialize(), (this.getComponent(c).volumeScale = 0.3);
                  }),
                  (r.specialPeashooterUpdate = function (o) {
                    var n = this;
                    if (this.fooding && this.foodStarted)
                      if (this.foodCountDown > 0) {
                        var e = this.foodCountDown + 0;
                        this.foodCountDown -= o;
                        for (var t = this.foodCountDown + 0, i = Math.floor(4 * e) - Math.floor(4 * t), r = 0; r < i; r++)
                          this.inLane.zombiePool().forEach(function (o) {
                            var e = !1;
                            if (
                              (n.foodFire.forEach(function (n) {
                                if (!e) {
                                  var t = n.inLnC.rec;
                                  8 == n.inLnC.cIndex &&
                                    (t = S.createRectangleSide(
                                      new d(n.inLnC.node.worldPosition.x - C.SquareDisW / 2, n.inLnC.node.worldPosition.y),
                                      9 * C.SquareDisW,
                                      C.SquareDisH
                                    )),
                                    t.judgeCrossRec(o.bodyRec) && (e = !0);
                                }
                              }),
                              !e)
                            ) {
                              var t = n.inLnC.rec;
                              8 == n.inLnC.cIndex &&
                                (t = S.createRectangleSide(
                                  new d(n.inLnC.node.worldPosition.x - C.SquareDisW / 2, n.inLnC.node.worldPosition.y),
                                  9 * C.SquareDisW,
                                  C.SquareDisH
                                )),
                                t.judgeCrossRec(o.bodyRec) && (e = !0);
                            }
                            e && o.dealDamage(79, !1, !1, !1, null, h.fire);
                          }),
                            this.foodFire.forEach(function (o) {
                              var n;
                              null == (n = o.inLnC) || null == (n = n.tombStone) || n.dealDamage(79);
                            });
                      } else this.foodEnd();
                  }),
                  (r.specialPlantFoodEnd = function () {
                    this.getComponent(p).playFoodEndSound(), this.anmControl.playRandom(), (this.foodFire = []);
                  }),
                  (r.animationListenerAdd = function (o) {
                    var n;
                    'playFooding' == o.name
                      ? (this.getComponent(p).playFoodingSound(),
                        (this.foodStarted = !0),
                        this.anmControl.playAnimation('Food', 1 / 0),
                        (this.foodFire =
                          null == (n = this.inLnC.righter)
                            ? void 0
                            : n.addLaneFire(this.foodDuration, 10, l.yellow, f.right, 18, 9)),
                        (this.foodCountDown = this.foodDuration))
                      : 'foodStartSound' == o.name && this.getComponent(p).playFoodStartSound();
                  }),
                  (r.specialPlantFood = function () {
                    this.anmControl.playAnimation('FoodStart', 2), (this.foodStarted = !1);
                  }),
                  (r.detectEnemy = function () {
                    var o,
                      n = this,
                      e = !1;
                    return (
                      this.inLane.zombiePool().forEach(function (o) {
                        !e && n.detector.judgeCrossRec(o.bodyRec) && (e = !0);
                      }),
                      e ||
                        (this.inLane.tombPool().forEach(function (o) {
                          !e && n.detector.judgeCrossRec(o.bodyRec) && (e = !0);
                        }),
                        e ||
                          (null != (o = this.inLane) && o.iceTile && (e = !0),
                          e ||
                            this.inLane.iceTiles.forEach(function (o) {
                              !e && o.node.worldPosition.x > n.node.worldPosition.x && (e = !0);
                            }),
                          e))
                    );
                  }),
                  n
                );
              })(u)).prototype,
              'foodDuration',
              [y],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 5;
                },
              }
            )),
            (P = g))
          ) || P)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/firePeashooterSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './peaShooterSound.ts', './NodePools.ts', './SoundsController.ts'],
  function (o) {
    var t, e, n, i, r, u, a, d, l, s;
    return {
      setters: [
        function (o) {
          (t = o.applyDecoratedDescriptor),
            (e = o.inheritsLoose),
            (n = o.initializerDefineProperty),
            (i = o.assertThisInitialized);
        },
        function (o) {
          (r = o.cclegacy), (u = o._decorator), (a = o.AudioClip);
        },
        function (o) {
          d = o.peaShooterSound;
        },
        function (o) {
          l = o.ArrayGet;
        },
        function (o) {
          s = o.SoundFXController;
        },
      ],
      execute: function () {
        var c, S, f, p, h, y, g, m, b;
        r._RF.push({}, '31f95Yu65ZCvL7ohkhLmtnr', 'firePeashooterSound', void 0);
        var v = u.ccclass,
          F = u.property;
        o(
          'firePeashooterSound',
          ((c = v('firePeashooterSound')),
          (S = F([a])),
          (f = F(a)),
          (p = F([a])),
          c(
            ((g = t(
              (y = (function (o) {
                function t() {
                  for (var t, e = arguments.length, r = new Array(e), u = 0; u < e; u++) r[u] = arguments[u];
                  return (
                    (t = o.call.apply(o, [this].concat(r)) || this),
                    n(t, 'foodStartSounds', g, i(t)),
                    n(t, 'foodingSound', m, i(t)),
                    n(t, 'foodEndSounds', b, i(t)),
                    t
                  );
                }
                e(t, o);
                var r = t.prototype;
                return (
                  (r.playFoodStartSound = function () {
                    this.audioSource.playOneShot(l.getRandom(this.foodStartSounds), 1.4);
                  }),
                  (r.playFoodingSound = function () {
                    (this.audioSource.clip = this.foodingSound),
                      (this.audioSource.loop = !0),
                      this.audioSource.play(),
                      (this.audioSource.volume = 0.5 * s.SoundFXVolume);
                  }),
                  (r.playFoodEndSound = function () {
                    this.audioSource.stop(), this.audioSource.playOneShot(l.getRandom(this.foodEndSounds), 1.4);
                  }),
                  (r.update = function (o) {
                    this.audioSource.volume = 0.5 * s.SoundFXVolume;
                  }),
                  t
                );
              })(d)).prototype,
              'foodStartSounds',
              [S],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (m = t(y.prototype, 'foodingSound', [f], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (b = t(y.prototype, 'foodEndSounds', [p], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (h = y))
          ) || h)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/FloawerPot.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './LnC.ts', './FrontYard.ts', './SniperPlant.ts', './SoundRescourses.ts'],
  function (n) {
    var t, i, o, a, e, l, s, r, h, d, m;
    return {
      setters: [
        function (n) {
          (t = n.applyDecoratedDescriptor),
            (i = n.inheritsLoose),
            (o = n.initializerDefineProperty),
            (a = n.assertThisInitialized);
        },
        function (n) {
          (e = n.cclegacy), (l = n._decorator), (s = n.Node);
        },
        function (n) {
          r = n.TileType;
        },
        function (n) {
          h = n.FrontYard;
        },
        function (n) {
          d = n.SniperPlant;
        },
        function (n) {
          m = n.sounds;
        },
      ],
      execute: function () {
        var p, c, P, u, C;
        e._RF.push({}, '9a1e3m5hj5FhKdZE8VBqGLq', 'FloawerPot', void 0);
        var f = l.ccclass,
          y = l.property;
        n(
          'FloawerPotPlant',
          ((p = f('FloawerPotPlant')),
          (c = y(s)),
          p(
            ((C = t(
              (u = (function (n) {
                function t() {
                  for (var t, i = arguments.length, e = new Array(i), l = 0; l < i; l++) e[l] = arguments[l];
                  return (
                    (t = n.call.apply(n, [this].concat(e)) || this),
                    o(t, 'plantPoint', C, a(t)),
                    (t.planted = !1),
                    (t.ironed = !1),
                    (t.idle = 'Idle'),
                    (t.idlePlanted = 'Idle_Planted'),
                    (t.plant = 'Plant'),
                    (t.recover = 'Recover'),
                    (t.random = []),
                    t
                  );
                }
                i(t, n);
                var e = t.prototype;
                return (
                  (e.addPlant = function () {
                    !this.planted &&
                      this.inLnC.haveP() &&
                      ((this.planted = !0),
                      (this.foodable = !1),
                      (this.eaterDetectable = !1),
                      this.fooding || this.anmControl.playAnimation(this.plant),
                      (this.anmControl.IdleAnim = this.idlePlanted),
                      (this.anmControl.RandomAnim = []));
                  }),
                  (e.unPlant = function () {
                    this.planted &&
                      !this.inLnC.haveP() &&
                      ((this.planted = !1),
                      (this.foodable = !this.ironed),
                      (this.eaterDetectable = !0),
                      this.anmControl.playAnimation(this.recover),
                      (this.anmControl.IdleAnim = this.idle),
                      (this.anmControl.RandomAnim = this.random));
                  }),
                  (e.specialSniperPlantDie = function () {
                    this.inLnC.orgPlantPoint.worldPosition = this.inLnC.plantPoint.worldPosition;
                  }),
                  (e.specialPlantFood = function () {
                    (this.foodable = !1),
                      (this.ironed = !0),
                      this.anmControl.playAnimation('Food'),
                      (this.deathAnm = 'Death_Iron'),
                      (this.idle = 'Idle_Iron'),
                      (this.random = ['Rand1_Iron']),
                      (this.recover = 'Recover_Iron'),
                      (this.plant = 'Plant_Iron'),
                      (this.idlePlanted = 'Idle_Planted_Iron'),
                      (this.anmControl.IdleAnim = this.idle),
                      (this.anmControl.RandomAnim = this.random),
                      (this.health = 3 * this.toughness);
                  }),
                  (e.animationListener = function (n) {
                    'FoodEnd' == n.name && this.foodEnd();
                  }),
                  (e.specialSniperPlantOnEnable = function () {
                    (this.planted = !1), (this.random = this.anmControl.RandomAnim), (this.idle = this.anmControl.IdleAnim);
                  }),
                  (e.sniperPlantLocatable = function () {
                    return this.ironed && !this.planted;
                  }),
                  (e.specialSniperPlantLocateStart = function () {
                    (this.anmControl.IdleAnim = 'Locating'), (this.anmControl.RandomAnim = []), this.anmControl.playRandom();
                  }),
                  (e.specialSniperPlantLocateCancel = function () {
                    (this.anmControl.IdleAnim = this.idle),
                      (this.anmControl.RandomAnim = this.random),
                      this.anmControl.playRandom();
                  }),
                  (e.onLeapEnd = function () {
                    (this.anmControl.IdleAnim = this.idle),
                      (this.anmControl.RandomAnim = this.random),
                      this.anmControl.playRandom();
                  }),
                  (e.specialSniperPlantTrigger = function (n) {
                    n.floawerPotable()
                      ? (this.leapTo(n, 2.5, 0),
                        (this.anmControl.IdleAnim = 'Moving'),
                        (this.anmControl.RandomAnim = []),
                        this.anmControl.playRandom())
                      : ((this.anmControl.IdleAnim = this.idle),
                        (this.anmControl.RandomAnim = this.random),
                        this.anmControl.playRandom(),
                        m.playSniperPlantCancelSound());
                  }),
                  (e.specialPlantDie = function () {
                    this.inLnC.returnPlantPoint();
                  }),
                  (e.specialPlantUpdate = function (n) {
                    if (!this.dead && this.inLnC) {
                      (this.anmControl.potFront.node.worldPosition = this.anmControl.body.node.worldPosition),
                        !this.planted && this.inLnC.haveP()
                          ? this.addPlant()
                          : this.planted && !this.inLnC.haveP() && this.unPlant(),
                        this.inLnC.setPPWdPos(this.plantPoint.worldPosition);
                      var t = this.inLnC.getTileType();
                      t == r.water
                        ? (this.height = 20 * -h.depth(this.node.worldPosition.x))
                        : t == r.sky
                        ? (this.height = -20)
                        : (this.height = 0);
                    }
                    this.inLnC.getTileType();
                  }),
                  t
                );
              })(d)).prototype,
              'plantPoint',
              [c],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (P = u))
          ) || P)
        );
        e._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/FrontYard.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Tide.ts',
    './Square.ts',
    './stageEffect.ts',
    './lawn.ts',
    './SoundsController.ts',
    './CharacterManager.ts',
    './SoundManager.ts',
  ],
  function (e) {
    var t, n, r, a, i, o, l, u, c, d, s, f, p, b, g, h, y, m;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (n = e.inheritsLoose),
            (r = e.initializerDefineProperty),
            (a = e.assertThisInitialized);
        },
        function (e) {
          (i = e.cclegacy),
            (o = e._decorator),
            (l = e.Enum),
            (u = e.Prefab),
            (c = e.find),
            (d = e.instantiate),
            (s = e.Component);
        },
        function (e) {
          f = e.Tide;
        },
        function (e) {
          p = e.Square;
        },
        function (e) {
          b = e.StageEffect;
        },
        function (e) {
          g = e.lawn;
        },
        function (e) {
          h = e.MusicController;
        },
        function (e) {
          y = e.ZombiePool;
        },
        function (e) {
          m = e.WorldMusic;
        },
      ],
      execute: function () {
        var w,
          Y,
          k,
          C,
          S,
          T,
          z,
          v,
          L,
          E,
          F,
          N,
          D,
          _,
          M,
          P,
          W,
          B,
          H,
          I,
          A,
          U,
          q,
          x,
          R,
          Z,
          j,
          G,
          O,
          V,
          J,
          K,
          Q,
          X,
          $,
          ee,
          te,
          ne,
          re,
          ae,
          ie,
          oe,
          le,
          ue,
          ce,
          de,
          se,
          fe,
          pe,
          be,
          ge,
          he,
          ye,
          me;
        i._RF.push({}, '02e9e6yW1pACZVbPL+GWHAz', 'FrontYard', void 0);
        var we = o.ccclass,
          Ye = o.property,
          ke = e(
            'yardType',
            (function (e) {
              return (
                (e[(e.modern = 0)] = 'modern'),
                (e[(e.egypt = 1)] = 'egypt'),
                (e[(e.pirate = 2)] = 'pirate'),
                (e[(e.cowboy = 3)] = 'cowboy'),
                (e[(e.future = 4)] = 'future'),
                (e[(e.dark = 5)] = 'dark'),
                (e[(e.beach = 6)] = 'beach'),
                (e[(e.ice = 7)] = 'ice'),
                (e[(e.iceUlt = 8)] = 'iceUlt'),
                (e[(e.lost = 9)] = 'lost'),
                (e[(e.lostNight = 10)] = 'lostNight'),
                (e[(e.sky = 11)] = 'sky'),
                (e[(e.stage = 12)] = 'stage'),
                (e[(e.dino = 13)] = 'dino'),
                (e[(e.frontYardCircus = 14)] = 'frontYardCircus'),
                (e[(e.frontYardDark = 15)] = 'frontYardDark'),
                (e[(e.frontYardStage = 16)] = 'frontYardStage'),
                (e[(e.frontYardDino = 17)] = 'frontYardDino'),
                (e[(e.frontYardSummerNight = 18)] = 'frontYardSummerNight'),
                (e[(e.frontYardLunar = 19)] = 'frontYardLunar'),
                (e[(e.frontYardHalloween = 20)] = 'frontYardHalloween'),
                (e[(e.lostInTime = 21)] = 'lostInTime'),
                (e[(e.arena = 22)] = 'arena'),
                (e[(e.yardAmount = 23)] = 'yardAmount'),
                e
              );
            })({})
          ),
          Ce = e(
            'stageEffects',
            (function (e) {
              return (
                (e[(e.punk = 0)] = 'punk'),
                (e[(e.pop = 1)] = 'pop'),
                (e[(e.rap = 2)] = 'rap'),
                (e[(e.eightbit = 3)] = 'eightbit'),
                (e[(e.metal = 4)] = 'metal'),
                (e[(e.none = 5)] = 'none'),
                e
              );
            })({})
          );
        l(ke);
        e(
          'FrontYard',
          ((w = we('FrontYard')),
          (Y = Ye(u)),
          (k = Ye({ type: ke })),
          (C = Ye(u)),
          (S = Ye(u)),
          (T = Ye(u)),
          (z = Ye(u)),
          (v = Ye(u)),
          (L = Ye(u)),
          (E = Ye(u)),
          (F = Ye(u)),
          (N = Ye(u)),
          (D = Ye(u)),
          (_ = Ye(u)),
          (M = Ye(u)),
          (P = Ye(u)),
          (W = Ye(u)),
          (B = Ye(u)),
          (H = Ye(u)),
          (I = Ye(u)),
          (A = Ye(u)),
          (U = Ye(u)),
          (q = Ye(u)),
          (x = Ye(u)),
          (R = Ye(u)),
          (Z = Ye(u)),
          w(
            (((me = (function (e) {
              function t() {
                for (var t, n = arguments.length, i = new Array(n), o = 0; o < n; o++) i[o] = arguments[o];
                return (
                  (t = e.call.apply(e, [this].concat(i)) || this),
                  r(t, 'tide', O, a(t)),
                  r(t, 'yardType', V, a(t)),
                  r(t, 'modern', J, a(t)),
                  r(t, 'egypt', K, a(t)),
                  r(t, 'pirate', Q, a(t)),
                  r(t, 'cowboy', X, a(t)),
                  r(t, 'future', $, a(t)),
                  r(t, 'dark', ee, a(t)),
                  r(t, 'beach', te, a(t)),
                  r(t, 'ice', ne, a(t)),
                  r(t, 'iceUlt', re, a(t)),
                  r(t, 'lost', ae, a(t)),
                  r(t, 'lostNight', ie, a(t)),
                  r(t, 'sky', oe, a(t)),
                  r(t, 'stage', le, a(t)),
                  r(t, 'dino', ue, a(t)),
                  r(t, 'frontYardCircus', ce, a(t)),
                  r(t, 'frontYardDark', de, a(t)),
                  r(t, 'frontYardStage', se, a(t)),
                  r(t, 'frontYardDino', fe, a(t)),
                  r(t, 'frontYardSummerNight', pe, a(t)),
                  r(t, 'frontYardLunar', be, a(t)),
                  r(t, 'frontYardHalloween', ge, a(t)),
                  r(t, 'lostInTime', he, a(t)),
                  r(t, 'arena', ye, a(t)),
                  (t.currentStageType = Ce.none),
                  (t.tide_ = null),
                  t
                );
              }
              n(t, e),
                (t.levelPlayStart = function () {
                  c('Canvas/FrontYard').getComponent(t).levelPlayStart();
                }),
                (t.addTide = function () {
                  c('Canvas/FrontYard').getComponent(t)._addTide();
                }),
                (t.pushTide = function (e) {
                  var n;
                  null == (n = c('Canvas/FrontYard').getComponent(t).tide_) || n.getComponent(f).pushTide(e);
                }),
                (t.pullTide = function (e) {
                  var n;
                  null == (n = c('Canvas/FrontYard').getComponent(t).tide_) || n.getComponent(f).pullTide(e);
                }),
                (t.depth = function (e) {
                  var n = c('Canvas/FrontYard').getComponent(t);
                  return n.tide_
                    ? n.tide_.worldPosition.x > e
                      ? 0
                      : Math.min(1, (e - n.tide_.worldPosition.x) / p.SquareDisW)
                    : 0;
                }),
                (t.changeFrontYardByString = function (e) {
                  e.includes('Tutorial') || e.includes('Modern')
                    ? this.changeFrontYard(ke.modern)
                    : e.includes('EgyptStage')
                    ? this.changeFrontYard(ke.egypt)
                    : e.includes('PirateStage')
                    ? this.changeFrontYard(ke.pirate)
                    : e.includes('WestStage')
                    ? this.changeFrontYard(ke.cowboy)
                    : this.changeFrontYard(ke.modern);
                }),
                (t.changeFrontYard = function (e) {
                  return c('Canvas/FrontYard').getComponent(t).changeLawn(e);
                });
              var i = t.prototype;
              return (
                (i.changeLawn = function (e) {
                  var n, r;
                  (t.currentLawnYardType = e),
                    null == (n = t.currentLawn) || null == (n = n.node) || n.destroy(),
                    null == (r = this.tide_) || r.destroy(),
                    (this.tide_ = null);
                  var a = null;
                  switch (e) {
                    case ke.egypt:
                      a = d(this.egypt);
                      break;
                    case ke.sky:
                      a = d(this.sky);
                      break;
                    case ke.frontYardCircus:
                      a = d(this.frontYardCircus);
                      break;
                    case ke.frontYardDark:
                      a = d(this.frontYardDark);
                      break;
                    case ke.frontYardStage:
                      a = d(this.frontYardStage);
                      break;
                    case ke.frontYardSummerNight:
                      a = d(this.frontYardSummerNight);
                      break;
                    case ke.frontYardLunar:
                      a = d(this.frontYardLunar);
                      break;
                    case ke.lostInTime:
                      a = d(this.lostInTime);
                      break;
                    case ke.cowboy:
                      a = d(this.cowboy);
                      break;
                    case ke.pirate:
                      a = d(this.pirate);
                      break;
                    case ke.frontYardHalloween:
                      a = d(this.frontYardHalloween);
                      break;
                    case ke.future:
                      a = d(this.future);
                      break;
                    case ke.arena:
                      a = d(this.arena);
                      break;
                    case ke.dark:
                      a = d(this.dark);
                      break;
                    case ke.beach:
                      a = d(this.beach);
                      break;
                    case ke.ice:
                      a = d(this.ice);
                      break;
                    case ke.iceUlt:
                      a = d(this.iceUlt);
                      break;
                    case ke.lost:
                      a = d(this.lost);
                      break;
                    case ke.lostNight:
                      a = d(this.lostNight);
                      break;
                    case ke.stage:
                      a = d(this.stage);
                      break;
                    case ke.dino:
                      a = d(this.dino);
                      break;
                    case ke.frontYardDino:
                      a = d(this.frontYardDino);
                      break;
                    default:
                      a = d(this.modern);
                  }
                  (a.parent = this.node.getChildByName('lawn')), a.setSiblingIndex(0);
                  var i = a.getComponent(g);
                  return (
                    (t.currentLawn = i),
                    this.currentStageType == Ce.none && h.switchWorldMusic(i.worldMusic),
                    this.scheduleOnce(p.setSquareType, 0),
                    i
                  );
                }),
                (t.getStageEffect = function () {
                  return c('Canvas/FrontYard').getComponent(t).currentStageType;
                }),
                (t.setStageEffect = function (e) {
                  var n = c('Canvas/FrontYard').getComponent(t),
                    r = n.node.getChildByName('stageEffect');
                  if (e != n.currentStageType)
                    switch (((n.currentStageType = e), e)) {
                      case Ce.punk:
                        h.switchWorldMusic(m.Punk),
                          r.children.forEach(function (e) {
                            e.getComponent(b).playEnd();
                          }),
                          r.getChildByName('punk').getComponent(b).playStart();
                        break;
                      case Ce.pop:
                        h.switchWorldMusic(m.Pop),
                          r.children.forEach(function (e) {
                            e.getComponent(b).playEnd();
                          }),
                          r.getChildByName('pop').getComponent(b).playStart();
                        break;
                      case Ce.rap:
                        h.switchWorldMusic(m.Rap),
                          r.children.forEach(function (e) {
                            e.getComponent(b).playEnd();
                          }),
                          r.getChildByName('rap').getComponent(b).playStart();
                        break;
                      case Ce.eightbit:
                        h.switchWorldMusic(m.Eightbit),
                          r.children.forEach(function (e) {
                            e.getComponent(b).playEnd();
                          }),
                          r.getChildByName('eightBit').getComponent(b).playStart();
                        break;
                      case Ce.metal:
                        h.switchWorldMusic(m.Metal),
                          r.children.forEach(function (e) {
                            e.getComponent(b).playEnd();
                          }),
                          r.getChildByName('metal').getComponent(b).playStart();
                        break;
                      default:
                        h.switchWorldMusic(this.currentLawn.worldMusic),
                          r.children.forEach(function (e) {
                            e.getComponent(b).playEnd();
                          });
                    }
                }),
                (i._addTide = function () {
                  this.tide_ ||
                    ((this.tide_ = d(this.tide)),
                    (this.tide_.parent = this.node.getChildByName('tide')),
                    this.tide_.getComponent(f).standardize());
                }),
                (i.onLoad = function () {
                  (t.component = this), (t.currentLawnYardType = ke.modern), (t.currentLawn = null);
                }),
                (i.update = function (e) {
                  t.windy > 0 &&
                    (y
                      .pool()
                      .concat()
                      .forEach(function (e) {
                        e.flying && e.blowAway();
                      }),
                    (t.windy -= e)),
                    t.windy < 0 && (t.windy = 0);
                }),
                (i.start = function () {
                  this.changeLawn(this.yardType), (t.currentLawn.busyDropsun = 1 / 0);
                }),
                (i.levelPlayStart = function () {
                  t.currentLawn.busyDropsun = 3;
                }),
                t
              );
            })(s)).component = void 0),
            (me.windy = 0),
            (me.currentLawnYardType = void 0),
            (me.currentLawn = void 0),
            (O = t((G = me).prototype, 'tide', [Y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (V = t(G.prototype, 'yardType', [k], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return ke.modern;
              },
            })),
            (J = t(G.prototype, 'modern', [C], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (K = t(G.prototype, 'egypt', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Q = t(G.prototype, 'pirate', [T], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (X = t(G.prototype, 'cowboy', [z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            ($ = t(G.prototype, 'future', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (ee = t(G.prototype, 'dark', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (te = t(G.prototype, 'beach', [E], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (ne = t(G.prototype, 'ice', [F], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (re = t(G.prototype, 'iceUlt', [N], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (ae = t(G.prototype, 'lost', [D], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (ie = t(G.prototype, 'lostNight', [_], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (oe = t(G.prototype, 'sky', [M], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (le = t(G.prototype, 'stage', [P], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (ue = t(G.prototype, 'dino', [W], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (ce = t(G.prototype, 'frontYardCircus', [B], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (de = t(G.prototype, 'frontYardDark', [H], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (se = t(G.prototype, 'frontYardStage', [I], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (fe = t(G.prototype, 'frontYardDino', [A], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (pe = t(G.prototype, 'frontYardSummerNight', [U], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (be = t(G.prototype, 'frontYardLunar', [q], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (ge = t(G.prototype, 'frontYardHalloween', [x], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (he = t(G.prototype, 'lostInTime', [R], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (ye = t(G.prototype, 'arena', [Z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (j = G))
          ) || j)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/FumeShroom.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './CharacterManager.ts',
    './fumeShroomSound.ts',
    './NodePools.ts',
    './Square.ts',
  ],
  function (t) {
    var o, e, n, i, a, r, s, c, l, u, h, d, m, f, b, p;
    return {
      setters: [
        function (t) {
          (o = t.applyDecoratedDescriptor),
            (e = t.inheritsLoose),
            (n = t.initializerDefineProperty),
            (i = t.assertThisInitialized);
        },
        function (t) {
          (a = t.cclegacy), (r = t._decorator), (s = t.Prefab), (c = t.Node), (l = t.dragonBones), (u = t.Vec3), (h = t.Vec2);
        },
        function (t) {
          d = t.Plant;
        },
        function (t) {
          m = t.Rectangle;
        },
        function (t) {
          f = t.fumeShroomSound;
        },
        function (t) {
          b = t.NodePools;
        },
        function (t) {
          p = t.Square;
        },
      ],
      execute: function () {
        var y, g, P, S, D, v, L, k, C, w, R, z, E, T, N, j, F, q, W, H, A;
        a._RF.push({}, '55aa7VHxuJJmr3RtpmhWyai', 'FumeShroom', void 0);
        var I = r.ccclass,
          M = r.property;
        t(
          'FumeShroomPlant',
          ((y = I('FumeShroomPlant')),
          (g = M({ type: Number, min: 0 })),
          (P = M(s)),
          (S = M(s)),
          (D = M(s)),
          (v = M({ type: Number, min: 0 })),
          (L = M({ type: Number, min: 0 })),
          (k = M({ type: Number, min: 0 })),
          (C = M(Number)),
          (w = M(c)),
          y(
            ((E = o(
              (z = (function (t) {
                function o() {
                  for (var o, e = arguments.length, a = new Array(e), r = 0; r < e; r++) a[r] = arguments[r];
                  return (
                    ((o = t.call.apply(t, [this].concat(a)) || this).busy = 0),
                    (o.shooting = !1),
                    n(o, 'foodLastTime', E, i(o)),
                    (o.oldTimeScale = 1),
                    (o.foodShooting = !1),
                    n(o, 'shootParticle', T, i(o)),
                    n(o, 'foodParticle', N, i(o)),
                    n(o, 'hitParticle', j, i(o)),
                    n(o, 'damage', F, i(o)),
                    n(o, 'foodDPS', q, i(o)),
                    n(o, 'foodTickKnockback', W, i(o)),
                    (o.enemyDetector = null),
                    (o.shootDetector = null),
                    (o.foodDetector = null),
                    n(o, 'attackInterval', H, i(o)),
                    n(o, 'mouth', A, i(o)),
                    o
                  );
                }
                e(o, t);
                var a = o.prototype;
                return (
                  (a.specialPlantFood = function () {
                    this.anmControl.playAnimation('Food', 1), this.getComponent(f).playFoodSound();
                  }),
                  (a.specialPlantFoodEnd = function () {
                    (this.busy = 0), (this.foodShooting = !1);
                  }),
                  (a.specialPlantOnSquareChange = function (t, o) {
                    this.setDetecter();
                  }),
                  (a.specialPlantOnEnable = function () {
                    var t = this;
                    (this.busy = 0),
                      (this.foodShooting = !1),
                      this.anmControl.body.addEventListener(
                        l.EventObject.COMPLETE,
                        function () {
                          t.shooting = !1;
                        },
                        this
                      );
                  }),
                  (a.animationListener = function (t) {
                    'shoot' == t.name && this._shoot(),
                      'shootSound' == t.name && this.getComponent(f).playShootSound(),
                      'foodStart' == t.name &&
                        ((this.oldTimeScale = this.anmControl.body.timeScale),
                        (this.anmControl.body.timeScale = 3 / this.foodLastTime),
                        (this.spawnParticle(this.foodParticle).getComponent(l.ArmatureDisplay).timeScale = 3 / this.foodLastTime),
                        (this.foodShooting = !0)),
                      'foodEnd' == t.name && ((this.anmControl.body.timeScale = this.oldTimeScale), this.foodEnd());
                  }),
                  (a.spawnParticle = function (t) {
                    var o = b.instantiatePooly(t);
                    return (o.parent = this.inLane.prjLayer), o.setWorldPosition(this.mouth.getWorldPosition()), o;
                  }),
                  (a.spawnHitParticle = function (t) {
                    var o = b.instantiatePooly(this.hitParticle);
                    return (
                      (o.parent = this.inLane.prjLayer),
                      o.setWorldPosition(new u(t.getWorldPosition().x, this.mouth.getWorldPosition().y)),
                      o
                    );
                  }),
                  (a._shoot = function () {
                    var t = this;
                    this.spawnParticle(this.shootParticle),
                      this.inLane.zombiePool().forEach(function (o) {
                        t.shootDetector.judgeCrossRec(o.bodyRec) &&
                          (o.dealDamage(t.damage, !0, !1, !1), t.spawnHitParticle(o.node));
                      }),
                      this.inLane.tombPool().forEach(function (o) {
                        t.shootDetector.judgeCrossRec(o.bodyRec) && (o.dealDamage(t.damage), t.spawnHitParticle(o.node));
                      });
                  }),
                  (a.setDetecter = function () {
                    (this.enemyDetector = m.createRectangleNodeSide(this.inLnC.node, 4.5 * p.SquareDisW, p.SquareDisH)),
                      (this.shootDetector = m.createRectangleNodeSide(this.inLnC.node, 5.5 * p.SquareDisW, p.SquareDisH)),
                      (this.foodDetector = m.createRectangleNodeSide(this.inLnC.node, 20 * p.SquareDisW, p.SquareDisH));
                  }),
                  (a.detectShootEnemy = function () {
                    for (var t = this.inLane.zombiePool(), o = 0; o < t.length; o++)
                      if (this.enemyDetector.judgeCrossRec(t[o].bodyRec)) return !0;
                    for (var e = this.inLane.tombPool(), n = 0; n < e.length; n++)
                      if (this.enemyDetector.judgeCrossRec(e[n].bodyRec)) return !0;
                    return !1;
                  }),
                  (a.shootAnimation = function () {
                    (this.shooting = !0), this.anmControl.playAnimation('Shoot', 1, 0.1, Math.max(2.4 / this.attackInterval, 1));
                    var t = 0.03 * Math.round(5 * Math.random()) * (this.attackInterval / 1.35);
                    this.busy = this.attackInterval + t;
                  }),
                  (a.waterable = function () {
                    return !this.shooting;
                  }),
                  (a.specialPlantUpdate = function (t) {
                    var o = this;
                    (this.busy > 0 && (this.busy -= t),
                    this.busy <= 0 && this.detectShootEnemy() && !this.fooding && this.shootAnimation(),
                    this.foodShooting) &&
                      (this.inLane.zombiePool().forEach(function (e) {
                        o.foodDetector.judgeCrossRec(e.bodyRec) &&
                          (e.dealDamage(o.foodDPS * t, !0, !1, !1),
                          e.knockBackable && e.knockBackBy(new h(o.foodTickKnockback, 0), !1));
                      }),
                      this.inLane.tombPool().forEach(function (e) {
                        o.foodDetector.judgeCrossRec(e.bodyRec) && e.dealDamage(o.foodDPS * t);
                      }));
                  }),
                  o
                );
              })(d)).prototype,
              'foodLastTime',
              [g],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 3;
                },
              }
            )),
            (T = o(z.prototype, 'shootParticle', [P], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (N = o(z.prototype, 'foodParticle', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (j = o(z.prototype, 'hitParticle', [D], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (F = o(z.prototype, 'damage', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 40;
              },
            })),
            (q = o(z.prototype, 'foodDPS', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 800;
              },
            })),
            (W = o(z.prototype, 'foodTickKnockback', [k], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 0.4;
              },
            })),
            (H = o(z.prototype, 'attackInterval', [C], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 2.4;
              },
            })),
            (A = o(z.prototype, 'mouth', [w], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (R = z))
          ) || R)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/fumeShroomSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './SoundsController.ts', './NodePools.ts'],
  function (o) {
    var n, t, e, r, u, i, a, l, d, c, s;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (r = o.assertThisInitialized);
        },
        function (o) {
          (u = o.cclegacy), (i = o._decorator), (a = o.AudioClip), (l = o.AudioSource), (d = o.Component);
        },
        function (o) {
          c = o.SoundFXController;
        },
        function (o) {
          s = o.ArrayGet;
        },
      ],
      execute: function () {
        var p, S, f, h, m, y, g;
        u._RF.push({}, 'cade3ZxflpFtIpAVH6XXdrr', 'fumeShroomSound', void 0);
        var b = i.ccclass,
          v = i.property;
        o(
          'fumeShroomSound',
          ((p = b('fumeShroomSound')),
          (S = v([a])),
          (f = v(a)),
          p(
            ((y = n(
              (m = (function (o) {
                function n() {
                  for (var n, t = arguments.length, u = new Array(t), i = 0; i < t; i++) u[i] = arguments[i];
                  return (
                    ((n = o.call.apply(o, [this].concat(u)) || this).audioSource = void 0),
                    e(n, 'shootSounds', y, r(n)),
                    e(n, 'foodSound', g, r(n)),
                    n
                  );
                }
                t(n, o);
                var u = n.prototype;
                return (
                  (u.onEnable = function () {
                    this.getComponent(l) || this.addComponent(l), (this.audioSource = this.getComponent(l));
                  }),
                  (u.playShootSound = function () {
                    this.audioSource.playOneShot(s.getRandom(this.shootSounds), c.SoundFXVolume);
                  }),
                  (u.playFoodSound = function () {
                    this.audioSource.playOneShot(this.foodSound, c.SoundFXVolume);
                  }),
                  n
                );
              })(d)).prototype,
              'shootSounds',
              [S],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (g = n(m.prototype, 'foodSound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (h = m))
          ) || h)
        );
        u._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/FutureJetpackZombie.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Zombie.ts', './Plant.ts', './NodePools.ts', './SoundsController.ts'],
  function (t) {
    var n, e, i, o, a, s, l, r, u, c, h;
    return {
      setters: [
        function (t) {
          (n = t.applyDecoratedDescriptor),
            (e = t.inheritsLoose),
            (i = t.initializerDefineProperty),
            (o = t.assertThisInitialized);
        },
        function (t) {
          (a = t.cclegacy), (s = t._decorator), (l = t.AudioClip);
        },
        function (t) {
          r = t.Zombie;
        },
        function (t) {
          u = t.PlantType;
        },
        function (t) {
          c = t.ArrayGet;
        },
        function (t) {
          h = t.SoundFXController;
        },
      ],
      execute: function () {
        var p, d, y, b, f, m, g;
        a._RF.push({}, '37be5lN91pBzp7ia+0w4ui3', 'FutureJetpackZombie', void 0);
        var k = s.ccclass,
          S = s.property;
        t(
          'FutureJetpackZombie',
          ((p = k('FutureJetpackZombie')),
          (d = S([l])),
          (y = S([l])),
          p(
            ((m = n(
              (f = (function (t) {
                function n() {
                  for (var n, e = arguments.length, a = new Array(e), s = 0; s < e; s++) a[s] = arguments[s];
                  return (
                    ((n = t.call.apply(t, [this].concat(a)) || this).rosen = !1),
                    i(n, 'bounceSound', m, o(n)),
                    i(n, 'steadySound', g, o(n)),
                    n
                  );
                }
                e(n, t);
                var a = n.prototype;
                return (
                  (a.specialAnimationListener = function (t) {
                    'walk' == t.name
                      ? (this.playWalk(), (this.switching = !1))
                      : 'steady' == t.name
                      ? this.audioSource.playOneShot(c.getRandom(this.steadySound), h.SoundFXVolume)
                      : 'bounce' == t.name && this.audioSource.playOneShot(c.getRandom(this.bounceSound), h.SoundFXVolume);
                  }),
                  (a.rise = function () {
                    this.rosen ||
                      ((this.switching = !0),
                      (this.rosen = !0),
                      (this.walking = !1),
                      this.body.playAnimation('Rise', 1),
                      (this.body.WalkAnm = 'Walk_High'));
                  }),
                  (a.land = function () {
                    this.rosen &&
                      ((this.switching = !0),
                      (this.walking = !1),
                      this.body.playAnimation('Land', 1),
                      (this.body.WalkAnm = 'Walk'),
                      (this.rosen = !1));
                  }),
                  (a.detectPlantOn = function () {
                    return !this.switching;
                  }),
                  (a.detectPlant = function (t) {
                    var n;
                    if (0 != t && this.detectPlantOn()) {
                      var e = this.plantDetectorRec,
                        i = null;
                      this.ignorePlants() ||
                        this.inLane.plantPool().forEach(function (t) {
                          t.eaterDetectable &&
                            !t.short_ &&
                            e.judgeCrossRec(t.bodyRec) &&
                            ((i &&
                              t.plantType != u.vine &&
                              t.plantType != u.plant &&
                              t.plantType != u.lilyPad &&
                              t.plantType != u.pot) ||
                              ((!i || (i && !i.tall_)) && (i = t)));
                        }),
                        null != (n = i) && n.tall_
                          ? this.rosen
                            ? this.land()
                            : (i.eat(this.dps * t, this), this.playEat(t))
                          : i
                          ? this.rosen || this.rise()
                          : this.rosen
                          ? this.land()
                          : this.playWalk();
                    }
                  }),
                  (a.specialZombieOnEnable = function () {
                    (this.rosen = !1), (this.body.WalkAnm = 'Walk'), (this.walking = !1), this.playWalk();
                  }),
                  n
                );
              })(r)).prototype,
              'bounceSound',
              [d],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (g = n(f.prototype, 'steadySound', [y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (b = f))
          ) || b)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/GargantuarZombie.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Zombie.ts',
    './NodePools.ts',
    './SoundsController.ts',
    './Zombies.ts',
    './Square.ts',
  ],
  function (t) {
    var n, e, i, o, a, r, s, h, l, u, c, p, m, d, S, g;
    return {
      setters: [
        function (t) {
          (n = t.applyDecoratedDescriptor),
            (e = t.inheritsLoose),
            (i = t.initializerDefineProperty),
            (o = t.assertThisInitialized),
            (a = t.createClass);
        },
        function (t) {
          (r = t.cclegacy), (s = t._decorator), (h = t.AudioClip), (l = t.Node), (u = t.Vec2);
        },
        function (t) {
          c = t.Zombie;
        },
        function (t) {
          p = t.ArrayGet;
        },
        function (t) {
          m = t.SoundFXController;
        },
        function (t) {
          (d = t.zombies), (S = t.ZombieEnum);
        },
        function (t) {
          g = t.Square;
        },
      ],
      execute: function () {
        var f, w, y, b, I, v, P, T, R, O, _, z, L, D, F, C, Z, A, G, E, x, j, W;
        r._RF.push({}, 'c2c47hz+DBG6rPjf1JE6vJA', 'GargantuarZombie', void 0);
        var k = s.ccclass,
          q = s.property,
          X = t(
            'gargantuar',
            (function () {
              function t() {}
              return (
                (t.throwOneImpToLnC = function (t, n, e, i, o, a, r, s) {
                  void 0 === s && (s = 0);
                  var h = new u(g.getSquareWorldPosition(i.lIndex, i.cIndex).x, i.inLane.floorY).add(new u(s, 0));
                  return this.throwOneImpToWP(t, n, e, h, o, a, r);
                }),
                (t.throwOneImpByLnC = function (t, n, e, i, o, a, r) {
                  var s = e.clone().add(new u(i.x * g.SquareDisW, i.y * g.SquareDisH));
                  return this.throwOneImpToWP(t, n, e, s, o, a, r);
                }),
                (t.throwOneImpToWP = function (t, n, e, i, o, a, r) {
                  var s = d.getZombie(t);
                  s.parent = n.zombieLayer;
                  var h = s.getComponent(c);
                  h.worldPosition = e;
                  var l = i.clone();
                  return (h.flying = !0), (h.height = o), h.leapTo(l, !0, r, a), h;
                }),
                t
              );
            })()
          );
        t(
          'GargantuarZombie',
          ((f = k('GargantuarZombie')),
          (w = q([h])),
          (y = q([h])),
          (b = q([h])),
          (I = q([h])),
          (v = q([h])),
          (P = q([h])),
          (T = q([h])),
          (R = q([h])),
          (O = q([h])),
          (_ = q(l)),
          f(
            ((D = n(
              (L = (function (t) {
                function n() {
                  for (var n, e = arguments.length, a = new Array(e), r = 0; r < e; r++) a[r] = arguments[r];
                  return (
                    (n = t.call.apply(t, [this].concat(a)) || this),
                    i(n, 'stepSounds', D, o(n)),
                    i(n, 'deathPoleSounds', F, o(n)),
                    i(n, 'deathFallSounds', C, o(n)),
                    i(n, 'swingSounds', Z, o(n)),
                    i(n, 'smashSounds', A, o(n)),
                    i(n, 'afterSmashSaySounds', G, o(n)),
                    i(n, 'ImpThrowSaySounds', E, o(n)),
                    i(n, 'ImpThrowSounds', x, o(n)),
                    i(n, 'throwSounds', j, o(n)),
                    (n.isGargantuar = !0),
                    i(n, 'impThrower', W, o(n)),
                    (n.impEnum = S.modern_imp),
                    (n._haveImp = !0),
                    n
                  );
                }
                e(n, t);
                var r = n.prototype;
                return (
                  (r.detectPlant = function (t) {
                    var n = this;
                    if (!(t <= 0 || this.switching)) {
                      var e = !1;
                      this.inLane.plantPool().forEach(function (t) {
                        e || (t.smasherDetectable && t.bodyRec.judgeCrossRec(n.plantDetectorRec) && (e = !0));
                      }),
                        e
                          ? ((this.walking = !1),
                            (this.switching = !0),
                            this.correctShadeWP(),
                            this.body.playAnimation('Smash', 1))
                          : this.playWalk();
                    }
                  }),
                  (r.playSpecialZombieDie = function (t) {
                    this.judgeDeath();
                  }),
                  (r.specialGargantuarOnEnable = function () {}),
                  (r.specialZombieOnEnable = function () {
                    (this.haveImp = !0), this.specialGargantuarOnEnable();
                  }),
                  (r.throwImp = function () {
                    this._throwImp();
                  }),
                  (r._throwImp = function (t, n, e) {
                    if ((void 0 === t && (t = this.lIndex), void 0 === n && (n = 2), void 0 === e && (e = 250), this._haveImp)) {
                      this.haveImp = !1;
                      var i = X.throwOneImpToLnC(
                        this.impEnum,
                        this.inLane,
                        new u(this.impThrower.worldPosition.x, this._worldPositionY),
                        g.getLnC(t, n),
                        this.impThrower.worldPosition.y - this._worldPositionY,
                        e,
                        1.5
                      );
                      return i.body.playAnimation('Fly', 1 / 0), i;
                    }
                    return null;
                  }),
                  (r.specialAshPlayed = function (t) {
                    this._haveImp;
                  }),
                  (r.specialZombieUpdate = function (t) {
                    t > 0 &&
                      !this.switching &&
                      this._haveImp &&
                      this.health < this.toughness / 2 &&
                      this.inLnC.cIndex > 2 &&
                      ((this.walking = !1),
                      (this.switching = !0),
                      this.body.playAnimation('Throw', 1),
                      this.ImpThrowSaySounds.length &&
                        this.audioSource.playOneShot(p.getRandom(this.ImpThrowSaySounds), m.SoundFXVolume));
                  }),
                  (r._smash = function () {
                    var t,
                      n = this,
                      e = null;
                    this.inLane.plantPool().forEach(function (t) {
                      t.smasherDetectable &&
                        t.bodyRec.judgeCrossRec(n.plantDetectorRec) &&
                        (!e || e.bodyRec.prjX().y < t.bodyRec.prjX().y) &&
                        (e = t);
                    }),
                      null == (t = e) || t.smash(this, !0);
                  }),
                  (r.specialGargantuarAnimationListener = function (t) {}),
                  (r.specialAnimationListener = function (t) {
                    'step' == t.name && this.stepSounds.length
                      ? this.playOneShot(p.getRandom(this.stepSounds))
                      : 'deathPole' == t.name && this.deathPoleSounds.length
                      ? this.playOneShot(p.getRandom(this.deathPoleSounds))
                      : ('deathFall' == t.name && this.deathFallSounds.length) ||
                        ('deathFall' == t.name && this.deathFallSounds.length)
                      ? this.playOneShot(p.getRandom(this.deathFallSounds))
                      : 'swing' == t.name && this.swingSounds.length
                      ? this.playOneShot(p.getRandom(this.swingSounds))
                      : 'smash' == t.name
                      ? (this.smashSounds.length && this.playOneShot(p.getRandom(this.smashSounds)), this._smash())
                      : 'afterSmash' == t.name && this.afterSmashSaySounds.length
                      ? this.playOneShot(p.getRandom(this.afterSmashSaySounds))
                      : 'switchingFalse' == t.name
                      ? (this.switching = !1)
                      : 'impThrow' == t.name &&
                        (this.throwImp(),
                        this.throwSounds.length && this.playOneShot(p.getRandom(this.throwSounds)),
                        this.ImpThrowSounds.length && this.playOneShot(p.getRandom(this.ImpThrowSounds))),
                      this.specialGargantuarAnimationListener(t);
                  }),
                  a(n, [
                    {
                      key: 'haveImp',
                      set: function (t) {
                        (this._haveImp = t),
                          this.db
                            .armature()
                            .getSlots()
                            .forEach(function (n) {
                              n.name.includes('_IMP') && n._setDisplayIndex(t ? 0 : -1);
                            });
                      },
                    },
                  ]),
                  n
                );
              })(c)).prototype,
              'stepSounds',
              [w],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (F = n(L.prototype, 'deathPoleSounds', [y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (C = n(L.prototype, 'deathFallSounds', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Z = n(L.prototype, 'swingSounds', [I], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (A = n(L.prototype, 'smashSounds', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (G = n(L.prototype, 'afterSmashSaySounds', [P], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (E = n(L.prototype, 'ImpThrowSaySounds', [T], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (x = n(L.prototype, 'ImpThrowSounds', [R], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (j = n(L.prototype, 'throwSounds', [O], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (W = n(L.prototype, 'impThrower', [_], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (z = L))
          ) || z)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/GatlingPea.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Peashooter.ts', './peaShooterSound.ts', './NodePools.ts'],
  function (t) {
    var n, o, e, i, a, s, r, l, h, u, p, c;
    return {
      setters: [
        function (t) {
          (n = t.applyDecoratedDescriptor),
            (o = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (i = t.assertThisInitialized);
        },
        function (t) {
          (a = t.cclegacy), (s = t._decorator), (r = t.Prefab), (l = t.Node), (h = t.Vec2);
        },
        function (t) {
          u = t.PeashooterPlant;
        },
        function (t) {
          p = t.peaShooterSound;
        },
        function (t) {
          c = t.ArrayGet;
        },
      ],
      execute: function () {
        var d, g, f, S, m, y, b;
        a._RF.push({}, '7c304jCsOFJf6EXcGQQEYBT', 'GatlingPea', void 0);
        var P = s.ccclass,
          w = s.property;
        t(
          'GatlingPeaPlant',
          ((d = P('GatlingPeaPlant')),
          (g = w([r])),
          (f = w(l)),
          d(
            ((y = n(
              (m = (function (t) {
                function n() {
                  for (var n, o = arguments.length, a = new Array(o), s = 0; s < o; s++) a[s] = arguments[s];
                  return (
                    (n = t.call.apply(t, [this].concat(a)) || this),
                    e(n, 'randomFoodPrj', y, i(n)),
                    e(n, 'peaSpawnpoint2', b, i(n)),
                    (n.gatlingSlots = []),
                    (n.gatlingTubeSlots = []),
                    n
                  );
                }
                o(n, t);
                var a = n.prototype;
                return (
                  (a.specialPeashooterOnEnable = function () {
                    this.projectileSpeed = 1;
                  }),
                  (a.specialPlantOnLoad = function () {
                    var t = this;
                    (this.gatlingSlots = []),
                      (this.gatlingTubeSlots = []),
                      this.anmControl.body
                        .armature()
                        .getSlots()
                        .forEach(function (n) {
                          n.name.includes('_GUN') &&
                            (n.name.includes('_GUNTUBE') && t.gatlingTubeSlots.push(n), t.gatlingSlots.push(n));
                        });
                  }),
                  (a.onFoodLeftPeaCountDec = function () {
                    var t = c.getRandom(this.randomFoodPrj.concat([this.pea]));
                    if ((this._shoot(!0, !0, t), this.lIndex > 0)) {
                      var n = this._shoot(!0, !0, t, 15, new h(), this.peaSpawnpoint2);
                      (n.linearVelocity = new h(15, 17)), (n.deceleration = new h(0, -0.9));
                    }
                    if (this.lIndex < 4) {
                      var o = this._shoot(!0, !0, t, 15, new h(), this.peaSpawnpoint2);
                      (o.linearVelocity = new h(15, -17)), (o.deceleration = new h(0, 0.9));
                    }
                  }),
                  (a.specialPlantFood = function (t) {
                    this.upgraded
                      ? (this.anmControl.playAnimation('Food', 1 / 0),
                        this.foodShooting(),
                        this.gunTubeIgnite(!0),
                        this.getComponent(p).playFood(),
                        (this.busy = 1 / 0))
                      : (this.upgrade(), this.anmControl.playAnimation('FoodStart', 2));
                  }),
                  (a.gunTubeIgnite = function (t) {
                    void 0 === t && (t = !0),
                      this.upgraded &&
                        this.gatlingTubeSlots.forEach(function (n) {
                          var o;
                          null == (o = n.childArmature) || o.animation.play(t ? 'Shooting' : 'Idle', 1 / 0);
                        });
                  }),
                  (a.specialPlantDie = function () {
                    this.gunTubeIgnite(!1);
                  }),
                  (a.specialPlantFoodEnd = function () {
                    this.anmControl.playRandom(), this.gunTubeIgnite(!1), (this.busy = 0), this.getComponent(p).playFoodEnd();
                  }),
                  (a.animationListenerAdd = function (t) {
                    'Shoot' == t.name
                      ? (this.getComponent(p).playShootSound(1.5),
                        this.upgraded &&
                          (this._shoot(!1, !1, this.pea, 15, new h(1, 0.9), this.peaSpawnpoint2),
                          this._shoot(!1, !1, this.pea, 15, new h(1, -0.9), this.peaSpawnpoint2)))
                      : 'ShootStart' == t.name
                      ? this.gunTubeIgnite(!0)
                      : 'ShootEnd' == t.name
                      ? this.gunTubeIgnite(!1)
                      : 'foodStart' == t.name &&
                        (this.anmControl.playAnimation('Food', 1 / 0),
                        this.foodShooting(),
                        this.gunTubeIgnite(!0),
                        this.getComponent(p).playFood(),
                        (this.busy = 1 / 0));
                  }),
                  (a.upgrade = function () {
                    (this.upgraded = !0),
                      this.getComponent(p).playUpgrade(),
                      this.gatlingSlots.forEach(function (t) {
                        t.displayIndex = 0;
                      });
                  }),
                  n
                );
              })(u)).prototype,
              'randomFoodPrj',
              [g],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (b = n(m.prototype, 'peaSpawnpoint2', [f], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (S = m))
          ) || S)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/gem.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './dropping.ts',
    './GemCount.ts',
    './SoundRescourses.ts',
    './CoinCollecterInGame.ts',
  ],
  function (n) {
    var e, o, t, r, i, u, c, a, l, p, s;
    return {
      setters: [
        function (n) {
          (e = n.applyDecoratedDescriptor),
            (o = n.inheritsLoose),
            (t = n.initializerDefineProperty),
            (r = n.assertThisInitialized);
        },
        function (n) {
          (i = n.cclegacy), (u = n._decorator), (c = n.AudioClip);
        },
        function (n) {
          a = n.dropping;
        },
        function (n) {
          l = n.GemCount;
        },
        function (n) {
          p = n.sounds;
        },
        function (n) {
          s = n.CoinCollecterInGame;
        },
      ],
      execute: function () {
        var d, f, m, g, C;
        i._RF.push({}, '9c82ddzQiBIoIrReCwl2WVY', 'gem', void 0);
        var y = u.ccclass,
          h = u.property;
        n(
          'gem',
          ((d = y('gem')),
          (f = h(c)),
          d(
            ((C = e(
              (g = (function (n) {
                function e() {
                  for (var e, o = arguments.length, i = new Array(o), u = 0; u < o; u++) i[u] = arguments[u];
                  return (e = n.call.apply(n, [this].concat(i)) || this), t(e, 'dropSound', C, r(e)), e;
                }
                o(e, n);
                var i = e.prototype;
                return (
                  (i.specialOnGroundHit = function () {
                    p.play(this.dropSound, 1, 0);
                  }),
                  (i.goToUIPath = function () {
                    return 'Canvas/UIInGameUpper/CurrencyCount/GemSlot';
                  }),
                  (i.specialGoToUI = function (n) {
                    var e;
                    (s.component.hidden = !1), null == (e = l.component) || e.addGemCount(1);
                  }),
                  e
                );
              })(a)).prototype,
              'dropSound',
              [f],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (m = g))
          ) || m)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/GemCount.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './CurrencyCount.ts', './PlayerProperties.ts', './SoundRescourses.ts'],
  function (e) {
    var t, n, o, r, u, i, c, l, s, a;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (n = e.inheritsLoose),
            (o = e.initializerDefineProperty),
            (r = e.assertThisInitialized);
        },
        function (e) {
          (u = e.cclegacy), (i = e._decorator), (c = e.AudioClip);
        },
        function (e) {
          l = e.CurrencyCount;
        },
        function (e) {
          s = e.AllPlayerProperties;
        },
        function (e) {
          a = e.sounds;
        },
      ],
      execute: function () {
        var p, f, d, h, m, y;
        u._RF.push({}, 'e255fGKX6hKqqtVL4jk61z+', 'GemCount', void 0);
        var C = i.ccclass,
          v = i.property;
        e(
          'GemCount',
          ((p = C('GemCount')),
          (f = v(c)),
          p(
            (((y = (function (e) {
              function t() {
                for (var t, n = arguments.length, u = new Array(n), i = 0; i < n; i++) u[i] = arguments[i];
                return (t = e.call.apply(e, [this].concat(u)) || this), o(t, 'gemCollectSound', m, r(t)), t;
              }
              n(t, e);
              var u = t.prototype;
              return (
                (u.start = function () {
                  (this.shownValue = isNaN(s.currentPlayer.gem) ? 0 : s.currentPlayer.gem), (this.value = this._shownValue);
                }),
                (u.addGemCount = function (e) {
                  (this.value += e), a.play(this.gemCollectSound, 1, 0.1);
                }),
                (u.decGemCount = function (e) {
                  this.value -= e;
                }),
                (u.buyGem = function () {
                  this.addGemCount(1);
                }),
                (u.onValueSet = function (e) {
                  (s.currentPlayer.gem = e), s.savePP();
                }),
                (u.onLoad = function () {
                  t.component = this;
                }),
                t
              );
            })(l)).component = void 0),
            (m = t((h = y).prototype, 'gemCollectSound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (d = h))
          ) || d)
        );
        u._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/GlacierShroom.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './CharacterManager.ts',
    './levelController.ts',
    './glacierShroomSound.ts',
    './Zombie.ts',
    './Square.ts',
    './NodePools.ts',
  ],
  function (e) {
    var t, n, o, i, a, r, l, s, c, h, u, p, f, d, m, C, g, b, y, w, z, S;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (n = e.inheritsLoose),
            (o = e.initializerDefineProperty),
            (i = e.assertThisInitialized);
        },
        function (e) {
          (a = e.cclegacy),
            (r = e._decorator),
            (l = e.CCFloat),
            (s = e.Prefab),
            (c = e.Color),
            (h = e.AnimationComponent),
            (u = e.tween),
            (p = e.dragonBones),
            (f = e.Vec3);
        },
        function (e) {
          d = e.Plant;
        },
        function (e) {
          (m = e.ZombiePool), (C = e.TombPool), (g = e.Rectangle);
        },
        function (e) {
          b = e.LevelPlay;
        },
        function (e) {
          y = e.glacierShroomSound;
        },
        function (e) {
          w = e.zombieDamageType;
        },
        function (e) {
          z = e.Square;
        },
        function (e) {
          S = e.NodePools;
        },
      ],
      execute: function () {
        var P, D, I, L, v, E, F, R, k, A, x, _, B, T, q, W, G;
        a._RF.push({}, '567d2qH5vZJW6Vx5t9S4QgI', 'GlacierShroom', void 0);
        var H = r.ccclass,
          O = r.property;
        e(
          'GlacierShroomPlant',
          ((P = H('GlacierShroomPlant')),
          (D = O(l)),
          (I = O(s)),
          (L = O(l)),
          (v = O(s)),
          (E = O(c)),
          (F = O(c)),
          (R = O(l)),
          P(
            ((x = t(
              (A = (function (e) {
                function t() {
                  for (var t, n = arguments.length, a = new Array(n), r = 0; r < n; r++) a[r] = arguments[r];
                  return (
                    ((t = e.call.apply(e, [this].concat(a)) || this).lit = !1),
                    o(t, 'eatFreezeDuration', x, i(t)),
                    (t.eatFreezeCooldown = 0),
                    o(t, 'splatParticle', _, i(t)),
                    o(t, 'freezeDuration', B, i(t)),
                    (t.awaken = !0),
                    (t.sleeping = 0),
                    (t.switching = !1),
                    o(t, 'tileChillBuff', T, i(t)),
                    (t.tileBuffParticles = []),
                    o(t, 'freezeColor1', q, i(t)),
                    o(t, 'freezeColor2', W, i(t)),
                    (t.detector = void 0),
                    o(t, 'sleepDuration', G, i(t)),
                    (t.screenColor = new c(0, 0, 0, 0)),
                    t
                  );
                }
                n(t, e);
                var a = t.prototype;
                return (
                  (a.specialPlantFood = function (e) {
                    this.anmControl.playAnimation('Food', 1),
                      this.getComponent(h).stop(),
                      (this.anmControl.body.color = new c(255, 255, 255, 255));
                  }),
                  (a.specialPlantOnEnable = function () {
                    (this.lit = !1),
                      (this.switching = !1),
                      (this.sleeping = 0),
                      (this.awaken = !0),
                      this.anmControl.body
                        .armature()
                        .getSlots()
                        .forEach(function (e) {
                          e.name.includes('_LIT') && e._setDisplayIndex(-1);
                        }),
                      (this.anmControl.IdleAnim = 'Idle'),
                      (this.anmControl.RandomAnim = ['Rand1', 'Rand2']);
                  }),
                  (a.splat = function (e) {
                    void 0 === e && (e = !1);
                    var t = S.instantiatePooly(this.splatParticle);
                    (t.parent = this.inLane.node),
                      (t.worldPosition = this.node.worldPosition.clone().add3f(0, e ? 40 : 0, 0)),
                      e || t.setSiblingIndex(0);
                  }),
                  (a.specialPlantOnEaten = function (e, t, n, o) {
                    this.lit &&
                      this.eatFreezeCooldown <= 0 &&
                      ((this.eatFreezeCooldown = this.eatFreezeDuration),
                      this.detectInRangeEnemies().forEach(function (e) {
                        e.flying || e.setFreeze(3), e.setChill(3);
                      }),
                      this.splat(!0),
                      this.getComponent(y).playEatFreezeSound());
                  }),
                  (a.animationListener = function (e) {
                    var t = this;
                    switch (e.name) {
                      case 'Freeze':
                        this.fooding &&
                          ((this.lit = !0),
                          this.anmControl.body
                            .armature()
                            .getSlots()
                            .forEach(function (e) {
                              e.name.includes('_LIT') && e._setDisplayIndex(0);
                            }),
                          (this.switching = !1),
                          (this.sleeping = 0),
                          (this.awaken = !0),
                          (this.anmControl.IdleAnim = 'Idle'),
                          (this.anmControl.RandomAnim = ['Rand1', 'Rand2']),
                          this.getComponent(y).playTornadoSound()),
                          this.getComponent(y).playFreezeSound(),
                          m
                            .pool()
                            .concat()
                            .forEach(function (e) {
                              e.flying || e.setFreeze(t.freezeDuration),
                                e.setChill(t.freezeDuration),
                                e.dealDamage(20, !1, !1, !1, null, w.physicle);
                            }),
                          C.pool()
                            .concat()
                            .forEach(function (e) {
                              e.dealDamage(20);
                            });
                        var n = u(this.screenColor)
                          .to(1 / 60 / this.anmControl.body.timeScale, {
                            r: this.freezeColor2.r,
                            g: this.freezeColor2.g,
                            b: this.freezeColor2.b,
                            a: this.freezeColor2.a,
                          })
                          .to(1 / 4 / this.anmControl.body.timeScale, { a: 0 })
                          .start();
                        this.bodyTweens.push(n);
                        break;
                      case 'screenFlashStart':
                        this.screenColor = new c(this.freezeColor1.r, this.freezeColor1.g, this.freezeColor1.b, 0);
                        var o = u(this.screenColor)
                          .to(0.5 / this.anmControl.body.timeScale, { a: this.freezeColor1.a })
                          .start();
                        this.bodyTweens.push(o);
                        break;
                      case 'foodEnd':
                        this.foodEnd();
                        break;
                      case 'sleepStart':
                        (this.switching = !1),
                          (this.awaken = !1),
                          (this.sleeping = this.sleepDuration),
                          (this.anmControl.IdleAnim = 'Sleep'),
                          (this.anmControl.RandomAnim = []),
                          this.getComponent(h).play('plantCooldown');
                        break;
                      case 'steadySound':
                        this.getComponent(y).playSteadySound();
                        break;
                      case 'wakeSound':
                        this.getComponent(y).playWakeSound();
                        break;
                      case 'splat':
                        this.splat();
                        break;
                      case 'splatHigh':
                        this.splat(!0);
                    }
                  }),
                  (a.waterable = function () {
                    return this.sleeping <= 0 && !this.switching;
                  }),
                  (a.specialPlantOnSquareChange = function (e, t) {
                    var n = this;
                    (this.detector = g.createRectangleNodeCenter(t.node, 3 * z.SquareDisW, 3 * z.SquareDisH)),
                      this.tileBuffParticles.forEach(function (e) {
                        e.playAnimation('Fade', 1);
                      }),
                      (this.tileBuffParticles = []),
                      [this.inLane.UpperLane, this.inLane, this.inLane.LowerLane].forEach(function (e) {
                        if (e.LaneIndex >= 0 && e.LaneIndex <= 4) {
                          var t = S.instantiatePooly(n.tileChillBuff);
                          t.parent = e.node;
                          var o = t.getComponent(p.ArmatureDisplay);
                          o.playAnimation('Spawn', 1);
                          var i = z.getSquareWorldPosition(e.LaneIndex, n.inLnC.cIndex);
                          (t.worldPosition = new f(i.x, i.y, 4)), t.setSiblingIndex(0), n.tileBuffParticles.push(o);
                        }
                      }),
                      this.tileBuffParticles.forEach(function (e) {
                        e.armature()
                          .getSlots()
                          .forEach(function (e) {
                            e.name.includes('_snow') && e._setDisplayIndex(n.lit ? 0 : -1);
                          });
                      });
                  }),
                  (a.detectInRangeEnemies = function () {
                    var e = this,
                      t = [];
                    return (
                      this.inLane
                        .zombiePool()
                        .concat(this.inLane.UpperLane.zombiePool(), this.inLane.LowerLane.zombiePool())
                        .forEach(function (n) {
                          var o;
                          null != (o = e.detector) && o.judgeCrossRec(n.bodyRec) && t.push(n);
                        }),
                      t
                    );
                  }),
                  (a.specialPlantLateUpdate = function (e) {
                    0 != this.screenColor.a && b.screenFlashColors.push(this.screenColor);
                  }),
                  (a.specialPlantUpdate = function (e) {
                    var t = this;
                    this.eatFreezeCooldown > 0 && (this.eatFreezeCooldown -= e),
                      this.fooding ||
                        (this.sleeping > 0 &&
                          ((this.getComponent(h).getState('plantCooldown').speed = this.sleepDuration / (this.sleeping + 0.5)),
                          (this.sleeping -= e)),
                        this.sleeping < 0 &&
                          !this.awaken &&
                          ((this.awaken = !0),
                          this.anmControl.playAnimation('Wake', 1),
                          this.getComponent(y).playWakeSound(),
                          (this.anmControl.IdleAnim = 'Idle'),
                          (this.anmControl.RandomAnim = ['Rand1', 'Rand2']),
                          this.getComponent(h).stop(),
                          (this.anmControl.body.color = new c(255, 255, 255, 255))),
                        this.anmControl.body
                          .armature()
                          .getSlots()
                          .forEach(function (e) {
                            e.name.includes('_LIT') && e._setDisplayIndex(t.lit ? 0 : -1);
                          })),
                      this.tileBuffParticles.forEach(function (e) {
                        e.armature()
                          .getSlots()
                          .forEach(function (e) {
                            e.name.includes('_snow') && e._setDisplayIndex(t.lit ? 0 : -1);
                          });
                      }),
                      this.detectInRangeEnemies().forEach(function (e) {
                        e.setChill(2);
                      });
                  }),
                  (a.specialPlantDie = function () {
                    this.getComponent(h).stop(),
                      (this.anmControl.body.color = new c(255, 255, 255, 255)),
                      this.tileBuffParticles.forEach(function (e) {
                        e.playAnimation('Fade', 1);
                      });
                  }),
                  (a.specialPlantOnMouseDown = function () {
                    return (
                      this.sleeping <= 0 &&
                      !this.switching &&
                      !this.fooding &&
                      (this.anmControl.playAnimation('Freeze', 1), (this.switching = !0), !0)
                    );
                  }),
                  t
                );
              })(d)).prototype,
              'eatFreezeDuration',
              [D],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 3.5;
                },
              }
            )),
            (_ = t(A.prototype, 'splatParticle', [I], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (B = t(A.prototype, 'freezeDuration', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 5;
              },
            })),
            (T = t(A.prototype, 'tileChillBuff', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (q = t(A.prototype, 'freezeColor1', [E], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new c(0, 0, 0, 0);
              },
            })),
            (W = t(A.prototype, 'freezeColor2', [F], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new c(0, 0, 0, 0);
              },
            })),
            (G = t(A.prototype, 'sleepDuration', [R], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 25;
              },
            })),
            (k = A))
          ) || k)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/glacierShroomSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './SoundsController.ts'],
  function (e) {
    var o, n, t, u, r, i, a, l, d, S, c;
    return {
      setters: [
        function (e) {
          (o = e.applyDecoratedDescriptor),
            (n = e.inheritsLoose),
            (t = e.initializerDefineProperty),
            (u = e.assertThisInitialized);
        },
        function (e) {
          (r = e.cclegacy), (i = e._decorator), (a = e.AudioClip), (l = e.AudioSource), (d = e.Component);
        },
        function (e) {
          S = e.ArrayGet;
        },
        function (e) {
          c = e.SoundFXController;
        },
      ],
      execute: function () {
        var s, p, f, h, y, m, b, z, g, F, w, C, k, v, D;
        r._RF.push({}, 'd69211TCh1JbqfIlor39+aB', 'glacierShroomSound', void 0);
        var X = i.ccclass,
          O = i.property;
        e(
          'glacierShroomSound',
          ((s = X('glacierShroomSound')),
          (p = O([a])),
          (f = O([a])),
          (h = O([a])),
          (y = O(a)),
          (m = O(a)),
          (b = O(a)),
          s(
            ((F = o(
              (g = (function (e) {
                function o() {
                  for (var o, n = arguments.length, r = new Array(n), i = 0; i < n; i++) r[i] = arguments[i];
                  return (
                    ((o = e.call.apply(e, [this].concat(r)) || this).audioSource = null),
                    t(o, 'freezeSound', F, u(o)),
                    t(o, 'steadySound', w, u(o)),
                    t(o, 'eatFreezeSound', C, u(o)),
                    (o.eatFreezeSoundCoolDown = 0),
                    t(o, 'tornadoSound', k, u(o)),
                    t(o, 'wakeSound', v, u(o)),
                    t(o, 'wakeCoffeeSound', D, u(o)),
                    o
                  );
                }
                n(o, e);
                var r = o.prototype;
                return (
                  (r.onLoad = function () {
                    this.getComponent(l) || this.addComponent(l), (this.audioSource = this.getComponent(l));
                  }),
                  (r.playFreezeSound = function () {
                    this.audioSource.playOneShot(S.getRandom(this.freezeSound), c.SoundFXVolume);
                  }),
                  (r.playSteadySound = function () {
                    this.audioSource.playOneShot(S.getRandom(this.steadySound), c.SoundFXVolume);
                  }),
                  (r.playEatFreezeSound = function () {
                    this.eatFreezeSoundCoolDown <= 0 &&
                      this.audioSource.playOneShot(S.getRandom(this.eatFreezeSound), c.SoundFXVolume);
                  }),
                  (r.playTornadoSound = function () {
                    this.audioSource.playOneShot(this.tornadoSound, c.SoundFXVolume);
                  }),
                  (r.playWakeSound = function () {
                    this.audioSource.playOneShot(this.wakeSound, c.SoundFXVolume),
                      this.audioSource.playOneShot(this.wakeCoffeeSound, c.SoundFXVolume);
                  }),
                  (r.update = function (e) {
                    this.eatFreezeSoundCoolDown > 0 && this.eatFreezeSoundCoolDown--;
                  }),
                  o
                );
              })(d)).prototype,
              'freezeSound',
              [p],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (w = o(g.prototype, 'steadySound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (C = o(g.prototype, 'eatFreezeSound', [h], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (k = o(g.prototype, 'tornadoSound', [y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (v = o(g.prototype, 'wakeSound', [m], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (D = o(g.prototype, 'wakeCoffeeSound', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (z = g))
          ) || z)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/GloomVine.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './CharacterManager.ts',
    './Square.ts',
    './Zombie.ts',
    './gloomVineSound.ts',
    './NodePools.ts',
  ],
  function (t) {
    var e, o, n, a, i, r, c, s, l, u, h, d, f, p, m;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor),
            (o = t.inheritsLoose),
            (n = t.initializerDefineProperty),
            (a = t.assertThisInitialized);
        },
        function (t) {
          (i = t.cclegacy), (r = t._decorator), (c = t.CCFloat), (s = t.Prefab), (l = t.Vec2);
        },
        function (t) {
          u = t.Plant;
        },
        function (t) {
          h = t.Rectangle;
        },
        function (t) {
          d = t.Square;
        },
        function (t) {
          f = t.zombieDamageType;
        },
        function (t) {
          p = t.gloomVineSound;
        },
        function (t) {
          m = t.NodePools;
        },
      ],
      execute: function () {
        var P, b, g, L, D, k, y, C, S, w, z, v, R;
        i._RF.push({}, 'fa3ccoDNupO5rmnQnpQqZMp', 'GloomVine', void 0);
        var E = r.ccclass,
          V = r.property;
        t(
          'GloomVinePlant',
          ((P = E('GloomVinePlant')),
          (b = V(c)),
          (g = V(c)),
          (L = V(c)),
          (D = V(s)),
          (k = V(s)),
          P(
            ((S = e(
              (C = (function (t) {
                function e() {
                  for (var e, o = arguments.length, i = new Array(o), r = 0; r < o; r++) i[r] = arguments[r];
                  return (
                    (e = t.call.apply(t, [this].concat(i)) || this),
                    n(e, 'attackDuration', S, a(e)),
                    (e.attackCD = 0),
                    n(e, 'damage', w, a(e)),
                    (e.detector = h.createRectangleCenter(new l(0, 0), 0, 0)),
                    (e.attacking = !1),
                    n(e, 'foodDPS', z, a(e)),
                    (e.foodStarted = !1),
                    n(e, 'shootParticle', v, a(e)),
                    n(e, 'foodParticle', R, a(e)),
                    e
                  );
                }
                o(e, t);
                var i = e.prototype;
                return (
                  (i.waterable = function () {
                    return !this.attacking;
                  }),
                  (i.specialPlantOnSquareChange = function (t, e) {
                    this.setDetector(t, e);
                  }),
                  (i.setDetector = function (t, e) {
                    this.detector = h.createRectangleNodeCenter(e.node, 3 * d.SquareDisW, 3 * d.SquareDisH);
                  }),
                  (i.specialPlantDie = function () {
                    var t;
                    null == (t = this.inLnC) || t.addBuff('darkBuff', !1);
                  }),
                  (i.specialPlantOnEnable = function () {
                    (this.attacking = !1), (this.attackCD = 0);
                  }),
                  (i.attack = function (t) {
                    var e = this;
                    this.inLane
                      .zombiePool()
                      .concat(this.inLane.UpperLane.zombiePool(), this.inLane.LowerLane.zombiePool())
                      .forEach(function (o) {
                        o.bodyRec.judgeCrossRec(e.detector) && o.dealDamage(t, !0, !1, !1, null, f.physicle, !0);
                      }),
                      this.inLane
                        .tombPool()
                        .concat(this.inLane.UpperLane.tombPool(), this.inLane.LowerLane.tombPool())
                        .forEach(function (o) {
                          o.bodyRec.judgeCrossRec(e.detector) && o.dealDamage(t);
                        });
                  }),
                  (i.detectEnemies = function () {
                    var t = this,
                      e = !1;
                    this.inLane
                      .zombiePool()
                      .concat(this.inLane.UpperLane.zombiePool(), this.inLane.LowerLane.zombiePool())
                      .forEach(function (o) {
                        e || (o.bodyRec.judgeCrossRec(t.detector) && (e = !0));
                      }),
                      e ||
                        this.inLane
                          .tombPool()
                          .concat(this.inLane.UpperLane.tombPool(), this.inLane.LowerLane.tombPool())
                          .forEach(function (o) {
                            e || (o.bodyRec.judgeCrossRec(t.detector) && (e = !0));
                          }),
                      e &&
                        ((this.attackCD = this.attackDuration),
                        this.anmControl.playAnimation('Attack', 1, 0.1, Math.min(1, 2.7 / this.attackDuration)),
                        (this.attacking = !0),
                        this.getComponent(p).playShootSound());
                  }),
                  (i.specialPlantUpdate = function (t) {
                    var e;
                    this.fooding
                      ? this.foodStarted && this.attack(this.foodDPS * t)
                      : (this.attackCD > 0 && (this.attackCD -= t), this.attackCD <= 0 && this.detectEnemies()),
                      null == (e = this.inLnC) || e.setShadowBuff(0.1);
                  }),
                  (i.specialPlantFood = function (t) {
                    (this.foodStarted = !1),
                      this.getComponent(p).playFoodSound(),
                      (this.attacking = !1),
                      (this.attackCD = 0),
                      this.anmControl.playAnimation('Food', 1);
                  }),
                  (i.animationListener = function (t) {
                    'foodEnd' == t.name
                      ? this.foodEnd()
                      : 'attack' == t.name
                      ? (this.attack(this.damage), (this.attacking = !1), this.spawnParticle(!1))
                      : 'foodStart' == t.name && ((this.foodStarted = !0), this.spawnParticle(!0));
                  }),
                  (i.spawnParticle = function (t) {
                    void 0 === t && (t = !1);
                    var e = m.instantiatePooly(t ? this.foodParticle : this.shootParticle);
                    (e.parent = this.inLnC.particleLowerPoint), (e.worldPosition = this.node.worldPosition);
                  }),
                  e
                );
              })(u)).prototype,
              'attackDuration',
              [b],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 2.7;
                },
              }
            )),
            (w = e(C.prototype, 'damage', [g], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 45;
              },
            })),
            (z = e(C.prototype, 'foodDPS', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 1543;
              },
            })),
            (v = e(C.prototype, 'shootParticle', [D], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (R = e(C.prototype, 'foodParticle', [k], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (y = C))
          ) || y)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/gloomVineSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './fumeShroomSound.ts'],
  function (o) {
    var n, e, u, t;
    return {
      setters: [
        function (o) {
          n = o.inheritsLoose;
        },
        function (o) {
          (e = o.cclegacy), (u = o._decorator);
        },
        function (o) {
          t = o.fumeShroomSound;
        },
      ],
      execute: function () {
        var r;
        e._RF.push({}, '9815e328IFB35X/TsIchTgh', 'gloomVineSound', void 0);
        var c = u.ccclass;
        u.property,
          o(
            'gloomVineSound',
            c('gloomVineSound')(
              (r = (function (o) {
                function e() {
                  return o.apply(this, arguments) || this;
                }
                return n(e, o), e;
              })(t))
            ) || r
          );
        e._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/GraveBuster.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Plant.ts', './SoundsController.ts'],
  function (t) {
    var n, i, e, o, r, a, s, u, l, c, h;
    return {
      setters: [
        function (t) {
          (n = t.applyDecoratedDescriptor),
            (i = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (o = t.assertThisInitialized);
        },
        function (t) {
          (r = t.cclegacy), (a = t._decorator), (s = t.CCFloat), (u = t.AudioClip), (l = t.AudioSource);
        },
        function (t) {
          c = t.Plant;
        },
        function (t) {
          h = t.SoundFXController;
        },
      ],
      execute: function () {
        var p, m, b, d, f, S, C;
        r._RF.push({}, '031f9TWSP1Ie4Y6Gu8MduTD', 'GraveBuster', void 0);
        var y = a.ccclass,
          v = a.property;
        t(
          'GraveBusterPlant',
          ((p = y('GraveBusterPlant')),
          (m = v(s)),
          (b = v(u)),
          p(
            ((S = n(
              (f = (function (t) {
                function n() {
                  for (var n, i = arguments.length, r = new Array(i), a = 0; a < i; a++) r[a] = arguments[a];
                  return (
                    (n = t.call.apply(t, [this].concat(r)) || this), e(n, 'bustDuration', S, o(n)), e(n, 'chompSound', C, o(n)), n
                  );
                }
                i(n, t);
                var r = n.prototype;
                return (
                  (r.leapTo = function (t, n, i) {}),
                  (r.specialPlantOnEnable = function () {
                    (this.foodable = !1),
                      this.anmControl.playAnimation('Spawn', 1),
                      (this.deathAnm = ''),
                      (this._invincible = !1),
                      this.getComponent(l).playOneShot(this.chompSound, h.SoundFXVolume);
                  }),
                  (r.specialPlantDie = function () {
                    this.inLnC.tombStone &&
                      this.inLnC.tombStone.hidden &&
                      ((this.inLnC.tombStone.hidden = !1), this.inLnC.tombStone.body.playAnimation('Spawn', 1));
                  }),
                  (r.animationListener = function (t) {
                    'bust' == t.name
                      ? (this.inLnC.tombStone && (this.inLnC.tombStone.hidden = !0),
                        this.anmControl.playAnimation('Busting', 1, 0, 4 / this.bustDuration))
                      : 'finish' == t.name
                      ? (this.inLnC.tombStone && this.inLnC.tombStone.die(!1),
                        (this.invincible = !0),
                        (this.smasherDetectable = !1),
                        (this.eaterDetectable = !1))
                      : 'die' == t.name && this.die();
                  }),
                  n
                );
              })(c)).prototype,
              'bustDuration',
              [m],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 4;
                },
              }
            )),
            (C = n(f.prototype, 'chompSound', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (d = f))
          ) || d)
        );
        r._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/GroundFire.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (t) {
  var n, i, e, o, r, s, a;
  return {
    setters: [
      function (t) {
        (n = t.inheritsLoose), (i = t.createClass);
      },
      function (t) {
        (e = t.cclegacy), (o = t._decorator), (r = t.dragonBones), (s = t.Vec3), (a = t.Component);
      },
    ],
    execute: function () {
      var l;
      e._RF.push({}, '4eea59rJcFBK7blXRdNZ8tG', 'GroundFire', void 0);
      var h = o.ccclass;
      o.property,
        t(
          'GroundFireColorEnum',
          (function (t) {
            return (t[(t.yellow = 0)] = 'yellow'), t;
          })({})
        ),
        t(
          'GroundFireSpreadStyleEnum',
          (function (t) {
            return (
              (t[(t.split = 0)] = 'split'),
              (t[(t.left = 1)] = 'left'),
              (t[(t.right = 2)] = 'right'),
              (t[(t.cross = 3)] = 'cross'),
              t
            );
          })({})
        ),
        t(
          'GroundFire',
          h('GroundFire')(
            (l = (function (t) {
              function e() {
                for (var n, i = arguments.length, e = new Array(i), o = 0; o < i; o++) e[o] = arguments[o];
                return (
                  ((n = t.call.apply(t, [this].concat(e)) || this).db = void 0),
                  (n._height = 20),
                  (n.horizontal = !0),
                  (n.spawnDelay = 0),
                  (n.duration = 10),
                  (n.dead = !1),
                  (n.inLnC = void 0),
                  n
                );
              }
              n(e, t);
              var o = e.prototype;
              return (
                (o.onLoad = function () {
                  (this.db = this.getComponent(r.ArmatureDisplay)), (this.height = 20);
                }),
                (o.onEnable = function () {
                  (this.dead = !1), this.db.playAnimation('Spawn', 1), this.spawnDelay > 0 && (this.db.timeScale = 0);
                }),
                (o.die = function () {
                  this.dead || ((this.dead = !0), this.db.playAnimation('Fade'));
                }),
                (o.update = function (t) {
                  var n, i;
                  (this.spawnDelay > 0 && (this.spawnDelay -= t), this.spawnDelay <= 0) &&
                    ((this.db.timeScale = 1),
                    null == (n = this.inLnC) || null == (n = n.iceTile) || n.die(),
                    this.horizontal &&
                      8 == this.inLnC.cIndex &&
                      (null == (i = this.inLnC) || null == (i = i.inLane) || null == (i = i.iceTile) || i.die()));
                  this.duration > 0 && this.spawnDelay <= 0 && (this.duration -= t), this.duration <= 0 && this.die();
                }),
                i(e, [
                  {
                    key: 'height',
                    get: function () {
                      return this._height;
                    },
                    set: function (t) {
                      (this._height = t), (this.node.worldScale = new s(0.24, (0.24 * t) / 20, 0.24));
                    },
                  },
                ]),
                e
              );
            })(a))
          ) || l
        );
      e._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/GroundFiresManager.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './CharacterManager.ts', './Square.ts', './Zombie.ts'],
  function (n) {
    var e, i, o, a, t, r, l, c;
    return {
      setters: [
        function (n) {
          e = n.inheritsLoose;
        },
        function (n) {
          (i = n.cclegacy), (o = n._decorator), (a = n.Vec2), (t = n.Component);
        },
        function (n) {
          r = n.Rectangle;
        },
        function (n) {
          l = n.Square;
        },
        function (n) {
          c = n.zombieDamageType;
        },
      ],
      execute: function () {
        var s, d;
        i._RF.push({}, '8b17c4ftPhKSr6LGmdzBGzc', 'GroundFiresManager', void 0);
        var u = o.ccclass;
        o.property,
          n(
            'GroundFiresManager',
            u('GroundFiresManager')(
              (((d = (function (n) {
                function i() {
                  for (var e, i = arguments.length, o = new Array(i), a = 0; a < i; a++) o[a] = arguments[a];
                  return ((e = n.call.apply(n, [this].concat(o)) || this).jalapenoFires = []), e;
                }
                e(i, n);
                var o = i.prototype;
                return (
                  (o.onLoad = function () {
                    i.component = this;
                  }),
                  (o.registerJalapenoFire = function (n) {
                    -1 == this.jalapenoFires.indexOf(n) && this.jalapenoFires.push(n);
                  }),
                  (o.update = function (n) {
                    var e = this;
                    this.jalapenoFires.concat().forEach(function (i) {
                      if (
                        (i.duration > 0 && (i.duration -= n),
                        i.groundFires.forEach(function (n) {
                          if (n.spawnDelay <= 0 && !n.dead) {
                            var e, o, t, s;
                            if (n.inLnC.inLane.zombiePool().length) {
                              var d = r.createRectangleNodeCenter(n.inLnC.node, l.SquareDisW, l.SquareDisH);
                              n.horizontal && 0 == n.inLnC.cIndex
                                ? (d = r.createRectangleSide(
                                    new a(n.inLnC.node.worldPosition.x + l.SquareDisW / 2, n.inLnC.node.worldPosition.y),
                                    9 * -l.SquareDisW,
                                    l.SquareDisH
                                  ))
                                : n.horizontal &&
                                  8 == n.inLnC.cIndex &&
                                  (d = r.createRectangleSide(
                                    new a(n.inLnC.node.worldPosition.x - l.SquareDisW / 2, n.inLnC.node.worldPosition.y),
                                    9 * l.SquareDisW,
                                    l.SquareDisH
                                  )),
                                n.inLnC.inLane
                                  .zombiePool()
                                  .concat()
                                  .forEach(function (n) {
                                    -1 == i.dealtZombies.indexOf(n) &&
                                      d.judgeCrossRec(n.bodyRec) &&
                                      (n.dealDamage(i.damage, i.armorProtection, !1, !1, null, c.fire),
                                      n.isAlive() && i.dealtZombies.push(n));
                                  });
                            }
                            if (
                              (null == (e = n.inLnC) || null == (e = e.iceTile) || e.die(), n.horizontal && 8 == n.inLnC.cIndex)
                            )
                              null == (s = n.inLnC) || null == (s = s.inLane) || null == (s = s.iceTile) || s.die();
                            null != (o = n.inLnC) &&
                              o.tombStone &&
                              -1 == i.dealtTombs.indexOf(null == (t = n.inLnC) ? void 0 : t.tombStone) &&
                              (n.inLnC.tombStone.dealDamage(i.damage),
                              n.inLnC.tombStone.dead || i.dealtTombs.push(n.inLnC.tombStone));
                          }
                        }),
                        i.dealtZombies.concat().forEach(function (n) {
                          if (!n.isAlive()) {
                            var e = i.dealtZombies.indexOf(n);
                            i.dealtZombies.splice(e, 1);
                          }
                        }),
                        i.dealtTombs.concat().forEach(function (n) {
                          if (null != n && n.dead) {
                            var e = i.dealtTombs.indexOf(n);
                            i.dealtZombies.splice(e, 1);
                          }
                        }),
                        i.duration <= 0)
                      ) {
                        var o = e.jalapenoFires.indexOf(i);
                        e.jalapenoFires.splice(o, 1);
                      }
                    });
                  }),
                  i
                );
              })(t)).component = void 0),
              (s = d))
            ) || s
          );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/HomingThistle.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Peashooter.ts', './homingThistleSound.ts', './CharacterManager.ts'],
  function (o) {
    var e, t, i, n, a, l, r, s, c, d, h, u, p, y;
    return {
      setters: [
        function (o) {
          (e = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (i = o.initializerDefineProperty),
            (n = o.assertThisInitialized);
        },
        function (o) {
          (a = o.cclegacy), (l = o._decorator), (r = o.Prefab), (s = o.Vec2), (c = o.TWO_PI);
        },
        function (o) {
          d = o.PeashooterPlant;
        },
        function (o) {
          h = o.homingThistleSound;
        },
        function (o) {
          (u = o.ZombiePool), (p = o.TombPool), (y = o.LineSegment);
        },
      ],
      execute: function () {
        var f, m, P, g, v;
        a._RF.push({}, '7bf93alJXlEGIcGkJdrzX2H', 'HomingThistle', void 0);
        var S = l.ccclass,
          b = l.property;
        o(
          'HomingThistlePlant',
          ((f = S('HomingThistle')),
          (m = b(r)),
          f(
            ((v = e(
              (g = (function (o) {
                function e() {
                  for (var e, t = arguments.length, a = new Array(t), l = 0; l < t; l++) a[l] = arguments[l];
                  return (e = o.call.apply(o, [this].concat(a)) || this), i(e, 'peaFood', v, n(e)), (e.css = []), e;
                }
                t(e, o);
                var a = e.prototype;
                return (
                  (a.setDetecter = function (o, e) {}),
                  (a.specialPlantOnEnable = function () {
                    this.initialize(), (this.css = []);
                  }),
                  (a.specialPlantFoodEnd = function () {
                    this.busy = 0;
                  }),
                  (a.specialPlantFood = function () {
                    (this.busy = 1 / 0), this.anmControl.playAnimation('FoodStart', 0), this.getComponent(h).playFoodSound();
                  }),
                  (a.detectEnemy = function () {
                    return u.pool().length > 0 || p.pool().length > 0;
                  }),
                  (a._shootPeaAnimation = function () {
                    this.anmControl.playAnimation('Shoot', 1, 0.1, Math.max(1.35 / this.shootInterval, 1)),
                      this.getComponent(h).playSteadySound();
                  }),
                  (a.specialPlantUpdate = function (o) {
                    var e = this;
                    this.busy > 0 && (this.busy -= 60 * o),
                      this.busy <= 0 && !this.dead && ((this.busy = 0), this.detectEnemy() && this.startShooting());
                    var t = null,
                      i = null,
                      n = u.pool().concat(),
                      a = p.pool().concat();
                    if (n.length > 0) {
                      t = n[0];
                      for (var l = 1; l < n.length; l++) n[l].bodyRec.prjX().x < t.bodyRec.prjX().x && (t = n[l]);
                      this.css.concat().forEach(function (i) {
                        var n;
                        if (i.dead) {
                          var a = e.css.indexOf(i);
                          -1 != a && e.css.splice(a, 1);
                        } else if (((i.targetLocked = null == (n = t) ? void 0 : n.node), t)) {
                          var l = new s(t._worldPositionX - i._worldPositionX, t._worldPositionY - i._worldPositionY),
                            r = 2.5 * o * 60;
                          i.linearVelocity.cross(l) > 0 && (r *= -1),
                            i.linearVelocity.add(new s(i.linearVelocity.y, -i.linearVelocity.x).normalize().multiplyScalar(r)),
                            (i.linearVelocity = i.linearVelocity.normalize().multiplyScalar(15 * e.projectileSpeed));
                        }
                      });
                    } else if (a.length > 0) {
                      i = a[0];
                      for (var r = 1; r < a.length; r++) a[r].bodyRec.prjX().x < i.bodyRec.prjX().x && (i = a[r]);
                      this.css.concat().forEach(function (t) {
                        var n;
                        if (t.dead) {
                          var a = e.css.indexOf(t);
                          -1 != a && e.css.splice(a, 1);
                        } else {
                          if (((t.targetLocked = null == (n = i) ? void 0 : n.node), i))
                            if (
                              !y
                                .createLineLenDir(new s(t.realWorldPosition.x, t.realWorldPosition.y), 1e4, t.linearVelocity)
                                .judgeCrossRec(i.bodyRec)
                            ) {
                              var l = 2.5 * o * 60;
                              t.linearVelocity.add(
                                new s(t.realWorldPosition.x, -t.realWorldPosition).normalize().multiplyScalar(l)
                              ),
                                (t.linearVelocity = t.linearVelocity.normalize().multiplyScalar(15 * e.projectileSpeed));
                            }
                        }
                      });
                    } else
                      this.css.concat().forEach(function (t) {
                        if (t.dead) {
                          var i = e.css.indexOf(t);
                          -1 != i && e.css.splice(i, 1);
                        } else {
                          var n = 1.5 * o * 60;
                          t.linearVelocity.add(new s(t.linearVelocity.y, -t.linearVelocity.x).normalize().multiplyScalar(n)),
                            (t.linearVelocity = t.linearVelocity.normalize().multiplyScalar(15 * e.projectileSpeed));
                        }
                      });
                  }),
                  (a.shotInitialize = function (o) {
                    this.css.push(o);
                  }),
                  (a.animationListener = function (o) {
                    var e = this;
                    if (('Shoot' == o.name && (this._shoot(), this.getComponent(h).playShootSound()), 'foodStart' == o.name)) {
                      this.anmControl.playAnimation('Fooding', 1 / 0);
                      var t = 0;
                      this.schedule(
                        function () {
                          e._shoot(
                            !1,
                            !1,
                            e.peaFood,
                            15,
                            new s(Math.cos((t * c) / e.foodPeaMaxCount), Math.sin((t * c) / e.foodPeaMaxCount))
                          ),
                            ++t >= e.foodPeaMaxCount && e.anmControl.playAnimation('FoodEnd', 1);
                        },
                        1 / this.foodPeaMaxCount,
                        this.foodPeaMaxCount,
                        0.01
                      );
                    }
                    'foodEnd' == o.name && this.foodEnd();
                  }),
                  e
                );
              })(d)).prototype,
              'peaFood',
              [m],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (P = g))
          ) || P)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/homingThistleSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './SoundsController.ts'],
  function (o) {
    var n, t, e, i, u, r, a, d, l, s, c;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (i = o.assertThisInitialized);
        },
        function (o) {
          (u = o.cclegacy), (r = o._decorator), (a = o.AudioClip), (d = o.AudioSource), (l = o.Component);
        },
        function (o) {
          s = o.ArrayGet;
        },
        function (o) {
          c = o.SoundFXController;
        },
      ],
      execute: function () {
        var p, S, h, f, y, m, g, b, v;
        u._RF.push({}, '51976WxBiNLUovFqp0ELa90', 'homingThistleSound', void 0);
        var F = r.ccclass,
          C = r.property;
        o(
          'homingThistleSound',
          ((p = F('homingThistleSound')),
          (S = C([a])),
          (h = C([a])),
          (f = C([a])),
          p(
            ((g = n(
              (m = (function (o) {
                function n() {
                  for (var n, t = arguments.length, u = new Array(t), r = 0; r < t; r++) u[r] = arguments[r];
                  return (
                    (n = o.call.apply(o, [this].concat(u)) || this),
                    e(n, 'shootSound', g, i(n)),
                    e(n, 'steadySound', b, i(n)),
                    e(n, 'foodSound', v, i(n)),
                    (n.audioSource = void 0),
                    n
                  );
                }
                t(n, o);
                var u = n.prototype;
                return (
                  (u.playShootSound = function () {
                    this.audioSource.playOneShot(s.getRandom(this.shootSound), c.SoundFXVolume);
                  }),
                  (u.playSteadySound = function () {
                    this.audioSource.playOneShot(s.getRandom(this.steadySound), c.SoundFXVolume);
                  }),
                  (u.playFoodSound = function () {
                    this.audioSource.playOneShot(s.getRandom(this.foodSound), c.SoundFXVolume);
                  }),
                  (u.onEnable = function () {
                    this.getComponent(d) || this.addComponent(d), (this.audioSource = this.getComponent(d));
                  }),
                  n
                );
              })(l)).prototype,
              'shootSound',
              [S],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (b = n(m.prototype, 'steadySound', [h], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (v = n(m.prototype, 'foodSound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (y = m))
          ) || y)
        );
        u._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Hurrikale.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Plant.ts', './SoundRescourses.ts', './NodePools.ts'],
  function (e) {
    var i, t, r, n, a, l, o, u, s, c, p, h;
    return {
      setters: [
        function (e) {
          (i = e.applyDecoratedDescriptor),
            (t = e.inheritsLoose),
            (r = e.initializerDefineProperty),
            (n = e.assertThisInitialized);
        },
        function (e) {
          (a = e.cclegacy), (l = e._decorator), (o = e.AudioClip), (u = e.CCFloat), (s = e.Prefab);
        },
        function (e) {
          c = e.Plant;
        },
        function (e) {
          p = e.sounds;
        },
        function (e) {
          h = e.instantiatePooly;
        },
      ],
      execute: function () {
        var f, d, b, P, y, m, w, v, S, g, D, z, L;
        a._RF.push({}, 'ffcd79hUvxHrq4UyrOtMG98', 'Hurrikale', void 0);
        var k = l.ccclass,
          H = l.property;
        e(
          'HurrikalePlant',
          ((f = k('HurrikalePlant')),
          (d = H(o)),
          (b = H(o)),
          (P = H(u)),
          (y = H(s)),
          (m = H(s)),
          f(
            ((S = i(
              (v = (function (e) {
                function i() {
                  for (var i, t = arguments.length, a = new Array(t), l = 0; l < t; l++) a[l] = arguments[l];
                  return (
                    (i = e.call.apply(e, [this].concat(a)) || this),
                    r(i, 'pushSound', S, n(i)),
                    r(i, 'prePushSound', g, n(i)),
                    r(i, 'pushDuration', D, n(i)),
                    r(i, 'upperParticle', z, n(i)),
                    r(i, 'lowerParticle', L, n(i)),
                    i
                  );
                }
                t(i, e);
                var a = i.prototype;
                return (
                  (a.specialPlantOnEnable = function () {
                    this.anmControl.playAnimation('Attack', 1),
                      p.play(this.prePushSound, 1, 0.1),
                      (this.invincible = !0),
                      (this.eaterDetectable = !1),
                      (this.smasherDetectable = !1),
                      (this.foodable = !1);
                  }),
                  (a.animationListener = function (e) {
                    var i = this;
                    if ('die' == e.name) this.die(!0);
                    else if ('push' == e.name) {
                      var t;
                      p.play(this.pushSound, 0.5, 0.1), null == (t = this.inLane) || t.setHurrikaleDuration(this.pushDuration);
                      var r = h(this.upperParticle),
                        n = h(this.lowerParticle);
                      (r.parent = this.inLane.prjLayer),
                        (n.parent = this.inLane.zombieLayer),
                        n.setSiblingIndex(0),
                        [n, r].forEach(function (e) {
                          (e.worldPosition = i.node.worldPosition), (e.worldScale = i.node.worldScale);
                        });
                    }
                  }),
                  i
                );
              })(c)).prototype,
              'pushSound',
              [d],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (g = i(v.prototype, 'prePushSound', [b], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (D = i(v.prototype, 'pushDuration', [P], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 3;
              },
            })),
            (z = i(v.prototype, 'upperParticle', [y], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (L = i(v.prototype, 'lowerParticle', [m], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (w = v))
          ) || w)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/IcebergLettuce.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './CharacterManager.ts',
    './Square.ts',
    './levelController.ts',
    './SoundRescourses.ts',
  ],
  function (e) {
    var o, t, r, n, i, a, l, c, s, u, f, h, d, p, b, C;
    return {
      setters: [
        function (e) {
          (o = e.applyDecoratedDescriptor),
            (t = e.inheritsLoose),
            (r = e.initializerDefineProperty),
            (n = e.assertThisInitialized);
        },
        function (e) {
          (i = e.cclegacy), (a = e._decorator), (l = e.AudioClip), (c = e.CCFloat), (s = e.Color), (u = e.tween);
        },
        function (e) {
          f = e.Plant;
        },
        function (e) {
          (h = e.Rectangle), (d = e.ZombiePool);
        },
        function (e) {
          p = e.Square;
        },
        function (e) {
          b = e.LevelPlay;
        },
        function (e) {
          C = e.sounds;
        },
      ],
      execute: function () {
        var y, z, g, m, S, D, v, P, R, w, L, E, F;
        i._RF.push({}, 'c95deH5SAZNJKYtUXfY8hsa', 'IcebergLettuce', void 0);
        var j = a.ccclass,
          q = a.property;
        e(
          'IcebergLettucePlant',
          ((y = j('IcebergLettuce')),
          (z = q(l)),
          (g = q(c)),
          (m = q(c)),
          (S = q(s)),
          (D = q(s)),
          y(
            ((R = o(
              (P = (function (e) {
                function o() {
                  for (var o, t = arguments.length, i = new Array(t), a = 0; a < t; a++) i[a] = arguments[a];
                  return (
                    (o = e.call.apply(e, [this].concat(i)) || this),
                    r(o, 'foodSound', R, n(o)),
                    r(o, 'freezeDuration', w, n(o)),
                    r(o, 'chillDuration', L, n(o)),
                    r(o, 'freezeColor1', E, n(o)),
                    r(o, 'freezeColor2', F, n(o)),
                    (o.detector = void 0),
                    (o.screenColor = new s(0, 0, 0, 0)),
                    o
                  );
                }
                t(o, e);
                var i = o.prototype;
                return (
                  (i.specialPlantOnEnable = function () {
                    (this.eatDamagable = !1), (this.eaterDetectable = !1);
                  }),
                  (i.specialPlantFood = function (e) {
                    this.anmControl.playAnimation('Food'),
                      C.play(this.foodSound),
                      (this.screenColor = new s(this.freezeColor1.r, this.freezeColor1.g, this.freezeColor1.b, 0));
                    var o = u(this.screenColor)
                      .to(0.5 / this.anmControl.body.timeScale, { a: this.freezeColor1.a })
                      .start();
                    this.bodyTweens.push(o);
                  }),
                  (i.freezeZombie = function (e) {
                    e.setFreeze(this.freezeDuration), e.setChill(this.chillDuration);
                  }),
                  (i.specialPlantOnSquareChange = function (e, o) {
                    this.detector = h.createRectangleNodeCenter(o.node, 0.5 * p.SquareDisW, p.SquareDisH);
                  }),
                  (i.specialPlantLateUpdate = function (e) {
                    0 != this.screenColor.a && b.screenFlashColors.push(this.screenColor);
                  }),
                  (i.animationListener = function (e) {
                    var o = this;
                    if ('explode' == e.name) {
                      var t,
                        r = h.createRectangleNodeCenter(this.inLnC.node, p.SquareDisW, p.SquareDisH),
                        n = null,
                        i = [];
                      null == (t = this.inLane) ||
                        t.zombiePool().forEach(function (e) {
                          !e.flying &&
                            e.setFreeze(-1) &&
                            e.bodyRec.judgeCrossRec(r) &&
                            (!n || n.bodyRec.prjX().x > e.bodyRec.prjX().x) &&
                            (e.shouldSpeedScale() * e.randomSpeed > 0 ? (n = e) : i.push(e));
                        }),
                        n ||
                          i.forEach(function (e) {
                            (!n || n.bodyRec.prjX().x > e.bodyRec.prjX().x) && (n = e);
                          }),
                        n && n.setFreeze(this.freezeDuration);
                    }
                    if ('foodExplode' == e.name) {
                      d.pool()
                        .concat()
                        .forEach(function (e) {
                          e.flying || o.freezeZombie(e);
                        });
                      var a = u(this.screenColor)
                        .to(1 / 60 / this.anmControl.body.timeScale, {
                          r: this.freezeColor2.r,
                          g: this.freezeColor2.g,
                          b: this.freezeColor2.b,
                          a: this.freezeColor2.a,
                        })
                        .to(1 / 4 / this.anmControl.body.timeScale, { a: 0 })
                        .start();
                      this.bodyTweens.push(a);
                    }
                    'foodEnd' == e.name && this.foodEnd();
                  }),
                  (i.detectEnemy = function () {
                    var e,
                      o = this,
                      t = !1;
                    null == (e = this.inLane) ||
                      e.zombiePool().forEach(function (e) {
                        t ||
                          (e.shouldSpeedScale() * e.randomSpeed > 0 &&
                            !e.flying &&
                            e.bodyRec.judgeCrossRec(o.detector) &&
                            (t = !0));
                      }),
                      t && this.die();
                  }),
                  (i.specialPlantUpdate = function (e) {
                    this.fooding || this.detectEnemy();
                  }),
                  o
                );
              })(f)).prototype,
              'foodSound',
              [z],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (w = o(P.prototype, 'freezeDuration', [g], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 10;
              },
            })),
            (L = o(P.prototype, 'chillDuration', [m], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 0;
              },
            })),
            (E = o(P.prototype, 'freezeColor1', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new s(0, 0, 0, 0);
              },
            })),
            (F = o(P.prototype, 'freezeColor2', [D], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new s(0, 0, 0, 0);
              },
            })),
            (v = P))
          ) || v)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Icetile.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './CharacterManager.ts', './NodePools.ts', './Square.ts'],
  function (t) {
    var e, n, i, o, s, l, a, r, h, c, d;
    return {
      setters: [
        function (t) {
          e = t.inheritsLoose;
        },
        function (t) {
          (n = t.cclegacy),
            (i = t._decorator),
            (o = t.UITransform),
            (s = t.tween),
            (l = t.Sprite),
            (a = t.Color),
            (r = t.Component);
        },
        function (t) {
          h = t.Icetiles;
        },
        function (t) {
          c = t.NodePools;
        },
        function (t) {
          d = t.Square;
        },
      ],
      execute: function () {
        var u;
        n._RF.push({}, '9855dVIa2dFjLIZERgm5/ph', 'Icetile', void 0);
        var p = i.ccclass;
        i.property,
          t(
            'Icetile',
            p('Icetile')(
              (u = (function (t) {
                function n() {
                  for (var e, n = arguments.length, i = new Array(n), o = 0; o < n; o++) i[o] = arguments[o];
                  return (
                    ((e = t.call.apply(t, [this].concat(i)) || this).master = null),
                    (e.length = 0),
                    (e.dead = !1),
                    (e.lane = void 0),
                    (e.lnc = void 0),
                    e
                  );
                }
                e(n, t);
                var i = n.prototype;
                return (
                  (i.onDisable = function () {
                    (this.getComponent(o).width = 0), (this.length = 0);
                  }),
                  (i.onEnable = function () {
                    h.registerIce(this), (this.dead = !1);
                  }),
                  (i.die = function () {
                    var t = this;
                    this.dead ||
                      ((this.dead = !0),
                      s(this.node.getComponent(l).color)
                        .to(0.5, { a: 0 })
                        .call(function () {
                          (t.length = 0),
                            (t.getComponent(o).width = 0),
                            (t.node.getComponent(l).color = new a(255, 255, 255, 255)),
                            c.destroyPooly(t.node);
                        })
                        .start(),
                      this.master && (this.master = null),
                      this.lnc &&
                        (this.lnc.inLane.deleteIceTile(this), (this.lnc.iceTile = null), this.lnc.readIndex(), (this.lnc = null)),
                      this.lane && (this.lane.deleteIceTile(this), (this.lane.iceTile = null), (this.lane = null)),
                      h.deleteIce(this));
                  }),
                  (i.update = function (t) {
                    if (!this.dead && this.master && this.master.isAlive()) {
                      var e = (this.lane ? 2 : 1) * d.SquareDisW;
                      this.length = Math.min(
                        e,
                        Math.max(this.node.worldPosition.x - this.master.node.worldPosition.x, this.length)
                      );
                    }
                    this.dead || (this.getComponent(l).color = new a(255, 255, 255, 255));
                    var n = (164.5 * this.length) / d.SquareDisW;
                    this.getComponent(o).width = n;
                  }),
                  n
                );
              })(r))
            ) || u
          );
        n._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/ImpZombie.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc', './Zombie.ts'], function (i) {
  var t, n, e, o, s;
  return {
    setters: [
      function (i) {
        t = i.inheritsLoose;
      },
      function (i) {
        (n = i.cclegacy), (e = i._decorator), (o = i.dragonBones);
      },
      function (i) {
        s = i.Zombie;
      },
    ],
    execute: function () {
      var c;
      n._RF.push({}, '7c5a7mtHJ9G076mDgpxjpzb', 'ImpZombie', void 0);
      var a = e.ccclass;
      e.property,
        i(
          'ImpZombie',
          a('ImpZombie')(
            (c = (function (i) {
              function n() {
                return i.apply(this, arguments) || this;
              }
              t(n, i);
              var e = n.prototype;
              return (
                (e.specialZombieOnEnable = function () {
                  this.switching = !1;
                }),
                (e.specialZombieOnLanding = function () {
                  var i = this;
                  (this.switching = !0),
                    this.dead ||
                      (this.body.playAnimation('Land', 1),
                      (this.switching = !0),
                      (this.walking = !1),
                      this.db.once(
                        o.EventObject.COMPLETE,
                        function () {
                          i.dead || i.playWalk(), (i.switching = !1);
                        },
                        this
                      ));
                }),
                (e.detectPlantOn = function () {
                  return !this.switching;
                }),
                n
              );
            })(s))
          ) || c
        );
      n._RF.pop();
    },
  };
});

System.register('chunks:///_virtual/inGame.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc', './Zombies.ts'], function (o) {
  var n, t, e, i, r, c, a, s, u;
  return {
    setters: [
      function (o) {
        n = o.inheritsLoose;
      },
      function (o) {
        (t = o.cclegacy), (e = o._decorator), (i = o.Enum), (r = o.director), (c = o.AudioSource), (a = o.Component);
      },
      function (o) {
        (s = o.ZombieEnum), (u = o.zombies);
      },
    ],
    execute: function () {
      var m, p;
      t._RF.push({}, '9e3748CYdtChpr6tMbGa862', 'inGame', void 0);
      var d = e.ccclass;
      e.property;
      i(s);
      o(
        'inGame',
        d('inGame')(
          (((p = (function (o) {
            function t() {
              for (var n, t = arguments.length, e = new Array(t), i = 0; i < t; i++) e[i] = arguments[i];
              return (
                ((n = o.call.apply(o, [this].concat(e)) || this).FrontYard = void 0),
                (n.sceneSwitching = !0),
                (n.speedFlag = !0),
                (n.oldTick = r.tick),
                n
              );
            }
            n(t, o);
            var e = t.prototype;
            return (
              (e.onLoad = function () {
                (t.component = this), this.getComponent(c) || this.addComponent(c);
              }),
              (e.start = function () {
                this.sceneSwitching = !1;
              }),
              (e.loadZombies = function () {
                for (var o = 0; o < 5; o++)
                  for (var n = 0; n <= o; n++) u.createZombie(o, Math.floor(Math.random() * s.zombieAmount));
              }),
              t
            );
          })(a)).component = void 0),
          (m = p))
        ) || m
      );
      t._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/Jalapeno.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './CherryBomb.ts',
    './GroundFire.ts',
    './GroundFiresManager.ts',
    './SoundsController.ts',
  ],
  function (n) {
    var o, e, r, t, i, a, u, l, s, c, d, p;
    return {
      setters: [
        function (n) {
          (o = n.applyDecoratedDescriptor),
            (e = n.inheritsLoose),
            (r = n.initializerDefineProperty),
            (t = n.assertThisInitialized);
        },
        function (n) {
          (i = n.cclegacy), (a = n._decorator), (u = n.AudioClip);
        },
        function (n) {
          l = n.CherryBombPlant;
        },
        function (n) {
          (s = n.GroundFireColorEnum), (c = n.GroundFireSpreadStyleEnum);
        },
        function (n) {
          d = n.GroundFiresManager;
        },
        function (n) {
          p = n.SoundFXController;
        },
      ],
      execute: function () {
        var h, m, f, F, y;
        i._RF.push({}, '348e8m5FjRGQpOqtrn3/MP2', 'Jalapeno', void 0);
        var b = a.ccclass,
          g = a.property,
          v = n(
            'jalapeno',
            (function () {
              function n() {}
              return (
                (n.burnFromLnC = function (n, o, e, r, t, i, a, u, l) {
                  void 0 === t && (t = 10),
                    void 0 === i && (i = s.yellow),
                    void 0 === a && (a = c.cross),
                    void 0 === u && (u = 9),
                    void 0 === l && (l = 9);
                  var p = n.addLaneFire(r, t, i, a, u, l),
                    h = new S();
                  (h.groundFires = p),
                    (h.damage = o),
                    (h.duration = r),
                    (h.armorProtection = e),
                    d.component.registerJalapenoFire(h);
                }),
                n
              );
            })()
          ),
          S = n('jalapenoFire', function () {
            (this.groundFires = []),
              (this.recs = []),
              (this.damage = 1800),
              (this.duration = 3),
              (this.armorProtection = !1),
              (this.dealtZombies = []),
              (this.dealtTombs = []);
          });
        n(
          'JalapenoPlant',
          ((h = b('JalapenoPlant')),
          (m = g(u)),
          h(
            ((y = o(
              (F = (function (n) {
                function o() {
                  for (var o, e = arguments.length, i = new Array(e), a = 0; a < e; a++) i[a] = arguments[a];
                  return (o = n.call.apply(n, [this].concat(i)) || this), r(o, 'burnSound', y, t(o)), o;
                }
                return (
                  e(o, n),
                  (o.prototype.animationListener = function (n) {
                    'explode' == n.name &&
                      ((this.deathAnm = 'Death'),
                      this.audioSource.playOneShot(this.burnSound, p.SoundFXVolume),
                      v.burnFromLnC(this.inLnC, 1800, !1, 5, 15, s.yellow, c.split, 18, 9),
                      this.die());
                  }),
                  o
                );
              })(l)).prototype,
              'burnSound',
              [m],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (f = F))
          ) || f)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/KernelPult.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './CabbagePult.ts'],
  function (t) {
    var e, n, r, a, i, o, l;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor),
            (n = t.inheritsLoose),
            (r = t.initializerDefineProperty),
            (a = t.assertThisInitialized);
        },
        function (t) {
          (i = t.cclegacy), (o = t._decorator);
        },
        function (t) {
          l = t.CabbagePultPlant;
        },
      ],
      execute: function () {
        var u, c, s, b, p;
        i._RF.push({}, '81c6aTRPtdNfY/ovuQuiSLQ', 'KernelPult', void 0);
        var h = o.ccclass,
          f = o.property;
        t(
          'KernelPultPlant',
          ((u = h('KernelPultPlant')),
          (c = f(Number)),
          u(
            ((p = e(
              (b = (function (t) {
                function e() {
                  for (var e, n = arguments.length, i = new Array(n), o = 0; o < n; o++) i[o] = arguments[o];
                  return (e = t.call.apply(t, [this].concat(i)) || this), r(e, 'butterRate', p, a(e)), e;
                }
                n(e, t);
                var i = e.prototype;
                return (
                  (i._lobCabbageAnimation = function () {
                    var t = Math.random() > this.butterRate ? 'Lob' : 'Lob_Butter';
                    this.anmControl.playAnimation(t, 1, 0.1, Math.max(2.7 / this.lobInterval, 1));
                  }),
                  (i.specialAnimationListener = function (t) {
                    'Lob_Butter' == t.name &&
                      (this.detectEnemy(!0), this._lob(this.targetLock, this.cabbageMega), (this.targetLock = null));
                  }),
                  e
                );
              })(l)).prototype,
              'butterRate',
              [c],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 0.3;
                },
              }
            )),
            (s = b))
          ) || s)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/KeyListener.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './SettingWindow.ts'],
  function (t) {
    var n, e, o, r, i, c, s, a, u;
    return {
      setters: [
        function (t) {
          n = t.inheritsLoose;
        },
        function (t) {
          (e = t.cclegacy), (o = t._decorator), (r = t.input), (i = t.Input), (c = t.game), (s = t.KeyCode), (a = t.Component);
        },
        function (t) {
          u = t.SettingWindow;
        },
      ],
      execute: function () {
        var l;
        e._RF.push({}, '2d802LSjHZPFZ2AdbHZD499', 'KeyListener', void 0);
        var p = o.ccclass;
        o.property,
          t(
            'KeyListener',
            p('KeyListener')(
              (l = (function (t) {
                function e() {
                  for (var n, e = arguments.length, o = new Array(e), r = 0; r < e; r++) o[r] = arguments[r];
                  return ((n = t.call.apply(t, [this].concat(o)) || this).canvasWidget = void 0), n;
                }
                n(e, t);
                var o = e.prototype;
                return (
                  (o.onLoad = function () {
                    r.on(i.EventType.KEY_DOWN, this.onKeyDown, this);
                  }),
                  (o.start = function () {
                    c.canvas.style.cursor =
                      'url(http://localhost:7456/assets/main/native/f9/f94bd70d-2367-47cb-8f90-b82aa99c3b76.png) , auto';
                  }),
                  (o.onKeyDown = function (t) {
                    switch (t.keyCode) {
                      case s.F4:
                        u.fullScreen();
                    }
                  }),
                  e
                );
              })(a))
            ) || l
          );
        e._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Lane.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Zombies.ts', './Square.ts'],
  function (t) {
    var e, i, n, o, s, l, a, r, h, u, c, d;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor),
            (i = t.inheritsLoose),
            (n = t.initializerDefineProperty),
            (o = t.assertThisInitialized);
        },
        function (t) {
          (s = t.cclegacy), (l = t._decorator), (a = t.Node), (r = t.find), (h = t.Component);
        },
        function (t) {
          (u = t.zombies), (c = t.ZombieEnum);
        },
        function (t) {
          d = t.Square;
        },
      ],
      execute: function () {
        var p, m, f, b, L, y, P;
        s._RF.push({}, '8064d2YiT1BVZfACEdbiboA', 'Lane', void 0);
        var g = l.ccclass,
          w = l.property;
        t(
          'Lane',
          ((p = g('Lane')),
          (m = w(a)),
          (f = w(Number)),
          p(
            ((y = e(
              (L = (function (t) {
                function e() {
                  for (var e, i = arguments.length, s = new Array(i), l = 0; l < i; l++) s[l] = arguments[l];
                  return (
                    ((e = t.call.apply(t, [this].concat(s)) || this).Lower = null),
                    (e.tileLiquidLayer = null),
                    n(e, 'Food', y, o(e)),
                    (e.floorY = 0),
                    (e.midY = 0),
                    (e.toLeft = null),
                    (e.toRight = null),
                    (e.zombieLayer = null),
                    (e.prjLayer = null),
                    (e.tombLayer = null),
                    (e.iceTile = void 0),
                    (e.iceTiles = []),
                    (e.UpperLane = null),
                    (e.LowerLane = null),
                    (e.hurrikaleDuration = 0),
                    (e.isSea = !1),
                    n(e, 'LaneIndex', P, o(e)),
                    (e.zombies = []),
                    (e.plantUpperLayer = void 0),
                    (e.plants = []),
                    (e.tombStones = []),
                    (e.plantProjectiles = []),
                    (e.spawnPoint = void 0),
                    (e.meltCountdown = 0),
                    e
                  );
                }
                i(e, t);
                var s = e.prototype;
                return (
                  (s.setHurrikaleDuration = function (t) {
                    this.hurrikaleDuration = t > this.hurrikaleDuration ? t : this.hurrikaleDuration;
                  }),
                  (s.hurrikaleBlowing = function () {
                    return this.hurrikaleDuration > 0;
                  }),
                  (s.addZombie = function (t) {
                    -1 == this.zombies.indexOf(t) && this.zombies.push(t);
                  }),
                  (s.deleteZombie = function (t) {
                    var e = this.zombies.indexOf(t);
                    -1 != e && this.zombies.splice(e, 1);
                  }),
                  (s.zombiePool = function () {
                    return this.zombies.concat();
                  }),
                  (s.addPlant = function (t) {
                    -1 == this.plants.indexOf(t) && this.plants.push(t);
                  }),
                  (s.deletePlant = function (t) {
                    var e = this.plants.indexOf(t);
                    -1 != e && this.plants.splice(e, 1);
                  }),
                  (s.plantPool = function () {
                    return this.plants.concat();
                  }),
                  (s.addTomb = function (t) {
                    -1 == this.tombStones.indexOf(t) && this.tombStones.push(t);
                  }),
                  (s.deleteTomb = function (t) {
                    var e = this.tombStones.indexOf(t);
                    -1 != e && this.tombStones.splice(e, 1);
                  }),
                  (s.tombPool = function () {
                    return this.tombStones.concat();
                  }),
                  (s.addPlantPrj = function (t) {
                    -1 == this.plantProjectiles.indexOf(t) && this.plantProjectiles.push(t);
                  }),
                  (s.deletePlantPrj = function (t) {
                    var e = this.plantProjectiles.indexOf(t);
                    -1 != e && this.plantProjectiles.splice(e, 1);
                  }),
                  (s.prjPool = function () {
                    return this.plantProjectiles.concat();
                  }),
                  (s.addIceTile = function (t) {
                    -1 == this.iceTiles.indexOf(t) && this.iceTiles.push(t);
                  }),
                  (s.deleteIceTile = function (t) {
                    var e = this.iceTiles.indexOf(t);
                    -1 != e && this.iceTiles.splice(e, 1);
                  }),
                  (s.clearIce = function () {
                    this.iceTiles.concat().forEach(function (t) {
                      t.die();
                    }),
                      (this.iceTiles = []);
                  }),
                  (s.onLoad = function () {
                    var t, i;
                    this.node.children.length &&
                      ((this.Lower = r('Canvas/FrontYard/tiles/' + this.node.name)),
                      (this.tileLiquidLayer = r('Canvas/FrontYard/tileLiquid/' + this.node.name)),
                      (this.toLeft = this.node.getChildByName('toLeft')),
                      (this.toRight = this.node.getChildByName('toRight')),
                      (this.UpperLane = null == (t = d.getLane(this.LaneIndex - 1)) ? void 0 : t.getComponent(e)),
                      (this.LowerLane = null == (i = d.getLane(this.LaneIndex + 1)) ? void 0 : i.getComponent(e)),
                      this.LaneIndex >= -1 &&
                        this.LaneIndex <= 5 &&
                        ((this.zombieLayer = this.node.getChildByName('zombies')),
                        (this.prjLayer = this.node.getChildByName('prj')),
                        (this.tombLayer = this.node.getChildByName('tomb'))),
                      (this.plantUpperLayer = this.node.getChildByName('plantUpper')),
                      (this.spawnPoint = this.node.getChildByName('SpawnPoint')),
                      (this.floorY = this.spawnPoint ? this.spawnPoint.worldPosition.y : 0));
                    (this.plants = []),
                      (this.zombies = []),
                      (this.iceTiles = []),
                      (this.plantProjectiles = []),
                      (this.tombStones = []);
                  }),
                  (s.summonBobsledTeam = function () {
                    u.createZombie(this.LaneIndex, c.modern_bobSled_team);
                  }),
                  (s.iceListener = function (t) {
                    if (this.meltCountdown > 0) {
                      var e = this.meltCountdown + 0;
                      (this.meltCountdown -= t),
                        this.iceTiles.length || (this.meltCountdown = 0),
                        ((e > 75 && this.meltCountdown <= 75) ||
                          (e > 55 && this.meltCountdown <= 55) ||
                          (e > 35 && this.meltCountdown <= 35) ||
                          (e > 15 && this.meltCountdown <= 15)) &&
                          this.iceTile &&
                          this.iceTile.length > 1.8 * d.SquareDisW &&
                          this.summonBobsledTeam();
                    }
                    this.meltCountdown <= 0 && this.clearIce();
                  }),
                  (s.update = function (t) {
                    this.iceListener(t), this.hurrikaleDuration > 0 && (this.hurrikaleDuration -= t);
                  }),
                  e
                );
              })(h)).prototype,
              'Food',
              [m],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (P = e(L.prototype, 'LaneIndex', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return -2;
              },
            })),
            (b = L))
          ) || b)
        );
        s._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/lawn.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './NodePools.ts',
    './Square.ts',
    './SoundsController.ts',
    './LnC.ts',
    './SoundManager.ts',
    './levelController.ts',
    './SunCount.ts',
    './Sunflower.ts',
  ],
  function (e) {
    var n, t, i, o, r, a, l, u, s, c, p, h, b, m, d, f, y, w, g, S, v, U, A, _;
    return {
      setters: [
        function (e) {
          (n = e.applyDecoratedDescriptor),
            (t = e.inheritsLoose),
            (i = e.initializerDefineProperty),
            (o = e.assertThisInitialized),
            (r = e.createClass);
        },
        function (e) {
          (a = e.cclegacy),
            (l = e._decorator),
            (u = e.Enum),
            (s = e.Prefab),
            (c = e.AudioClip),
            (p = e.instantiate),
            (h = e.find),
            (b = e.AudioSource),
            (m = e.Vec3),
            (d = e.Vec2),
            (f = e.Component);
        },
        function (e) {
          y = e.ArrayGet;
        },
        function (e) {
          w = e.Square;
        },
        function (e) {
          g = e.SoundFXController;
        },
        function (e) {
          S = e.TileType;
        },
        function (e) {
          v = e.WorldMusic;
        },
        function (e) {
          U = e.LevelPlay;
        },
        function (e) {
          A = e.SunCount;
        },
        function (e) {
          _ = e.sunflower;
        },
      ],
      execute: function () {
        var C, R, T, L, O, z, M, P, D, E, F, N, V, q, X, k, B, W, x, I, Z;
        a._RF.push({}, 'd459cG8REdFa6yufUgn/5Zy', 'lawn', void 0);
        var G = l.ccclass,
          j = l.property;
        u(v);
        e(
          'lawn',
          ((C = G('lawn')),
          (R = j(Boolean)),
          (T = j(s)),
          (L = j(s)),
          (O = j(Boolean)),
          (z = j({ type: v })),
          (M = j(String)),
          (P = j([c])),
          (D = j([c])),
          (E = j([c])),
          C(
            ((V = n(
              (N = (function (e) {
                function n() {
                  for (var n, t = arguments.length, r = new Array(t), a = 0; a < t; a++) r[a] = arguments[a];
                  return (
                    ((n = e.call.apply(e, [this].concat(r)) || this).oldSquaresTypes = [
                      [0, 0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    ]),
                    i(n, 'atNight', V, o(n)),
                    (n.atNight_ = !1),
                    i(n, 'lawnUpper', q, o(n)),
                    (n.lawnUpper_ = null),
                    i(n, 'lawnThereUpper', X, o(n)),
                    (n.lawnThereUpper_ = null),
                    i(n, 'tideOnLoad', k, o(n)),
                    i(n, 'worldMusic', B, o(n)),
                    i(n, 'worldFlagZombie', W, o(n)),
                    i(n, 'ambienceLoop', x, o(n)),
                    i(n, 'ambienceOccasional', I, o(n)),
                    (n.busyAmbOcc = 0),
                    i(n, 'ambienceRare', Z, o(n)),
                    (n.busyAmbRare = 0),
                    (n.busyDropsun = 3),
                    n
                  );
                }
                t(n, e);
                var a = n.prototype;
                return (
                  (a.initialize = function () {
                    var e = this;
                    this.lawnUpper &&
                      ((this.lawnUpper_ = p(this.lawnUpper)),
                      (this.lawnUpper_.parent = h('Canvas/LawnCommon/LawnUpper')),
                      (this.lawnUpper_.worldPosition = this.node.worldPosition),
                      (this.lawnUpper_.worldScale = this.node.worldScale)),
                      this.lawnThereUpper &&
                        ((this.lawnThereUpper_ = p(this.lawnThereUpper)),
                        (this.lawnThereUpper_.parent = this.node.parent.parent.getChildByName('upper')),
                        (this.lawnThereUpper_.worldPosition = this.node.worldPosition),
                        (this.lawnThereUpper_.worldScale = this.node.worldScale)),
                      [-2, -1, 0, 1, 2, 3, 4, 5].forEach(function (e) {
                        [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(function (n) {
                          var t;
                          null == (t = w.getLnC(e, n)) || t.setTileType(S.floor);
                        });
                      }),
                      [-2, -1, 0, 1, 2, 3, 4, 5].forEach(function (e) {
                        w.getLaneComponent(e).isSea = !1;
                      }),
                      this.specialInitialize(),
                      [0, 1, 2, 3, 4].forEach(function (n) {
                        [0, 1, 2, 3, 4, 5, 6, 7, 8].forEach(function (t) {
                          var i,
                            o = null == (i = w.getLnC(n, t)) ? void 0 : i.getTileType();
                          o && (e.oldSquaresTypes[n][t] = o);
                        });
                      });
                  }),
                  (a.onDisable = function () {
                    var e, n;
                    null == (e = this.lawnUpper_) || e.destroy(),
                      null == (n = this.lawnThereUpper_) || n.destroy(),
                      (this.lawnUpper_ = null),
                      (this.lawnThereUpper_ = null);
                  }),
                  (a.specialInitialize = function () {}),
                  (a.playAmbience = function () {
                    var e = this.getComponent(b);
                    (e.volume = 0.6 * g.SoundFXVolume),
                      this.ambienceLoop.length && ((e.clip = y.getRandom(this.ambienceLoop)), e.play(), (e.loop = !1));
                  }),
                  (a.playAmbienceRare = function () {
                    var e = 10 + Math.round(10 * Math.random()),
                      n = this.getComponent(b);
                    (this.busyAmbRare = 60 * e), n.playOneShot(y.getRandom(this.ambienceRare), g.SoundFXVolume / n.volume);
                  }),
                  (a.playAmbienceOccasional = function () {
                    var e = 5 + Math.round(5 * Math.random());
                    this.busyAmbOcc = 60 * e;
                    var n = this.getComponent(b);
                    n.playOneShot(y.getRandom(this.ambienceOccasional), g.SoundFXVolume / n.volume);
                  }),
                  (a.onEnable = function () {
                    (this.atNight_ = this.atNight), this.getComponent(b) || this.addComponent(b);
                  }),
                  (a.dropSun = function () {
                    if (A.component.shown && !U.component.ExcludeListSunProducers) {
                      var e = Math.round(300 * Math.random()),
                        n = Math.round(200 * Math.random()),
                        t = new m(w.getSquareWorldPosition(2, 4).x - 150 + e, w.getSquareWorldPosition(2, 4).y - 150 + n, 0);
                      _.produceSun(50, t, 700 - n).forEach(function (e) {
                        (e.linearVelocity = new d(0, 0)), (e.bodyLinearVelocity = -3), (e.gravity = 0);
                      });
                    }
                  }),
                  (a.update = function (e) {
                    U.gameStarted &&
                      !U.component.gameWon &&
                      (this.busyDropsun > 0 && (this.busyDropsun -= e),
                      this.busyDropsun <= 0 &&
                        ((this.busyDropsun = 0), this.atNight_ || (this.dropSun(), (this.busyDropsun = 8))));
                    var n = this.getComponent(b);
                    n.playing ? (n.volume = 0.6 * g.SoundFXVolume) : this.playAmbience(),
                      this.busyAmbRare > 0 && (this.busyAmbRare -= 60 * e),
                      this.busyAmbRare <= 0 && ((this.busyAmbRare = 0), this.ambienceRare.length && this.playAmbienceRare()),
                      this.busyAmbOcc > 0 && (this.busyAmbOcc -= 60 * e),
                      this.busyAmbOcc <= 0 &&
                        ((this.busyAmbOcc = 0), this.ambienceOccasional.length && this.playAmbienceOccasional());
                  }),
                  r(n, [
                    {
                      key: 'PlankRows',
                      get: function () {
                        return [];
                      },
                      set: function (e) {},
                    },
                    {
                      key: 'SeaRows',
                      get: function () {
                        return [0, 1, 2, 3, 4];
                      },
                    },
                  ]),
                  n
                );
              })(f)).prototype,
              'atNight',
              [R],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return !1;
                },
              }
            )),
            (q = n(N.prototype, 'lawnUpper', [T], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (X = n(N.prototype, 'lawnThereUpper', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (k = n(N.prototype, 'tideOnLoad', [O], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !1;
              },
            })),
            (B = n(N.prototype, 'worldMusic', [z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return v.Modern;
              },
            })),
            (W = n(N.prototype, 'worldFlagZombie', [M], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 'tutorial_flag';
              },
            })),
            (x = n(N.prototype, 'ambienceLoop', [P], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (I = n(N.prototype, 'ambienceOccasional', [D], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Z = n(N.prototype, 'ambienceRare', [E], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (F = N))
          ) || F)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/lawnPirate.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './lawn.ts', './Square.ts', './LnC.ts'],
  function (e) {
    var n, t, a, i, s, c, o, r;
    return {
      setters: [
        function (e) {
          (n = e.inheritsLoose), (t = e.createClass);
        },
        function (e) {
          (a = e.cclegacy), (i = e._decorator), (s = e.dragonBones);
        },
        function (e) {
          c = e.lawn;
        },
        function (e) {
          o = e.Square;
        },
        function (e) {
          r = e.TileType;
        },
      ],
      execute: function () {
        var l;
        a._RF.push({}, '3f6296qtA9AC6TtFNKlvPXc', 'lawnPirate', void 0);
        var L = i.ccclass;
        i.property,
          e(
            'lawnPirate',
            L('lawnPirate')(
              (l = (function (e) {
                function a() {
                  for (var n, t = arguments.length, a = new Array(t), i = 0; i < t; i++) a[i] = arguments[i];
                  return (
                    ((n = e.call.apply(e, [this].concat(a)) || this).Lane0Deck = !1),
                    (n.Lane1Deck = !1),
                    (n.Lane2Deck = !1),
                    (n.Lane3Deck = !1),
                    (n.Lane4Deck = !1),
                    n
                  );
                }
                return (
                  n(a, e),
                  (a.prototype.specialInitialize = function () {
                    this.PlankRows = [0, 2, 4];
                  }),
                  t(a, [
                    {
                      key: 'PlankRows',
                      get: function () {
                        return [].concat(
                          this.Lane0Deck ? [0] : [],
                          this.Lane1Deck ? [1] : [],
                          this.Lane2Deck ? [2] : [],
                          this.Lane3Deck ? [3] : [],
                          this.Lane4Deck ? [4] : []
                        );
                      },
                      set: function (e) {
                        (this.Lane0Deck = -1 != e.indexOf(0)),
                          (this.Lane1Deck = -1 != e.indexOf(1)),
                          (this.Lane2Deck = -1 != e.indexOf(2)),
                          (this.Lane3Deck = -1 != e.indexOf(3)),
                          (this.Lane4Deck = -1 != e.indexOf(4));
                        for (
                          var n = [this.Lane0Deck, this.Lane1Deck, this.Lane2Deck, this.Lane3Deck, this.Lane4Deck], t = 0;
                          t < n.length;
                          t++
                        ) {
                          if (n[t]) {
                            o.getLaneComponent(t).isSea = !1;
                            for (var a = 5; a < 9; a++) o.getLnC(t, a).setTileType(r.deck);
                          } else {
                            o.getLaneComponent(t).isSea = !0;
                            for (var i = 5; i < 9; i++) o.getLnC(t, i).setTileType(r.sea);
                          }
                          [-1, 5].forEach(function (e) {
                            o.getLaneComponent(e).isSea = !0;
                          }),
                            (this.getComponent(s.ArmatureDisplay)
                              .armature()
                              .getSlot('DECKSHADE' + t.toString()).displayIndex = n[t] ? 0 : -1),
                            this.node
                              .getChildByName('Lane' + t.toString())
                              .getComponent(s.ArmatureDisplay)
                              .playAnimation(n[t] ? 'On' : 'Off');
                        }
                        o.getLnC(-1, 0).setTileType(r.sea), o.getLnC(5, 0).setTileType(r.sea);
                      },
                    },
                    {
                      key: 'SeaRows',
                      get: function () {
                        return [].concat(
                          this.Lane0Deck ? [] : [0],
                          this.Lane1Deck ? [] : [1],
                          this.Lane2Deck ? [] : [2],
                          this.Lane3Deck ? [] : [3],
                          this.Lane4Deck ? [] : [4]
                        );
                      },
                    },
                  ]),
                  a
                );
              })(c))
            ) || l
          );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/lawnSky.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Square.ts', './LnC.ts', './lawn.ts'],
  function (n) {
    var e, t, w, i, r, o, s, c;
    return {
      setters: [
        function (n) {
          e = n.inheritsLoose;
        },
        function (n) {
          (t = n.cclegacy), (w = n._decorator), (i = n.Vec2);
        },
        function (n) {
          r = n.Square;
        },
        function (n) {
          (o = n.LnC), (s = n.TileType);
        },
        function (n) {
          c = n.lawn;
        },
      ],
      execute: function () {
        var u;
        t._RF.push({}, '7b7f5kDzBFOA7szLKIjO+gU', 'lawnSky', void 0);
        var a = w.ccclass;
        w.property,
          n(
            'lawnSky',
            a('lawnSky')(
              (u = (function (n) {
                function t() {
                  return n.apply(this, arguments) || this;
                }
                e(t, n);
                var w = t.prototype;
                return (
                  (w.skyTiles = function () {
                    return [
                      new i(-1, 0),
                      new i(5, 0),
                      new i(0, 9),
                      new i(0, 3),
                      new i(0, 4),
                      new i(0, 5),
                      new i(0, 6),
                      new i(0, 7),
                      new i(0, 8),
                      new i(1, 3),
                      new i(1, 4),
                      new i(1, 5),
                      new i(1, 6),
                      new i(1, 7),
                      new i(1, 8),
                      new i(2, 3),
                      new i(2, 4),
                      new i(2, 5),
                      new i(2, 6),
                      new i(2, 7),
                      new i(2, 8),
                      new i(3, 3),
                      new i(3, 4),
                      new i(3, 5),
                      new i(3, 6),
                      new i(3, 7),
                      new i(3, 8),
                      new i(4, 3),
                      new i(4, 4),
                      new i(4, 5),
                      new i(4, 6),
                      new i(4, 7),
                      new i(4, 8),
                    ];
                  }),
                  (w.specialInitialize = function () {
                    this.skyTiles().forEach(function (n) {
                      r.getSquare(n.x, n.y).getComponent(o).setTileType(s.sky);
                    });
                  }),
                  t
                );
              })(c))
            ) || u
          );
        t._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/levelController.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './FrontYard.ts',
    './Cards.ts',
    './UI.ts',
    './SoundRescourses.ts',
    './ShovelUIController.ts',
    './SunCount.ts',
    './PlantFoodCount.ts',
    './Zombies.ts',
    './Zombie.ts',
    './NodePools.ts',
    './Tombs.ts',
    './Square.ts',
    './LnC.ts',
    './Plants.ts',
    './lawnPirate.ts',
    './SoundsController.ts',
    './SoundManager.ts',
    './Conveyor.ts',
    './PowerupFingers.ts',
    './PlayerProperties.ts',
    './CharacterManager.ts',
    './Particles.ts',
    './Droppings.ts',
    './Prizes.ts',
    './levelPrize.ts',
  ],
  function (e) {
    var t,
      n,
      a,
      o,
      i,
      r,
      s,
      l,
      u,
      c,
      h,
      d,
      v,
      m,
      g,
      p,
      f,
      P,
      w,
      b,
      S,
      C,
      y,
      W,
      N,
      M,
      E,
      L,
      x,
      F,
      T,
      D,
      Z,
      I,
      B,
      G,
      z,
      k,
      R,
      O,
      j,
      A,
      H,
      _,
      V,
      U,
      Y,
      X,
      J,
      q,
      K;
    return {
      setters: [
        function (e) {
          (t = e.createClass),
            (n = e.applyDecoratedDescriptor),
            (a = e.inheritsLoose),
            (o = e.initializerDefineProperty),
            (i = e.assertThisInitialized);
        },
        function (e) {
          (r = e.cclegacy),
            (s = e._decorator),
            (l = e.Color),
            (u = e.Label),
            (c = e.ProgressBar),
            (h = e.Sprite),
            (d = e.JsonAsset),
            (v = e.Node),
            (m = e.Vec3),
            (g = e.LabelOutline),
            (p = e.tween),
            (f = e.instantiate),
            (P = e.UITransform),
            (w = e.Vec2),
            (b = e.Component);
        },
        function (e) {
          S = e.FrontYard;
        },
        function (e) {
          C = e.Cards;
        },
        function (e) {
          y = e.UIInGame;
        },
        function (e) {
          W = e.sounds;
        },
        function (e) {
          N = e.ShovelUIController;
        },
        function (e) {
          M = e.SunCount;
        },
        function (e) {
          E = e.PlantFoodCount;
        },
        function (e) {
          (L = e.zombies), (x = e.ZombieEnum);
        },
        function (e) {
          F = e.Zombie;
        },
        function (e) {
          (T = e.ArrayGet), (D = e.NodePools), (Z = e.instantiatePooly);
        },
        function (e) {
          (I = e.tombs), (B = e.TombEnum);
        },
        function (e) {
          G = e.Square;
        },
        function (e) {
          (z = e.LnC), (k = e.LnCSpawnZombieStyleEnum);
        },
        function (e) {
          R = e.plants;
        },
        function (e) {
          O = e.lawnPirate;
        },
        function (e) {
          j = e.MusicController;
        },
        function (e) {
          A = e.MusicSortEnum;
        },
        function (e) {
          (H = e.Conveyor), (_ = e.ConveyorPlant);
        },
        function (e) {
          V = e.PowerupFingers;
        },
        function (e) {
          U = e.AllPlayerProperties;
        },
        function (e) {
          Y = e.ZombiePool;
        },
        function (e) {
          X = e.particle;
        },
        function (e) {
          J = e.droppings;
        },
        function (e) {
          q = e.prizeRes;
        },
        function (e) {
          K = e.levelPrize;
        },
      ],
      execute: function () {
        var Q, $, ee, te, ne, ae, oe, ie, re, se, le, ue, ce, he, de, ve, me, ge, pe, fe, Pe, we, be, Se, Ce, ye, We;
        r._RF.push({}, '69a37XH3A9DBa468NxIslYS', 'levelController', void 0);
        var Ne = s.ccclass,
          Me = s.property,
          Ee = function () {
            (this.MinNextWaveHealthPercentage = 0.5),
              (this.MaxNextWaveHealthPercentage = 0.7),
              (this.FlagWaveInterval = 1),
              (this.IgnoreFlagCarriers = !0),
              (this.WaveCount = 1),
              (this.WaveSpendingPointIncrement = 10),
              (this.WaveSpendingPoints = 100),
              (this.Waves = []),
              (this.ZombieCountdownFirstWaveSecs = 10);
          },
          Le = function () {
            this.DynamicZombies = [];
          },
          xe = function () {
            (this.zombieName = x.modern_basic), (this.amount = 0);
          },
          Fe = function () {
            (this.l = -1), (this.c = -1), (this.tombEnum = B.egypt);
          },
          Te = e(
            'LevelPlay',
            (function () {
              function e() {}
              return (
                (e.gameStart = function () {
                  this.component.gameStart();
                }),
                (e.gameWarn = function (e, t, n, a, o, i, r, s) {
                  void 0 === t && (t = 6),
                    void 0 === n && (n = 4),
                    void 0 === a && (a = 0.5),
                    void 0 === o && (o = 0.33),
                    void 0 === i && (i = new l(255, 0, 0, 0)),
                    void 0 === r && (r = 1),
                    void 0 === s && (s = new l(0, 0, 0, 255)),
                    this.component.gamingWarn(e, t, n, a, o, i, r, s);
                }),
                (e.shakeScreen = function (e) {
                  void 0 === e && (e = 0.2), this.component.shakeScreen(e);
                }),
                t(e, null, [
                  {
                    key: 'gameStarted',
                    get: function () {
                      return !!this.component && this.component.gameStarted;
                    },
                    set: function (e) {
                      this.component.gameStarted = e;
                    },
                  },
                ]),
                e
              );
            })()
          );
        (Te.component = void 0),
          (Te.screenFlashColors = []),
          (Te.screenFlashLeftColor = new l(255, 255, 255, 0)),
          (Te.sandBoxModeOn = !1),
          (Te.letsRocked = !1),
          (Te.chooseCardMode = !1),
          (Te.levelJson = null);
        e(
          'levelController',
          ((Q = Ne('levelController')),
          ($ = Me(u)),
          (ee = Me(c)),
          (te = Me(h)),
          (ne = Me(h)),
          (ae = Me(h)),
          (oe = Me(u)),
          (ie = Me(d)),
          (re = Me(v)),
          (se = Me(v)),
          (le = Me(v)),
          (ue = Me(v)),
          (ce = Me(v)),
          Q(
            ((ve = n(
              (de = (function (e) {
                function n() {
                  for (var t, n = arguments.length, a = new Array(n), r = 0; r < n; r++) a[r] = arguments[r];
                  return (
                    (t = e.call.apply(e, [this].concat(a)) || this),
                    o(t, 'inGameWarnLabel', ve, i(t)),
                    (t._warnLabelA = 0),
                    (t.gameWarnTween = []),
                    o(t, 'levelProgressBar', me, i(t)),
                    o(t, 'levelProgressHead', ge, i(t)),
                    o(t, 'waveFlag', pe, i(t)),
                    (t.waveFlags = []),
                    o(t, 'screenFlash', fe, i(t)),
                    (t._comment = 'Tutorial'),
                    (t.currentLevelObjects = []),
                    (t.graveProps = []),
                    (t.waveManagerProps = null),
                    (t.newWaves = null),
                    (t.currentWave = -1),
                    (t.currentBigWave = -1),
                    (t.conveyor = !1),
                    (t.presetSeedBank = []),
                    (t.ExcludeListSunProducers = !1),
                    (t.ExcludePlantList = []),
                    (t.PowerUpsForceShow = !1),
                    o(t, 'levelNameLabel', Pe, i(t)),
                    (t.levelNameString = void 0),
                    (t.difficulty = 6),
                    o(t, 'Level', we, i(t)),
                    (t.rocked = !1),
                    (t.levelVictoryCountDown = 1),
                    (t.waveEventProcessingAmount = 0),
                    (t.waveToughness = 1),
                    (t._zombiesInThisWave = []),
                    (t.nextWaveZombieHealthPercentage = 0.5),
                    (t.waveZombieDamageCountdown = 4),
                    (t.nextWaveCountdown = 0),
                    (t.isFinalWave = !1),
                    (t.gameStarted = !1),
                    (t.lastStandGameStartButtonOldPos = new m()),
                    o(t, 'lastStandGameStartButton', be, i(t)),
                    (t.lastStandPrepareStarted = !1),
                    (t.screenShakeVec = new m()),
                    (t.uiPos = new m(0, 0, 0)),
                    o(t, 'camera', Se, i(t)),
                    o(t, 'ui', Ce, i(t)),
                    o(t, 'uiUpper', ye, i(t)),
                    (t.prizeSpawnWP = null),
                    (t.gameWon = !1),
                    o(t, 'zombieDisplayer', We, i(t)),
                    (t.zombiesOnDisplayed = []),
                    (t.lastStand = !1),
                    t
                  );
                }
                a(n, e);
                var r = n.prototype;
                return (
                  (r.getLevelName = function (e) {
                    var t = '',
                      n = null == e ? void 0 : e.Name;
                    if (n)
                      switch (n) {
                        case '[EGYPT_LEVEL_NAME]':
                          t += 'Ancient Egypt - Day ';
                          break;
                        case '[PIRATE_LEVEL_NAME]':
                          t += 'Pirate Seas - Day ';
                          break;
                        case '[WEST_LEVEL_NAME]':
                          t += 'Wild West - Day ';
                          break;
                        default:
                          t += n;
                      }
                    var a = null == e ? void 0 : e.LevelNumber;
                    return isNaN(a) || null == a || (t += a.toString()), t;
                  }),
                  (r.gamingWarn = function (e, t, n, a, o, i, r, s) {
                    void 0 === e && (e = 'A HUGE WAVE OF ZOMBIES IS APPROACHING!'),
                      void 0 === t && (t = 5),
                      void 0 === n && (n = 4),
                      void 0 === a && (a = 0.5),
                      void 0 === o && (o = 0.33),
                      void 0 === i && (i = new l(255, 0, 0, 0)),
                      void 0 === r && (r = 1),
                      void 0 === s && (s = new l(0, 0, 0, 255)),
                      (this.inGameWarnLabel.string = e),
                      this.gameWarnTween.forEach(function (e) {
                        e.stop();
                      }),
                      (this.gameWarnTween = []),
                      (this.inGameWarnLabel.color = i),
                      (this.inGameWarnLabel.getComponent(g).color = s),
                      (this.inGameWarnLabel.node.scale = new m(n, n, n)),
                      this.gameWarnTween.push(
                        p(this.inGameWarnLabel.node)
                          .to(o, { scale: new m(a, a, a) })
                          .call(function () {
                            switch (r) {
                              case 1:
                                W.playReadyOrSet();
                                break;
                              case 2:
                              case 3:
                                W.playSandStormWarn();
                                break;
                              case 4:
                                W.playFinalWave();
                                break;
                              default:
                                W.playHugeWave();
                            }
                          })
                          .start(),
                        p(this)
                          .to(o / 2, { warnLabelA: 255 })
                          .to(o / 2 + t, {})
                          .to(0.33, { warnLabelA: 0 })
                          .start()
                      );
                  }),
                  (r.setLevelProgressBar = function () {
                    var e;
                    if (!isNaN(null == (e = this.waveManagerProps) || null == (e = e.Waves) ? void 0 : e.length)) {
                      (this.waveFlags = []),
                        this.levelProgressBar.node.position.add3f(0, -1e3, 0),
                        this.waveFlags.unshift(this.waveFlag);
                      for (
                        var t = this.waveManagerProps.Waves.length / this.waveManagerProps.FlagWaveInterval, n = 1;
                        n < t;
                        n++
                      ) {
                        var a = f(this.waveFlag.node);
                        (a.parent = this.waveFlag.node.parent),
                          (a.position = new m(
                            ((2 * -this.waveFlag.node.parent.position.x) / t) * n,
                            this.waveFlag.node.position.y,
                            0
                          )),
                          this.waveFlags.unshift(a.getComponent(h));
                      }
                    }
                  }),
                  (r.setScreenColor = function () {
                    var e = new l(0, 0, 0, 0);
                    Te.screenFlashColors.forEach(function (t) {
                      (e.r += t.r), (e.g += t.g), (e.b += t.b), (e.a += t.a);
                    }),
                      Te.screenFlashLeftColor.a > 0 &&
                        ((e.r += Te.screenFlashLeftColor.r),
                        (e.g += Te.screenFlashLeftColor.g),
                        (e.b += Te.screenFlashLeftColor.b),
                        (e.a += Te.screenFlashLeftColor.a)),
                      (Te.screenFlashColors = []),
                      (this.screenFlash.color = e);
                  }),
                  (r.initialGraveSpawn = function () {
                    if (!(this.graveProps.length <= 0)) {
                      var e = this.graveProps.concat();
                      this.schedule(
                        function () {
                          var t = T.getRandom(e);
                          t && (G.getSquare(t.l, t.c).getComponent(z).addTomb(t.tombEnum, !1, !1), e.splice(e.indexOf(t), 1));
                        },
                        1 / this.graveProps.length,
                        this.graveProps.length,
                        0.01
                      );
                    }
                  }),
                  (r.setWaveProperties = function (e) {
                    var t = new Ee();
                    null != e && e.MinNextWaveHealthPercentage && (t.MinNextWaveHealthPercentage = e.MinNextWaveHealthPercentage),
                      null != e &&
                        e.MaxNextWaveHealthPercentage &&
                        (t.MaxNextWaveHealthPercentage = e.MaxNextWaveHealthPercentage),
                      0 == (null == e ? void 0 : e.IgnoreFlagCarriers) && (t.IgnoreFlagCarriers = !1),
                      null != e && e.WaveCount && (t.WaveCount = e.WaveCount),
                      null != e && e.Waves && (t.Waves = e.Waves),
                      null != e && e.FlagWaveInterval && (t.FlagWaveInterval = e.FlagWaveInterval),
                      null != e &&
                        e.ZombieCountdownFirstWaveSecs &&
                        (t.ZombieCountdownFirstWaveSecs = e.ZombieCountdownFirstWaveSecs),
                      null != e && e.WaveSpendingPointIncrement && (t.WaveSpendingPointIncrement = e.WaveSpendingPointIncrement),
                      null != e && e.WaveSpendingPoints && (t.WaveSpendingPoints = e.WaveSpendingPoints),
                      (this.waveManagerProps = t);
                  }),
                  (r.setNewWaves = function (e) {
                    var t = new Le();
                    null != e && e.DynamicZombies && (t.DynamicZombies = e.DynamicZombies), (this.newWaves = t);
                  }),
                  (r.setFrozenPlants = function (e) {
                    var t;
                    null == e ||
                      null == (t = e.InitialPlantPlacements) ||
                      t.forEach(function (e) {
                        if (!isNaN(e.GridX) && !isNaN(e.GridY) && !(e.GridX < 0 || e.GridX > 8 || e.GridY < 0 || e.GridY > 4)) {
                          var t = e.GridX,
                            n = e.GridY;
                          G.getSquare(n, t).getComponent(z).spawnPlantByPlantEnum(R.getPlantEnumByString(e.TypeName));
                        }
                      });
                  }),
                  (r.setPiratePlanks = function (e) {
                    var t,
                      n = null == (t = S.currentLawn) ? void 0 : t.getComponent(O);
                    if (n) {
                      var a,
                        o = [];
                      null != e && null != (a = e.PlankRows) && a.length && (o = e.PlankRows),
                        this.scheduleOnce(function () {
                          n.PlankRows = o;
                        }, 0);
                    }
                  }),
                  (r.setStartingGraveStones = function (e) {
                    var t,
                      n = this,
                      a = null == e ? void 0 : e.GravestoneCount,
                      o = (null == e ? void 0 : e.SpawnColumnEnd) - 1,
                      i = (null == e ? void 0 : e.SpawnColumnStart) - 1,
                      r = null == e ? void 0 : e.SpawnRowEnd,
                      s = null == e ? void 0 : e.SpawnRowStart;
                    (a = isNaN(a) ? 0 : a),
                      (o = isNaN(o) ? 8 : o),
                      (i = isNaN(i) ? 0 : i),
                      (r = isNaN(r) ? 4 : r),
                      (s = isNaN(s) ? 0 : s);
                    for (var l = (Math.abs(o - i) + 1) * (Math.abs(r - s) + 1), u = []; u.length < a && u.length < l; ) {
                      var c = G.getRandomSquare(s, r, i, o).getComponent(z);
                      if (-1 == u.indexOf(c)) {
                        var h = new Fe();
                        (h.c = c.cIndex), (h.l = c.lIndex), this.graveProps.push(h), u.push(c);
                      }
                    }
                    null == (t = e.ForceSpawnData) ||
                      t.forEach(function (e) {
                        if (!isNaN(e.GridX) && !isNaN(e.GridY) && !(e.GridX < 0 || e.GridX > 8 || e.GridY < 0 || e.GridY > 4)) {
                          var t = e.GridX,
                            a = e.GridY,
                            o = new Fe();
                          (o.c = t), (o.l = a), n.graveProps.push(o);
                        }
                      });
                  }),
                  (r.setProtectThePlant = function (e) {
                    var t, n;
                    isNaN(null == (t = e.Plants) ? void 0 : t.length) ||
                      null == (n = e.Plants) ||
                      n.forEach(function (e) {
                        var t = R.getPlantEnumByString(e.PlantType),
                          n = e.GridX,
                          a = e.GridY;
                        if (!isNaN(n) && !isNaN(a)) {
                          var o = G.getSquare(a, n).getComponent(z);
                          o.isInLawn() && o.spawnPlantByPlantEnum(t, !0);
                        }
                      });
                  }),
                  (r.setSeedBank = function (e) {
                    var t,
                      n,
                      a,
                      o,
                      i = this;
                    if (
                      ('true' == (null == e ? void 0 : e.ExcludeListSunProducers) && (this.ExcludeListSunProducers = !0),
                      isNaN(null == e || null == (t = e.PlantExcludeList) ? void 0 : t.length) ||
                        0 == (null == e || null == (n = e.PlantExcludeList) ? void 0 : n.length) ||
                        (this.ExcludePlantList = e.PlantExcludeList),
                      isNaN(null == e || null == (a = e.PlantBlackList) ? void 0 : a.length) ||
                        0 == (null == e || null == (o = e.PlantBlackList) ? void 0 : o.length) ||
                        ((this.ExcludeListSunProducers = !0),
                        (this.ExcludePlantList = this.ExcludePlantList.concat(e.PlantBlackList))),
                      'chooser' == (null == e ? void 0 : e.SelectionMethod))
                    )
                      (C.cardsController.maxSlotCount = 8), (Te.chooseCardMode = !0), C.cardsController.createSeedbank();
                    else if ('preset' == (null == e ? void 0 : e.SelectionMethod)) {
                      var r;
                      (Te.chooseCardMode = !1),
                        null != e &&
                          null != (r = e.PresetPlantList) &&
                          r.length &&
                          ((C.cardsController.maxSlotCount = e.PresetPlantList.length),
                          e.PresetPlantList.forEach(function (e) {
                            i.presetSeedBank.push(R.getPlantEnumByString(e.PlantType));
                          }));
                    } else (Te.chooseCardMode = !1), (C.cardsController.maxSlotCount = 0);
                  }),
                  (r.setConveyor = function (e) {
                    var t;
                    (this.conveyor = !0), (C.cardsController.maxSlotCount = 0), E.component.rotate(!1), (Te.chooseCardMode = !1);
                    var n = H.component;
                    (n.dropDelayConditions = e.DropDelayConditions),
                      (n.plantList = []),
                      null == (t = e.InitialPlantList) ||
                        t.forEach(function (e) {
                          if (e.PlantType) {
                            var t = new _();
                            (t.PlantType = R.getPlantEnumByString(e.PlantType)),
                              isNaN(e.MinCount) || (t.MinCount = e.MinCount),
                              isNaN(e.MinWeightFactor) || (t.MinWeightFactor = e.MinWeightFactor),
                              isNaN(e.MaxCount) || (t.MaxCount = e.MaxCount),
                              isNaN(e.MaxWeightFactor) || (t.MaxWeightFactor = e.MaxWeightFactor),
                              isNaN(e.Weight) || (t.Weight = e.Weight),
                              n.plantList.push(t);
                          }
                        }),
                      (n.speedConditions = e.SpeedConditions);
                  }),
                  (r.setLastStand = function (e) {
                    (this.lastStand = !0),
                      isNaN(e.StartingSun) || M.component.setSunCount(e.StartingSun),
                      isNaN(e.StartingPlantfood)
                        ? E.component.setPlantFoodNum(0)
                        : E.component.setPlantFoodNum(e.StartingPlantfood);
                  }),
                  (r.readLevelJson = function () {
                    var e,
                      t = this,
                      n = Te.levelJson;
                    null == (null == (e = JSON.parse(JSON.stringify(n))) || null == (e = e.json) ? void 0 : e.objects) &&
                      (n = this.Level);
                    var a = JSON.stringify(n),
                      o = JSON.parse(a).json;
                    (this.currentLevelObjects = o.objects),
                      this.currentLevelObjects.forEach(function (e) {
                        'LevelDefinition' == (null == e ? void 0 : e.objclass)
                          ? t.setLevelDefinition(null == e ? void 0 : e.objdata)
                          : 'WaveManagerProperties' == (null == e ? void 0 : e.objclass)
                          ? t.setWaveProperties(null == e ? void 0 : e.objdata)
                          : 'WaveManagerModuleProperties' == (null == e ? void 0 : e.objclass)
                          ? t.setNewWaves(null == e ? void 0 : e.objdata)
                          : 'InitialPlantProperties' == (null == e ? void 0 : e.objclass)
                          ? t.setFrozenPlants(null == e ? void 0 : e.objdata)
                          : 'SeedBankProperties' == (null == e ? void 0 : e.objclass)
                          ? t.setSeedBank(null == e ? void 0 : e.objdata)
                          : 'ConveyorSeedBankProperties' == (null == e ? void 0 : e.objclass)
                          ? t.setConveyor(null == e ? void 0 : e.objdata)
                          : 'PiratePlankProperties' == (null == e ? void 0 : e.objclass)
                          ? t.setPiratePlanks(null == e ? void 0 : e.objdata)
                          : 'GravestoneProperties' == (null == e ? void 0 : e.objclass)
                          ? t.setStartingGraveStones(null == e ? void 0 : e.objdata)
                          : 'LastStandMinigameProperties' == (null == e ? void 0 : e.objclass)
                          ? t.setLastStand(null == e ? void 0 : e.objdata)
                          : 'ProtectThePlantChallengeProperties' == (null == e ? void 0 : e.objclass)
                          ? t.setProtectThePlant(null == e ? void 0 : e.objdata)
                          : 'PowerupTutorialIntroProperties' == (null == e ? void 0 : e.objclass) && (t.PowerUpsForceShow = !0);
                      });
                  }),
                  (r.setLevelDefinition = function (e) {
                    switch (
                      ((this.levelNameLabel.string = ''),
                      (this.levelNameString = this.getLevelName(e)),
                      this.lastStand ||
                        (isNaN(e.StartingSun) ? M.component.setSunCount(50) : M.component.setSunCount(e.StartingSun)),
                      null != e && e.SandBoxMode && (Te.sandBoxModeOn = e.SandBoxMode),
                      null == e ? void 0 : e.MusicType)
                    ) {
                      case 'MiniGame_A':
                        j.switchMusicSort(A.UltimateBattle);
                        break;
                      case 'MiniGame_B':
                        j.switchMusicSort(A.DemonstrateMinigame);
                        break;
                      default:
                        j.switchMusicSort(A.DemonstrateMinigame);
                    }
                    console.log(null == e ? void 0 : e.StageModule),
                      S.changeFrontYardByString(null == e ? void 0 : e.StageModule);
                  }),
                  (r.spawnDynamicZombie = function (e, t) {
                    var n,
                      a,
                      o = this;
                    if (null != this && null != (n = this.newWaves) && null != (n = n.DynamicZombies) && n.length) {
                      var i = this.newWaves.DynamicZombies[Math.min(this.newWaves.DynamicZombies.length, this.difficulty)],
                        r = 0,
                        s = 0;
                      if ((i.StartingWave && (s = i.StartingWave), !(e < s))) {
                        i.StartingPoints && (r += i.StartingPoints),
                          i.PointIncrementPerWave && (r += i.PointIncrementPerWave * (e - s)),
                          t && (r *= 2.5);
                        var l = [];
                        if ((i.ZombiePool && (l = i.ZombiePool), !((null == (a = l) ? void 0 : a.length) <= 0))) {
                          var u = 1 / 0,
                            c = [];
                          for (
                            l.forEach(function (e) {
                              var t = L.getZombieEnumByRTID(e);
                              c.push(t);
                              var n = L.getZombieWavePointCost(t);
                              n < u && (u = n);
                            });
                            r > u;

                          ) {
                            var h = L.pickZombieByWeight(c),
                              d = L.getZombieWavePointCost(h);
                            if (d <= r) {
                              var v = L.createZombie(null, h);
                              v &&
                                (this._zombiesInThisWave.push(v),
                                (this.waveToughness += v.toughness),
                                v.additionalZombies().forEach(function (e) {
                                  o._zombiesInThisWave.push(e), (o.waveToughness += e.toughness);
                                })),
                                (r -= d);
                            } else {
                              var m = c.indexOf(h);
                              -1 != m && c.splice(m, 1);
                            }
                          }
                        }
                      }
                    }
                  }),
                  (r.setLevelVictoryCountDown = function (e) {
                    this.levelVictoryCountDown = e > this.levelVictoryCountDown ? e : this.levelVictoryCountDown;
                  }),
                  (r.readWave = function (e) {
                    var t = this,
                      n = e.objdata;
                    switch (null == e ? void 0 : e.objclass) {
                      case 'SpawnZombiesJitteredWaveActionProps':
                        var a = n.Zombies;
                        null == a ||
                          a.forEach(function (e) {
                            var n = 0,
                              a = '';
                            (n = isNaN(Number(e.Row)) ? null : Number(e.Row) - 1), e.Type && (a = e.Type);
                            var o = L.createZombieByRTID(n, a);
                            'prev' == e.Row && (o.worldPositionX += o.prevDistance()),
                              o.countHealthToThisWave && (t._zombiesInThisWave.push(o), (t.waveToughness += o.toughness)),
                              o.additionalZombies().forEach(function (e) {
                                t._zombiesInThisWave.push(e), (t.waveToughness += e.toughness);
                              });
                          });
                        break;
                      case 'SpawnGravestonesWaveActionProps':
                        var o = n.GravestonePool,
                          i = n.SpawnPositionsPool;
                        null == o ||
                          o.forEach(function (e) {
                            var t = 1;
                            isNaN(e.Count) || (t = e.Count);
                            for (var n = I.getTombEnumByString(e.Type), a = 0; a < t && a < (null == i ? void 0 : i.length); ) {
                              var o = i[a],
                                r = o.mX;
                              isNaN(r) && (r = Math.floor(9 * Math.random()));
                              var s = o.mY;
                              isNaN(s) && (s = Math.floor(5 * Math.random())),
                                a++,
                                G.getSquare(s, r).getComponent(z).addTomb(n, !0, !1);
                            }
                            W.playTombRiseMagical();
                          });
                        break;
                      case 'SpawnZombiesFromGroundSpawnerProps':
                        var r = null == n ? void 0 : n.Zombies;
                        if (isNaN(null == r ? void 0 : r.length)) return;
                        var s = (null == n ? void 0 : n.ColumnEnd) - 1,
                          u = (null == n ? void 0 : n.ColumnStart) - 1,
                          c = null == n ? void 0 : n.RowEnd,
                          h = null == n ? void 0 : n.RowStart;
                        (s = isNaN(s) ? 8 : s), (u = isNaN(u) ? 0 : u), (c = isNaN(c) ? 4 : c), (h = isNaN(h) ? 0 : h);
                        var d = [];
                        r.forEach(function (e) {
                          var t = L.getZombieEnumByRTID(null == e ? void 0 : e.Type),
                            n = G.getRandomSquare(h, c, u, s).getComponent(z).spawnZombie(t, k.dirtSpawn, !0, Math.random());
                          d = d.concat(n);
                        }),
                          d.forEach(function (e) {
                            e.countHealthToThisWave && (t._zombiesInThisWave.push(e), (t.waveToughness += e.toughness));
                          });
                        break;
                      case 'ModifyConveyorWaveActionProps':
                        var v, m, g, p;
                        if (!isNaN(null == n || null == (v = n.Add) ? void 0 : v.length))
                          null == n ||
                            null == (g = n.Add) ||
                            g.forEach(function (e) {
                              var t = R.getPlantByRTID(e.Type),
                                n = 1 / 0,
                                a = 1,
                                o = 0,
                                i = 1,
                                r = 40;
                              isNaN(e.MaxCount) || (n = e.MaxCount),
                                isNaN(e.MaxWeightFactor) || (a = e.MaxWeightFactor),
                                isNaN(e.MinCount) || (o = e.MinCount),
                                isNaN(e.MinWeightFactor) || (i = e.MinWeightFactor),
                                isNaN(e.Weight) || (r = e.Weight);
                              var s = new _();
                              (s.PlantType = t),
                                (s.MaxCount = n),
                                (s.MaxWeightFactor = a),
                                (s.MinCount = o),
                                (s.MinWeightFactor = i),
                                (s.Weight = r),
                                H.component.addCard(s);
                            });
                        if (!isNaN(null == n || null == (m = n.Remove) ? void 0 : m.length))
                          null == n ||
                            null == (p = n.Remove) ||
                            p.forEach(function (e) {
                              var t = R.getPlantByRTID(e.Type);
                              H.component.removeCard(t);
                            });
                        break;
                      case 'RaidingPartyZombieSpawnerProps':
                        Te.gameWarn('Raiding Party!', 5, 4, 0.5, 0.33, new l(155, 93, 40, 0), 3, new l(58, 13, 0, 255));
                        var f = isNaN(n.GroupSize) ? 5 : n.GroupSize,
                          P = isNaN(n.SwashbucklerCount) ? 1 : n.SwashbucklerCount,
                          w = isNaN(n.TimeBetweenGroups) ? 1 : n.TimeBetweenGroups,
                          b = Math.ceil(P / f);
                        if (!(b > 0)) return;
                        this.waveEventProcessingAmount++;
                        var S = 0;
                        this.schedule(
                          function () {
                            t.schedule(
                              function () {
                                var e = L.createZombie(Math.floor(5 * Math.random()), x.pirate_swashbuckler);
                                t._zombiesInThisWave.push(e), (t.waveToughness += e.toughness);
                              },
                              0.8,
                              f,
                              0.1
                            ),
                              ++S >= b && (t.waveEventProcessingAmount--, (t.levelVictoryCountDown = 1));
                          },
                          w + 0.8 * (f - 1),
                          b,
                          0.1
                        );
                        break;
                      case 'StormZombieSpawnerProps':
                        var C;
                        Te.gameWarn('Sandstorm!', 5, 4, 0.5, 0.33, new l(255, 184, 0, 0), 3, new l(117, 52, 0, 255));
                        var y = 4,
                          N = 8,
                          M = 0,
                          E = 4,
                          F = 2,
                          D = 2;
                        isNaN(null == n ? void 0 : n.ColumnEnd) || (N = n.ColumnEnd),
                          isNaN(null == n ? void 0 : n.ColumnStart) || (y = n.ColumnStart),
                          isNaN(null == n ? void 0 : n.RowEnd) || (E = n.RowEnd),
                          isNaN(null == n ? void 0 : n.RowStart) || (M = n.RowStart),
                          isNaN(null == n ? void 0 : n.GroupSize) || (F = n.GroupSize),
                          isNaN(null == n ? void 0 : n.TimeBetweenGroups) || (D = n.TimeBetweenGroups);
                        var Z = [];
                        if (
                          (isNaN(null == (C = n.Zombies) ? void 0 : C.length) ||
                            n.Zombies.forEach(function (e) {
                              Z.push(L.getZombieEnumByRTID(e.Type));
                            }),
                          Z.length)
                        ) {
                          this.waveEventProcessingAmount++;
                          var B = Z.concat(),
                            O = 0,
                            j = Math.ceil(Z.length / F);
                          this.schedule(
                            function () {
                              if (!(O >= j)) {
                                for (var e = 0; e < F && B.length > 0; e++) {
                                  var n = T.getRandom(B);
                                  B.splice(B.indexOf(n), 1),
                                    G.getRandomSquare(M, E, y, N)
                                      .getComponent(z)
                                      .spawnZombie(n, k.sandStorm)
                                      .forEach(function (e) {
                                        t._zombiesInThisWave.push(e), (t.waveToughness += e.toughness);
                                      });
                                }
                                ++O >= j && (t.waveEventProcessingAmount--, (t.levelVictoryCountDown = 1));
                              }
                            },
                            D,
                            j,
                            3
                          );
                        }
                    }
                  }),
                  (r.bigWave = function () {
                    this.gamingWarn('A HUGE WAVE OF ZOMBIES IS APPROACHING!', 5, 4, 0.5, 0.33, new l(255, 0, 0, 0), 0);
                  }),
                  (r.judgeWaveCount = function (e) {
                    var t,
                      a = this;
                    (this.waveToughness = 0.01),
                      (this._zombiesInThisWave = []),
                      p(this.getComponent(n))
                        .to(
                          0.8,
                          { levelProgressPercentage: this.currentWave / (this.waveManagerProps.Waves.length - 1) },
                          { easing: 'cubicInOut' }
                        )
                        .start(),
                      (this.nextWaveCountdown = 4 * Math.random() + 20),
                      (this.currentWave + 1) % this.waveManagerProps.FlagWaveInterval == 0 && (this.nextWaveCountdown += 10),
                      this.spawnDynamicZombie(this.currentWave + 1, e),
                      null == (t = this.waveManagerProps.Waves[this.currentWave]) ||
                        t.forEach(function (e) {
                          a.currentLevelObjects.forEach(function (t) {
                            var n;
                            null != t &&
                              null != (n = t.aliases) &&
                              n.length &&
                              'RTID('.concat(t.aliases[0]).concat('@CurrentLevel)') == e &&
                              (a.readWave(t), a.addPlantFood(t.objdata));
                          });
                        }),
                      (this.nextWaveZombieHealthPercentage =
                        Math.random() *
                          (this.waveManagerProps.MaxNextWaveHealthPercentage -
                            this.waveManagerProps.MinNextWaveHealthPercentage) +
                        this.waveManagerProps.MinNextWaveHealthPercentage),
                      (this.waveZombieDamageCountdown = Math.random() + 4),
                      this.currentWave++;
                  }),
                  (r.nextWave = function () {
                    var e = this;
                    if (-1 == this.currentWave) {
                      var t = this.waveManagerProps.ZombieCountdownFirstWaveSecs;
                      t || (t = 10), (this.nextWaveCountdown = t), (this.waveZombieDamageCountdown = t), (this.currentWave = 0);
                    } else if (this.currentWave >= 0) {
                      (this.nextWaveCountdown = 1 / 0),
                        (this.nextWaveZombieHealthPercentage = -1 / 0),
                        (this.waveZombieDamageCountdown = 1 / 0),
                        0 == this.currentWave && (this.levelProgressBar.node.position.add3f(0, 1e3, 0), W.playAwooga());
                      var n = this.currentWave + 1 == this.waveManagerProps.Waves.length,
                        a = ((this.currentWave + 1) % this.waveManagerProps.FlagWaveInterval == 0 && 0 != this.currentWave) || n;
                      this.waveManagerProps.Waves[this.currentWave] &&
                        (a
                          ? (this.bigWave(),
                            this.scheduleOnce(function () {
                              var t;
                              (n &&
                                (e.gamingWarn('FINAL WAVE', 5, 4, 0.5, 0.33, new l(255, 0, 0, 0), 4),
                                (e.isFinalWave = !0),
                                (e.levelVictoryCountDown = 1)),
                              e.judgeWaveCount(!0),
                              L.createZombie(null, L.getZombieEnumByString(S.currentLawn.worldFlagZombie)),
                              W.playAwooga(),
                              e.waveFlags[0]) &&
                                (e.waveFlags[0].getComponent(P).setContentSize(21, 74),
                                p(null == (t = e.waveFlags[0]) ? void 0 : t.node.getChildByName('flagFan').position)
                                  .to(1, { y: 14 }, { easing: 'cubicInOut' })
                                  .start(),
                                e.waveFlags.splice(0, 1));
                            }, 5))
                          : this.judgeWaveCount(!1));
                    }
                  }),
                  (r.addPlantFood = function (e) {
                    var t,
                      n = 0;
                    if (
                      (isNaN(null == e ? void 0 : e.AdditionalPlantfood) || (n += e.AdditionalPlantfood),
                      !isNaN(null == e || null == (t = e.DynamicPlantfood) ? void 0 : t.length))
                    ) {
                      var a = e.DynamicPlantfood[this.difficulty];
                      n += isNaN(a) ? 0 : a;
                    }
                    for (var o = this._zombiesInThisWave.concat(); o.length > 0 && n > 0; ) {
                      var i = T.getRandom(o);
                      i.allowWaveAddPlantFood && ((i.havePlantfood = !0), n--), o.splice(o.indexOf(i), 1);
                    }
                  }),
                  (r.gameStart = function () {
                    this.gameStarted ||
                      ((this.levelNameLabel.string = this.levelNameString),
                      this.zombiesOnDisplayed.forEach(function (e) {
                        e.playDie(!0), D.destroyPooly(e.node);
                      }),
                      y.gameStart(),
                      S.levelPlayStart(),
                      (this.gameStarted = !0),
                      C.cardsController.gameStart(),
                      (C.cardsController.maxSlotCount > 0 || this.conveyor) && N.gameStart(),
                      V.gameStart(),
                      (C.cardsController.maxSlotCount > 0 || this.conveyor) && E.show(this.conveyor, E.keyOn),
                      this.conveyor && H.component.show());
                  }),
                  (r.moveCamera = function () {
                    var e = this;
                    (this.uiPos = new m(-70, 0, 1e3)),
                      p(this.uiPos)
                        .by(1, { x: 0 })
                        .call(function () {
                          W.playCameraMove(), e.initialGraveSpawn();
                        })
                        .to(2, { x: 500 }, { easing: 'cubicInOut' })
                        .call(function () {
                          if (e.zombiesOnDisplayed.length)
                            for (var t = 0; t < 3; t++) L.playGroan(T.getRandom(e.zombiesOnDisplayed).zombieGroanSoundGroup, 0.3);
                        })
                        .by(0.5, { x: 0 })
                        .call(function () {
                          e.judgeCardChooser();
                        })
                        .start();
                  }),
                  (r.letsRock = function () {
                    this.rocked ||
                      C.cardsController.maxSlotCount != C.cardsController.seedPackets.length ||
                      (this.moveCameraToNormal(),
                      W.playLetsRock(),
                      (Te.letsRocked = !0),
                      (this.rocked = !0),
                      C.cardsController.pullSeedBank(!0));
                  }),
                  (r.readySetPlant = function () {
                    this.lastStand &&
                      ((this.lastStandPrepareStarted = !1),
                      this.lastStandGameStartButton.position.add(new m(0, 1e3, 0)),
                      y.uiingame.tryChangingIndex(-1),
                      C.cardsController.cardsUIUpperRestart());
                    var e = Te.component;
                    e.gamingWarn('Ready...', 3, 0.4, 0.45, 0.2, new l(255, 0, 0, 255), 1),
                      e.scheduleOnce(function () {
                        e.gamingWarn('Set...', 3, 0.4, 0.45, 0.2, new l(255, 0, 0, 255), 1),
                          e.scheduleOnce(function () {
                            e.gamingWarn('PLANT!', 3, 0.6, 0.6, 0.2, new l(255, 0, 0, 255), 3),
                              e.scheduleOnce(function () {
                                e.gameStart();
                              }, 1);
                          }, 0.6);
                      }, 0.6);
                  }),
                  (r.lastStandStart = function () {
                    ((this.lastStandGameStartButton.position = this.lastStandGameStartButtonOldPos),
                    this.lastStandPrepareStarted) ||
                      ((this.lastStandPrepareStarted = !0),
                      C.cardsController.cardsUIUpperRestart(),
                      Te.component.gamingWarn('Plan your defenses!', 3, 0.5, 0.5, 0.1, new l(255, 0, 0, 255), 1),
                      C.cardsController.gameStart(),
                      N.gameStart(),
                      y.gameStart());
                  }),
                  (r.moveCameraToNormal = function () {
                    var e = this;
                    p(this.uiPos)
                      .to(2, { x: 0 }, { easing: 'cubicInOut' })
                      .call(function () {
                        e.lastStand ? e.lastStandStart() : e.readySetPlant(),
                          C.cardsController.maxSlotCount > 0 && (null == M || M.show()),
                          e.conveyor ||
                            (C.cardsController.maxSlotCount > 0 && (null == E || E.show()), D.destroyPooly(H.component.node)),
                          C.cardsController.maxSlotCount > 0 &&
                            (C.cardsController.laySlots(),
                            e.presetSeedBank.forEach(function (e) {
                              C.cardsController.addCardByPlantEnum(e);
                            }),
                            C.cardsController.showSeedSlots()),
                          C.cardsController.closeSeedbank();
                      })
                      .start();
                  }),
                  (r.judgeCardChooser = function () {
                    var e = this;
                    Te.chooseCardMode
                      ? p(this.uiPos)
                          .to(2, { x: 230 }, { easing: 'cubicInOut' })
                          .call(function () {
                            e.cardChooserOn();
                          })
                          .start()
                      : this.moveCameraToNormal();
                  }),
                  (r.cardChooserOn = function () {
                    C.cardsController.laySlots(), C.cardsController.laySeedBank(), null == M || M.show(), null == E || E.show();
                  }),
                  (r.shakeScreen = function (e) {
                    var t = this;
                    void 0 === e && (e = 0.2),
                      (e -= 0.2),
                      p(this.screenShakeVec)
                        .to(0.05, { x: 5 * (2 * Math.random() - 1), y: 5 * (2 * Math.random() - 1) })
                        .to(0.05, { x: 5 * (2 * Math.random() - 1), y: 5 * (2 * Math.random() - 1) })
                        .to(0.05, { x: 5 * (2 * Math.random() - 1), y: 5 * (2 * Math.random() - 1) })
                        .to(0.05, { x: 0, y: 0 })
                        .call(function () {
                          e > 0 && t.shakeScreen(e);
                        })
                        .start();
                  }),
                  (r.update = function (e) {
                    var t,
                      n = this;
                    null != (t = this.waveManagerProps) &&
                      null != (t = t.Waves) &&
                      t.length &&
                      (this.waveZombieDamageCountdown > 0 && (this.waveZombieDamageCountdown -= e),
                      this.gameStarted &&
                        ((this.nextWaveCountdown -= e),
                        (this.nextWaveCountdown <= 0 ||
                          this.waveLeftHealth / this.waveToughness <= this.nextWaveZombieHealthPercentage) &&
                          this.waveZombieDamageCountdown <= 0 &&
                          this.nextWave())),
                      Te.screenFlashLeftColor.a > 0 ? (Te.screenFlashLeftColor.a -= 80 * e) : (Te.screenFlashLeftColor.a = 0),
                      (this.camera.position = this.uiPos.clone().add(this.screenShakeVec)),
                      (this.ui.position = this.uiPos),
                      (this.uiUpper.position = this.uiPos),
                      this.setScreenColor(),
                      this.isFinalWave &&
                        this.waveEventProcessingAmount <= 0 &&
                        !this.gameWon &&
                        (this.levelVictoryCountDown > 0 && (this.levelVictoryCountDown -= e),
                        Y.pool()
                          .concat()
                          .forEach(function (e) {
                            n.setLevelVictoryCountDown(e.finalWaveVictoryCountdown), (n.prizeSpawnWP = e.worldPosition.clone());
                          }),
                        this.levelVictoryCountDown <= 0 && this.victory(this.prizeSpawnWP));
                  }),
                  (r.victory = function (e) {
                    if (((this.gameWon = !0), !e)) {
                      var t = G.getLnC(2, 4);
                      e = new w(t.node.worldPosition.x, t.node.worldPosition.y);
                    }
                    j.switchMusicSort(A.Victory);
                    var n = Z(X.prizeSpawn());
                    (n.parent = J.layer), (n.worldPosition = new m(e.x, e.y));
                    var a = Z(q.coinbag());
                    a.parent = J.layer;
                    var o = a.getComponent(K);
                    o && ((o.worldPosition = e), null == o || o.leapToPos());
                  }),
                  (r.onLoad = function () {
                    Te.component = this;
                  }),
                  (r.showZombies = function () {
                    var e = this,
                      t = [];
                    this.currentLevelObjects.forEach(function (n) {
                      var a,
                        o = n.objdata;
                      if (
                        'SpawnZombiesJitteredWaveActionProps' == n.objclass ||
                        'StormZombieSpawnerProps' == n.objclass ||
                        'SpawnZombiesFromGroundSpawnerProps' == n.objclass
                      )
                        null == o ||
                          null == (a = o.Zombies) ||
                          a.forEach(function (e) {
                            e.Type && t.push(L.getZombieEnumByRTID(e.Type));
                          });
                      else if ('WaveManagerModuleProperties' == n.objclass) {
                        var i;
                        if (null != (i = n.objdata) && null != (i = i.DynamicZombies) && i.length) {
                          var r,
                            s = null == (r = n.objdata) ? void 0 : r.DynamicZombies[e.difficulty],
                            l = null == s ? void 0 : s.ZombiePool;
                          l &&
                            s &&
                            s.StartingPoints > 0 &&
                            (null == l ||
                              l.forEach(function (e) {
                                t.push(L.getZombieEnumByRTID(e));
                              }));
                        }
                      }
                    });
                    var n = [];
                    t.forEach(function (e) {
                      var t = !1;
                      if (
                        (n.forEach(function (n) {
                          t || (n.zombieName == e && (n.amount++, (t = !0)));
                        }),
                        !t)
                      ) {
                        var a = new xe();
                        (a.amount = 1), (a.zombieName = e), n.push(a);
                      }
                    });
                    var a = 0;
                    n.forEach(function (e) {
                      a += Math.ceil(0.1 * e.amount);
                    });
                    var o = this.zombieDisplayer.getComponent(P).contentSize,
                      i = this.zombieDisplayer.worldPosition
                        .clone()
                        .add(new m(-o.width / 2, o.height / 2, 0).multiplyScalar(this.zombieDisplayer.worldScale.x)),
                      r = this.zombieDisplayer.worldPosition
                        .clone()
                        .add(new m(o.width / 2, -o.height / 2, 0).multiplyScalar(this.zombieDisplayer.worldScale.x)),
                      s = i.y + 0,
                      l = null;
                    n.forEach(function (t) {
                      for (var n = 0; n < 0.1 * t.amount; n++) {
                        var o = L.getZombie(t.zombieName);
                        o.parent = e.zombieDisplayer;
                        var u = o.getComponent(F),
                          c = i.x + (r.x - i.x) * Math.random(),
                          h = (10 * (-45 * Math.random() - 15)) / a + s - (l ? Math.max(u.zombieHeight - l.zombieHeight, 0) : 0);
                        h < r.y && (h = r.y),
                          (s = h),
                          (u.displayed = !0),
                          u.playIdle(),
                          (u.worldPosition = new w(c, h)),
                          u.additionalZombies().forEach(function (t) {
                            (t.displayed = !0), t.playIdle(), e.zombiesOnDisplayed.push(t);
                          }),
                          e.zombiesOnDisplayed.push(u),
                          (l = u);
                      }
                    });
                  }),
                  (r.start = function () {
                    isNaN(U.currentPlayer.difficulty) && (U.currentPlayer.difficulty = 3),
                      (this.isFinalWave = !1),
                      (this.gameWon = !1),
                      (this.difficulty = U.currentPlayer.difficulty + 3),
                      (this.graveProps = []),
                      (this.PowerUpsForceShow = !1),
                      (this.ExcludeListSunProducers = !1),
                      (this.ExcludePlantList = []),
                      (this.lastStandGameStartButtonOldPos = this.lastStandGameStartButton.position.clone()),
                      this.lastStandGameStartButton.position.add(new m(0, 1e3, 0)),
                      (this.lastStandPrepareStarted = !1),
                      (this.gameStarted = !1),
                      (this.lastStand = !1),
                      (this.zombiesOnDisplayed = []),
                      (this.conveyor = !1),
                      (Te.chooseCardMode = !1),
                      (Te.sandBoxModeOn = !1),
                      this.Level && (this.readLevelJson(), this.showZombies()),
                      (Te.letsRocked = !Te.chooseCardMode),
                      this.moveCamera(),
                      this.setLevelProgressBar();
                  }),
                  t(n, [
                    {
                      key: 'warnLabelA',
                      get: function () {
                        return this._warnLabelA;
                      },
                      set: function (e) {
                        var t = this.inGameWarnLabel.color.clone();
                        (this.inGameWarnLabel.color = new l(t.r, t.g, t.b, e)), (this._warnLabelA = e);
                      },
                    },
                    {
                      key: 'levelProgressPercentage',
                      get: function () {
                        return this.levelProgressBar.progress;
                      },
                      set: function (e) {
                        var t;
                        (this.levelProgressBar.progress = e),
                          null == (t = this.levelProgressHead) ||
                            null == (t = t.node) ||
                            t.setPosition(
                              this.levelProgressBar.barSprite.node.position
                                .clone()
                                .add3f(-this.levelProgressBar.barSprite.getComponent(P).contentSize.width, 0, 0)
                            );
                      },
                    },
                    {
                      key: 'waveLeftHealth',
                      get: function () {
                        var e = 0;
                        return (
                          this._zombiesInThisWave.forEach(function (t) {
                            t.isAlive() && t.countHealthToThisWave && t.health > 0 && (e += t.health);
                          }),
                          e
                        );
                      },
                    },
                  ]),
                  n
                );
              })(b)).prototype,
              'inGameWarnLabel',
              [$],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (me = n(de.prototype, 'levelProgressBar', [ee], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (ge = n(de.prototype, 'levelProgressHead', [te], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (pe = n(de.prototype, 'waveFlag', [ne], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (fe = n(de.prototype, 'screenFlash', [ae], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Pe = n(de.prototype, 'levelNameLabel', [oe], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (we = n(de.prototype, 'Level', [ie], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (be = n(de.prototype, 'lastStandGameStartButton', [re], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (Se = n(de.prototype, 'camera', [se], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Ce = n(de.prototype, 'ui', [le], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (ye = n(de.prototype, 'uiUpper', [ue], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (We = n(de.prototype, 'zombieDisplayer', [ce], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (he = de))
          ) || he)
        );
        r._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/LevelNodes.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (e) {
  var r, n, o, t, i, a, l, u;
  return {
    setters: [
      function (e) {
        (r = e.applyDecoratedDescriptor), (n = e.inheritsLoose), (o = e.initializerDefineProperty), (t = e.assertThisInitialized);
      },
      function (e) {
        (i = e.cclegacy), (a = e._decorator), (l = e.Prefab), (u = e.Component);
      },
    ],
    execute: function () {
      var s, c, d, p, g, f, m, N, v;
      i._RF.push({}, '874a2FYkoZC+LHvY/x2+M4w', 'LevelNodes', void 0);
      var b = a.ccclass,
        h = a.property,
        y = e(
          'levelNodeRes',
          (function () {
            function e() {}
            return (
              (e.normalNode = function () {
                return this.res.normalNode;
              }),
              (e.gargantuarNode = function () {
                return this.res.gargantuarNode;
              }),
              (e.minigameNode = function () {
                return this.res.minigameNode;
              }),
              e
            );
          })()
        );
      y.res = void 0;
      e(
        'LevelNodes',
        ((s = b('LevelNodes')),
        (c = h(l)),
        (d = h(l)),
        (p = h(l)),
        s(
          ((m = r(
            (f = (function (e) {
              function r() {
                for (var r, n = arguments.length, i = new Array(n), a = 0; a < n; a++) i[a] = arguments[a];
                return (
                  (r = e.call.apply(e, [this].concat(i)) || this),
                  o(r, 'normalNode', m, t(r)),
                  o(r, 'gargantuarNode', N, t(r)),
                  o(r, 'minigameNode', v, t(r)),
                  r
                );
              }
              return (
                n(r, e),
                (r.prototype.onLoad = function () {
                  y.res = this;
                }),
                r
              );
            })(u)).prototype,
            'normalNode',
            [c],
            { configurable: !0, enumerable: !0, writable: !0, initializer: null }
          )),
          (N = r(f.prototype, 'gargantuarNode', [d], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
          (v = r(f.prototype, 'minigameNode', [p], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
          (g = f))
        ) || g)
      );
      i._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/levelPrize.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Character.ts',
    './Square.ts',
    './SoundRescourses.ts',
    './CharacterManager.ts',
    './Mouse.ts',
    './UI.ts',
    './NodePools.ts',
    './Particles.ts',
    './ParticleSelfdestroy.ts',
    './SoundsController.ts',
    './SoundManager.ts',
    './Materials.ts',
  ],
  function (t) {
    var e, i, o, n, l, r, s, a, c, u, d, h, p, f, g, w, y, S, b, v, P, z, m, C, L;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor),
            (i = t.inheritsLoose),
            (o = t.initializerDefineProperty),
            (n = t.assertThisInitialized);
        },
        function (t) {
          (l = t.cclegacy),
            (r = t._decorator),
            (s = t.AudioClip),
            (a = t.Size),
            (c = t.Vec2),
            (u = t.tween),
            (d = t.Vec3),
            (h = t.Color);
        },
        function (t) {
          p = t.Character;
        },
        function (t) {
          f = t.Square;
        },
        function (t) {
          g = t.sounds;
        },
        function (t) {
          w = t.Rectangle;
        },
        function (t) {
          y = t.Mouse;
        },
        function (t) {
          S = t.UIInGame;
        },
        function (t) {
          (b = t.destroyPooly), (v = t.instantiatePooly);
        },
        function (t) {
          P = t.particle;
        },
        function (t) {
          z = t.ParticleSelfdestroy;
        },
        function (t) {
          m = t.MusicController;
        },
        function (t) {
          C = t.MusicSortEnum;
        },
        function (t) {
          L = t.materialRes;
        },
      ],
      execute: function () {
        var T, M, I, R, x, E, q, A, O, _, D;
        l._RF.push({}, '5772bmaeBtG0ZS9CVEYQSIA', 'levelPrize', void 0);
        var U = r.ccclass,
          V = r.property;
        t(
          'levelPrize',
          ((T = U('levelPrize')),
          (M = V(s)),
          (I = V(s)),
          (R = V(a)),
          (x = V(s)),
          T(
            ((A = e(
              (q = (function (t) {
                function e() {
                  for (var e, i = arguments.length, l = new Array(i), r = 0; r < i; r++) l[r] = arguments[r];
                  return (
                    ((e = t.call.apply(t, [this].concat(l)) || this).leapTween = []),
                    o(e, 'landSound', A, n(e)),
                    o(e, 'collectSound', O, n(e)),
                    (e.collected = !1),
                    o(e, 'bodySize', _, n(e)),
                    (e.collectTween = []),
                    (e.light = void 0),
                    o(e, 'spawnSound', D, n(e)),
                    e
                  );
                }
                i(e, t);
                var l = e.prototype;
                return (
                  (l.stopLeap = function () {
                    var t;
                    null == (t = this.leapTween) ||
                      t.forEach(function (t) {
                        t.stop();
                      }),
                      (this.leapTween = []);
                  }),
                  (l.leapToPos = function (t, e, i, o) {
                    var n = this;
                    void 0 === t && (t = 1), void 0 === e && (e = 4), void 0 === i && (i = 180), void 0 === o && (o = 1.5);
                    var l = f.getLnC(t, e);
                    if ((this.stopLeap(), l)) {
                      var r = new c(l.node.worldPosition.x, l.node.worldPosition.y);
                      this.leapTween.push(
                        u(this).to(o, { worldPositionX: r.x, worldPositionY: r.y }).start(),
                        u(this)
                          .to(o / 2, { height: i }, { easing: 'quadOut' })
                          .to(o / 2, { height: 0 }, { easing: 'quadIn' })
                          .call(function () {
                            n.onLeapEnd(), g.play(n.landSound);
                          })
                          .start()
                      );
                    }
                  }),
                  (l.onLeapEnd = function () {}),
                  (l.characterOnEnable = function () {
                    var t;
                    ((this.collected = !1),
                    (this.collectTween = []),
                    (this.leapTween = []),
                    g.play(this.spawnSound),
                    this.light) && (b(null == (t = this.light) ? void 0 : t.node), (this.light = null));
                  }),
                  (l.bodyRec = function () {
                    return w.createRectangleNodeCenter(this.node, this.bodySize.width, this.bodySize.height);
                  }),
                  (l.collect = function () {
                    var t = S.uiingame.node.parent.worldPosition;
                    this.collectTween.push(
                      u(this).to(3, { worldPositionX: t.x, worldPositionY: t.y, height: 0 }, { easing: 'quadOut' }).start(),
                      u(this.node)
                        .by(3, { scale: new d(0.3, 0.3, 1) }, { easing: 'quadOut' })
                        .call(function () {
                          S.uiingame.victoryExit();
                        })
                        .start()
                    ),
                      m.switchMusicSort(C.Leave),
                      this.showPriceLight();
                  }),
                  (l.showPriceLight = function () {
                    var t = v(P.prizeCollectLight());
                    (t.parent = this.node.parent),
                      (t.worldPosition = this.node.worldPosition),
                      t.setSiblingIndex(this.node.getSiblingIndex()),
                      (this.light = t.getComponent(z)),
                      this.light.db.playAnimation('Play', 1);
                  }),
                  (l.characterUpdate = function (t) {
                    this.collected
                      ? (this.db.color = new h(255, 255, 255, 255))
                      : ((this.db.color = L.rewardColor),
                        this.bodyRec().judgeCrossLine(y.moveLine) &&
                          ((this.collected = !0), this.collect(), g.play(this.collectSound), this.stopLeap())),
                      this.light && (this.light.node.worldPosition = this.node.worldPosition);
                  }),
                  e
                );
              })(p)).prototype,
              'landSound',
              [M],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (O = e(q.prototype, 'collectSound', [I], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (_ = e(q.prototype, 'bodySize', [R], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new a(70, 70);
              },
            })),
            (D = e(q.prototype, 'spawnSound', [x], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (E = q))
          ) || E)
        );
        l._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/lightningCloud.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Character.ts',
    './Zombie.ts',
    './CharacterManager.ts',
    './NodePools.ts',
    './SoundsController.ts',
  ],
  function (t) {
    var o, e, i, n, a, r, l, s, u, h, d, c, g, f, m;
    return {
      setters: [
        function (t) {
          (o = t.applyDecoratedDescriptor),
            (e = t.inheritsLoose),
            (i = t.initializerDefineProperty),
            (n = t.assertThisInitialized);
        },
        function (t) {
          (a = t.cclegacy), (r = t._decorator), (l = t.AudioClip), (s = t.AudioSource), (u = t.dragonBones), (h = t.tween);
        },
        function (t) {
          d = t.Character;
        },
        function (t) {
          c = t.zombieDamageType;
        },
        function (t) {
          g = t.ZombiePool;
        },
        function (t) {
          f = t.ArrayGet;
        },
        function (t) {
          m = t.SoundFXController;
        },
      ],
      execute: function () {
        var p, v, b, y, L, w, S, C, T, k, A;
        a._RF.push({}, 'ca725n3XwpDrbvOa/hbYx8P', 'lightningCloud', void 0);
        var D = r.ccclass,
          I = r.property;
        t(
          'lightningCloud',
          ((p = D('lightningCloud')),
          (v = I(Number)),
          (b = I(Number)),
          (y = I([l])),
          (L = I([l])),
          p(
            ((C = o(
              (S = (function (t) {
                function o() {
                  for (var o, e = arguments.length, a = new Array(e), r = 0; r < e; r++) a[r] = arguments[r];
                  return (
                    ((o = t.call.apply(t, [this].concat(a)) || this).audioSource = void 0),
                    (o.targetLock = void 0),
                    (o.moveCooldown = 1 / 0),
                    (o.tweening = null),
                    (o.fading = !1),
                    i(o, 'damage', C, n(o)),
                    i(o, 'liveDuration', T, n(o)),
                    (o.leftTime = 15),
                    i(o, 'thunderSound', k, n(o)),
                    i(o, 'fadeSound', A, n(o)),
                    o
                  );
                }
                e(o, t);
                var a = o.prototype;
                return (
                  (a.characterOnLoad = function () {
                    this.getComponent(s) || this.addComponent(s),
                      (this.audioSource = this.getComponent(s)),
                      this.db.on(u.EventObject.FRAME_EVENT, this.animationListener, this);
                  }),
                  (a.hideLightnings = function (t) {
                    var o = this.db.armature();
                    ['LIGHTNING0', 'LIGHTNING1', 'LIGHTNING2'].forEach(function (e) {
                      var i;
                      null == (i = o.getSlot(e)) || i._setDisplayIndex(t);
                    });
                  }),
                  (a.animationListener = function (t) {
                    'move' == t.name && ((this.moveCooldown = 0), this.db.playAnimation('Idle')),
                      'die' == t.name && (this.db.playAnimation('Idle'), this.node.destroy());
                  }),
                  (a.characterOnEnable = function () {
                    this.db
                      .armature()
                      .getSlots()
                      .forEach(function (t) {
                        t.displayIndex = 0;
                      }),
                      (this.fading = !1),
                      (this.targetLock = null),
                      (this.moveCooldown = 1 / 0),
                      (this.leftTime = this.liveDuration),
                      this.db.playAnimation('Spawn');
                  }),
                  (a.moveToTarget = function (t) {
                    var o = this,
                      e = t.worldPosition.clone();
                    this.moveCooldown = 1 / 0;
                    this.tweening = h(this)
                      .to(0.5, { worldPositionX: e.x, worldPositionY: e.y })
                      .call(function () {
                        o.targetLock || o.playThunderSound(), (o.targetLock = t), (o.moveCooldown = 1), o.hideLightnings(0);
                      })
                      .start();
                  }),
                  (a.characterOnDisable = function () {
                    var t;
                    null == (t = this.tweening) || t.stop();
                  }),
                  (a.fade = function () {
                    var t;
                    this.playFadeSound(),
                      null == (t = this.tweening) || t.stop(),
                      (this.fading = !0),
                      this.db.playAnimation('Fade'),
                      this.hideLightnings(0);
                  }),
                  (a.characterOnLaneChange = function (t, o) {
                    this.node.setParent(o.prjLayer, !0);
                  }),
                  (a.characterUpdate = function (t) {
                    if (!this.fading) {
                      if (
                        (this.moveCooldown > 0 && (this.moveCooldown -= t),
                        this.targetLock &&
                          (this.targetLock.dealDamage(this.damage * t * 60, !0, !1, !1, null, c.electricity),
                          this.targetLock.isAlive() || ((this.targetLock = null), this.tweening.stop(), (this.moveCooldown = 0)),
                          this.targetLock && this.moveCooldown <= 0 && this.moveToTarget(this.targetLock)),
                        (!this.targetLock || !this.targetLock.isAlive()) &&
                          ((this.targetLock = null), this.hideLightnings(-1), this.moveCooldown <= 0 && g.pool().length))
                      ) {
                        var o = f.getRandom(g.pool());
                        o && this.moveToTarget(o);
                      }
                      (this.leftTime -= t), this.leftTime <= 0 && this.fade();
                    }
                  }),
                  (a.playThunderSound = function () {
                    this.audioSource.playOneShot(f.getRandom(this.thunderSound), m.SoundFXVolume);
                  }),
                  (a.playFadeSound = function () {
                    this.audioSource.playOneShot(f.getRandom(this.fadeSound), m.SoundFXVolume);
                  }),
                  o
                );
              })(d)).prototype,
              'damage',
              [v],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 10;
                },
              }
            )),
            (T = o(S.prototype, 'liveDuration', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 15;
              },
            })),
            (k = o(S.prototype, 'thunderSound', [y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (A = o(S.prototype, 'fadeSound', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (w = S))
          ) || w)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/LightningReed.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './Zombie.ts',
    './lightningReedSound.ts',
    './NodePools.ts',
    './CharacterManager.ts',
    './Square.ts',
    './Tomb.ts',
    './Character.ts',
  ],
  function (e) {
    var n, t, i, o, a, r, l, s, c, u, p, d, h, g, m, b, y, f, P, L, w;
    return {
      setters: [
        function (e) {
          (n = e.applyDecoratedDescriptor),
            (t = e.inheritsLoose),
            (i = e.initializerDefineProperty),
            (o = e.assertThisInitialized);
        },
        function (e) {
          (a = e.cclegacy),
            (r = e._decorator),
            (l = e.Prefab),
            (s = e.Node),
            (c = e.instantiate),
            (u = e.Vec3),
            (p = e.Vec2),
            (d = e.dragonBones);
        },
        function (e) {
          h = e.Plant;
        },
        function (e) {
          (g = e.Zombie), (m = e.zombieDamageType);
        },
        function (e) {
          b = e.lightningReedSound;
        },
        function (e) {
          y = e.NodePools;
        },
        function (e) {
          f = e.Rectangle;
        },
        function (e) {
          P = e.Square;
        },
        function (e) {
          L = e.Tomb;
        },
        function (e) {
          w = e.Character;
        },
      ],
      execute: function () {
        var v, C, D, x, S, z, R, A, k, j, N, q, E, F, M, I, T, U, B;
        a._RF.push({}, 'ccf60n8TrRPVbF6qWd8WsSa', 'LightningReed', void 0);
        var H = r.ccclass,
          W = r.property;
        e(
          'LightningReedPlant',
          ((v = H('LightningReed')),
          (C = W(Number)),
          (D = W(Number)),
          (x = W(Number)),
          (S = W(Number)),
          (z = W(l)),
          (R = W(l)),
          (A = W(l)),
          (k = W(s)),
          v(
            ((q = n(
              (N = (function (e) {
                function n() {
                  for (var n, t = arguments.length, a = new Array(t), r = 0; r < t; r++) a[r] = arguments[r];
                  return (
                    (n = e.call.apply(e, [this].concat(a)) || this),
                    i(n, 'directDamage', q, o(n)),
                    i(n, 'splashDamage', E, o(n)),
                    i(n, 'attackInterval', F, o(n)),
                    i(n, 'splashAmount', M, o(n)),
                    i(n, 'lightningCloud', I, o(n)),
                    (n.detector = void 0),
                    i(n, 'hitParticle', T, o(n)),
                    i(n, 'linkParticle', U, o(n)),
                    i(n, 'particleSpawnPoint', B, o(n)),
                    (n.busy = 0),
                    n
                  );
                }
                t(n, e);
                var a = n.prototype;
                return (
                  (a.specialPlantOnEnable = function () {}),
                  (a.animationListener = function (e) {
                    'foodEnd' == e.name && this.foodEnd();
                  }),
                  (a.playAttack = function () {
                    var e = this;
                    if (this.inLane) {
                      var n = this.inLane
                          .zombiePool()
                          .concat(this.inLane.UpperLane.zombiePool(), this.inLane.LowerLane.zombiePool()),
                        t = this.inLane.tombPool().concat(this.inLane.UpperLane.tombPool(), this.inLane.LowerLane.tombPool());
                      if (n.length <= 0 && t.length <= 0) return;
                      var i = null,
                        o = 1 / 0;
                      if (
                        (n.forEach(function (n) {
                          var t = n.bodyRec,
                            a = t.prjX().x;
                          n.isAlive() && t.judgeCrossRec(e.detector) && a < o && ((i = n.node), (o = a));
                        }),
                        t.forEach(function (n) {
                          var t = n.bodyRec,
                            a = t.prjX().x;
                          !n.dead && t.judgeCrossRec(e.detector) && a < o && ((i = n.node), (o = a));
                        }),
                        i)
                      ) {
                        var a, r;
                        this.anmControl.playAnimation('Attack'),
                          this.getComponent(b).playAttackSound(),
                          (this.busy = this.attackInterval - 0.05 + 0.1 * Math.random());
                        var l = this.spawnParticle(this.particleSpawnPoint.worldPosition, i);
                        null == (a = i) ||
                          null == (a = a.getComponent(g)) ||
                          a.dealDamage(this.directDamage, !0, !1, !1, null, m.electricity),
                          null == (r = i) || null == (r = r.getComponent(L)) || r.dealDamage(this.directDamage);
                        for (
                          var s = [i],
                            c = function () {
                              var e = null,
                                n = s[u].getComponent(g),
                                t = s[u].getComponent(L);
                              n && (e = n), t && (e = t);
                              var i = f.createRectangleCenter(
                                  new p(e.node.worldPosition.x, e.inLane.midY),
                                  3 * P.SquareDisW,
                                  3 * P.SquareDisH
                                ),
                                o = [].concat(
                                  e.inLane.zombiePool(),
                                  e.inLane.UpperLane.zombiePool(),
                                  e.inLane.LowerLane.zombiePool(),
                                  e.inLane.tombPool(),
                                  e.inLane.UpperLane.tombPool(),
                                  e.inLane.LowerLane.tombPool()
                                ),
                                a = null,
                                r = 1 / 0;
                              if (
                                (o.forEach(function (e) {
                                  var n = e.bodyRec,
                                    t = n.prjX().x;
                                  -1 == s.indexOf(e.node) && n.judgeCrossRec(i) && t < r && ((a = e.node), (r = t));
                                }),
                                !a)
                              )
                                return 1;
                              s.push(a);
                            },
                            u = 0;
                          u < this.splashAmount && !c();
                          u++
                        );
                        for (var d = 1; d < s.length; d++) {
                          var h,
                            y,
                            w = this.spawnParticle(l, s[d]);
                          null == (h = s[d]) ||
                            null == (h = h.getComponent(g)) ||
                            h.dealDamage(this.splashDamage, !0, !1, !1, null, m.electricity),
                            null == (y = s[d]) || null == (y = y.getComponent(L)) || y.dealDamage(this.splashDamage),
                            (l = w);
                        }
                      }
                    }
                  }),
                  (a.specialPlantFood = function (e) {
                    this.anmControl.playAnimation('Food');
                    var n = c(this.lightningCloud);
                    (n.parent = this.inLane.prjLayer),
                      (n.getComponent(w).worldPosition = this.worldPosition),
                      (this.busy = 1 / 0),
                      this.getComponent(b).playFoodSound();
                  }),
                  (a.specialPlantFoodEnd = function () {
                    (this.busy = 0), this.getComponent(b).playFoodEndSound();
                  }),
                  (a.setDetector = function (e) {
                    this.detector = f.createRectangleNodeSide(e.node, (9 - e.cIndex) * P.SquareDisW, 3 * P.SquareDisH);
                  }),
                  (a.specialPlantOnSquareChange = function (e, n) {
                    this.setDetector(n);
                  }),
                  (a.spawnParticle = function (e, n) {
                    var t = 30,
                      i = n.getComponent(g);
                    i ? (t = i.zombieHeight / 2) : (i = n.getComponent(L));
                    var o = new u(n.worldPosition.x, n.worldPosition.y + t, 1),
                      a = y.instantiatePooly(this.linkParticle);
                    (a.parent = i.inLane.prjLayer),
                      (a.worldPosition = e),
                      (a.angle = (Math.atan2(o.y - e.y, o.x - e.x) / Math.PI) * 180);
                    for (
                      var r = a.getChildByName('tail').worldPosition.clone(),
                        l = new p(r.x - e.x, r.x - e.x),
                        s = new p(o.x - r.x, o.y - r.y),
                        c = 0;
                      l.y * s.y + l.x * s.x > 0 && c < 10;

                    ) {
                      var h = y.instantiatePooly(this.linkParticle);
                      (h.parent = a.parent),
                        (h.worldPosition = r),
                        (h.angle = a.angle),
                        h.getComponent(d.ArmatureDisplay).playAnimation('Play' + (Math.round(Math.random()) + 1).toString()),
                        (r = h.getChildByName('tail').worldPosition.clone()),
                        (s = new p(o.x - r.x, o.y - r.y)),
                        (l = new p(r.x - e.x, r.y - e.y)),
                        c++;
                    }
                    var m = y.instantiatePooly(this.hitParticle);
                    return (m.parent = i.inLane.prjLayer), (m.worldPosition = o), o;
                  }),
                  (a.specialPlantUpdate = function (e) {
                    this.busy > 0 && (this.busy -= e), this.busy <= 0 && ((this.busy = 0), this.playAttack());
                  }),
                  n
                );
              })(h)).prototype,
              'directDamage',
              [C],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 10;
                },
              }
            )),
            (E = n(N.prototype, 'splashDamage', [D], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 10;
              },
            })),
            (F = n(N.prototype, 'attackInterval', [x], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 1;
              },
            })),
            (M = n(N.prototype, 'splashAmount', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 3;
              },
            })),
            (I = n(N.prototype, 'lightningCloud', [z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (T = n(N.prototype, 'hitParticle', [R], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (U = n(N.prototype, 'linkParticle', [A], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (B = n(N.prototype, 'particleSpawnPoint', [k], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (j = N))
          ) || j)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/lightningReedSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './plantSound.ts', './SoundRescourses.ts'],
  function (n) {
    var o, t, e, i, r, u, a, d, l, c;
    return {
      setters: [
        function (n) {
          (o = n.applyDecoratedDescriptor),
            (t = n.inheritsLoose),
            (e = n.initializerDefineProperty),
            (i = n.assertThisInitialized);
        },
        function (n) {
          (r = n.cclegacy), (u = n._decorator), (a = n.AudioClip);
        },
        function (n) {
          d = n.ArrayGet;
        },
        function (n) {
          l = n.plantSound;
        },
        function (n) {
          c = n.sounds;
        },
      ],
      execute: function () {
        var s, p, f, S, y, g, h, b, R;
        r._RF.push({}, '00e56yITedGxJnwBU+f6ol2', 'lightningReedSound', void 0);
        var m = u.ccclass,
          v = u.property;
        n(
          'lightningReedSound',
          ((s = m('lightningReedSound')),
          (p = v([a])),
          (f = v([a])),
          (S = v([a])),
          s(
            ((h = o(
              (g = (function (n) {
                function o() {
                  for (var o, t = arguments.length, r = new Array(t), u = 0; u < t; u++) r[u] = arguments[u];
                  return (
                    (o = n.call.apply(n, [this].concat(r)) || this),
                    e(o, 'attackSound', h, i(o)),
                    e(o, 'foodSound', b, i(o)),
                    e(o, 'foodEndSound', R, i(o)),
                    o
                  );
                }
                t(o, n);
                var r = o.prototype;
                return (
                  (r.playAttackSound = function () {
                    c.play(d.getRandom(this.attackSound), 1, 0.2);
                  }),
                  (r.playFoodSound = function () {
                    this.playOneShot(d.getRandom(this.foodSound));
                  }),
                  (r.playFoodEndSound = function () {
                    this.playOneShot(d.getRandom(this.foodEndSound));
                  }),
                  o
                );
              })(l)).prototype,
              'attackSound',
              [p],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (b = o(g.prototype, 'foodSound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (R = o(g.prototype, 'foodEndSound', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (y = g))
          ) || y)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/LilyPad.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Plant.ts', './LnC.ts', './Plants.ts'],
  function (n) {
    var t, i, a, e, l, o, s, d, r, h;
    return {
      setters: [
        function (n) {
          (t = n.applyDecoratedDescriptor),
            (i = n.inheritsLoose),
            (a = n.initializerDefineProperty),
            (e = n.assertThisInitialized);
        },
        function (n) {
          (l = n.cclegacy), (o = n._decorator), (s = n.Node);
        },
        function (n) {
          d = n.Plant;
        },
        function (n) {
          r = n.TileType;
        },
        function (n) {
          h = n.PlantEnum;
        },
      ],
      execute: function () {
        var u, c, p, P, m;
        l._RF.push({}, '1b9c3GHtI9PObuuX4YmxksO', 'LilyPad', void 0);
        var f = o.ccclass,
          L = o.property;
        n(
          'LilyPadPlant',
          ((u = f('LilyPad')),
          (c = L(s)),
          u(
            ((m = t(
              (P = (function (n) {
                function t() {
                  for (var t, i = arguments.length, l = new Array(i), o = 0; o < i; o++) l[o] = arguments[o];
                  return (
                    (t = n.call.apply(n, [this].concat(l)) || this),
                    a(t, 'plantPoint', m, e(t)),
                    (t.planted = !1),
                    (t.oldIdle = ''),
                    (t.oldRand = []),
                    (t.animationWatered = !1),
                    t
                  );
                }
                i(t, n);
                var l = t.prototype;
                return (
                  (l.specialPlantDie = function () {
                    this.inLnC.returnPlantPoint();
                  }),
                  (l.specialPlantFood = function (n) {
                    n &&
                      [this.inLnC, this.inLnC.upper, this.inLnC.lefter, this.inLnC.righter, this.inLnC.lower].forEach(function (
                        n
                      ) {
                        var t, i;
                        (n.isInLawn() && n.lilyPadable() && (null == n || n.spawnPlantByPlantEnum(h.LilyPad)),
                        n.haveLilyPad && null != n && null != (t = n.lilyPad) && t.isValid) &&
                          (null == n || null == (i = n.lilyPad) || null == (i = i.getComponent(d)) || i.food(!1));
                      }),
                      this.foodEnd();
                  }),
                  (l.addPlant = function () {
                    !this.planted && this.inLnC.haveP() && ((this.planted = !0), (this.foodable = !1));
                  }),
                  (l.unPlant = function () {
                    this.planted && !this.inLnC.haveP() && ((this.planted = !1), (this.foodable = !0));
                  }),
                  (l.animationListener = function (n) {
                    'FoodEnd' == n.name && this.foodEnd();
                  }),
                  (l.specialPlantOnEnable = function () {
                    (this.planted = !1),
                      (this.animationWatered = !1),
                      (this.oldRand = this.anmControl.RandomAnim),
                      (this.oldIdle = this.anmControl.IdleAnim);
                  }),
                  (l.changeAnimation = function (n) {
                    n != r.water || this.animationWatered
                      ? n != r.water &&
                        this.animationWatered &&
                        ((this.animationWatered = !1),
                        (this.anmControl.IdleAnim = this.oldIdle),
                        (this.anmControl.RandomAnim = this.oldRand),
                        this.anmControl.playRandom())
                      : ((this.animationWatered = !0),
                        (this.anmControl.IdleAnim = 'Idle_Water'),
                        (this.anmControl.RandomAnim = [
                          'Rand1_Water',
                          'Rand2_Water',
                          'Rand3_Water',
                          'Rand4_Water',
                          'Rand5_Water',
                        ]),
                        this.anmControl.playRandom());
                  }),
                  (l.specialPlantUpdate = function (n) {
                    !this.dead && this.inLnC && this.inLnC.setPPWdPos(this.plantPoint.worldPosition);
                    var t = this.inLnC.getTileType();
                    this.changeAnimation(t),
                      !this.planted && this.inLnC.haveP()
                        ? this.addPlant()
                        : this.planted && !this.inLnC.haveP() && this.unPlant(),
                      (this.eaterDetectable = !this.planted && t == r.water);
                  }),
                  t
                );
              })(d)).prototype,
              'plantPoint',
              [c],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (p = P))
          ) || p)
        );
        l._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/LnC.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Square.ts',
    './UI.ts',
    './NodePools.ts',
    './AnimationController.ts',
    './CharacterManager.ts',
    './Particles.ts',
    './Plant.ts',
    './Lane.ts',
    './SoundRescourses.ts',
    './Zombie.ts',
    './levelController.ts',
    './PlantFoodCount.ts',
    './Tombs.ts',
    './Tomb.ts',
    './Plants.ts',
    './Sunflower.ts',
    './GroundFire.ts',
    './SandBoxLevelSettingWindow.ts',
    './Zombies.ts',
    './SandBoxZombieCards.ts',
    './Cards.ts',
    './CardFeatureTotal.ts',
    './PowerupFingers.ts',
  ],
  function (t) {
    var e, i, n, o, a, l, s, r, h, d, u, c, p, f, P, v, y, m, w, g, L, S, T, I, x, C, b, q, k, D, E, B, F, A, U, G, O, R, N, _, M;
    return {
      setters: [
        function (t) {
          (e = t.inheritsLoose), (i = t.createClass);
        },
        function (t) {
          (n = t.cclegacy),
            (o = t._decorator),
            (a = t.Vec3),
            (l = t.dragonBones),
            (s = t.Vec2),
            (r = t.instantiate),
            (h = t.math),
            (d = t.EventMouse),
            (u = t.find),
            (c = t.Node),
            (p = t.Component);
        },
        function (t) {
          f = t.Square;
        },
        function (t) {
          P = t.UIInGame;
        },
        function (t) {
          v = t.NodePools;
        },
        function (t) {
          y = t.AnimationController;
        },
        function (t) {
          m = t.Rectangle;
        },
        function (t) {
          (w = t.groundFireParticles), (g = t.tileLiquids), (L = t.particle);
        },
        function (t) {
          (S = t.Plant), (T = t.PlantType);
        },
        function (t) {
          I = t.Lane;
        },
        function (t) {
          x = t.sounds;
        },
        function (t) {
          C = t.zombieDamageType;
        },
        function (t) {
          b = t.LevelPlay;
        },
        function (t) {
          q = t.PlantFoodCount;
        },
        function (t) {
          k = t.tombs;
        },
        function (t) {
          D = t.Tomb;
        },
        function (t) {
          E = t.plants;
        },
        function (t) {
          B = t.sunflower;
        },
        function (t) {
          (F = t.GroundFireColorEnum), (A = t.GroundFire), (U = t.GroundFireSpreadStyleEnum);
        },
        function (t) {
          G = t.SandBoxLevelSettingWindow;
        },
        function (t) {
          O = t.zombies;
        },
        function (t) {
          R = t.SandBoxZombieCards;
        },
        function (t) {
          N = t.Cards;
        },
        function (t) {
          _ = t.CardFeatureTotal;
        },
        function (t) {
          M = t.PowerupFingers;
        },
      ],
      execute: function () {
        var z;
        n._RF.push({}, 'd770bq07m9CtYSeiXYu7H9t', 'LnC', void 0);
        var J = o.ccclass,
          H =
            (o.property,
            t(
              'LnCSpawnZombieStyleEnum',
              (function (t) {
                return (
                  (t[(t.directPut = 0)] = 'directPut'),
                  (t[(t.fromLane = 1)] = 'fromLane'),
                  (t[(t.dirtSpawn = 2)] = 'dirtSpawn'),
                  (t[(t.sandStorm = 3)] = 'sandStorm'),
                  (t[(t.snowStorm = 4)] = 'snowStorm'),
                  (t[(t.amount = 5)] = 'amount'),
                  t
                );
              })({})
            )),
          W = t(
            'TileType',
            (function (t) {
              return (
                (t[(t.floor = 0)] = 'floor'),
                (t[(t.sky = 1)] = 'sky'),
                (t[(t.water = 2)] = 'water'),
                (t[(t.sea = 3)] = 'sea'),
                (t[(t.deck = 4)] = 'deck'),
                t
              );
            })({})
          ),
          j = t(
            'TileLiquidEnum',
            (function (t) {
              return (
                (t[(t.none = 0)] = 'none'),
                (t[(t.saplingJuice = 1)] = 'saplingJuice'),
                (t[(t.butterJuice = 2)] = 'butterJuice'),
                (t[(t.cranJellyJuice = 3)] = 'cranJellyJuice'),
                (t[(t.softLava = 4)] = 'softLava'),
                (t[(t.deadlyLava = 5)] = 'deadlyLava'),
                t
              );
            })({})
          );
        t(
          'LnC',
          J('LnC')(
            (z = (function (t) {
              function n() {
                for (var e, i = arguments.length, n = new Array(i), o = 0; o < i; o++) n[o] = arguments[o];
                return (
                  ((e = t.call.apply(t, [this].concat(n)) || this).iceTile = null),
                  (e.cIndex = -2),
                  (e.lIndex = -2),
                  (e.squareLower = void 0),
                  (e.RowParent = void 0),
                  (e.UIInGame = null),
                  (e.rec = m.createRectangleCenter(new s(0, 0), 0, 0)),
                  (e.oldTileLiquid = void 0),
                  (e.currentTileLiquid = j.none),
                  (e.tileLiquidCountdown = 0),
                  (e.tileType = W.floor),
                  (e.index = 0),
                  (e.indexPoint = 0),
                  (e.ghostPoint = null),
                  (e.plantPoint = null),
                  (e.orgPlantPoint = null),
                  (e.particleLowerPoint = null),
                  (e.potPoint = null),
                  (e.potPointUpper = null),
                  (e.vinePoint = null),
                  (e.vineBackPoint = null),
                  (e.buffParticlePoint = null),
                  (e.havePeaBuff = !1),
                  (e.peaBuffParticle = null),
                  (e.darkBuffParticle = null),
                  (e._shadowCD = 0),
                  (e.plantInSquare = []),
                  (e.vineInSquare = []),
                  (e.haveGrave = void 0),
                  (e.haveRail = void 0),
                  (e.haveCart = void 0),
                  (e.haveLilyPad = void 0),
                  (e.haveFloawerPot = void 0),
                  (e.crackedTile = null),
                  (e.crackedTileSparkle = null),
                  (e._crackleCountdown = 0),
                  (e.SquaresTotal = void 0),
                  (e.lefter = void 0),
                  (e.righter = void 0),
                  (e.upper = void 0),
                  (e.lower = void 0),
                  (e.inLane = null),
                  (e.floawerPot = void 0),
                  (e.lilyPad = void 0),
                  (e.ppOldPos = void 0),
                  (e.tombStone = void 0),
                  (e.selectionDB = void 0),
                  e
                );
              }
              e(n, t);
              var o = n.prototype;
              return (
                (o.addGroundFire = function (t, e, i, n) {
                  if ((void 0 === e && (e = 20), void 0 === i && (i = F.yellow), void 0 === n && (n = 0), this.isInLawn())) {
                    var o = v.instantiatePooly(w.getParticleByGFEnum(i)),
                      l = o.getComponent(A);
                    return (
                      (l.spawnDelay = n),
                      (o.parent = this.inLane.prjLayer),
                      (o.worldPosition = this.node.worldPosition.clone().add(new a(0, -f.SquareDisH / 2, 0))),
                      (l.height = e),
                      (l.duration = t),
                      (l.inLnC = this),
                      l
                    );
                  }
                }),
                (o.addLaneFire = function (t, e, i, n, o, a, l) {
                  var s = this;
                  void 0 === e && (e = 20),
                    void 0 === i && (i = F.yellow),
                    void 0 === n && (n = U.split),
                    void 0 === o && (o = 9),
                    void 0 === a && (a = 9),
                    void 0 === l && (l = !1);
                  var r = [],
                    h = [],
                    d = this.addGroundFire(t, e, i);
                  d && h.push(d);
                  for (var u = 0; u < a; u++) {
                    if (n != U.right) {
                      for (var c, p = this, f = 0; f < u; f++) {
                        var P;
                        p = null == (P = p) ? void 0 : P.lefter;
                      }
                      null != (c = p) && c.isInLawn() && (l || (p.tileType != W.sky && p.tileType != W.sea)) && r.push(p);
                    }
                    if (n != U.left) {
                      for (var v, y = this, m = 0; m < u; m++) {
                        var w;
                        y = null == (w = y) ? void 0 : w.righter;
                      }
                      null != (v = y) && v.isInLawn() && (l || (y.tileType != W.sky && y.tileType != W.sea)) && r.push(y);
                    }
                    if (n == U.cross) {
                      for (var g, L, S = this, T = 0; T < u; T++) {
                        var I;
                        S = null == (I = S) ? void 0 : I.upper;
                      }
                      null != (g = S) && g.isInLawn() && (l || (S.tileType != W.sky && S.tileType != W.sea)) && r.push(S);
                      for (var x = this, C = 0; C < u; C++) {
                        var b;
                        x = null == (b = x) ? void 0 : b.lower;
                      }
                      null != (L = x) && L.isInLawn() && (l || (x.tileType != W.sky && x.tileType != W.sea)) && r.push(x);
                    }
                  }
                  return (
                    r.forEach(function (n) {
                      if (n != s) {
                        var a = Math.max(Math.abs(n.cIndex - s.cIndex), Math.abs(n.lIndex - s.lIndex)) / o,
                          l = n.lIndex == s.lIndex,
                          r = n.addGroundFire(t, e, i, a);
                        (r.horizontal = l), h.push(r);
                      }
                    }),
                    h
                  );
                }),
                (o.onLoad = function () {
                  var t;
                  switch (this.node.name) {
                    case 'SquaresThere':
                      this.lIndex = -1;
                      break;
                    case 'SquaresHere':
                      this.lIndex = 5;
                      break;
                    case 'SquaresLeft':
                      this.cIndex = -1;
                      break;
                    case 'SquaresRight':
                      this.cIndex = 9;
                  }
                  (this.selectionDB =
                    null == (t = this.node) || null == (t = t.getChildByName('Select'))
                      ? void 0
                      : t.getComponent(l.ArmatureDisplay)),
                    (this.plantInSquare = []),
                    (this.haveCart = !1),
                    (this.haveRail = !1),
                    (this.vineInSquare = []),
                    (this.haveGrave = !1),
                    (this.haveLilyPad = !1),
                    (this.haveFloawerPot = !1),
                    (this.havePeaBuff = !1),
                    (this.peaBuffParticle = null),
                    (this.shadowCD = 0),
                    (this.darkBuffParticle = null),
                    (this.tombStone = null),
                    (this.indexPoint = 0),
                    (this.ghostPoint = this.node.getChildByName('PlantPoint'));
                }),
                (o.addTileLiquid = function (t, e) {
                  if (this.isInLawn() && (this.tileType == W.deck || this.tileType == W.floor)) {
                    if (t > this.currentTileLiquid) {
                      var i;
                      if ((null == (i = this.oldTileLiquid) || i.playAnimation('Fade'), t == j.butterJuice)) {
                        var n = v.instantiatePooly(g.butterJuice());
                        (n.parent = this.inLane.tileLiquidLayer),
                          (n.worldPosition = this.node.worldPosition),
                          (this.oldTileLiquid = n.getComponent(l.ArmatureDisplay)),
                          this.oldTileLiquid.playAnimation('Spawn', 1),
                          (this.tileLiquidCountdown = e);
                      } else if (t == j.cranJellyJuice) {
                        var o = v.instantiatePooly(g.cranJellyJuice());
                        (o.parent = this.inLane.tileLiquidLayer),
                          (o.worldPosition = this.node.worldPosition),
                          (this.oldTileLiquid = o.getComponent(l.ArmatureDisplay)),
                          this.oldTileLiquid.playAnimation('Spawn', 1),
                          (this.tileLiquidCountdown = e);
                      } else if (t == j.softLava) {
                        var a = v.instantiatePooly(g.softLava());
                        (a.parent = this.inLane.tileLiquidLayer),
                          (a.worldPosition = this.node.worldPosition),
                          (this.oldTileLiquid = a.getComponent(l.ArmatureDisplay)),
                          this.oldTileLiquid.playAnimation('Spawn', 1),
                          (this.tileLiquidCountdown = e);
                      }
                      this.currentTileLiquid = t;
                    } else
                      t == this.currentTileLiquid &&
                        (this.tileLiquidCountdown = this.tileLiquidCountdown > e ? this.tileLiquidCountdown : e);
                    this.readIndex();
                  }
                }),
                (o.getAllPlants = function (t) {
                  void 0 === t && (t = !0);
                  return t
                    ? this.vineInSquare.concat(
                        this.plantInSquare,
                        this.floawerPot && this.haveFloawerPot ? [this.floawerPot.getComponent(S)] : [],
                        this.haveLilyPad && this.lilyPad ? [this.lilyPad.getComponent(S)] : []
                      )
                    : (this.haveLilyPad && this.lilyPad ? [this.lilyPad.getComponent(S)] : []).concat(
                        this.floawerPot && this.haveFloawerPot ? [this.floawerPot.getComponent(S)] : [],
                        this.plantInSquare,
                        this.vineInSquare
                      );
                }),
                (o.setTileType = function (t) {
                  var e = this;
                  if (this.tileType != t) {
                    var i,
                      n,
                      o = this.tileType;
                    if (
                      ((this.tileType = t),
                      this.getAllPlants().forEach(function (i) {
                        i.onTileTypeChange(e, o, t, e.plantable(!1, i.ID), e.vineable(!1), e.floawerPotable(!1), e.flyable(!1));
                      }),
                      t != W.deck && t != W.floor)
                    )
                      this.iceTile && this.iceTile.die(),
                        9 == this.cIndex &&
                          [0, 1, 2, 3, 4].forEach(function (t) {
                            var e;
                            null == (e = f.getLane(t).getComponent(I).iceTile) || e.die();
                          }),
                        null == (n = this.oldTileLiquid) || n.playAnimation('Fade'),
                        (this.oldTileLiquid = null),
                        (this.currentTileLiquid = j.none),
                        (this.tileLiquidCountdown = 0);
                    this.tombStone && !this.tombable(!1) && (null == (i = this.tombStone) || i.die()), this.readIndex();
                  }
                }),
                (o.getTileType = function () {
                  return this.tileType;
                }),
                (o.explodeSqudow1x1 = function (t) {
                  var e,
                    i,
                    n = this,
                    o = m.createRectangleNodeCenter(this.node, 2 * f.SquareDisW, f.SquareDisH);
                  b.shakeScreen(),
                    null == (e = this.inLane) ||
                      e.zombiePool().forEach(function (e) {
                        !e.flying &&
                          e.bodyRec.judgeCrossRec(o) &&
                          e.dealDamage(
                            t,
                            !1,
                            !1,
                            !1,
                            new s(e.node.worldPosition.x - n.node.worldPosition.x, e.zombieHeight).normalize().multiplyScalar(35),
                            C.potatoMine
                          );
                      }),
                    null == (i = this.tombStone) || i.dealDamage(t),
                    x.playSpudow();
                  var a = v.instantiatePooly(L.spudow());
                  (a.parent = this.inLane.prjLayer), (a.worldPosition = this.plantPoint.worldPosition);
                }),
                (o.explodeCherry3x3 = function (t, e) {
                  var i,
                    n = this;
                  void 0 === e && (e = !1);
                  var o = m.createRectangleNodeCenter(this.node, 3 * f.SquareDisW, 3 * f.SquareDisH);
                  b.shakeScreen(),
                    null == (i = this.inLane) ||
                      i
                        .zombiePool()
                        .concat(this.inLane.UpperLane.zombiePool(), this.inLane.LowerLane.zombiePool())
                        .forEach(function (e) {
                          e.bodyRec.judgeCrossRec(o) &&
                            e.dealDamage(
                              t,
                              !1,
                              !1,
                              !1,
                              new s(e.node.worldPosition.x - n.node.worldPosition.x, e.zombieHeight)
                                .normalize()
                                .multiplyScalar(35),
                              C.fire
                            );
                        }),
                    this.get3x3().forEach(function (e) {
                      var i;
                      null == (i = e.tombStone) || i.dealDamage(t);
                    }),
                    x.playExplosion();
                  var a = v.instantiatePooly(L.explosion(e));
                  if (
                    ((a.parent = this.inLane.prjLayer),
                    (a.worldPosition = this.plantPoint.worldPosition),
                    this.tileType == W.floor || this.tileType == W.deck || this.tileType == W.water)
                  ) {
                    var l = v.instantiatePooly(L.explosionRear());
                    (l.parent = this.inLane.tileLiquidLayer), (l.worldPosition = this.node.worldPosition);
                  }
                }),
                (o.explodeSpudow3x3 = function (t) {
                  var e,
                    i = this,
                    n = m.createRectangleNodeCenter(this.node, 3 * f.SquareDisW, 3 * f.SquareDisH);
                  b.shakeScreen(),
                    null == (e = this.inLane) ||
                      e
                        .zombiePool()
                        .concat(this.inLane.UpperLane.zombiePool(), this.inLane.LowerLane.zombiePool())
                        .forEach(function (e) {
                          !e.flying &&
                            e.bodyRec.judgeCrossRec(n) &&
                            e.dealDamage(
                              t,
                              !1,
                              !1,
                              !1,
                              new s(e.node.worldPosition.x - i.node.worldPosition.x, e.zombieHeight)
                                .normalize()
                                .multiplyScalar(35),
                              C.potatoMine
                            );
                        }),
                    this.get3x3().forEach(function (e) {
                      var i;
                      null == (i = e.tombStone) || i.dealDamage(t);
                    }),
                    x.playSpudow(),
                    x.playExplosion();
                  var o = v.instantiatePooly(L.spudowPrimal());
                  (o.parent = this.inLane.prjLayer), (o.worldPosition = this.plantPoint.worldPosition);
                }),
                (o.update = function (t) {
                  var e = this;
                  if (
                    (this.crackleCountdown > 0 &&
                      (this.tileType == W.floor || this.tileType == W.deck || this.tileType == W.water
                        ? (this.crackleCountdown -= t)
                        : (this.crackleCountdown = 0)),
                    this.tileLiquidCountdown > 0)
                  ) {
                    var i = this.tileLiquidCountdown + 0;
                    this.tileLiquidCountdown -= t;
                    var n,
                      o = this.tileLiquidCountdown + 0;
                    if (this.currentTileLiquid == j.butterJuice) {
                      var a = null;
                      this.inLane.zombiePool().forEach(function (t) {
                        t.shouldSpeedScale() * t.randomSpeed > 0 &&
                          !t.flying &&
                          t.bodyRec.judgeCrossRec(e.rec) &&
                          (!a || a.bodyRec.prjX().x > t.bodyRec.prjX().x) &&
                          (a = t);
                      }),
                        a && (a.setButter(8, !0), (this.tileLiquidCountdown = 0));
                    } else if (this.currentTileLiquid == j.softLava) {
                      var l, s;
                      this.inLane.zombiePool().forEach(function (i) {
                        e.rec.judgeCrossRec(i.bodyRec) && i.dealDamage(100 * t, !0, !1, !1, null, C.fire);
                      }),
                        x.playLavaIdle(),
                        null == (l = this.tombStone) || l.dealDamage(100 * t),
                        null == (s = this.iceTile) || s.die();
                    } else if (this.currentTileLiquid == j.cranJellyJuice) {
                      var r;
                      if (Math.ceil(2 * o) == Math.floor(2 * i))
                        this.inLane.zombiePool().forEach(function (t) {
                          !t.flying && e.rec.judgeCrossRec(t.bodyRec) && t.dealDamage(10, !0, !1, !1, null, C.physicle);
                        }),
                          null == (r = this.tombStone) || r.dealDamage(10);
                    }
                    if (this.tileLiquidCountdown <= 0)
                      (this.currentTileLiquid = j.none),
                        null == (n = this.oldTileLiquid) || n.playAnimation('Fade'),
                        (this.oldTileLiquid = null),
                        this.readIndex();
                  }
                  this.shadowCD > 0 && (this.shadowCD -= t);
                }),
                (o.addBuff = function (t, e) {
                  if (
                    (void 0 === e && (e = !0),
                    !(!this.buffParticlePoint || this.lIndex > 4 || this.lIndex < 0 || this.cIndex < 0 || this.cIndex > 8))
                  )
                    switch (t) {
                      case 'peaBuff':
                        if (e && !this.havePeaBuff) {
                          this.havePeaBuff = !0;
                          var i = v.instantiatePooly(L.peaBuff());
                          (this.peaBuffParticle = i.getComponent(l.ArmatureDisplay)),
                            this.peaBuffParticle.playAnimation('Idle'),
                            (i.parent = this.particleLowerPoint),
                            (i.worldPosition = this.node.worldPosition),
                            i.setSiblingIndex(0);
                        } else
                          !e &&
                            this.havePeaBuff &&
                            ((this.havePeaBuff = !1), this.peaBuffParticle.playAnimation('Die'), (this.peaBuffParticle = null));
                    }
                }),
                (o.setShadowBuff = function (t) {
                  this.shadowCD = t > this._shadowCD ? t : this._shadowCD;
                }),
                (o.haveP = function () {
                  return this.plantInSquare.length > 0 || this.vineInSquare.length > 0;
                }),
                (o.spawnPlantByPlantEnum = function (t, e, i) {
                  if (
                    (void 0 === e && (e = !1),
                    void 0 === i && (i = !1),
                    !e || this.putPlantAvailable(E.getPlantFeature(t).TYPE, i))
                  ) {
                    var n = this.replantable(t);
                    if (n) return n.replant(), n;
                    var o = r(E.getPlantsInCard(t).plantPLANT),
                      a = E.getPlantFeature(t),
                      l = T.plant,
                      h = !1;
                    this.plantPoint;
                    -1 != a.TYPE.indexOf('vine')
                      ? (l = T.vine)
                      : -1 != a.TYPE.indexOf('floawerPot')
                      ? (l = T.pot)
                      : -1 != a.TYPE.indexOf('lilypad') && (l = T.lilyPad),
                      -1 != a.TYPE.indexOf('fly') && (h = !0);
                    var d = o.getComponent(S);
                    return (
                      (d.ID = t),
                      (d.flyingPlant = h),
                      (d.TYPE = a.TYPE),
                      (d.SUNCOST = a.SUNCOST),
                      (d.toughness = a.TOUGHNESS),
                      (d.allowStack = -1 != a.TYPE.indexOf('allowOverlap')),
                      l == T.pot
                        ? ((o.parent = this.potPoint),
                          (this.haveFloawerPot = !0),
                          (this.floawerPot = o),
                          this.floawerPot.getComponent(y).addPotFront(this.potPointUpper),
                          (d.plantType = T.pot))
                        : l == T.lilyPad
                        ? ((o.parent = this.potPoint), (this.haveLilyPad = !0), (this.lilyPad = o), (d.plantType = T.lilyPad))
                        : l == T.vine
                        ? ((o.parent = this.vinePoint),
                          o.setPosition(0, 0),
                          o.getComponent(y).addVineBack(this.vineBackPoint),
                          this.pushVine(d),
                          (o.getComponent(S).plantType = T.vine))
                        : ((o.parent = this.plantPoint),
                          o.setPosition(0, 0),
                          o.getComponent(y).addPlantUpper(this.inLane.plantUpperLayer),
                          this.pushPlant(d),
                          (o.getComponent(S).plantType = T.plant)),
                      (d.worldPosition = new s(d.node.parent.worldPosition.x, d.node.parent.worldPosition.y)),
                      this.selection(),
                      (d.plantInLnC = this),
                      d
                    );
                  }
                }),
                (o.readIndex = function () {
                  this.lIndex >= 0 &&
                    this.lIndex <= 4 &&
                    this.cIndex >= 0 &&
                    this.cIndex <= 8 &&
                    (this.selection(), this.plantGhost());
                }),
                (o.plantGhost = function () {
                  var t, e, i, n, o, a;
                  if ((null == (t = this.ghostPoint) || t.destroyAllChildren(), this.indexPoint))
                    if (
                      null != (null == (e = this.UIInGame) ? void 0 : e.currentPlantName) &&
                      (null == (i = this.UIInGame) ? void 0 : i.index) <= 8 &&
                      (null == (n = this.UIInGame) ? void 0 : n.index) > -1 &&
                      this.putPlantAvailable() &&
                      this.index
                    ) {
                      var s,
                        d = r(E.getPlantsInCard(null == (s = this.UIInGame) ? void 0 : s.currentPlantName).plantDIS);
                      if (!d) return;
                      (d.parent = this.ghostPoint),
                        (d.worldPosition = this.plantPoint.worldPosition),
                        h.Color.set(d.getChildByName('Body').getComponent(l.ArmatureDisplay).color, 255, 255, 255, 150),
                        (d.getComponent(y).timeScale = 0);
                    } else if (
                      1 != f.lncSelectionMode &&
                      null != (o = this.UIInGame) &&
                      o.currentSniperPlant &&
                      -4 == (null == (a = this.UIInGame) ? void 0 : a.index)
                    ) {
                      var u,
                        c = r(null == (u = this.UIInGame) || null == (u = u.currentSniperPlant) ? void 0 : u.locator);
                      if (!c) return;
                      (c.parent = this.ghostPoint),
                        (c.worldPosition = this.node.worldPosition),
                        h.Color.set(c.getComponent(l.ArmatureDisplay).color, 255, 255, 255, 150),
                        (c.getComponent(l.ArmatureDisplay).timeScale = 0);
                    }
                }),
                (o.onMouseEnter = function (t) {
                  (this.indexPoint = 1), this.plantGhost(), this.SquaresTotal.readIndex();
                }),
                (o.onMouseLeave = function (t) {
                  (this.indexPoint = 0), this.plantGhost(), this.SquaresTotal.readIndex();
                }),
                (o.onMouseDown = function (t, e) {
                  if (((t.preventSwallow = !0), e && -1 == P.index)) {
                    var i = !1,
                      n = !1,
                      o = this.getAllPlants(!1);
                    if (
                      (o.forEach(function (e) {
                        t.getButton() == d.BUTTON_MIDDLE && e.foodable && !e.fooding && b.gameStarted
                          ? q.plantFoodNum > 0 || G.freePF
                            ? (e.food(), (n = !0))
                            : q.plantfoodWarn()
                          : e.onMouseDown(t) && (i = !0);
                      }),
                      o.length > 0 &&
                        b.sandBoxModeOn &&
                        t.getButton() == d.BUTTON_RIGHT &&
                        b.gameStarted &&
                        N.cardsController.seedPackets.forEach(function (t, e) {
                          t.getComponent(_).cardGrouper(o[o.length - 1].ID + e);
                        }),
                      n && q.component.plantFoodDec(),
                      i)
                    )
                      return;
                  }
                  var a;
                  -4 == P.index &&
                    t.getButton() == d.BUTTON_LEFT &&
                    b.gameStarted &&
                    (null == (a = P.uiingame.currentSniperPlant) || a.trigger(this));
                  -5 == P.index &&
                    4 == M.component.index &&
                    t.getButton() == d.BUTTON_LEFT &&
                    b.gameStarted &&
                    this.explodeCherry3x3(1800, !1),
                    9 == P.index &&
                      t.getButton() == d.BUTTON_LEFT &&
                      b.gameStarted &&
                      this.spawnZombie(R.component.currentID, G.zombieSpawnStyle, !1),
                    this.index &&
                      (t.getButton() == d.BUTTON_LEFT &&
                        (P.index <= 8 && this.UIInGame.index > -1
                          ? this.spawnPlant()
                          : -2 == P.index
                          ? this.removePlant()
                          : -3 == P.index && this.plantfood()),
                      ((P.index <= 8 && P.index > -1) || -2 == P.index) && ((this.index = 0), this.UIInGame.onMouseDown(t))),
                    this.SquaresTotal.readIndex();
                }),
                (o.putPlantAvailable = function (t, e, i) {
                  var n, o;
                  void 0 === t && (t = null == (o = this.UIInGame) ? void 0 : o.plantInHandType);
                  if ((void 0 === e && (e = !0), void 0 === i && (i = P.uiingame.currentPlantName), null == (n = t) || !n.length))
                    return !1;
                  var a = !1;
                  return (
                    -1 != t.indexOf('allowOverlap') && (a = !0),
                    !(!this.plantable(e && !a, i) || -1 == t.indexOf('plant')) ||
                      !(!this.vineable(e && !a) || -1 == t.indexOf('vine')) ||
                      !(!this.floawerPotable(e && !a) || -1 == t.indexOf('floawerPot')) ||
                      !(!this.lilyPadable(e && !a) || -1 == t.indexOf('lilypad')) ||
                      !(!this.spikeweedable(e && !a) || -1 == t.indexOf('spikeweed')) ||
                      !(!this.potatomineable(e && !a) || -1 == t.indexOf('potatomine')) ||
                      !(!this.gravebusterable(e && !a) || -1 == t.indexOf('gravebuster')) ||
                      !(!this.flyable(e && !a) || -1 == t.indexOf('fly'))
                  );
                }),
                (o.plantable = function (t, e) {
                  void 0 === t && (t = !0), void 0 === e && (e = P.uiingame.currentPlantName);
                  var i = !0;
                  return (
                    this.plantInSquare.forEach(function (t) {
                      i && ((t.allowStack && e != t.ID) || (i = !1));
                    }),
                    !(
                      (t && !i) ||
                      (this.haveRail && !this.haveCart) ||
                      this.tombStone ||
                      (this.tileType == W.water && !this.haveLilyPad && !this.haveFloawerPot) ||
                      (this.tileType == W.sky && !this.haveFloawerPot) ||
                      this.crackedTile ||
                      this.iceTile ||
                      this.currentTileLiquid == j.softLava ||
                      this.currentTileLiquid == j.deadlyLava ||
                      this.tileType == W.sea
                    )
                  );
                }),
                (o.vineable = function (t) {
                  return (
                    void 0 === t && (t = !0),
                    !(
                      (t && this.vineInSquare.length > 0) ||
                      (this.haveRail && !this.haveCart) ||
                      this.tombStone ||
                      (this.tileType == W.water && !this.haveLilyPad && !this.haveFloawerPot) ||
                      (this.tileType == W.sky && !this.haveFloawerPot) ||
                      this.crackedTile ||
                      this.currentTileLiquid == j.softLava ||
                      this.currentTileLiquid == j.deadlyLava ||
                      this.iceTile ||
                      this.tileType == W.sea
                    )
                  );
                }),
                (o.floawerPotable = function (t) {
                  return (
                    void 0 === t && (t = !0),
                    !(
                      (t && this.vineInSquare.length > 0) ||
                      (t && this.plantInSquare.length > 0) ||
                      (t && this.haveLilyPad) ||
                      (t && this.haveFloawerPot) ||
                      this.haveRail ||
                      this.tombStone ||
                      this.crackedTile ||
                      this.currentTileLiquid == j.softLava ||
                      this.currentTileLiquid == j.deadlyLava ||
                      this.tileType == W.sea ||
                      this.iceTile
                    )
                  );
                }),
                (o.flyable = function (t) {
                  void 0 === t && (t = !0);
                  var e = !0;
                  return (
                    this.plantInSquare.forEach(function (t) {
                      e && (t.allowStack || (e = !1));
                    }),
                    !(
                      (t && !e) ||
                      this.haveRail ||
                      this.tombStone ||
                      this.crackedTile ||
                      this.currentTileLiquid == j.softLava ||
                      this.currentTileLiquid == j.deadlyLava ||
                      this.tileType == W.sea ||
                      this.iceTile
                    )
                  );
                }),
                (o.lilyPadable = function (t) {
                  return (
                    void 0 === t && (t = !0),
                    !(
                      (t && this.haveLilyPad) ||
                      (t && this.haveFloawerPot) ||
                      this.haveRail ||
                      this.tombStone ||
                      this.crackedTile ||
                      this.currentTileLiquid == j.softLava ||
                      this.currentTileLiquid == j.deadlyLava ||
                      this.tileType == W.sea ||
                      this.tileType == W.sky ||
                      this.iceTile
                    )
                  );
                }),
                (o.spikeweedable = function (t) {
                  return void 0 === t && (t = !0), this.plantable(t) && !this.haveLilyPad && !this.haveFloawerPot;
                }),
                (o.potatomineable = function (t) {
                  return (
                    void 0 === t && (t = !0),
                    this.plantable(t) && !this.haveLilyPad && (this.tileType != W.deck || this.haveFloawerPot)
                  );
                }),
                (o.gravebusterable = function (t) {
                  var e;
                  return (
                    null != this.tombStone &&
                    (null == (e = this.tombStone) ? void 0 : e.bustable) &&
                    this.getAllPlants().length <= 0
                  );
                }),
                (o.replantable = function (t) {
                  for (var e = this.getAllPlants(!0), i = 0; i < e.length; i++)
                    if (e[i].ID == t && e[i].replantable()) return e[i];
                  return null;
                }),
                (o.spawnZombie = function (t, e, i, n) {
                  void 0 === e && (e = H.fromLane), void 0 === i && (i = !0), void 0 === n && (n = 0.5);
                  var o = O.createZombie(this.inLane.LaneIndex, t);
                  if (e == H.directPut || e == H.dirtSpawn)
                    x.playDirtRise(!1, i),
                      (o.worldPosition = new s(this.node.worldPosition.x + f.SquareDisW * (n - 0.5), o.shadeWorldPosition.y));
                  else if (e == H.sandStorm || e == H.snowStorm) {
                    var a = 0;
                    e == H.snowStorm && (a = 1), o.playSandStorm(this.node.worldPosition.x + f.SquareDisW * (n - 0.5), a);
                  }
                  var l = o.additionalZombies();
                  return (
                    (e != H.directPut && e != H.dirtSpawn) || o.onPutDirectly(this),
                    e == H.dirtSpawn && o.playDirtSpawn(0),
                    [o].concat(l)
                  );
                }),
                (o._sLefter = function () {
                  return this.isInLawn()
                    ? f.getSquare(this.lIndex, this.cIndex - 1).getComponent(n)
                    : f.getSquare(-2, -2).getComponent(n);
                }),
                (o._sRighter = function () {
                  return this.isInLawn()
                    ? f.getSquare(this.lIndex, this.cIndex + 1).getComponent(n)
                    : f.getSquare(-2, -2).getComponent(n);
                }),
                (o._sUpper = function () {
                  return this.isInLawn()
                    ? f.getSquare(this.lIndex - 1, this.cIndex).getComponent(n)
                    : f.getSquare(-2, -2).getComponent(n);
                }),
                (o._sLower = function () {
                  return this.isInLawn()
                    ? f.getSquare(this.lIndex + 1, this.cIndex).getComponent(n)
                    : f.getSquare(-2, -2).getComponent(n);
                }),
                (o.setPPWdPos = function (t) {
                  var e;
                  null == (e = this.orgPlantPoint) || e.setWorldPosition(t);
                }),
                (o.returnPlantPoint = function () {
                  this.haveFloawerPot ||
                    (this.getAllPlants().forEach(function (t) {
                      t.height = 0;
                    }),
                    (this.orgPlantPoint.worldPosition = this.ppOldPos));
                }),
                (o.get3x3 = function () {
                  var t,
                    e,
                    i,
                    n,
                    o = [];
                  return (
                    [
                      null == this || null == (t = this.upper) ? void 0 : t.lefter,
                      null == this ? void 0 : this.upper,
                      null == this || null == (e = this.upper) ? void 0 : e.righter,
                      null == this ? void 0 : this.lefter,
                      this,
                      null == this ? void 0 : this.righter,
                      null == this || null == (i = this.lower) ? void 0 : i.lefter,
                      null == this ? void 0 : this.lower,
                      null == this || null == (n = this.lower) ? void 0 : n.righter,
                    ].forEach(function (t) {
                      t && o.push(t);
                    }),
                    o
                  );
                }),
                (o.plantHeat = function () {
                  var t = !1;
                  if (
                    (this.get3x3().forEach(function (e) {
                      e.iceTile && ((t = !0), e.iceTile.die());
                    }),
                    8 == this.cIndex &&
                      [this.inLane, this.inLane.UpperLane, this.inLane.LowerLane].forEach(function (e) {
                        e.iceTile && ((t = !0), e.iceTile.die());
                      }),
                    t)
                  ) {
                    var e = v.instantiatePooly(L.plantHeat());
                    (e.parent = u('Canvas/LawnCommon/Shade')), (e.worldPosition = this.node.worldPosition);
                  }
                  return t;
                }),
                (o.isInLawn = function () {
                  return this.lIndex >= 0 && this.cIndex >= 0 && this.lIndex <= 4 && this.cIndex <= 8;
                }),
                (o.tombable = function (t) {
                  return (
                    void 0 === t && (t = !0),
                    !(
                      this.getAllPlants().length > 0 ||
                      (this.tombStone && t) ||
                      (this.tileType != W.deck && this.tileType != W.water && this.tileType != W.floor)
                    )
                  );
                }),
                (o.addTomb = function (t, e, i) {
                  if ((void 0 === e && (e = !0), void 0 === i && (i = !1), this.tombable() && this.isInLawn())) {
                    var n = v.instantiatePooly(k.getTomb(t));
                    n.parent = this.inLane.tombLayer;
                    var o = n.getComponent(D);
                    if (
                      ((o.worldPosition = new s(this.plantPoint.worldPosition.x, this.plantPoint.worldPosition.y)),
                      o.setInLnC(this),
                      o.playSpawnParticle(),
                      i && x.playTombRiseHeavy(),
                      e)
                    ) {
                      var a = v.instantiatePooly(L.graveSpawn());
                      (a.parent = this.inLane.tombLayer), (a.worldPosition = n.worldPosition);
                    }
                    this.readIndex();
                  }
                }),
                (o.pushPlant = function (t) {
                  -1 == this.plantInSquare.indexOf(t) && this.plantInSquare.push(t);
                }),
                (o.pushVine = function (t) {
                  -1 == this.vineInSquare.indexOf(t) && this.vineInSquare.push(t);
                }),
                (o.spawnPlant = function () {
                  if (this.putPlantAvailable() || this.replantable(this.UIInGame.currentPlantName)) {
                    if (
                      (this.spawnPlantByPlantEnum(this.UIInGame.currentPlantName),
                      this.selection(),
                      this.tileType == W.floor || this.tileType == W.deck)
                    ) {
                      var t = v.instantiatePooly(L.plantDirts());
                      (t.parent = this.inLane.node),
                        (t.worldPosition = this.plantPoint.worldPosition),
                        t.getComponent(l.ArmatureDisplay).playAnimation('Plant', 1);
                    }
                    this.tileType == W.water ? x.playPlantOnWater() : x.playPlantOnFloor(),
                      this.UIInGame.spawnPlantCost(),
                      (this.UIInGame.index = -1),
                      this.UIInGame.tryChangingIndex(-1);
                  }
                }),
                (o.removePlant = function () {
                  var t = this,
                    e = 0,
                    i = !1;
                  if (this.vineInSquare.length)
                    this.vineInSquare.concat().forEach(function (n) {
                      if (n.shovelable()) {
                        b.component.lastStandPrepareStarted && (e += n.suncost), (i = !0);
                        var o = t.vineInSquare.indexOf(n);
                        -1 != o && t.vineInSquare.splice(o, 1), n.node.destroy();
                      }
                    });
                  else if (this.plantInSquare.length) {
                    var n = !0;
                    this.plantInSquare.concat().forEach(function (t) {
                      n && (t.allowStack || (n = !1));
                    }),
                      this.plantInSquare.concat().forEach(function (o) {
                        if (o.allowStack == n && o.shovelable()) {
                          b.component.lastStandPrepareStarted && (e += o.suncost), (i = !0);
                          var a = t.plantInSquare.indexOf(o);
                          -1 != a && t.plantInSquare.splice(a, 1), o.node.destroy();
                        }
                      });
                  } else if (this.haveFloawerPot) {
                    var o,
                      a = this.floawerPot.getComponent(S);
                    if (a.shovelable())
                      b.component.lastStandPrepareStarted && (e += a.suncost),
                        this.returnPlantPoint(),
                        (this.haveFloawerPot = !1),
                        (i = !0),
                        null == (o = this.floawerPot) || o.destroy(),
                        (this.floawerPot = null);
                  } else {
                    if (!this.haveLilyPad) return;
                    var s,
                      r = this.lilyPad.getComponent(S);
                    r.shovelable() &&
                      (b.component.lastStandPrepareStarted && (e += r.suncost),
                      this.returnPlantPoint(),
                      (this.haveLilyPad = !1),
                      (i = !0),
                      null == (s = this.lilyPad) || s.destroy(),
                      (this.lilyPad = null));
                  }
                  if (i) {
                    if (e > 0)
                      B.produceSun(e, this.plantPoint.worldPosition, 0).forEach(function (t) {
                        t.collect();
                      });
                    if (this.tileType == W.floor) {
                      var h = v.instantiatePooly(L.plantDirts());
                      (h.parent = this.inLane.node),
                        (h.worldPosition = this.plantPoint.worldPosition),
                        h.getComponent(l.ArmatureDisplay).playAnimation('Remove', 1);
                    }
                    this.haveFloawerPot && this.floawerPot,
                      this.tileType == W.water ? x.playShovelDigWater() : x.playShovelDig(),
                      (this.UIInGame.index = -1),
                      this.UIInGame.tryChangingIndex(-1),
                      this.selection();
                  }
                }),
                (o.foodable = function () {
                  var t = !1;
                  return (
                    this.getAllPlants().forEach(function (e) {
                      t || (e.foodable && !e.fooding && (t = !0));
                    }),
                    t
                  );
                }),
                (o.plantfood = function () {
                  var t = !1;
                  this.getAllPlants(!1).forEach(function (e) {
                    e.foodable && !e.fooding && (q.plantFoodNum > 0 || G.freePF ? (e.food(), (t = !0)) : q.plantfoodWarn());
                  }),
                    t && ((this.UIInGame.index = -1), this.UIInGame.tryChangingIndex(-1), q.component.plantFoodDec());
                }),
                (o.start = function () {
                  var t = this;
                  this.node.getChildByName('Select').getComponent(l.ArmatureDisplay).playAnimation('Nope'),
                    (this.UIInGame = u('Canvas/UIInGame').getComponent(P)),
                    this.node.on(c.EventType.MOUSE_ENTER, this.onMouseEnter, this),
                    this.node.on(c.EventType.MOUSE_LEAVE, this.onMouseLeave, this),
                    this.node.on(
                      c.EventType.MOUSE_DOWN,
                      function (e) {
                        t.onMouseDown(e, !0);
                      },
                      this
                    ),
                    (this.ppOldPos = this.orgPlantPoint ? this.orgPlantPoint.worldPosition.clone() : new a(0, 0, 0)),
                    f.moveCrossing(-1, -1);
                }),
                (o.standardize = function () {
                  (this.lefter = this._sLefter()),
                    (this.righter = this._sRighter()),
                    (this.upper = this._sUpper()),
                    (this.lower = this._sLower());
                }),
                (o.selection = function () {
                  var t, e, i;
                  if (
                    ((this.index = 0),
                    (((this.putPlantAvailable() || this.replantable(P.uiingame.currentPlantName)) &&
                      P.index >= 0 &&
                      P.index <= 8) ||
                      (this.getAllPlants().length > 0 && 1 == (null == (t = this.SquaresTotal) ? void 0 : t.indexShovel)) ||
                      (this.foodable() && 1 == (null == (e = this.SquaresTotal) ? void 0 : e.indexPF)) ||
                      9 == P.index ||
                      (-4 == P.index && 1 == this.indexPoint)) &&
                      (this.index = 1),
                    0 == this.index)
                  )
                    null == (i = this.selectionDB) || i.playAnimation('Nope');
                  else if (1 == this.index && 0 == this.indexPoint) {
                    var n;
                    null == (n = this.selectionDB) || n.playAnimation(0 == f.lncSelectionMode ? 'Slow' : 'Nope');
                  } else if (1 == this.index && 1 == this.indexPoint) {
                    var o;
                    null == (o = this.selectionDB) || o.playAnimation(0 == f.lncSelectionMode ? 'Fast' : 'Nope');
                  }
                }),
                i(n, [
                  {
                    key: 'shadowCD',
                    get: function () {
                      return this._shadowCD;
                    },
                    set: function (t) {
                      if (t > 0 && this._shadowCD <= 0) {
                        x.playTileShadowSpawn();
                        var e = v.instantiatePooly(L.darkBuff());
                        (this.darkBuffParticle = e.getComponent(l.ArmatureDisplay)),
                          (e.parent = this.inLane.node),
                          (e.worldPosition = this.node.worldPosition),
                          e.setSiblingIndex(0),
                          this.darkBuffParticle.playAnimation('Start');
                      } else if (t <= 0 && this._shadowCD > 0) {
                        var i;
                        null == (i = this.darkBuffParticle) || i.playAnimation('End'), (this.darkBuffParticle = null);
                      }
                      this._shadowCD = t;
                    },
                  },
                  {
                    key: 'crackleCountdown',
                    get: function () {
                      return this._crackleCountdown;
                    },
                    set: function (t) {
                      var e, i;
                      if (
                        t > 0 &&
                        this._crackleCountdown <= 0 &&
                        (this.tileType == W.floor || this.tileType == W.deck || this.tileType == W.water)
                      ) {
                        if (!this.crackedTile) {
                          var n = v.instantiatePooly(g.brokenTile());
                          (n.parent = u('Canvas/FrontYard/tiles')),
                            (n.worldPosition = this.node.worldPosition),
                            (this.crackedTile = n.getComponent(l.ArmatureDisplay));
                        }
                        if (!this.crackedTileSparkle) {
                          var o = v.instantiatePooly(g.brokenTileSparkles());
                          (o.parent = this.inLane.prjLayer),
                            (o.worldPosition = this.node.worldPosition),
                            (this.crackedTileSparkle = o.getComponent(l.ArmatureDisplay));
                        }
                        this.crackedTile.playAnimation('Spawn'), this.readIndex();
                      }
                      (null == (e = this.crackedTile) ||
                        e
                          .armature()
                          .getSlot('BG')
                          ._setDisplayIndex(t > 90 ? 1 : 0),
                      t <= 0) &&
                        (null == (i = this.crackedTile) || i.playAnimation('Fade'),
                        (this.crackedTile = null),
                        this.readIndex(),
                        v.destroyPooly(this.crackedTileSparkle.node),
                        (this.crackedTileSparkle = null));
                      this._crackleCountdown = t;
                    },
                  },
                ]),
                n
              );
            })(p))
          ) || z
        );
        n._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/LnCLower.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './LnC.ts', './CharacterManager.ts', './Square.ts'],
  function (e) {
    var t, n, o, i, r, a, s;
    return {
      setters: [
        function (e) {
          t = e.inheritsLoose;
        },
        function (e) {
          (n = e.cclegacy), (o = e._decorator), (i = e.Component);
        },
        function (e) {
          r = e.LnC;
        },
        function (e) {
          a = e.Rectangle;
        },
        function (e) {
          s = e.Square;
        },
      ],
      execute: function () {
        var c;
        n._RF.push({}, 'c96e7eFeARCFaBPaweP0RNp', 'LnCLower', void 0);
        var l = o.ccclass;
        o.property,
          e(
            'LnCLower',
            l('LnCLower')(
              (c = (function (e) {
                function n() {
                  for (var t, n = arguments.length, o = new Array(n), i = 0; i < n; i++) o[i] = arguments[i];
                  return ((t = e.call.apply(e, [this].concat(o)) || this).SquareUpper = void 0), t;
                }
                return (
                  t(n, e),
                  (n.prototype.standardize = function (e) {
                    this.SquareUpper = e;
                    var t = e.getComponent(r);
                    (t.squareLower = this),
                      this.node.setWorldPosition(this.SquareUpper.getWorldPosition()),
                      (t.particleLowerPoint = this.node.getChildByName('ParticleLowerPoint')),
                      (t.plantPoint = this.node.getChildByName('PlantPoint')),
                      (t.orgPlantPoint = this.node.getChildByName('OrgPlantPoint')),
                      (t.potPoint = this.node.getChildByName('PotPoint')),
                      (t.potPointUpper = this.node.getChildByName('PotPointUpper')),
                      (t.vinePoint = this.node.getChildByName('VinePointUpper')),
                      (t.vineBackPoint = this.node.getChildByName('VinePointLower')),
                      (t.buffParticlePoint = this.node.getChildByName('BuffParticle')),
                      (t.rec = a.createRectangleNodeCenter(t.node, s.SquareDisW, s.SquareDisH)),
                      t.standardize();
                  }),
                  n
                );
              })(i))
            ) || c
          );
        n._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/LostRelicHunterZombie.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './PirateSwashbucklerZombie.ts'],
  function (e) {
    var t, o, r, i;
    return {
      setters: [
        function (e) {
          t = e.inheritsLoose;
        },
        function (e) {
          (o = e.cclegacy), (r = e._decorator);
        },
        function (e) {
          i = e.PirateSwashbucklerZombie;
        },
      ],
      execute: function () {
        var n;
        o._RF.push({}, '44625+LKvpJKo5BPxWwJAe9', 'LostRelicHunterZombie', void 0);
        var c = r.ccclass;
        r.property,
          e(
            'LostRelicHunterZombie',
            c('LostRelicHunterZombie')(
              (n = (function (e) {
                function o() {
                  return e.apply(this, arguments) || this;
                }
                return (
                  t(o, e),
                  (o.prototype.resetWillLandColume = function () {
                    this.willLandColumn = Math.floor(3 * Math.random()) + 3;
                  }),
                  o
                );
              })(i))
            ) || n
          );
        o._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/main',
  [
    './debug-view-runtime-control.ts',
    './ElectronAPI.ts',
    './NodePools.ts',
    './_1.ts',
    './lawnPirate.ts',
    './lawnSky.ts',
    './lawn.ts',
    './stageEffect.ts',
    './Armors.ts',
    './LevelNodes.ts',
    './Plants.ts',
    './Scenes.ts',
    './Tombs.ts',
    './Trophies.ts',
    './Zombies.ts',
    './ScrollViewWithoutTouchevent.ts',
    './CardUIUpper.ts',
    './Cards.ts',
    './CharacterManager.ts',
    './Conveyor.ts',
    './Droppings.ts',
    './FrontYard.ts',
    './KeyListener.ts',
    './Materials.ts',
    './Particles.ts',
    './Pause.ts',
    './PlantFoodCount.ts',
    './PowerupFingers.ts',
    './ProjectileManager.ts',
    './SandBoxZombieCards.ts',
    './SeedChooser.ts',
    './Shovel.ts',
    './ShovelUIController.ts',
    './SoundManager.ts',
    './SoundRescourses.ts',
    './Square.ts',
    './SunCount.ts',
    './UI.ts',
    './inGame.ts',
    './levelController.ts',
    './SandBoxLevelSettingWindow.ts',
    './SettingWindow.ts',
    './mainScene.ts',
    './preSplashScene.ts',
    './splashScene.ts',
    './testScene.ts',
    './Character.ts',
    './Mouse.ts',
    './ParticleSelfdestroy.ts',
    './PlayerProperties.ts',
    './Lane.ts',
    './LnC.ts',
    './LnCLower.ts',
    './Tide.ts',
    './GroundFire.ts',
    './GroundFiresManager.ts',
    './AnimationController.ts',
    './CardFeatureTotal.ts',
    './Plant.ts',
    './SniperPlant.ts',
    './BananaLauncher.ts',
    './MissileToe.ts',
    './bananaLauncherSound.ts',
    './Bloomerang.ts',
    './bloomerangSound.ts',
    './Blover.ts',
    './Hurrikale.ts',
    './BonkChoy.ts',
    './bonkChoySound.ts',
    './Buttercup.ts',
    './buttercupSound.ts',
    './CabbagePult.ts',
    './KernelPult.ts',
    './MelonPult.ts',
    './cabbagePultSound.ts',
    './Cactus.ts',
    './cactusSound.ts',
    './cardSelectAlmanac.ts',
    './CherryBomb.ts',
    './CranJelly.ts',
    './DoomShroom.ts',
    './Jalapeno.ts',
    './PowerLily.ts',
    './ChiliBean.ts',
    './chilibeanSound.ts',
    './Chomper.ts',
    './chomperSound.ts',
    './CoconutCannon.ts',
    './coconutCannonSound.ts',
    './Dragonbruit.ts',
    './DragonbruitBaby.ts',
    './dragonBruitSound.ts',
    './FloawerPot.ts',
    './LilyPad.ts',
    './FumeShroom.ts',
    './GloomVine.ts',
    './fumeShroomSound.ts',
    './gloomVineSound.ts',
    './GlacierShroom.ts',
    './glacierShroomSound.ts',
    './GraveBuster.ts',
    './HomingThistle.ts',
    './homingThistleSound.ts',
    './IcebergLettuce.ts',
    './Stallia.ts',
    './stalliaSound.ts',
    './LightningReed.ts',
    './lightningCloud.ts',
    './lightningReedSound.ts',
    './MeteorFlower.ts',
    './meteorFlowerSound.ts',
    './ElectricPeashooter.ts',
    './FirePeashooter.ts',
    './GatlingPea.ts',
    './PeaPod.ts',
    './PeaVine.ts',
    './Peashooter.ts',
    './PrimalPeashooter.ts',
    './PuffShroom.ts',
    './Repeater.ts',
    './Rotobaga.ts',
    './ShootingStarfruit.ts',
    './SnowPea.ts',
    './SplitPea.ts',
    './StarFruit.ts',
    './ThreePeater.ts',
    './electricPeashooterSound.ts',
    './firePeashooterSound.ts',
    './peaShooterSound.ts',
    './puffShroomSound.ts',
    './rotobagaSound.ts',
    './starFruitSound.ts',
    './plantSound.ts',
    './PotatoMine.ts',
    './PotatoMinePrimal.ts',
    './ScaredyShroom.ts',
    './scaredyShroomSound.ts',
    './SnapDragon.ts',
    './SnapDragonFoodPar.ts',
    './snapDragonSound.ts',
    './Spikerock.ts',
    './Spikeweed.ts',
    './spikeweedSound.ts',
    './SpringBean.ts',
    './springbeanSound.ts',
    './Squash.ts',
    './squashSound.ts',
    './Moonflower.ts',
    './SunShroom.ts',
    './Sunflower.ts',
    './moonflowerSound.ts',
    './sunShroomSound.ts',
    './sunflowerSound.ts',
    './Torchwood.ts',
    './torchWoodSound.ts',
    './UmbrellaLeaf.ts',
    './umbrellaLeafSound.ts',
    './Vamporcini.ts',
    './vamporciniSound.ts',
    './PrimalWallNut.ts',
    './Pumpkin.ts',
    './TallNut.ts',
    './WallNut.ts',
    './wallnutSound.ts',
    './Prizes.ts',
    './coinbag.ts',
    './levelPrize.ts',
    './boomerang.ts',
    './cactusThorn.ts',
    './coconutHeavy.ts',
    './coin.ts',
    './commonShot.ts',
    './cranjellyProjectile.ts',
    './dropping.ts',
    './electricPea.ts',
    './electricPeaMega.ts',
    './electricPeaPointer.ts',
    './gem.ts',
    './plantFood.ts',
    './sun.ts',
    './tombBone.ts',
    './zombieDrop.ts',
    './shadeFloor.ts',
    './SoundsController.ts',
    './Tomb.ts',
    './ButtonWithSounds.ts',
    './CoinCollecterInGame.ts',
    './CoinCount.ts',
    './CurrencyCount.ts',
    './GemCount.ts',
    './MouseBlocker.ts',
    './WorldMap.ts',
    './WorldMapChooser.ts',
    './WorldMaps.ts',
    './worldMapScene.ts',
    './Armor.ts',
    './BodyGrouper.ts',
    './CardFeatureTotalZombie.ts',
    './CowboyBasicZombie.ts',
    './EgyptCamelZombie.ts',
    './EgyptExplorerZombie.ts',
    './EgyptPharaohZombie.ts',
    './EgyptRaZombie.ts',
    './EgyptSandStormParticle.ts',
    './EgyptTombRaiserZombie.ts',
    './FutureJetpackZombie.ts',
    './EgyptGargantuarZombie.ts',
    './GargantuarZombie.ts',
    './PirateGargantuarZombie.ts',
    './ImpZombie.ts',
    './LostRelicHunterZombie.ts',
    './ModernAllstarZombie.ts',
    './ModernBalloonZombie.ts',
    './ModernBobsledTeamZombie.ts',
    './ModernCatapultZombie.ts',
    './Icetile.ts',
    './SleighCartZombie.ts',
    './PirateBarrelPusherZombie.ts',
    './PirateBarrelZombie.ts',
    './PirateCaptainParrotZombie.ts',
    './PirateCaptainZombie.ts',
    './PirateImpCannonZombie.ts',
    './PirateSeagullZombie.ts',
    './SeagullZombieAshParticle.ts',
    './PirateSwashbucklerZombie.ts',
    './Zombie.ts',
    './ZombieAshParticle.ts',
  ],
  function () {
    return {
      setters: [
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
      ],
      execute: function () {},
    };
  }
);

System.register(
  'chunks:///_virtual/mainScene.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './SoundsController.ts',
    './ElectronAPI.ts',
    './PlayerProperties.ts',
    './NodePools.ts',
    './Materials.ts',
  ],
  function (e) {
    var n, t, o, i, r, s, a, l, u, c, h, f, p, d, S, w, g, m, y, b, C, E, v, P, z, A;
    return {
      setters: [
        function (e) {
          (n = e.applyDecoratedDescriptor),
            (t = e.inheritsLoose),
            (o = e.initializerDefineProperty),
            (i = e.assertThisInitialized);
        },
        function (e) {
          (r = e.cclegacy),
            (s = e._decorator),
            (a = e.Sprite),
            (l = e.SpriteFrame),
            (u = e.Node),
            (c = e.AudioClip),
            (h = e.Color),
            (f = e.director),
            (p = e.Vec3),
            (d = e.input),
            (S = e.Input),
            (w = e.KeyCode),
            (g = e.AudioSource),
            (m = e.Material),
            (y = e.tween),
            (b = e.Component);
        },
        function (e) {
          (C = e.SoundFXController), (E = e.MusicController);
        },
        function (e) {
          v = e.default;
        },
        function (e) {
          P = e.AllPlayerProperties;
        },
        function (e) {
          z = e.ArrayGet;
        },
        function (e) {
          A = e.materialRes;
        },
      ],
      execute: function () {
        var M, W, G, B, T, F, O, R, _, k, D, L, N, H, I, V, K, U;
        r._RF.push({}, 'bfe05tLwJtHQLHmMPORIuuE', 'mainScene', void 0);
        var X = s.ccclass,
          q = s.property;
        e(
          'mainScene',
          ((M = X('mainScene')),
          (W = q(a)),
          (G = q([l])),
          (B = q(u)),
          (T = q(u)),
          (F = q(a)),
          (O = q(a)),
          (R = q(c)),
          M(
            (((U = (function (e) {
              function n() {
                for (var n, t = arguments.length, r = new Array(t), s = 0; s < t; s++) r[s] = arguments[s];
                return (
                  (n = e.call.apply(e, [this].concat(r)) || this),
                  o(n, 'BG', D, i(n)),
                  o(n, 'randomSplash', L, i(n)),
                  o(n, 'infoWindow', N, i(n)),
                  o(n, 'settingWindow', H, i(n)),
                  o(n, 'sceneSlash', I, i(n)),
                  (n.sceneColor = new h()),
                  (n.infoShown = !1),
                  (n.settingsShown = !1),
                  o(n, 'infoButton', V, i(n)),
                  (n.audioSource = void 0),
                  o(n, 'gotoGameSound', K, i(n)),
                  n
                );
              }
              t(n, e);
              var r = n.prototype;
              return (
                (r.goToGame = function () {
                  this.infoShown || this.settingsShown || f.loadScene('worldMapScene');
                }),
                (r.quit = function () {
                  v.quit();
                }),
                (r.info = function () {
                  this.settingsShown ||
                    (this.infoShown
                      ? ((this.infoWindow.position = new p(-1e4, 0)), (this.infoShown = !1))
                      : ((this.infoWindow.position = new p(0, 0)), (this.infoShown = !0)));
                }),
                (r.setting = function () {
                  this.infoShown ||
                    (this.settingsShown
                      ? ((this.settingWindow.position = new p(-1e4, 0)), (this.settingsShown = !1))
                      : ((this.settingWindow.position = new p(0, 0)), (this.settingsShown = !0)));
                }),
                (r.onLoad = function () {
                  var e = this;
                  d.on(
                    S.EventType.KEY_DOWN,
                    function (n) {
                      n.keyCode == w.SPACE && (e.goToGame(), e.audioSource.playOneShot(e.gotoGameSound, C.SoundFXVolume));
                    },
                    this
                  ),
                    P.getPlayer(0),
                    (this.audioSource = this.getComponent(g));
                }),
                (r.update = function (e) {
                  (this.sceneSlash.color = this.sceneColor), (this.audioSource.volume = E.MusicVolume);
                  var n = this.infoButton.customMaterial,
                    t = n.passes[0].getHandle('addColor');
                  n.passes[0].setUniform(t, A.zombiePF);
                }),
                (r.start = function () {
                  var e = this,
                    t = new m();
                  t.initialize({ effectAsset: A.addColorEffect, defines: { USE_TEXTURE: !0 } }),
                    (this.infoButton.customMaterial = t),
                    (this.sceneSlash.color = new h(0, 0, 0, 255)),
                    y(this.sceneColor).to(1, { a: 0, r: 0, g: 0, b: 0 }).start(),
                    this.randomSplash.length && (this.BG.spriteFrame = z.getRandom(this.randomSplash)),
                    n.gameOpened || (this.audioSource.play(), (this.audioSource.volume = E.MusicVolume), (n.gameOpened = !0)),
                    d.on(
                      S.EventType.KEY_DOWN,
                      function (n) {
                        (n.keyCode != w.ESCAPE && n.keyCode != w.ENTER && n.keyCode != w.SPACE) ||
                          (e.infoShown && e.info(), e.settingsShown && e.setting());
                      },
                      this
                    ),
                    (this.infoShown = !0),
                    this.info(),
                    (this.settingsShown = !0),
                    this.setting();
                }),
                n
              );
            })(b)).gameOpened = !1),
            (D = n((k = U).prototype, 'BG', [W], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (L = n(k.prototype, 'randomSplash', [G], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (N = n(k.prototype, 'infoWindow', [B], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (H = n(k.prototype, 'settingWindow', [T], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (I = n(k.prototype, 'sceneSlash', [F], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (V = n(k.prototype, 'infoButton', [O], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (K = n(k.prototype, 'gotoGameSound', [R], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (_ = k))
          ) || _)
        );
        r._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/Materials.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (e) {
  var o, r, i, t, n, a, l, s, b, c;
  return {
    setters: [
      function (e) {
        (o = e.applyDecoratedDescriptor), (r = e.inheritsLoose), (i = e.initializerDefineProperty), (t = e.assertThisInitialized);
      },
      function (e) {
        (n = e.cclegacy), (a = e._decorator), (l = e.Color), (s = e.EffectAsset), (b = e.tween), (c = e.Component);
      },
    ],
    execute: function () {
      var u, f, m, z, p, C, P, d, w, h, F;
      n._RF.push({}, '85114aqrvBMhKvCC7c7xFoe', 'Materials', void 0);
      var g = a.ccclass,
        v = a.property,
        y = e('materialRes', function () {});
      (y.addColorEffect = null),
        (y.zombiePoisonColor = new l(255, 255, 255, 255)),
        (y.zombiePerfumeColor = new l(255, 255, 255, 255)),
        (y.zombiePF = new l(255, 255, 255, 255)),
        (y.rewardColor = new l(255, 255, 255, 255));
      e(
        'MaterialsRes',
        ((u = g('Materials')),
        (f = v(s)),
        (m = v(l)),
        (z = v(l)),
        (p = v(l)),
        u(
          ((d = o(
            (P = (function (e) {
              function o() {
                for (var o, r = arguments.length, n = new Array(r), a = 0; a < r; a++) n[a] = arguments[a];
                return (
                  (o = e.call.apply(e, [this].concat(n)) || this),
                  i(o, 'addColorEffect', d, t(o)),
                  i(o, 'zombiePoison', w, t(o)),
                  i(o, 'zombiePerfume', h, t(o)),
                  i(o, 'zombiePF', F, t(o)),
                  (o.zombieCPF = new l(0, 0, 0, 255)),
                  (o.rewardColor = new l(122, 122, 122, 255)),
                  o
                );
              }
              r(o, e);
              var n = o.prototype;
              return (
                (n.update = function (e) {
                  (y.zombiePF = this.zombieCPF), (y.rewardColor = this.rewardColor);
                }),
                (n.start = function () {
                  var e = this,
                    o = b(e.zombieCPF).to(0.7, { r: this.zombiePF.r, g: this.zombiePF.g, b: this.zombiePF.b }),
                    r = b(e.zombieCPF).to(0.7, { r: 0, g: 0, b: 0 });
                  o.then(r).clone(e.zombieCPF).repeatForever().start();
                  var i = b(e.rewardColor).to(0.7, { r: 255, g: 255, b: 255 }),
                    t = b(e.rewardColor).to(0.7, { r: 122, g: 122, b: 122 });
                  i.then(t).clone(e.rewardColor).repeatForever().start();
                }),
                (n.onLoad = function () {
                  (y.zombiePF = this.zombieCPF),
                    (y.zombiePoisonColor = this.zombiePoison),
                    (y.zombiePerfumeColor = this.zombiePerfume),
                    (y.addColorEffect = this.addColorEffect);
                }),
                o
              );
            })(c)).prototype,
            'addColorEffect',
            [f],
            { configurable: !0, enumerable: !0, writable: !0, initializer: null }
          )),
          (w = o(P.prototype, 'zombiePoison', [m], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new l(255, 255, 255, 255);
            },
          })),
          (h = o(P.prototype, 'zombiePerfume', [z], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new l(255, 255, 255, 255);
            },
          })),
          (F = o(P.prototype, 'zombiePF', [p], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new l(255, 255, 255, 255);
            },
          })),
          (C = P))
        ) || C)
      );
      n._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/MelonPult.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './CabbagePult.ts',
    './cabbagePultSound.ts',
    './CharacterManager.ts',
    './Square.ts',
    './LnC.ts',
  ],
  function (o) {
    var e, t, n, a, i, r, l, s;
    return {
      setters: [
        function (o) {
          e = o.inheritsLoose;
        },
        function (o) {
          (t = o.cclegacy), (n = o._decorator);
        },
        function (o) {
          a = o.CabbagePultPlant;
        },
        function (o) {
          i = o.cabbagePultSound;
        },
        function (o) {
          r = o.ZombiePool;
        },
        function (o) {
          l = o.Square;
        },
        function (o) {
          s = o.LnC;
        },
      ],
      execute: function () {
        var u;
        t._RF.push({}, '1447fuRnBRGC7NKWgISnb2t', 'MelonPult', void 0);
        var d = n.ccclass;
        n.property,
          o(
            'MelonPultPlant',
            d('MelonPultPlant')(
              (u = (function (o) {
                function t() {
                  return o.apply(this, arguments) || this;
                }
                e(t, o);
                var n = t.prototype;
                return (
                  (n.specialPlantFood = function () {
                    this.anmControl.playAnimation('Food', 1), (this.busy = 1 / 0);
                  }),
                  (n.animationListener = function (o) {
                    var e = this;
                    if ('Lob' == o.name)
                      this.detectEnemy(!0),
                        this._lob(this.targetLock),
                        (this.targetLock = null),
                        this.node.getComponent(i).playLobSound();
                    else if ('foodLob0' == o.name) {
                      this.node.getComponent(i).playFoodSound();
                      var t = l.getSquareWorldPosition(0, 6, 0, 1).x,
                        n = 0;
                      for (
                        r.pool().forEach(function (o) {
                          o.node.worldPosition.x > t && (n++, e._lob(o.node, e.cabbageMega, !0, 45));
                        });
                        n <= 4;

                      )
                        this._lobToNode(l.getRandomSquare().getComponent(s).plantPoint, this.cabbageMega, !0, 45), n++;
                    } else if ('foodLob1' == o.name) {
                      var a = l.getSquareWorldPosition(0, 4, 0, 1).x,
                        u = l.getSquareWorldPosition(0, 6, 0, 1).x,
                        d = 0;
                      for (
                        r.pool().forEach(function (o) {
                          o.node.worldPosition.x > a &&
                            o.node.worldPosition.x < u &&
                            (d++, e._lob(o.node, e.cabbageMega, !0, 45));
                        });
                        d <= 4;

                      )
                        this._lobToNode(l.getRandomSquare(), this.cabbageMega, !0, 45), d++;
                    } else if ('foodLob2' == o.name) {
                      var c = l.getSquareWorldPosition(0, 2, 0, 1).x,
                        b = l.getSquareWorldPosition(0, 4, 0, 1).x,
                        g = 0;
                      for (
                        r.pool().forEach(function (o) {
                          o.node.worldPosition.x > c &&
                            o.node.worldPosition.x < b &&
                            (g++, e._lob(o.node, e.cabbageMega, !0, 45));
                        });
                        g <= 4;

                      )
                        this._lobToNode(l.getRandomSquare(), this.cabbageMega, !0, 45), g++;
                    } else if ('foodLob3' == o.name) {
                      var f = l.getSquareWorldPosition(0, 2, 0, 1).x,
                        h = 0;
                      for (
                        r.pool().forEach(function (o) {
                          o.node.worldPosition.x < f && (h++, e._lob(o.node, e.cabbageMega, !0, 45));
                        });
                        h <= 4;

                      )
                        this._lobToNode(l.getRandomSquare(), this.cabbageMega, !0, 45), h++;
                    } else 'foodEnd' == o.name && ((this.busy = 0), this.foodEnd());
                  }),
                  t
                );
              })(a))
            ) || u
          );
        t._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/MeteorFlower.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './Character.ts',
    './commonShot.ts',
    './ProjectileManager.ts',
    './CharacterManager.ts',
    './Square.ts',
    './NodePools.ts',
    './meteorFlowerSound.ts',
    './LnC.ts',
  ],
  function (t) {
    var n, e, i, o, r, a, s, h, l, u, c, m, d, f, g, p, w, y, b, v, A;
    return {
      setters: [
        function (t) {
          (n = t.applyDecoratedDescriptor),
            (e = t.inheritsLoose),
            (i = t.initializerDefineProperty),
            (o = t.assertThisInitialized);
        },
        function (t) {
          (r = t.cclegacy), (a = t._decorator), (s = t.Prefab), (h = t.Vec2);
        },
        function (t) {
          l = t.Plant;
        },
        function (t) {
          u = t.CharacterType;
        },
        function (t) {
          c = t.commonShot;
        },
        function (t) {
          m = t.projectile;
        },
        function (t) {
          (d = t.ZombiePool), (f = t.TombPool);
        },
        function (t) {
          g = t.Square;
        },
        function (t) {
          (p = t.NodePools), (w = t.ArrayGet);
        },
        function (t) {
          y = t.meteorFlowerSound;
        },
        function (t) {
          (b = t.TileLiquidEnum), (v = t.TileType), (A = t.LnC);
        },
      ],
      execute: function () {
        var P, C, L, S, R, k, T, M, E, F, I;
        r._RF.push({}, '7d88eKrwBBEh6hUP4FKrg8v', 'MeteorFlower', void 0);
        var D = a.ccclass,
          _ = a.property,
          x = t(
            'meteorFlower',
            (function () {
              function t() {}
              return (
                (t.throwOneMeteorOnPos = function (t, n, e, i, o, r, a) {
                  var s = e.clone().normalize().negative().multiplyScalar(r),
                    l = (r * i) / e.length();
                  t.parent = o;
                  var u = t.getComponent(c);
                  return (
                    (u.worldPosition = new h(n.x + e.x, n.y + e.y)),
                    (u.height = i),
                    (u.gravity = 0),
                    (u.linearVelocity = s),
                    (u.bodyLinearVelocity = -l),
                    m.registerProjectile(t, a),
                    u
                  );
                }),
                (t.throwOneMeteorOnNode = function (t, n, e, i, o, r, a) {
                  return this.throwOneMeteorOnPos(t, n.worldPosition, e, i, o, r, a);
                }),
                t
              );
            })()
          );
        t(
          'MeteorFlowerPlant',
          ((P = D('MeteorFlowerPlant')),
          (C = _(s)),
          (L = _(Number)),
          (S = _(Number)),
          (R = _(Number)),
          P(
            ((M = n(
              (T = (function (t) {
                function n() {
                  for (var n, e = arguments.length, r = new Array(e), a = 0; a < e; a++) r[a] = arguments[a];
                  return (
                    (n = t.call.apply(t, [this].concat(r)) || this),
                    i(n, 'meteor', M, o(n)),
                    i(n, 'secondMeteorRandomRate', E, o(n)),
                    (n.awaken = !0),
                    (n.recovering = !0),
                    i(n, 'restDuration', F, o(n)),
                    (n.resting = 0),
                    i(n, 'maxThrowAmount', I, o(n)),
                    (n.thrownAmount = 0),
                    (n.busy = 0),
                    (n.ignited = !1),
                    n
                  );
                }
                e(n, t);
                var r = n.prototype;
                return (
                  (r._throw = function (t) {
                    var n = p.instantiatePooly(this.meteor);
                    x.throwOneMeteorOnPos(
                      n,
                      t.worldPosition,
                      new h(10 * -g.SquareDisW, 0),
                      700,
                      this.inLane.prjLayer,
                      20,
                      u.default
                    ).setTileLiquid(b.softLava, 10);
                  }),
                  (r.specialPlantFood = function (t) {
                    var n = this;
                    (this.resting = 1 / 0),
                      (this.ignited = !1),
                      this.anmControl.playAnimation('Food', 1),
                      this.getComponent(y).playIgniteSound(),
                      this.schedule(
                        function () {
                          d.inLawnPool().length > 0
                            ? n._throw(w.getRandom(d.inLawnPool()).inLnC.node)
                            : n._throw(g.getRandomSquare());
                        },
                        0.3,
                        5,
                        0.1
                      ),
                      (this.busy = 1 / 0);
                  }),
                  (r.specialPlantFoodEnd = function () {
                    this.getComponent(y).playRestSound(),
                      this.anmControl.playAnimation('SummonEnd', 1),
                      this.setAnimation(1),
                      (this.busy = 1 / 0),
                      (this.awaken = !1),
                      (this.resting = this.restDuration),
                      this.rest();
                  }),
                  (r.detectEnemy = function () {
                    var t = null;
                    (this.thrownAmount <= 0 || Math.random() < this.secondMeteorRandomRate) &&
                      (d.pool().length > 0
                        ? d.pool().forEach(function (n) {
                            if (n.inLnC) {
                              var e,
                                i = null == (e = n.inLnC) ? void 0 : e.getTileType();
                              !n.isInLawn() ||
                                (i != v.floor && i != v.deck) ||
                                (t && !(t.cIndex > n.inLnC.cIndex)) ||
                                (t = n.inLnC);
                            }
                          })
                        : f.pool().length > 0 &&
                          f.pool().forEach(function (n) {
                            if (n.inLnC) {
                              var e,
                                i = null == (e = n.inLnC) ? void 0 : e.getTileType();
                              (i != v.floor && i != v.deck) || (t && !(t.cIndex > n.inLnC.cIndex)) || (t = n.inLnC);
                            }
                          })),
                      (t || this.thrownAmount > 0) &&
                        (this.thrownAmount > 0 && (t || (t = g.getRandomSquare().getComponent(A))),
                        this._throw(t.node),
                        this.thrownAmount++,
                        (this.busy = 0.5),
                        this.thrownAmount >= this.maxThrowAmount && this.rest());
                  }),
                  (r.rest = function () {
                    (this.busy = 1 / 0),
                      (this.ignited = !1),
                      this.getComponent(y).playRestSound(),
                      this.anmControl.playAnimation('SummonEnd', 1),
                      this.setAnimation(1);
                  }),
                  (r.igniteStart = function () {
                    (this.resting = 1 / 0), (this.awaken = !1), this.anmControl.playAnimation('SummonStart', 1);
                  }),
                  (r.ignite = function () {
                    this.getComponent(y).playIgniteSound(), (this.ignited = !0), (this.busy = 0), this.setAnimation(2);
                  }),
                  (r.recover = function () {
                    (this.awaken = !0), (this.recovering = !1);
                  }),
                  (r.setAnimation = function (t) {
                    var n = this.anmControl;
                    switch (t) {
                      case 1:
                        (n.IdleAnim = 'Idle_Black'), (n.RandomAnim = []), (this.deathAnm = 'Death_Black');
                        break;
                      case 2:
                        (n.IdleAnim = 'Summonning'), (n.RandomAnim = []), (this.deathAnm = 'Death_Black');
                        break;
                      default:
                        (n.IdleAnim = 'Idle'), (n.RandomAnim = ['Rand1', 'Rand2']), (this.deathAnm = 'Death');
                    }
                  }),
                  (r.waterable = function () {
                    return this.awaken && this.resting <= 0 && !this.ignited && !this.recovering;
                  }),
                  (r.animationListener = function (t) {
                    'summon' == t.name && this.ignite(),
                      'rest' == t.name && (this.resting = this.restDuration),
                      'recover' == t.name && this.recover(),
                      'foodEnd' == t.name && this.foodEnd();
                  }),
                  (r.specialPlantOnEnable = function () {
                    (this.thrownAmount = 0),
                      (this.busy = 1 / 0),
                      (this.ignited = !1),
                      (this.resting = 0),
                      (this.awaken = !0),
                      (this.recovering = !1),
                      this.setAnimation(0),
                      this.anmControl.playRandom();
                  }),
                  (r.specialPlantUpdate = function (t) {
                    if (
                      ((this.foodable = d.inLawnPool().length > 0),
                      !this.dead &&
                        !this.fooding &&
                        (this.ignited &&
                          (this.busy > 0 && (this.busy -= t), this.busy <= 0 && ((this.busy = 0), this.detectEnemy())),
                        this.resting > 0 && (this.resting -= t),
                        this.resting <= 0 &&
                          !this.awaken &&
                          !this.recovering &&
                          ((this.thrownAmount = 0),
                          (this.recovering = !0),
                          this.anmControl.playAnimation('Recover'),
                          this.setAnimation(0)),
                        this.awaken))
                    ) {
                      var n = !1;
                      d.inLawnPool().forEach(function (t) {
                        var e;
                        if (!n) {
                          var i = null == t || null == (e = t.inLnC) ? void 0 : e.getTileType();
                          (i != v.floor && i != v.deck) || (n = !0);
                        }
                      }),
                        n && this.igniteStart();
                    }
                  }),
                  n
                );
              })(l)).prototype,
              'meteor',
              [C],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (E = n(T.prototype, 'secondMeteorRandomRate', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 0.35;
              },
            })),
            (F = n(T.prototype, 'restDuration', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 7;
              },
            })),
            (I = n(T.prototype, 'maxThrowAmount', [R], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 2;
              },
            })),
            (k = T))
          ) || k)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/meteorFlowerSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './SoundsController.ts'],
  function (o) {
    var e, t, n, r, i, u, a, l, c, s, d;
    return {
      setters: [
        function (o) {
          (e = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (n = o.initializerDefineProperty),
            (r = o.assertThisInitialized);
        },
        function (o) {
          (i = o.cclegacy), (u = o._decorator), (a = o.AudioClip), (l = o.AudioSource), (c = o.Component);
        },
        function (o) {
          s = o.ArrayGet;
        },
        function (o) {
          d = o.SoundFXController;
        },
      ],
      execute: function () {
        var p, S, f, h, m, y, g;
        i._RF.push({}, '8ce6aXuT9lBr7ExD5pEi0uv', 'meteorFlowerSound', void 0);
        var v = u.ccclass,
          F = u.property;
        o(
          'meteorFlowerSound',
          ((p = v('meteorFlowerSound')),
          (S = F([a])),
          (f = F([a])),
          p(
            ((y = e(
              (m = (function (o) {
                function e() {
                  for (var e, t = arguments.length, i = new Array(t), u = 0; u < t; u++) i[u] = arguments[u];
                  return (
                    ((e = o.call.apply(o, [this].concat(i)) || this).audioSource = void 0),
                    n(e, 'igniteSound', y, r(e)),
                    n(e, 'restSound', g, r(e)),
                    e
                  );
                }
                t(e, o);
                var i = e.prototype;
                return (
                  (i.onLoad = function () {
                    this.getComponent(l) || this.addComponent(l), (this.audioSource = this.getComponent(l));
                  }),
                  (i.playIgniteSound = function () {
                    this.audioSource.playOneShot(s.getRandom(this.igniteSound), d.SoundFXVolume);
                  }),
                  (i.playRestSound = function () {
                    this.audioSource.playOneShot(s.getRandom(this.restSound), d.SoundFXVolume);
                  }),
                  e
                );
              })(c)).prototype,
              'igniteSound',
              [S],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (g = e(m.prototype, 'restSound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (h = m))
          ) || h)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/MissileToe.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './BananaLauncher.ts'],
  function (e) {
    var n, t, o, r, i;
    return {
      setters: [
        function (e) {
          n = e.inheritsLoose;
        },
        function (e) {
          (t = e.cclegacy), (o = e._decorator), (r = e.KeyCode);
        },
        function (e) {
          i = e.BananaLauncherPlant;
        },
      ],
      execute: function () {
        var s;
        t._RF.push({}, 'b0bd1cgazZJ+7i3Yreqlun5', 'MissileToe', void 0);
        var a = o.ccclass;
        o.property,
          e(
            'MissileToePlant',
            a('MissileToePlant')(
              (s = (function (e) {
                function t() {
                  return e.apply(this, arguments) || this;
                }
                return (
                  n(t, e),
                  (t.prototype.LocateStartKeyCode = function () {
                    return r.KEY_N;
                  }),
                  t
                );
              })(i))
            ) || s
          );
        t._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/ModernAllstarZombie.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Zombie.ts', './NodePools.ts', './SoundsController.ts'],
  function (n) {
    var e, t, i, o, r, a, u, c, l, s, h, p;
    return {
      setters: [
        function (n) {
          (e = n.applyDecoratedDescriptor),
            (t = n.inheritsLoose),
            (i = n.initializerDefineProperty),
            (o = n.assertThisInitialized);
        },
        function (n) {
          (r = n.cclegacy), (a = n._decorator), (u = n.CCFloat), (c = n.AudioClip), (l = n.dragonBones);
        },
        function (n) {
          s = n.Zombie;
        },
        function (n) {
          h = n.ArrayGet;
        },
        function (n) {
          p = n.SoundFXController;
        },
      ],
      execute: function () {
        var d, S, b, f, g, m, y, R, k, A, v;
        r._RF.push({}, '97617AVQ+JHOI5Rmbpth5JT', 'ModernAllstarZombie', void 0);
        var P = a.ccclass,
          w = a.property;
        n(
          'AllstarZombie',
          ((d = P('AllstarZombie')),
          (S = w(u)),
          (b = w([c])),
          (f = w([c])),
          (g = w([c])),
          d(
            ((R = e(
              (y = (function (n) {
                function e() {
                  for (var e, t = arguments.length, r = new Array(t), a = 0; a < t; a++) r[a] = arguments[a];
                  return (
                    (e = n.call.apply(n, [this].concat(r)) || this),
                    i(e, 'runningSpeedScale', R, o(e)),
                    (e.running = !0),
                    i(e, 'stepSound', k, o(e)),
                    i(e, 'kickSound', A, o(e)),
                    i(e, 'punchSound', v, o(e)),
                    e
                  );
                }
                t(e, n);
                var r = e.prototype;
                return (
                  (r.playSpecialZombieDeath = function () {
                    this.running && ((this.running = !1), (this.randomSpeed /= this.runningSpeedScale));
                  }),
                  (r.specialAnimationListener = function (n) {
                    'step' == n.name
                      ? this.audioSource.playOneShot(h.getRandom(this.stepSound), 0.3 * p.SoundFXVolume)
                      : 'Kick' == n.name
                      ? this.audioSource.playOneShot(h.getRandom(this.kickSound), p.SoundFXVolume)
                      : 'Punch' == n.name &&
                        (this._punch(), this.audioSource.playOneShot(h.getRandom(this.punchSound), p.SoundFXVolume));
                  }),
                  (r._punch = function () {
                    var n = this,
                      e = null;
                    this.inLane
                      .plantPool()
                      .concat()
                      .forEach(function (t) {
                        t.eaterDetectable &&
                          (!e || t.bodyRec.prjX().y > e.bodyRec.prjX().y) &&
                          t.bodyRec.judgeCrossRec(n.plantDetectorRec) &&
                          (e = t);
                      }),
                      e && e.smash(this);
                  }),
                  (r.ignorePlants = function () {
                    return this.switching;
                  }),
                  (r.detectPlant = function (n) {
                    var e = this;
                    if (!(n <= 0 || this.switching))
                      if (this.running) {
                        var t = !1;
                        this.inLane.plantPool().forEach(function (n) {
                          t || (n.eaterDetectable && n.bodyRec.judgeCrossRec(e.plantDetectorRec) && (t = !0));
                        }),
                          t &&
                            ((this.running = !1),
                            (this.switching = !0),
                            this.body.playAnimation('Punch', 1),
                            this.setSpeed(0, !1),
                            this.db.once(
                              l.EventObject.COMPLETE,
                              function () {
                                (e.switching = !1), e.dead || e.playWalk();
                              },
                              this
                            ),
                            (this.body.WalkAnm = 'Walk'),
                            (this.randomSpeed /= this.runningSpeedScale));
                      } else this.defaultDetectPlant(n);
                  }),
                  (r.specialZombieOnEnable = function () {
                    (this.body.WalkAnm = 'Run'),
                      (this.walking = !1),
                      (this.running = !0),
                      this.playWalk(),
                      (this.randomSpeed *= this.runningSpeedScale);
                  }),
                  e
                );
              })(s)).prototype,
              'runningSpeedScale',
              [S],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 4;
                },
              }
            )),
            (k = e(y.prototype, 'stepSound', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (A = e(y.prototype, 'kickSound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (v = e(y.prototype, 'punchSound', [g], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (m = y))
          ) || m)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/ModernBalloonZombie.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Zombie.ts',
    './NodePools.ts',
    './SoundsController.ts',
    './CharacterManager.ts',
    './LnC.ts',
    './Plant.ts',
  ],
  function (t) {
    var e, n, i, o, l, a, s, h, d, r, c, u, b, y, p, m, f, A;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor),
            (n = t.inheritsLoose),
            (i = t.initializerDefineProperty),
            (o = t.assertThisInitialized);
        },
        function (t) {
          (l = t.cclegacy),
            (a = t._decorator),
            (s = t.Prefab),
            (h = t.AudioClip),
            (d = t.Vec2),
            (r = t.AudioSource),
            (c = t.dragonBones);
        },
        function (t) {
          (u = t.zombieDamageType), (b = t.Zombie);
        },
        function (t) {
          y = t.ArrayGet;
        },
        function (t) {
          p = t.SoundFXController;
        },
        function (t) {
          m = t.Rectangle;
        },
        function (t) {
          f = t.TileType;
        },
        function (t) {
          A = t.PlantType;
        },
      ],
      execute: function () {
        var g, S, P, k, D, v, O, w, E, R, W, H, Z;
        l._RF.push({}, '9def9SOGMtIJa/OMEnPblEO', 'ModernBalloonZombie', void 0);
        var z = a.ccclass,
          x = a.property;
        t(
          'ModernBalloonZombie',
          ((g = z('ModernBalloonZombie')),
          (S = x(s)),
          (P = x(Number)),
          (k = x(h)),
          (D = x([h])),
          (v = x([h])),
          g(
            ((E = e(
              (w = (function (t) {
                function e() {
                  for (var e, n = arguments.length, l = new Array(n), a = 0; a < n; a++) l[a] = arguments[a];
                  return (
                    (e = t.call.apply(t, [this].concat(l)) || this),
                    i(e, 'balloonZombieAshParticle', E, o(e)),
                    i(e, 'balloonToughness', R, o(e)),
                    (e.balloonHealth = 270),
                    i(e, 'explodeSound', W, o(e)),
                    (e.detectPlantOff = !1),
                    i(e, 'bounceSound', H, o(e)),
                    i(e, 'steadySound', Z, o(e)),
                    (e.rosen = !1),
                    (e.oldIdleAnm = ''),
                    (e.oldEatAnm = ''),
                    (e.oldDeathAnm = ''),
                    (e.oldWalkAnm = ''),
                    e
                  );
                }
                n(e, t);
                var l = e.prototype;
                return (
                  (l.extraHealth = function () {
                    return this.balloonHealth;
                  }),
                  (l.destroyBalloon = function () {
                    this.balloonHealth > 0 && (this.explode(), (this.balloonHealth = 0));
                  }),
                  (l.haveBalloon = function () {
                    return this.balloonHealth > 0;
                  }),
                  (l.detectPlant = function (t) {
                    this.balloonHealth > 0 ? this.haveBalloonDetectPlant(t) : this.defaultDetectPlant(t);
                  }),
                  (l.haveBalloonDetectPlant = function (t) {
                    var e;
                    if (0 != t && this.detectPlantOn()) {
                      var n = this.plantDetectorRec,
                        i = null;
                      this.ignorePlants() ||
                        this.inLane.plantPool().forEach(function (t) {
                          t.eaterDetectable &&
                            !t.short_ &&
                            n.judgeCrossRec(t.bodyRec) &&
                            ((i &&
                              t.plantType != A.vine &&
                              t.plantType != A.plant &&
                              t.plantType != A.lilyPad &&
                              t.plantType != A.pot) ||
                              ((!i || (i && !i.tall_)) && (i = t)));
                        }),
                        null != (e = i) && e.tall_
                          ? this.rosen
                            ? this.unrise()
                            : (i.eat(this.dps * t, this), this.playEat(t))
                          : i
                          ? this.rosen || this.rise()
                          : this.rosen
                          ? this.unrise()
                          : this.playWalk();
                    }
                  }),
                  (l.dealDamage = function (t, e, n, i, o, l, a) {
                    void 0 === t && (t = 0),
                      void 0 === e && (e = !0),
                      void 0 === n && (n = !0),
                      void 0 === i && (i = !0),
                      void 0 === o && (o = null),
                      void 0 === l && (l = 0),
                      void 0 === a && (a = !0);
                    var s = 0,
                      h = this.totalHealth();
                    return (
                      l == u.fire && ((this.freeze = 0), (this.chill = 0)),
                      this.balloonHealth > 0 &&
                        e &&
                        (t && (this.hurting = 10),
                        (this.balloonHealth -= t),
                        this.balloonHealth <= 0 &&
                          ((s = -this.balloonHealth), !this.dead && !this.fallingInSky && h > t && this.explode())),
                      (this.balloonHealth <= 0 || !e) && this.dealNormalDamage(t + s, e, n, i, o, l, a),
                      this.health
                    );
                  }),
                  (l.specialSetBodyRec = function () {
                    var t = null;
                    (t =
                      this.balloonHealth > 0
                        ? m.createRectangleCenter(
                            new d(this.shadeSocket.worldPosition.x - 10, this.node.worldPosition.y + this.bodyRecOffset.y),
                            90,
                            this.bodyRecSize.height
                          )
                        : m.createRectangleCenter(
                            new d(
                              this.shadeSocket.worldPosition.x + this.bodyRecOffset.x,
                              this.node.worldPosition.y + this.bodyRecOffset.y
                            ),
                            this.bodyRecSize.width,
                            this.bodyRecSize.height
                          )),
                      (this.bodyRec = t);
                  }),
                  (l.specialOnLeapEnd = function (t) {
                    this.detectPlantOff = !1;
                  }),
                  (l.detectPlantOn = function () {
                    return !this.detectPlantOff && !this.switching;
                  }),
                  (l.specialZombieOnLanding = function () {
                    (this.zombieAshParticle_ = this.zombieAshParticle),
                      (this.body.IdleAnm = 'Idle'),
                      (this.body.EatAnm = 'Eat'),
                      (this.body.WalkAnm = 'Walk'),
                      (this.body.DeathAnm = 'Death');
                  }),
                  (l.specialZombieOnDisable = function () {
                    (this.zombieAshParticle_ = this.balloonZombieAshParticle),
                      (this.body.DeathAnm = this.oldDeathAnm),
                      (this.body.EatAnm = this.oldEatAnm),
                      (this.body.IdleAnm = this.oldIdleAnm),
                      (this.body.WalkAnm = this.oldWalkAnm);
                  }),
                  (l.specialAnimationListener = function (t) {
                    'walk' == t.name
                      ? (this.playWalk(), (this.switching = !1))
                      : 'steady' == t.name
                      ? this.getComponent(r).playOneShot(y.getRandom(this.steadySound), p.SoundFXVolume)
                      : 'bounce' == t.name && this.getComponent(r).playOneShot(y.getRandom(this.bounceSound), p.SoundFXVolume);
                  }),
                  (l.rise = function () {
                    this.rosen ||
                      ((this.switching = !0),
                      (this.rosen = !0),
                      (this.walking = !1),
                      this.body.playAnimation('Rise', 1),
                      (this.body.WalkAnm = 'Walk_Fly_High'));
                  }),
                  (l.unrise = function () {
                    this.rosen &&
                      ((this.switching = !0),
                      (this.walking = !1),
                      this.body.playAnimation('Unrise', 1),
                      (this.body.WalkAnm = 'Walk_Fly'),
                      (this.rosen = !1));
                  }),
                  (l.specialZombieOnEnable = function () {
                    (this.randomSpeed *= 2),
                      (this.detectPlantOff = !1),
                      (this.balloonHealth = this.balloonToughness),
                      (this.zombieAshParticle_ = this.balloonZombieAshParticle),
                      (this.rosen = !1),
                      (this.body.WalkAnm = 'Walk_Fly'),
                      (this.walking = !1),
                      this.playWalk();
                  }),
                  (l.specialZombieOnLoad = function () {
                    (this.oldDeathAnm = this.body.DeathAnm),
                      (this.oldEatAnm = this.body.EatAnm),
                      (this.oldIdleAnm = this.body.IdleAnm),
                      (this.oldWalkAnm = this.body.WalkAnm);
                  }),
                  (l.playSpecialZombieDeath = function () {
                    var t;
                    'Death' == this.body.DeathAnm &&
                      (null == (t = this.inLnC) ? void 0 : t.getTileType()) == f.sky &&
                      this.playFall();
                  }),
                  (l.playSpecialZombieDie = function (t) {
                    'Death_Fly' == this.body.DeathAnm && this.judgeDeath(), this.currentFlyZombie && this.playExplodeSound();
                  }),
                  (l.explode = function () {
                    var t = this;
                    (this.balloonHealth = 0),
                      this.playExplodeSound(),
                      (this.detectPlantOff = !0),
                      this.body.playAnimation('Land', 1),
                      this.setSpeed(0, !1),
                      (this.body.IdleAnm = 'Idle'),
                      (this.body.DeathAnm = 'Death'),
                      (this.body.EatAnm = 'Eat'),
                      (this.body.WalkAnm = 'Walk'),
                      (this.randomSpeed /= 2),
                      (this.switching = !0),
                      this.db.once(
                        c.EventObject.COMPLETE,
                        function (e) {
                          t.dead || t.fallingInSky || (t.playWalk(), (t.detectPlantOff = !1), (t.switching = !1));
                        },
                        this
                      );
                  }),
                  (l.playExplodeSound = function () {
                    this.explodeSound.length && this.getComponent(r).playOneShot(y.getRandom(this.explodeSound), p.SoundFXVolume);
                  }),
                  e
                );
              })(b)).prototype,
              'balloonZombieAshParticle',
              [S],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (R = e(w.prototype, 'balloonToughness', [P], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 270;
              },
            })),
            (W = e(w.prototype, 'explodeSound', [k], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (H = e(w.prototype, 'bounceSound', [D], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Z = e(w.prototype, 'steadySound', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (O = w))
          ) || O)
        );
        l._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/ModernBobsledTeamZombie.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Zombie.ts', './Zombies.ts', './LnC.ts'],
  function (e) {
    var i, n, t, a, o, s, r, l, h, c, p, u, d;
    return {
      setters: [
        function (e) {
          (i = e.applyDecoratedDescriptor),
            (n = e.inheritsLoose),
            (t = e.initializerDefineProperty),
            (a = e.assertThisInitialized);
        },
        function (e) {
          (o = e.cclegacy), (s = e._decorator), (r = e.Node), (l = e.Vec2);
        },
        function (e) {
          (h = e.zombieDamageType), (c = e.Zombie);
        },
        function (e) {
          (p = e.zombies), (u = e.ZombieEnum);
        },
        function (e) {
          d = e.TileType;
        },
      ],
      execute: function () {
        var m, f, b, y, g;
        o._RF.push({}, '2e6f3D4iVJG7pvFJrCFh9W6', 'ModernBobsledTeamZombie', void 0);
        var v = s.ccclass,
          T = s.property;
        e(
          'BobsledZombieTeamZombie',
          ((m = v('BobsledZombieTeamZombie')),
          (f = T([r])),
          m(
            ((g = i(
              (y = (function (e) {
                function i() {
                  for (var i, n = arguments.length, o = new Array(n), s = 0; s < n; s++) o[s] = arguments[s];
                  return (
                    (i = e.call.apply(e, [this].concat(o)) || this),
                    t(i, 'spawnPoints', g, a(i)),
                    (i.innerToughness = 190),
                    (i.innerHealth = 190),
                    (i.spedUp = !1),
                    (i.haveInner = !0),
                    i
                  );
                }
                n(i, e);
                var o = i.prototype;
                return (
                  (o.dealDamage = function (e, i, n, t, a, o, s) {
                    if (
                      (void 0 === e && (e = 0),
                      void 0 === i && (i = !0),
                      void 0 === n && (n = !0),
                      void 0 === t && (t = !0),
                      void 0 === a && (a = null),
                      void 0 === o && (o = h.physicle),
                      void 0 === s && (s = !0),
                      this.health < this.toughness / 2)
                    ) {
                      var r = this.body.body.armature();
                      ['front', 'mid', 'back', 'knifeL_here', 'wingR'].forEach(function (e) {
                        r.getSlot(e).displayIndex = 1;
                      });
                    }
                    return (
                      i ||
                        ((this.innerHealth -= e),
                        this.innerHealth <= 0 &&
                          (this.playDie(!0),
                          this.judgeDeath(),
                          this.spawnTeam().forEach(function (e) {
                            e.dealDamage(e.toughness + 100, !1, n, t, a, o, s);
                          }))),
                      this.dealNormalDamage(e, i, n, t, a, o, s)
                    );
                  }),
                  (o.ignorePlants = function () {
                    return !0;
                  }),
                  (o.specialZombieOnSquareChange = function (e, i) {
                    9 == i.cIndex ||
                      this.spedUp ||
                      ((this.randomSpeed *= 2),
                      (this.spedUp = !0),
                      this.body.playAnimation('Jump', 1),
                      (this.body.WalkAnm = 'Walk')),
                      i.iceTile || 9 == i.cIndex || (i.getTileType() != d.sea && i.getTileType() != d.sky && this.playDie());
                  }),
                  (o.spawnTeam = function () {
                    var e = this;
                    if (!this.haveInner) return [];
                    this.haveInner = !1;
                    var i = [];
                    return (
                      this.spawnPoints.forEach(function (n) {
                        var t = p.getZombie(u.modern_bobSled);
                        t.parent = e.inLane.zombieLayer;
                        var a = t.getComponent(c);
                        (a.worldPosition = new l(n.worldPosition.x, e.inLane.floorY)), a.copyBuff(e), i.push(a);
                      }),
                      i
                    );
                  }),
                  (o.playSpecialZombieDeath = function () {
                    this.body.WalkAnm = 'WalkPush';
                  }),
                  (o.specialZombieOnEnable = function () {
                    (this.spedUp = !1), (this.haveInner = !0);
                    var e = this.body.body.armature();
                    (this.body.WalkAnm = 'WalkPush'),
                      (this.walking = !1),
                      this.playWalk(),
                      (this.innerHealth = this.innerToughness),
                      ['front', 'mid', 'back', 'knifeL_here', 'wingR'].forEach(function (i) {
                        e.getSlot(i).displayIndex = 0;
                      });
                  }),
                  (o.specialAnimationListener = function (e) {
                    var i = this;
                    'spawnTeam' == e.name &&
                      this.spawnTeam().forEach(function (e) {
                        e.dealDamage(e.toughness - i.innerHealth, !1, !1, !1, null, h.physicle, !1);
                      });
                  }),
                  (o.playSpecialZombieDie = function (e) {
                    this.judgeDeath();
                  }),
                  i
                );
              })(c)).prototype,
              'spawnPoints',
              [f],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (b = y))
          ) || b)
        );
        o._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/ModernCatapultZombie.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Zombie.ts',
    './CabbagePult.ts',
    './NodePools.ts',
    './Character.ts',
    './Square.ts',
  ],
  function (t) {
    var e, o, i, a, n, l, s, r, u, b, d, c, h, p, y, f, g;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor),
            (o = t.inheritsLoose),
            (i = t.initializerDefineProperty),
            (a = t.assertThisInitialized);
        },
        function (t) {
          (n = t.cclegacy), (l = t._decorator), (s = t.Prefab), (r = t.Node), (u = t.AudioClip), (b = t.Vec3);
        },
        function (t) {
          (d = t.zombieDamageType), (c = t.Zombie);
        },
        function (t) {
          h = t.cabbagePult;
        },
        function (t) {
          (p = t.NodePools), (y = t.ArrayGet);
        },
        function (t) {
          f = t.CharacterType;
        },
        function (t) {
          g = t.Square;
        },
      ],
      execute: function () {
        var m, P, v, S, w, x, C, L, I, k, j, R, D;
        n._RF.push({}, '0ffd72fmV9B2LOjgYeSzq6+', 'ModernCatapultZombie', void 0);
        var z = l.ccclass,
          Z = l.property;
        t(
          'CatapultZombie',
          ((m = z('CatapultZombie')),
          (P = Z(s)),
          (v = Z(r)),
          (S = Z([u])),
          (w = Z(Number)),
          (x = Z(Number)),
          m(
            ((I = e(
              (L = (function (t) {
                function e() {
                  for (var e, o = arguments.length, n = new Array(o), l = 0; l < o; l++) n[l] = arguments[l];
                  return (
                    ((e = t.call.apply(t, [this].concat(n)) || this).busy = 240),
                    i(e, 'basketballPrj', I, a(e)),
                    i(e, 'baskeballSpawnPoint', k, a(e)),
                    i(e, 'lobSound', j, a(e)),
                    i(e, 'lobInterval', R, a(e)),
                    i(e, 'maxBallCount', D, a(e)),
                    (e.ballCount = 20),
                    e
                  );
                }
                o(e, t);
                var n = e.prototype;
                return (
                  (n.playSpecialZombieDie = function (t) {
                    this.judgeDeath();
                  }),
                  (n.specialZombieOnEnable = function () {
                    var t = this.body.body.armature();
                    ['shield', 'body', 'busket', 'busket_there', 'front', 'side', 'engine0'].forEach(function (e) {
                      t.getSlot(e).displayIndex = 0;
                    }),
                      (this.busy = 0),
                      (this.ballCount = this.maxBallCount),
                      this.judgeBallCount();
                  }),
                  (n.detectPlant = function (t) {
                    var e = this;
                    this.inLane &&
                      this.inLane.plantPool().forEach(function (t) {
                        t.smasherDetectable && e.bodyRec.judgeCrossRec(t.bodyRec) && t.smash(e);
                      });
                  }),
                  (n.judgeBallCount = function () {
                    var t = this.body.body.armature();
                    switch (
                      (['ball1', 'ball2', 'ball3', 'ball4', 'ball5', 'ballReady'].forEach(function (e) {
                        t.getSlot(e).displayIndex = 0;
                      }),
                      this.ballCount)
                    ) {
                      case 0:
                        t.getSlot('ball5').displayIndex = t.getSlot('ballReady').displayIndex = -1;
                      case 1:
                        t.getSlot('ball4').displayIndex = -1;
                      case 2:
                        t.getSlot('ball2').displayIndex = -1;
                      case 3:
                        t.getSlot('ball3').displayIndex = -1;
                      case 4:
                        t.getSlot('ball1').displayIndex = -1;
                    }
                  }),
                  (n.specialAnimationListener = function (t) {
                    if ('Lob' == t.name && !this.dead) {
                      this.ballCount--, this.judgeBallCount();
                      var e = null,
                        o = this.inLane.plantPool();
                      o.length &&
                        o.forEach(function (t) {
                          (e && !(e.worldPosition.x > t.node.worldPosition.x)) || t.short_ || (e = t.node);
                        }),
                        (!e || e.worldPosition.x > this.node.worldPosition.x) && (e = this.inLane.toLeft);
                      var i = p.instantiatePooly(this.basketballPrj);
                      e &&
                        h.lobOneCabbageOnNode(
                          i,
                          new b(this.baskeballSpawnPoint.worldPosition.x, this.node.worldPosition.y, 0),
                          this.baskeballSpawnPoint.worldPosition.y - this.node.worldPosition.y,
                          this.inLane.prjLayer,
                          e,
                          2,
                          f.plant,
                          !1
                        ),
                        this.lobSound.length && this.audioSource.playOneShot(y.getRandom(this.lobSound));
                    }
                    'toIdle' == t.name && this.playIdle();
                  }),
                  (n.dealDamage = function (t, e, o, i, a, n, l) {
                    if (
                      (void 0 === t && (t = 0),
                      void 0 === e && (e = !0),
                      void 0 === o && (o = !0),
                      void 0 === i && (i = !0),
                      void 0 === a && (a = null),
                      void 0 === n && (n = d.physicle),
                      void 0 === l && (l = !0),
                      this.health < this.toughness / 2)
                    ) {
                      var s = this.body.body.armature();
                      ['shield', 'body', 'busket', 'busket_there', 'front', 'side', 'engine0'].forEach(function (t) {
                        s.getSlot(t).displayIndex = 1;
                      });
                    }
                    return this.dealNormalDamage(t, e, o, i, a, n, l);
                  }),
                  (n.playLob = function () {
                    this.playIdle();
                    var t = 0.03 * Math.round(5 * Math.random()) * (this.lobInterval / 4);
                    (this.busy = this.lobInterval + t), this.body.playAnimation('Lob', 1);
                  }),
                  (n.detectLobPlant = function () {
                    var t = this;
                    if (this.inLane)
                      if (this.node.worldPosition.x > g.getSquareWorldPosition(0, 7).x) this.playWalk();
                      else {
                        var e = !1;
                        this.inLane.plantPool().forEach(function (o) {
                          e ||
                            (o.eaterDetectable &&
                              !o.short_ &&
                              o.node.worldPosition.x < t.node.worldPosition.x &&
                              !o.bodyRec.judgeCrossRec(t.bodyRec) &&
                              (e = !0));
                        }),
                          e && this.ballCount ? this.playLob() : this.playWalk();
                      }
                  }),
                  (n.specialZombieUpdate = function (t) {
                    this.busy > 0 && (this.busy -= t),
                      this.busy <= 0 && ((this.busy = 0), this.isAlive() && this.detectLobPlant());
                  }),
                  e
                );
              })(c)).prototype,
              'basketballPrj',
              [P],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (k = e(L.prototype, 'baskeballSpawnPoint', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (j = e(L.prototype, 'lobSound', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (R = e(L.prototype, 'lobInterval', [w], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 4;
              },
            })),
            (D = e(L.prototype, 'maxBallCount', [x], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 20;
              },
            })),
            (C = L))
          ) || C)
        );
        n._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Moonflower.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Plant.ts', './Sunflower.ts', './moonflowerSound.ts', './levelController.ts'],
  function (n) {
    var o, t, i, e, l, r, u, a, s, d, c, h;
    return {
      setters: [
        function (n) {
          (o = n.applyDecoratedDescriptor),
            (t = n.inheritsLoose),
            (i = n.initializerDefineProperty),
            (e = n.assertThisInitialized);
        },
        function (n) {
          (l = n.cclegacy), (r = n._decorator), (u = n.Node), (a = n.dragonBones);
        },
        function (n) {
          s = n.Plant;
        },
        function (n) {
          d = n.sunflower;
        },
        function (n) {
          c = n.moonflowerSound;
        },
        function (n) {
          h = n.LevelPlay;
        },
      ],
      execute: function () {
        var p, f, y, m, g;
        l._RF.push({}, 'a5837CPhDZPG509d3lamA2k', 'Moonflower', void 0);
        var P = r.ccclass,
          v = r.property;
        n(
          'MoonflowerPlant',
          ((p = P('MoonflowerPlant')),
          (f = v(u)),
          p(
            ((g = o(
              (m = (function (n) {
                function o() {
                  for (var o, t = arguments.length, l = new Array(t), r = 0; r < t; r++) l[r] = arguments[r];
                  return (
                    ((o = n.call.apply(n, [this].concat(l)) || this).sunValue = 50),
                    i(o, 'sunSpawnpoint', g, e(o)),
                    (o.producing = !1),
                    (o.busy = 0),
                    o
                  );
                }
                t(o, n);
                var l = o.prototype;
                return (
                  (l.playProduceAnimation = function () {
                    this.getComponent(c).playSaySound(),
                      (this.producing = !0),
                      (this.busy = 23.5 + 1.5 * Math.random()),
                      this.anmControl.playAnimation('Produce', 1, 0.1);
                  }),
                  (l.judgeDarkPlantMode = function () {
                    var n,
                      o,
                      t,
                      i,
                      e,
                      l,
                      r,
                      u,
                      a = 0;
                    if (
                      ([
                        null == (n = this.inLnC) || null == (n = n.upper) ? void 0 : n.lefter,
                        null == (o = this.inLnC) ? void 0 : o.upper,
                        null == (t = this.inLnC) || null == (t = t.upper) ? void 0 : t.righter,
                        null == (i = this.inLnC) ? void 0 : i.lefter,
                        this.inLnC,
                        null == (e = this.inLnC) ? void 0 : e.righter,
                        null == (l = this.inLnC) || null == (l = l.lower) ? void 0 : l.lefter,
                        null == (r = this.inLnC) ? void 0 : r.lower,
                        null == (u = this.inLnC) || null == (u = u.lower) ? void 0 : u.righter,
                      ].forEach(function (n) {
                        a >= 4 ||
                          null == n ||
                          n.getAllPlants().forEach(function (n) {
                            a >= 4 || (null != n && n.haveDarkMode && a++);
                          });
                      }),
                      (this.sunValue = 25 * a),
                      a >= 4 && !this.darkModeOn)
                    ) {
                      var s,
                        d = null == (s = this.anmControl.body) ? void 0 : s.armature();
                      d &&
                        ((this.darkModeOn = !0),
                        null == d ||
                          d.getSlots().forEach(function (n) {
                            n.name.includes('_DARK') && (n.displayIndex = 1);
                          }));
                    }
                    if (a < 4 && this.darkModeOn) {
                      var c,
                        h = null == (c = this.anmControl.body) ? void 0 : c.armature();
                      h &&
                        ((this.darkModeOn = !1),
                        null == h ||
                          h.getSlots().forEach(function (n) {
                            n.name.includes('_DARK') && (n.displayIndex = 0);
                          }));
                    }
                  }),
                  (l.specialPlantFood = function () {
                    (this.producing = !1),
                      (this.busy = 1 / 0),
                      this.getComponent(c).playFoodSound(),
                      this.anmControl.playAnimation('Food', 1),
                      this.anmControl.body.once(a.EventObject.COMPLETE, this.foodEnd, this);
                  }),
                  (l.waterable = function () {
                    return !this.producing;
                  }),
                  (l.specialPlantFoodEnd = function () {
                    (this.producing = !1), (this.busy = 23.5 + 1.5 * Math.random()), this.anmControl.playRandom();
                  }),
                  (l.specialPlantOnDisable = function () {}),
                  (l._produce = function () {
                    (this.producing = !1),
                      d.produceSun(
                        this.sunValue,
                        this.node.worldPosition,
                        this.sunSpawnpoint.getWorldPosition().y - this.node.getWorldPosition().y
                      );
                  }),
                  (l.animationListener = function (n) {
                    'Produce' == n.name
                      ? this._produce()
                      : 'foodEnd' == n.name
                      ? this.foodEnd()
                      : 'produceSound' == n.name && this.getComponent(c).playProduceSound();
                  }),
                  (l.specialPlantOnEnable = function () {
                    (this.producing = !1), (this.busy = 5 + 5 * Math.random());
                  }),
                  (l.specialPlantUpdate = function (n) {
                    var o;
                    null == (o = this.inLnC) ||
                      o.get3x3().forEach(function (n) {
                        null == n || n.setShadowBuff(0.1);
                      }),
                      h.component.ExcludeListSunProducers ||
                        (this.busy > 0 && (this.busy -= n), this.busy <= 0 && this.playProduceAnimation());
                  }),
                  o
                );
              })(s)).prototype,
              'sunSpawnpoint',
              [f],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (y = m))
          ) || y)
        );
        l._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/moonflowerSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './SoundsController.ts'],
  function (o) {
    var n, e, t, r, u, i, a, l, d, c, p;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (e = o.inheritsLoose),
            (t = o.initializerDefineProperty),
            (r = o.assertThisInitialized);
        },
        function (o) {
          (u = o.cclegacy), (i = o._decorator), (a = o.AudioClip), (l = o.AudioSource), (d = o.Component);
        },
        function (o) {
          c = o.ArrayGet;
        },
        function (o) {
          p = o.SoundFXController;
        },
      ],
      execute: function () {
        var s, f, S, y, h, m, g, b, C;
        u._RF.push({}, '3e93cdhhfhOfaxc/8vWXBRg', 'moonflowerSound', void 0);
        var v = i.ccclass,
          w = i.property;
        o(
          'moonflowerSound',
          ((s = v('moonflowerSound')),
          (f = w([a])),
          (S = w([a])),
          (y = w([a])),
          s(
            ((g = n(
              (m = (function (o) {
                function n() {
                  for (var n, e = arguments.length, u = new Array(e), i = 0; i < e; i++) u[i] = arguments[i];
                  return (
                    (n = o.call.apply(o, [this].concat(u)) || this),
                    t(n, 'foodSound', g, r(n)),
                    t(n, 'produceSound', b, r(n)),
                    t(n, 'saySound', C, r(n)),
                    n
                  );
                }
                e(n, o);
                var u = n.prototype;
                return (
                  (u.onEnable = function () {
                    this.getComponent(l) || this.addComponent(l);
                  }),
                  (u.playFoodSound = function () {
                    this.getComponent(l).playOneShot(c.getRandom(this.foodSound), p.SoundFXVolume);
                  }),
                  (u.playProduceSound = function () {
                    this.getComponent(l).playOneShot(c.getRandom(this.produceSound), p.SoundFXVolume);
                  }),
                  (u.playSaySound = function () {
                    this.getComponent(l).playOneShot(c.getRandom(this.saySound), p.SoundFXVolume);
                  }),
                  n
                );
              })(d)).prototype,
              'foodSound',
              [f],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (b = n(m.prototype, 'produceSound', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (C = n(m.prototype, 'saySound', [y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (h = m))
          ) || h)
        );
        u._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Mouse.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './levelController.ts', './CharacterManager.ts'],
  function (e) {
    var n, o, t, i, r, s, u, c, a, l, p, h, d;
    return {
      setters: [
        function (e) {
          (n = e.applyDecoratedDescriptor),
            (o = e.inheritsLoose),
            (t = e.initializerDefineProperty),
            (i = e.assertThisInitialized);
        },
        function (e) {
          (r = e.cclegacy), (s = e._decorator), (u = e.Node), (c = e.Vec2), (a = e.Vec3), (l = e.EventMouse), (p = e.Component);
        },
        function (e) {
          h = e.LevelPlay;
        },
        function (e) {
          d = e.LineSegment;
        },
      ],
      execute: function () {
        var v, M, f, y, T, L;
        r._RF.push({}, 'd46dfCpSdtH1LPKAG1TjdAv', 'Mouse', void 0);
        var g = s.ccclass,
          w = s.property;
        e(
          'Mouse',
          ((v = g('Mouse')),
          (M = w({ type: u })),
          v(
            (((L = (function (e) {
              function n() {
                for (var n, o = arguments.length, r = new Array(o), s = 0; s < o; s++) r[s] = arguments[s];
                return (n = e.call.apply(e, [this].concat(r)) || this), t(n, 'mouse', T, i(n)), n;
              }
              o(n, e);
              var r = n.prototype;
              return (
                (r.onLoad = function () {
                  this.node.on(u.EventType.MOUSE_MOVE, this.onMouseMove, this),
                    this.node.on(u.EventType.MOUSE_DOWN, this.onMouseDown, this),
                    this.node.on(u.EventType.MOUSE_UP, this.onMouseUp, this);
                }),
                (r.onMouseMove = function (e) {
                  var o = e.getUILocationX(),
                    t = e.getUILocationY(),
                    i = this.mouse.worldPosition.clone(),
                    r = new a(o, t, 0).add(h.component.uiPos),
                    s = new c(r.x - i.x, r.y - i.y);
                  (n.moveLine = d.createLineLenDir(new c(i.x, i.y), s.length(), s)),
                    (this.mouse.worldPosition = r),
                    (n.position = new c(r.x, r.y));
                }),
                (r.onMouseDown = function (e) {
                  e.getButton() == l.BUTTON_LEFT || (e.getButton(), l.BUTTON_RIGHT);
                }),
                (r.onMouseUp = function (e) {
                  e.getButton() == l.BUTTON_LEFT || (e.getButton(), l.BUTTON_RIGHT);
                }),
                (r.update = function (e) {}),
                n
              );
            })(p)).moveLine = d.createLineLenDir(new c(), 0)),
            (L.position = new c()),
            (T = n((y = L).prototype, 'mouse', [M], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (f = y))
          ) || f)
        );
        r._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/MouseBlocker.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (o) {
  var e, t, s, n, i;
  return {
    setters: [
      function (o) {
        e = o.inheritsLoose;
      },
      function (o) {
        (t = o.cclegacy), (s = o._decorator), (n = o.Node), (i = o.Component);
      },
    ],
    execute: function () {
      var h;
      t._RF.push({}, '6759f/q5pdJKKx/AsJy9qhk', 'MouseBlocker', void 0);
      var c = s.ccclass;
      s.property,
        o(
          'MouseBlocker',
          c('MouseBlocker')(
            (h = (function (o) {
              function t() {
                return o.apply(this, arguments) || this;
              }
              e(t, o);
              var s = t.prototype;
              return (
                (s.blockMouse = function () {}),
                (s.onLoad = function () {
                  this.node.on(n.EventType.MOUSE_DOWN, this.blockMouse, this),
                    this.node.on(n.EventType.MOUSE_UP, this.blockMouse, this),
                    this.node.on(n.EventType.MOUSE_MOVE, this.blockMouse, this),
                    this.node.on(n.EventType.MOUSE_LEAVE, this.blockMouse, this),
                    this.node.on(n.EventType.MOUSE_ENTER, this.blockMouse, this),
                    this.node.on(n.EventType.MOUSE_WHEEL, this.blockMouse, this),
                    this.node.on(n.EventType.TOUCH_START, this.blockMouse, this),
                    this.node.on(n.EventType.TOUCH_END, this.blockMouse, this),
                    this.node.on(n.EventType.TOUCH_MOVE, this.blockMouse, this),
                    this.node.on(n.EventType.TOUCH_CANCEL, this.blockMouse, this);
                }),
                t
              );
            })(i))
          ) || h
        );
      t._RF.pop();
    },
  };
});

System.register('chunks:///_virtual/NodePools.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (n) {
  var o, e, t, r;
  return {
    setters: [
      function (n) {
        o = n.inheritsLoose;
      },
      function (n) {
        (e = n.cclegacy), (t = n.NodePool), (r = n.instantiate);
      },
    ],
    execute: function () {
      n({
        destroyNodeArrayPooly: function (n) {
          a.destroyNodeArrayPooly(n);
        },
        destroyPooly: function (n) {
          a.destroyPooly(n);
        },
        instantiatePooly: function (n) {
          return a.instantiatePooly(n);
        },
      }),
        e._RF.push({}, '31320HlOCRDn6eRO4jkrUAQ', 'NodePools', void 0);
      n(
        'ArrayGet',
        (function () {
          function n() {}
          return (
            (n.getRandom = function (n) {
              return n[Math.floor(Math.random() * n.length)];
            }),
            n
          );
        })()
      );
      var i = n(
          'NodePoolExtend',
          (function (n) {
            function e() {
              for (var o, e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];
              return ((o = n.call.apply(n, [this].concat(t)) || this).name = ''), o;
            }
            return o(e, n), e;
          })(t)
        ),
        a = n(
          'NodePools',
          (function () {
            function n() {}
            return (
              (n.Instance = function () {
                return n.instance || (n.instance = new n()), n.instance;
              }),
              (n.clonePooly = function (o) {
                for (var e = null, t = n.nodePools, i = 0; i < t.length; i++)
                  if (t[i].size() > 0 && t[i].name == o.name && (e = t[i].get())) return e;
                return (e = r(o));
              }),
              (n.instantiatePooly = function (o) {
                for (var e = null, t = n.nodePools, i = 0; i < t.length; i++)
                  if (t[i].size() > 0 && t[i].name == o.name && (e = t[i].get())) return e;
                return (e = r(o));
              }),
              (n.destroyPooly = function (o) {
                if (null != o && 0 != (null == o ? void 0 : o.isValid)) {
                  for (var e = n.nodePools, t = 0; t < e.length; t++)
                    if (e[t].name == o.name) return e[t].put(o), void (e[t].size() > 100 && e[t].clear());
                  for (var r = 0; r < e.length; r++) if (0 == e[r].size()) return (e[r].name = o.name), void e[r].put(o);
                  var a = new i();
                  (a.name = o.name), a.put(o), e.push(a);
                }
              }),
              (n.destroyNodeArrayPooly = function (n) {
                var o = this;
                n.concat().forEach(function (n) {
                  o.destroyPooly(n);
                });
              }),
              (n.clearAll = function () {
                this.nodePools.forEach(function (n) {
                  n.clear();
                }),
                  (this.nodePools = []);
              }),
              n
            );
          })()
        );
      (a.instance = void 0), (a.nodePools = []), e._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/Particles.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './FrontYard.ts', './NodePools.ts', './Square.ts', './SoundRescourses.ts'],
  function (e) {
    var t, r, i, n, l, a, o, u, p, c, s, f, b;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (r = e.inheritsLoose),
            (i = e.initializerDefineProperty),
            (n = e.assertThisInitialized);
        },
        function (e) {
          (l = e.cclegacy), (a = e._decorator), (o = e.Prefab), (u = e.Vec3), (p = e.Component);
        },
        function (e) {
          c = e.FrontYard;
        },
        function (e) {
          s = e.NodePools;
        },
        function (e) {
          f = e.Square;
        },
        function (e) {
          b = e.sounds;
        },
      ],
      execute: function () {
        var w,
          m,
          h,
          g,
          z,
          S,
          y,
          d,
          R,
          P,
          v,
          L,
          x,
          B,
          W,
          k,
          F,
          J,
          C,
          E,
          T,
          D,
          j,
          I,
          q,
          H,
          N,
          _,
          A,
          Y,
          G,
          M,
          V,
          Z,
          K,
          O,
          Q,
          U,
          X,
          $,
          ee,
          te,
          re,
          ie,
          ne,
          le,
          ae,
          oe,
          ue,
          pe,
          ce,
          se,
          fe,
          be,
          we,
          me,
          he,
          ge,
          ze,
          Se,
          ye,
          de,
          Re,
          Pe,
          ve,
          Le,
          xe,
          Be,
          We,
          ke,
          Fe;
        l._RF.push({}, '231e0c3RANLja/9snTaiZpJ', 'Particles', void 0);
        var Je = a.ccclass,
          Ce = a.property,
          Ee = e(
            'particle',
            (function () {
              function e() {}
              return (
                (e.foodLight = function () {
                  return this.particleRes.foodLight;
                }),
                (e.peaBuff = function () {
                  return this.particleRes.peaBuff;
                }),
                (e.darkBuff = function () {
                  return this.particleRes.darkBuff;
                }),
                (e.prjPeaBuff = function () {
                  return this.particleRes.prjPeaBuff;
                }),
                (e.deadPlant = function () {
                  return this.particleRes.deadPlant;
                }),
                (e.plantHeat = function () {
                  return this.particleRes.plantHeat;
                }),
                (e.plantBurnt = function () {
                  return this.particleRes.plantBurnt;
                }),
                (e.zombieWaterWave = function () {
                  return this.particleRes.zombieWaterWave;
                }),
                (e.plantWaterWave = function () {
                  return this.particleRes.plantWaterWave;
                }),
                (e.zombieIceTrap = function () {
                  return this.particleRes.zombieIceTrap;
                }),
                (e.seaSplash = function () {
                  return this.particleRes.seaSplash;
                }),
                (e.spawnSeaSplash = function (e, t) {
                  var r;
                  b.playSeaSplash();
                  var i = s.instantiatePooly(this.seaSplash());
                  i.parent =
                    null == (r = c.currentLawn) || null == (r = r.node) ? void 0 : r.getChildByName('Lane' + e.toString());
                  var n = t.y - 20,
                    l = f.getSquareWorldPosition(0, 5).x,
                    a = f.getSquareWorldPosition(0, 8, 0.25).x,
                    o = t.x;
                  (o = (o = o < l ? l : o) > a ? a : o), (i.worldPosition = new u(o, n, 0));
                }),
                (e.waterSplash = function () {
                  return this.particleRes.waterSplash;
                }),
                (e.spawnWaterSplash = function (e, t) {
                  b.playWaterSplash();
                  var r = s.instantiatePooly(this.waterSplash());
                  (r.parent = f.getLaneComponent(e).node),
                    (r.scale = new u(0.3, 0.3, 0.3)),
                    r.setSiblingIndex(0),
                    (r.worldPosition = new u(t.x, t.y));
                }),
                (e.spudow = function () {
                  return this.particleRes.spudowExplosion;
                }),
                (e.spudowPrimal = function () {
                  return this.particleRes.spudowExplosionPrimal;
                }),
                (e.explosion = function (e) {
                  return void 0 === e && (e = !0), e ? this.particleRes.cherryExplosion : this.particleRes.explosion;
                }),
                (e.explosionRear = function () {
                  return this.particleRes.explosionRear;
                }),
                (e.plantDirts = function () {
                  return this.particleRes.plantDirts;
                }),
                (e.graveSpawn = function () {
                  return this.particleRes.graveSpawn;
                }),
                (e.dirtSpawn = function () {
                  return this.particleRes.dirtSpawn;
                }),
                (e.PFLightning = function () {
                  return this.particleRes.PFLightning;
                }),
                (e.sandStorm = function () {
                  return this.particleRes.SandStorm;
                }),
                (e.snowStorm = function () {
                  return this.particleRes.SnowStorm;
                }),
                (e.zombieFart = function () {
                  return this.particleRes.zombieFart;
                }),
                (e.zombieChiliBeanStun = function () {
                  return this.particleRes.zombieChiliBeanStun;
                }),
                (e.zombiePerfumeSlow = function () {
                  return this.particleRes.zombiePerfumeSlow;
                }),
                (e.prizeSpawn = function () {
                  return this.particleRes.prizeSpawn;
                }),
                (e.prizeCollectLight = function () {
                  return this.particleRes.prizeCollectLight;
                }),
                e
              );
            })()
          );
        Ee.particleRes = void 0;
        e(
          'tileLiquids',
          (function () {
            function e() {}
            return (
              (e.cranJellyJuice = function () {
                return Ee.particleRes.cranJellyJuice;
              }),
              (e.butterJuice = function () {
                return Ee.particleRes.butterJuice;
              }),
              (e.softLava = function () {
                return Ee.particleRes.softLava;
              }),
              (e.brokenTile = function () {
                return Ee.particleRes.crackle;
              }),
              (e.brokenTileSparkles = function () {
                return Ee.particleRes.crackleSparkles;
              }),
              e
            );
          })()
        ),
          e(
            'groundFireParticles',
            (function () {
              function e() {}
              return (
                (e.getParticleByGFEnum = function (e) {
                  return Ee.particleRes.yellowFire;
                }),
                e
              );
            })()
          ),
          e(
            'Particles',
            ((w = Je('Particles')),
            (m = Ce(o)),
            (h = Ce(o)),
            (g = Ce(o)),
            (z = Ce(o)),
            (S = Ce(o)),
            (y = Ce(o)),
            (d = Ce(o)),
            (R = Ce(o)),
            (P = Ce(o)),
            (v = Ce(o)),
            (L = Ce(o)),
            (x = Ce(o)),
            (B = Ce(o)),
            (W = Ce(o)),
            (k = Ce(o)),
            (F = Ce(o)),
            (J = Ce(o)),
            (C = Ce(o)),
            (E = Ce(o)),
            (T = Ce(o)),
            (D = Ce(o)),
            (j = Ce(o)),
            (I = Ce(o)),
            (q = Ce(o)),
            (H = Ce(o)),
            (N = Ce(o)),
            (_ = Ce(o)),
            (A = Ce(o)),
            (Y = Ce(o)),
            (G = Ce(o)),
            (M = Ce(o)),
            (V = Ce(o)),
            (Z = Ce(o)),
            (K = Ce(o)),
            w(
              ((U = t(
                (Q = (function (e) {
                  function t() {
                    for (var t, r = arguments.length, l = new Array(r), a = 0; a < r; a++) l[a] = arguments[a];
                    return (
                      (t = e.call.apply(e, [this].concat(l)) || this),
                      i(t, 'butterJuice', U, n(t)),
                      i(t, 'cranJellyJuice', X, n(t)),
                      i(t, 'softLava', $, n(t)),
                      i(t, 'crackle', ee, n(t)),
                      i(t, 'crackleSparkles', te, n(t)),
                      i(t, 'peaBuff', re, n(t)),
                      i(t, 'darkBuff', ie, n(t)),
                      i(t, 'foodLight', ne, n(t)),
                      i(t, 'prjPeaBuff', le, n(t)),
                      i(t, 'deadPlant', ae, n(t)),
                      i(t, 'plantHeat', oe, n(t)),
                      i(t, 'plantBurnt', ue, n(t)),
                      i(t, 'seaSplash', pe, n(t)),
                      i(t, 'spudowExplosion', ce, n(t)),
                      i(t, 'spudowExplosionPrimal', se, n(t)),
                      i(t, 'explosion', fe, n(t)),
                      i(t, 'explosionRear', be, n(t)),
                      i(t, 'cherryExplosion', we, n(t)),
                      i(t, 'zombieIceTrap', me, n(t)),
                      i(t, 'waterSplash', he, n(t)),
                      i(t, 'zombieWaterWave', ge, n(t)),
                      i(t, 'plantWaterWave', ze, n(t)),
                      i(t, 'plantDirts', Se, n(t)),
                      i(t, 'graveSpawn', ye, n(t)),
                      i(t, 'dirtSpawn', de, n(t)),
                      i(t, 'yellowFire', Re, n(t)),
                      i(t, 'PFLightning', Pe, n(t)),
                      i(t, 'SandStorm', ve, n(t)),
                      i(t, 'SnowStorm', Le, n(t)),
                      i(t, 'zombieFart', xe, n(t)),
                      i(t, 'zombieChiliBeanStun', Be, n(t)),
                      i(t, 'zombiePerfumeSlow', We, n(t)),
                      i(t, 'prizeSpawn', ke, n(t)),
                      i(t, 'prizeCollectLight', Fe, n(t)),
                      t
                    );
                  }
                  return (
                    r(t, e),
                    (t.prototype.onLoad = function () {
                      Ee.particleRes = this;
                    }),
                    t
                  );
                })(p)).prototype,
                'butterJuice',
                [m],
                {
                  configurable: !0,
                  enumerable: !0,
                  writable: !0,
                  initializer: function () {
                    return null;
                  },
                }
              )),
              (X = t(Q.prototype, 'cranJellyJuice', [h], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              ($ = t(Q.prototype, 'softLava', [g], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (ee = t(Q.prototype, 'crackle', [z], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (te = t(Q.prototype, 'crackleSparkles', [S], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (re = t(Q.prototype, 'peaBuff', [y], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (ie = t(Q.prototype, 'darkBuff', [d], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (ne = t(Q.prototype, 'foodLight', [R], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (le = t(Q.prototype, 'prjPeaBuff', [P], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (ae = t(Q.prototype, 'deadPlant', [v], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (oe = t(Q.prototype, 'plantHeat', [L], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (ue = t(Q.prototype, 'plantBurnt', [x], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (pe = t(Q.prototype, 'seaSplash', [B], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (ce = t(Q.prototype, 'spudowExplosion', [W], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (se = t(Q.prototype, 'spudowExplosionPrimal', [k], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (fe = t(Q.prototype, 'explosion', [F], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (be = t(Q.prototype, 'explosionRear', [J], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (we = t(Q.prototype, 'cherryExplosion', [C], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (me = t(Q.prototype, 'zombieIceTrap', [E], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (he = t(Q.prototype, 'waterSplash', [T], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (ge = t(Q.prototype, 'zombieWaterWave', [D], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (ze = t(Q.prototype, 'plantWaterWave', [j], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (Se = t(Q.prototype, 'plantDirts', [I], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (ye = t(Q.prototype, 'graveSpawn', [q], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (de = t(Q.prototype, 'dirtSpawn', [H], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (Re = t(Q.prototype, 'yellowFire', [N], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (Pe = t(Q.prototype, 'PFLightning', [_], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (ve = t(Q.prototype, 'SandStorm', [A], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (Le = t(Q.prototype, 'SnowStorm', [Y], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (xe = t(Q.prototype, 'zombieFart', [G], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (Be = t(Q.prototype, 'zombieChiliBeanStun', [M], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: null,
              })),
              (We = t(Q.prototype, 'zombiePerfumeSlow', [V], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: null,
              })),
              (ke = t(Q.prototype, 'prizeSpawn', [Z], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (Fe = t(Q.prototype, 'prizeCollectLight', [K], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: null,
              })),
              (O = Q))
            ) || O)
          );
        l._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/ParticleSelfdestroy.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts'],
  function (e) {
    var t, n, o, i, r, s;
    return {
      setters: [
        function (e) {
          t = e.inheritsLoose;
        },
        function (e) {
          (n = e.cclegacy), (o = e._decorator), (i = e.dragonBones), (r = e.Component);
        },
        function (e) {
          s = e.NodePools;
        },
      ],
      execute: function () {
        var c;
        n._RF.push({}, '4c2fccq7FZO2IEkVgOAvEZ1', 'ParticleSelfdestroy', void 0);
        var a = o.ccclass;
        o.property,
          e(
            'ParticleSelfdestroy',
            a('ParticleSelfdestroy')(
              (c = (function (e) {
                function n() {
                  for (var t, n = arguments.length, o = new Array(n), i = 0; i < n; i++) o[i] = arguments[i];
                  return ((t = e.call.apply(e, [this].concat(o)) || this).db = void 0), t;
                }
                t(n, e);
                var o = n.prototype;
                return (
                  (o.selfDestroy = function (e) {
                    'die' == e.name && s.destroyPooly(this.node), this.animationListener(e);
                  }),
                  (o.animationListener = function (e) {}),
                  (o.onLoad = function () {
                    (this.db = this.getComponent(i.ArmatureDisplay)),
                      (this.db.enableBatch = !0),
                      this.db.addEventListener(i.EventObject.FRAME_EVENT, this.selfDestroy, this);
                  }),
                  (o.specialOnEnable = function () {}),
                  (o.onEnable = function () {
                    this.specialOnEnable();
                  }),
                  n
                );
              })(r))
            ) || c
          );
        n._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Pause.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './SoundsController.ts', './UI.ts', './NodePools.ts'],
  function (e) {
    var o, i, t, s, n, r, l, u, c, d, a, p, h, m, S, f, g, M;
    return {
      setters: [
        function (e) {
          (o = e.applyDecoratedDescriptor),
            (i = e.inheritsLoose),
            (t = e.initializerDefineProperty),
            (s = e.assertThisInitialized);
        },
        function (e) {
          (n = e.cclegacy),
            (r = e._decorator),
            (l = e.Slider),
            (u = e.Tween),
            (c = e.director),
            (d = e.Vec3),
            (a = e.Node),
            (p = e.Button),
            (h = e.ProgressBar),
            (m = e.Component);
        },
        function (e) {
          (S = e.MusicController), (f = e.SoundFXController);
        },
        function (e) {
          g = e.UIInGame;
        },
        function (e) {
          M = e.NodePools;
        },
      ],
      execute: function () {
        var y, B, C, E, b, k, N;
        n._RF.push({}, '9d461LCOI9JqbcKNG6Qt3N2', 'Pause', void 0);
        var v = r.ccclass,
          x = r.property;
        e(
          'PauseScreen',
          ((y = v('PauseScreen')),
          (B = x(l)),
          (C = x(l)),
          y(
            ((k = o(
              (b = (function (e) {
                function o() {
                  for (var o, i = arguments.length, n = new Array(i), r = 0; r < i; r++) n[r] = arguments[r];
                  return (
                    (o = e.call.apply(e, [this].concat(n)) || this), t(o, 'musicSlider', k, s(o)), t(o, 'sfxSlider', N, s(o)), o
                  );
                }
                i(o, e);
                var n = o.prototype;
                return (
                  (n.blockMouse = function () {}),
                  (n.exit = function () {
                    g.exit();
                  }),
                  (n.restart = function () {
                    g.uiingame.oldTickReturn(),
                      u.stopAll(),
                      M.clearAll(),
                      c.loadScene('inGameScene', function () {
                        c.isPaused() && c.resume(), u.stopAll();
                      }),
                      u.stopAll();
                  }),
                  (n.resume = function () {
                    var e;
                    null == g || null == (e = g.uiingame) || e.pauseMenu();
                  }),
                  (n.start = function () {
                    (this.node.getChildByName('MainBody').position = new d(0, 1e3, 0)),
                      this.node.getChildByName('MouseBlocker').on(a.EventType.MOUSE_DOWN, this.blockMouse, this),
                      this.node.getChildByName('MouseBlocker').on(a.EventType.MOUSE_ENTER, this.blockMouse, this),
                      this.node.getChildByName('MouseBlocker').on(a.EventType.MOUSE_LEAVE, this.blockMouse, this),
                      this.node.getChildByName('MouseBlocker').on(a.EventType.MOUSE_MOVE, this.blockMouse, this),
                      this.node.getChildByName('MouseBlocker').on(a.EventType.MOUSE_UP, this.blockMouse, this),
                      this.node.getChildByName('MouseBlocker').addComponent(p),
                      (this.musicSlider.progress = S.MusicVolume),
                      (this.sfxSlider.progress = f.SoundFXVolume);
                  }),
                  (n.musicSlide = function () {
                    S.setMusicVolume(this.musicSlider.progress),
                      (this.musicSlider.handle.node.angle = 360 * -this.musicSlider.progress),
                      (this.musicSlider.getComponent(h).progress = S.MusicVolume);
                  }),
                  (n.sfxSlide = function () {
                    f.setSoundFxVolume(this.sfxSlider.progress),
                      (this.sfxSlider.handle.node.angle = 360 * -this.sfxSlider.progress),
                      (this.sfxSlider.getComponent(h).progress = f.SoundFXVolume);
                  }),
                  (n.update = function (e) {
                    (this.musicSlider.getComponent(h).progress = S.MusicVolume),
                      (this.sfxSlider.getComponent(h).progress = f.SoundFXVolume);
                  }),
                  o
                );
              })(m)).prototype,
              'musicSlider',
              [B],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (N = o(b.prototype, 'sfxSlider', [C], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (E = b))
          ) || E)
        );
        n._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/PeaPod.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Peashooter.ts', './peaShooterSound.ts'],
  function (t) {
    var o, n, e, a, i, h, s, r, l, d;
    return {
      setters: [
        function (t) {
          (o = t.applyDecoratedDescriptor),
            (n = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (a = t.assertThisInitialized),
            (i = t.createClass);
        },
        function (t) {
          (h = t.cclegacy), (s = t._decorator), (r = t.Prefab);
        },
        function (t) {
          l = t.PeashooterPlant;
        },
        function (t) {
          d = t.peaShooterSound;
        },
      ],
      execute: function () {
        var u, p, c, m, S;
        h._RF.push({}, '14255L3cwtLGojVLkpzxzcd', 'PeaPod', void 0);
        var C = s.ccclass,
          f = s.property;
        t(
          'PeaPodPlant',
          ((u = C('PeaPodPlant')),
          (p = f(r)),
          u(
            ((S = o(
              (m = (function (t) {
                function o() {
                  for (var o, n = arguments.length, i = new Array(n), h = 0; h < n; h++) i[h] = arguments[h];
                  return (
                    (o = t.call.apply(t, [this].concat(i)) || this),
                    e(o, 'peaMega', S, a(o)),
                    (o.headSlots = []),
                    (o.headBones = []),
                    (o._haveHeadCount = 1),
                    o
                  );
                }
                n(o, t);
                var h = o.prototype;
                return (
                  (h.animationListener = function (t) {
                    'Shoot0' == t.name
                      ? this.headCount > 0 && (this._shoot(), this.getComponent(d).playShootSound())
                      : 'Shoot1' == t.name
                      ? this.headCount > 1 && (this._shoot(), this.getComponent(d).playShootSound())
                      : 'Shoot2' == t.name
                      ? this.headCount > 2 && (this._shoot(), this.getComponent(d).playShootSound())
                      : 'Shoot3' == t.name
                      ? this.headCount > 3 && (this._shoot(), this.getComponent(d).playShootSound())
                      : 'Shoot4' == t.name
                      ? this.headCount > 4 && (this._shoot(), this.getComponent(d).playShootSound())
                      : 'ShootMega' == t.name
                      ? (this._shoot(!1, !1, this.peaMega), this.getComponent(d).playShootMegaPeapod())
                      : 'toFoodShoot' == t.name
                      ? (this.anmControl.playAnimation('FoodShoot', 5),
                        (this.anmControl.IdleAnim = 'FoodEnd'),
                        (this.anmControl.RandomAnim = []))
                      : 'foodEnd' == t.name
                      ? (this.foodEnd(), (this.anmControl.IdleAnim = 'Idle'), (this.anmControl.RandomAnim = []))
                      : 'foodEndSound' == t.name && this.getComponent(d).playFoodEnd();
                  }),
                  (h.specialPlantOnEnable = function () {
                    var t = this;
                    this.initialize();
                    var o = this.anmControl.body.armature();
                    (this.headSlots = []),
                      [0, 1, 2, 3, 4].forEach(function (n) {
                        t.headSlots.push(o.getSlot('HEAD' + n.toString())), t.headBones.push(o.getBone('HEAD' + n.toString()));
                      }),
                      (this.headCount = 1);
                  }),
                  (h.specialPlantFood = function (t) {
                    this.anmControl.playAnimation('FoodStart', 2), this.getComponent(d).playFood();
                  }),
                  (h.specialPlantFoodEnd = function () {
                    this.busy = 0;
                  }),
                  (h.plantCount = function () {
                    return this.headCount;
                  }),
                  (h.replantable = function () {
                    return this.headCount < 5;
                  }),
                  (h.replant = function () {
                    this.headCount++;
                  }),
                  (h.specialPeashooterUpdate = function (t) {}),
                  i(o, [
                    {
                      key: 'headCount',
                      get: function () {
                        return this._haveHeadCount;
                      },
                      set: function (t) {
                        var o;
                        t > 5 && (t = 5),
                          t < 1 && (t = 1),
                          this.headSlots.forEach(function (o, n) {
                            var e = -1;
                            n < t && (e = 0), (o.displayIndex = e);
                          }),
                          (this._haveHeadCount = t),
                          (this.health = this.toughness),
                          null == (o = this.inLnC) || o.readIndex();
                      },
                    },
                  ]),
                  o
                );
              })(l)).prototype,
              'peaMega',
              [p],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (c = m))
          ) || c)
        );
        h._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Peashooter.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './Character.ts',
    './ProjectileManager.ts',
    './CharacterManager.ts',
    './NodePools.ts',
    './commonShot.ts',
    './peaShooterSound.ts',
    './Square.ts',
    './Plants.ts',
  ],
  function (t) {
    var o, n, e, i, a, r, s, h, u, l, c, d, f, p, g, m, P, y, b, S, v;
    return {
      setters: [
        function (t) {
          (o = t.applyDecoratedDescriptor),
            (n = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (i = t.assertThisInitialized),
            (a = t.createClass);
        },
        function (t) {
          (r = t.cclegacy), (s = t._decorator), (h = t.Prefab), (u = t.Node), (l = t.Vec2), (c = t.Vec3), (d = t.tween);
        },
        function (t) {
          f = t.Plant;
        },
        function (t) {
          p = t.CharacterType;
        },
        function (t) {
          g = t.projectile;
        },
        function (t) {
          m = t.Rectangle;
        },
        function (t) {
          P = t.NodePools;
        },
        function (t) {
          y = t.commonShot;
        },
        function (t) {
          b = t.peaShooterSound;
        },
        function (t) {
          S = t.Square;
        },
        function (t) {
          v = t.PlantEnum;
        },
      ],
      execute: function () {
        var C, w, L, M, z, I, _, x, F, R, D, j, E;
        r._RF.push({}, 'f5589tQxwBJ46m8vhGguza6', 'Peashooter', void 0);
        var G = s.ccclass,
          A = s.property,
          N = t(
            'peaShooter',
            (function () {
              function t() {}
              return (
                (t.shootOnePea = function (t, o, n, e, i, a) {
                  t.parent = e;
                  var r = t.getComponent(y);
                  return (
                    (r.height = n),
                    (r.worldPosition = new l(o.x, o.y)),
                    (r.linearVelocity = i),
                    (r.bodyLinearVelocity = 0),
                    (r.gravity = 0),
                    g.registerProjectile(t, a),
                    r
                  );
                }),
                t
              );
            })()
          );
        t(
          'PeashooterPlant',
          ((C = G('PeashooterPlant')),
          (w = A({ type: Number, min: 0 })),
          (L = A(h)),
          (M = A({ type: Number, max: 100, min: 0 })),
          (z = A(Number)),
          (I = A(u)),
          C(
            ((F = o(
              (x = (function (t) {
                function o() {
                  for (var o, n = arguments.length, a = new Array(n), r = 0; r < n; r++) a[r] = arguments[r];
                  return (
                    ((o = t.call.apply(t, [this].concat(a)) || this).minShootInterval = 1.1),
                    e(o, 'foodPeaMaxCount', F, i(o)),
                    (o._foodLeftPeaCount = 0),
                    (o.upgraded = !1),
                    e(o, 'pea', R, i(o)),
                    e(o, 'gatlingFoodRate', D, i(o)),
                    (o.detector = null),
                    (o.projectileSpeed = 1),
                    e(o, 'shootInterval', j, i(o)),
                    e(o, 'peaSpawnpoint', E, i(o)),
                    (o.busy = 0),
                    (o.shooting = !1),
                    o
                  );
                }
                n(o, t);
                var r = o.prototype;
                return (
                  (r.onFoodLeftPeaCountDec = function () {
                    this._shoot(!0, !0);
                  }),
                  (r.isGatling = function () {
                    return this.ID == v.MegaGatlingPea || this.ID == v.GatlingPea;
                  }),
                  (r._shoot = function (t, o, n, e, i, a) {
                    void 0 === t && (t = !1),
                      void 0 === o && (o = !1),
                      void 0 === n && (n = this.defaultPea),
                      void 0 === e && (e = 15),
                      void 0 === i && (i = new l(1, 0)),
                      void 0 === a && (a = this.peaSpawnpoint),
                      a || (a = this.peaSpawnpoint);
                    var r = P.instantiatePooly(n);
                    if (r) {
                      var s = 0;
                      t && (s = Math.pow(-1, Math.round(Math.random())) * Math.round(3 * Math.random()) * 5);
                      var h = 0;
                      o && (h = Math.round(5 * Math.random()));
                      var u = N.shootOnePea(
                        r,
                        new c(a.worldPosition.x, this.inLnC.plantPoint.worldPosition.y, 0),
                        Math.max(1, a.worldPosition.y - this.inLnC.plantPoint.worldPosition.y + s),
                        this.inLane.node,
                        i.normalize().multiplyScalar((e + h) * (o ? 1 : this.projectileSpeed)),
                        p.zombie
                      ).getComponent(y);
                      return this.shotInitialize(u), this.inLnC.havePeaBuff && u.addPeaBuff(), u;
                    }
                  }),
                  (r.shotInitialize = function (t) {}),
                  (r.upgrade = function () {
                    this.upgraded ||
                      ((this.upgraded = !0),
                      (this.anmControl.body.armature().getSlot('helmet').displayIndex = 1),
                      (this.anmControl.body.armature().getSlot('gunTube').displayIndex = 1));
                  }),
                  (r.specialPlantFoodEnd = function () {
                    this.anmControl.playRandom(), (this.busy = 0), this.getComponent(b).playFoodEnd();
                  }),
                  (r.foodShooting = function () {
                    var t = this;
                    this._foodLeftPeaCount = this.foodPeaMaxCount;
                    d(this)
                      .to(2, { foodLeftPeaCount: 0 })
                      .call(function () {
                        t.foodEnd();
                      })
                      .start();
                  }),
                  (r.specialPlantFood = function (t) {
                    this.isGatling() && this.upgrade(),
                      this.anmControl.playAnimation('Food', 1 / 0),
                      this.getComponent(b).playFood(),
                      (this.busy = 1 / 0),
                      this.foodShooting();
                  }),
                  (r.waterable = function () {
                    return !this.shooting;
                  }),
                  (r._shootPeaAnimation = function () {
                    var t = Math.random();
                    this.isGatling() && t <= this.gatlingFoodRate / 100
                      ? this.food()
                      : this.anmControl.playAnimation('Shoot', 1, 0.1, Math.max(this.minShootInterval / this.shootInterval, 1));
                  }),
                  (r.animationListenerAdd = function (t) {}),
                  (r.animationListener = function (t) {
                    'Shoot' == t.name || (this.upgraded && 'Shoot5' == t.name)
                      ? this._shoot()
                      : 'ShootSound' == t.name &&
                        (this.upgraded
                          ? this.getComponent(b).playShoot5Sound(this.isGatling() ? 0.3 : 1)
                          : this.getComponent(b).playShootSound(this.isGatling() ? 0.3 : 1)),
                      this.animationListenerAdd(t);
                  }),
                  (r.setDetecter = function (t, o) {
                    this.detector = m.createRectangleNodeSide(o.node, S.SquareDisW * (9 - o.cIndex), S.SquareDisH);
                  }),
                  (r.initialize = function () {
                    (this.upgraded = !1), (this.busy = 0), (this.projectileSpeed = this.isGatling() ? 1.7 : 1);
                  }),
                  (r.animationOnComplete = function () {
                    this.shooting = !1;
                  }),
                  (r.specialPlantOnSquareChange = function (t, o) {
                    this.setDetecter(t, o);
                  }),
                  (r.specialPlantOnEnable = function () {
                    this.initialize(), this.specialPeashooterOnEnable();
                  }),
                  (r.startShooting = function () {
                    this.shooting = !0;
                    var t = 0.15 * Math.random() * (this.shootInterval / 1.35);
                    (this.busy = 60 * (this.shootInterval + t)), this._shootPeaAnimation();
                  }),
                  (r.detectEnemy = function () {
                    for (var t = this.inLane.zombiePool(), o = 0; o < t.length; o++)
                      if (this.detector.judgeCrossRec(t[o].bodyRec)) return !0;
                    for (var n = this.inLane.tombPool(), e = 0; e < n.length; e++)
                      if (this.detector.judgeCrossRec(n[e].bodyRec)) return !0;
                    return !1;
                  }),
                  (r.specialPeashooterOnEnable = function () {}),
                  (r.specialPeashooterUpdate = function (t) {}),
                  (r.specialPlantUpdate = function (t) {
                    this.busy > 0 && (this.busy -= 60 * t),
                      this.busy <= 0 &&
                        !this.dead &&
                        !this.fooding &&
                        ((this.busy = 0), this.detectEnemy() && this.startShooting()),
                      this.specialPeashooterUpdate(t);
                  }),
                  a(o, [
                    {
                      key: 'foodLeftPeaCount',
                      get: function () {
                        return this._foodLeftPeaCount;
                      },
                      set: function (t) {
                        for (var o = Math.floor(this._foodLeftPeaCount) - Math.floor(t), n = 0; n < o; n++)
                          this.onFoodLeftPeaCountDec();
                        this._foodLeftPeaCount = t;
                      },
                    },
                    {
                      key: 'defaultPea',
                      get: function () {
                        return this.pea;
                      },
                    },
                  ]),
                  o
                );
              })(f)).prototype,
              'foodPeaMaxCount',
              [w],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 60;
                },
              }
            )),
            (R = o(x.prototype, 'pea', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (D = o(x.prototype, 'gatlingFoodRate', [M], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 2;
              },
            })),
            (j = o(x.prototype, 'shootInterval', [z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 1.35;
              },
            })),
            (E = o(x.prototype, 'peaSpawnpoint', [I], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (_ = x))
          ) || _)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/peaShooterSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './plantSound.ts', './SoundRescourses.ts'],
  function (o) {
    var e, t, n, i, u, r, a, l, s, d;
    return {
      setters: [
        function (o) {
          (e = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (n = o.initializerDefineProperty),
            (i = o.assertThisInitialized);
        },
        function (o) {
          (u = o.cclegacy), (r = o._decorator), (a = o.AudioClip);
        },
        function (o) {
          l = o.ArrayGet;
        },
        function (o) {
          s = o.plantSound;
        },
        function (o) {
          d = o.sounds;
        },
      ],
      execute: function () {
        var p, c, h, S, f, y, g, b, m, v, z, M, w, F, O, A, E;
        u._RF.push({}, '0ed2aNs1hBHHqmFsJqg442o', 'peaShooterSound', void 0);
        var P = r.ccclass,
          R = r.property;
        o(
          'peaShooterSound',
          ((p = P('peaShooterSound')),
          (c = R(a)),
          (h = R(a)),
          (S = R([a])),
          (f = R(a)),
          (y = R(a)),
          (g = R(a)),
          (b = R([a])),
          p(
            ((z = e(
              (v = (function (o) {
                function e() {
                  for (var e, t = arguments.length, u = new Array(t), r = 0; r < t; r++) u[r] = arguments[r];
                  return (
                    (e = o.call.apply(o, [this].concat(u)) || this),
                    n(e, 'foodSound', z, i(e)),
                    n(e, 'foodEndSound', M, i(e)),
                    n(e, 'shootSound', w, i(e)),
                    n(e, 'shoot5Sound', F, i(e)),
                    n(e, 'shootMegaSound', O, i(e)),
                    (e.volumeScale = 1),
                    n(e, 'upgradeSound', A, i(e)),
                    n(e, 'shootMegaSounds', E, i(e)),
                    e
                  );
                }
                t(e, o);
                var u = e.prototype;
                return (
                  (u.playUpgrade = function () {
                    this.playOneShot(this.upgradeSound, this.volumeScale);
                  }),
                  (u.playFood = function () {
                    this.playOneShot(this.foodSound, this.volumeScale);
                  }),
                  (u.playFoodEnd = function () {
                    this.playOneShot(this.foodEndSound, this.volumeScale);
                  }),
                  (u.playShootSound = function (o) {
                    void 0 === o && (o = 1), d.play(l.getRandom(this.shootSound), o * this.volumeScale, 0.1);
                  }),
                  (u.playShoot5Sound = function (o) {
                    void 0 === o && (o = 1), d.play(this.shoot5Sound, this.volumeScale * o);
                  }),
                  (u.playShootMega = function () {
                    this.playOneShot(this.shootMegaSound, this.volumeScale);
                  }),
                  (u.playShootMegaPeapod = function () {
                    this.playOneShotFromArray(this.shootMegaSounds, this.volumeScale);
                  }),
                  e
                );
              })(s)).prototype,
              'foodSound',
              [c],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (M = e(v.prototype, 'foodEndSound', [h], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (w = e(v.prototype, 'shootSound', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (F = e(v.prototype, 'shoot5Sound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (O = e(v.prototype, 'shootMegaSound', [y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (A = e(v.prototype, 'upgradeSound', [g], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (E = e(v.prototype, 'shootMegaSounds', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (m = v))
          ) || m)
        );
        u._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/PeaVine.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc', './Peashooter.ts'], function (e) {
  var t, n, a, i;
  return {
    setters: [
      function (e) {
        t = e.inheritsLoose;
      },
      function (e) {
        (n = e.cclegacy), (a = e._decorator);
      },
      function (e) {
        i = e.PeashooterPlant;
      },
    ],
    execute: function () {
      var r;
      n._RF.push({}, '791bdit6+hBd5l2f2ZtvXkZ', 'PeaVine', void 0);
      var o = a.ccclass;
      a.property,
        e(
          'PeaVinePlant',
          o('PeaVinePlant')(
            (r = (function (e) {
              function n() {
                return e.apply(this, arguments) || this;
              }
              t(n, e);
              var a = n.prototype;
              return (
                (a.specialPlantOnSquareChange = function (e, t) {
                  this.setDetecter(e, t), e.addBuff('peaBuff', !1), t.addBuff('peaBuff');
                }),
                (a.specialPlantDie = function () {
                  this.inLnC.addBuff('peaBuff', !1);
                }),
                n
              );
            })(i))
          ) || r
        );
      n._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/PirateBarrelPusherZombie.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Zombie.ts', './PirateBarrelZombie.ts', './Zombies.ts'],
  function (e) {
    var r, t, i, l, n, a, o, s, u, b, c, h, d;
    return {
      setters: [
        function (e) {
          (r = e.applyDecoratedDescriptor),
            (t = e.inheritsLoose),
            (i = e.initializerDefineProperty),
            (l = e.assertThisInitialized),
            (n = e.createClass);
        },
        function (e) {
          (a = e.cclegacy), (o = e._decorator), (s = e.Node), (u = e.Vec2);
        },
        function (e) {
          b = e.Zombie;
        },
        function (e) {
          c = e.PirateBarrelZombie;
        },
        function (e) {
          (h = e.zombies), (d = e.ZombieEnum);
        },
      ],
      execute: function () {
        var p, m, f, y, P;
        a._RF.push({}, '62094xn7ndNQrsIS13oRF/l', 'PirateBarrelPusherZombie', void 0);
        var S = o.ccclass,
          Z = o.property;
        e(
          'PirateBarrelPusherZombie',
          ((p = S('PirateBarrelPusherZombie')),
          (m = Z(s)),
          p(
            ((P = r(
              (y = (function (e) {
                function r() {
                  for (var r, t = arguments.length, n = new Array(t), a = 0; a < t; a++) n[a] = arguments[a];
                  return (r = e.call.apply(e, [this].concat(n)) || this), i(r, 'barrelSlot', P, l(r)), (r._barrel = null), r;
                }
                t(r, e);
                var a = r.prototype;
                return (
                  (a.specialZombieOnEnable = function () {
                    this.barrel = null;
                  }),
                  (a.onKnockBackStart = function () {
                    this.barrel && (this.barrel.pusher = null);
                  }),
                  (a.playSpecialZombieDieForced = function () {
                    this.barrel && (this.barrel.pusher = null);
                  }),
                  (a.shouldSpeedScale = function () {
                    var e = 1;
                    return this.barrel && this.barrel.freeze > 0 && (e = 0.5), e * this.defaultShouldSpeedScale();
                  }),
                  (a.additionalZombies = function () {
                    var e = h.getZombie(d.pirate_barrel),
                      r = e.getComponent(c);
                    return (
                      (e.parent = this.node.parent),
                      e.setSiblingIndex(this.node.getSiblingIndex()),
                      r && (this.barrel = r),
                      r ? [r] : []
                    );
                  }),
                  n(r, [
                    {
                      key: 'barrel',
                      get: function () {
                        return this._barrel;
                      },
                      set: function (e) {
                        this.barrel != e &&
                          (e
                            ? ((e.worldPosition = new u(this.barrelSlot.worldPosition.x, this._worldPositionY)),
                              (e.pusher = this),
                              (this.body.IdleAnm = 'Idle_Barrel'),
                              (this.body.WalkAnm = 'Walk_Barrel'),
                              (this.body.EatAnm = 'Eat_Barrel'))
                            : ((this.body.IdleAnm = 'Idle'), (this.body.WalkAnm = 'Walk'), (this.body.EatAnm = 'Eat')),
                          (this._barrel = e),
                          (this.isAlive() || this.displayed) && this.replayAnimation());
                      },
                    },
                  ]),
                  r
                );
              })(b)).prototype,
              'barrelSlot',
              [m],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (f = y))
          ) || f)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/PirateBarrelZombie.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Zombie.ts', './GargantuarZombie.ts', './Zombies.ts'],
  function (e) {
    var t, i, n, s, r, o, a, h;
    return {
      setters: [
        function (e) {
          (t = e.inheritsLoose), (i = e.createClass);
        },
        function (e) {
          (n = e.cclegacy), (s = e._decorator), (r = e.Vec2);
        },
        function (e) {
          o = e.Zombie;
        },
        function (e) {
          a = e.gargantuar;
        },
        function (e) {
          h = e.ZombieEnum;
        },
      ],
      execute: function () {
        var l;
        n._RF.push({}, '3127dv2H/FEnYvJqUlnoqYE', 'PirateBarrelZombie', void 0);
        var u = s.ccclass;
        s.property,
          e(
            'PirateBarrelZombie',
            u('PirateBarrelZombie')(
              (l = (function (e) {
                function n() {
                  for (var t, i = arguments.length, n = new Array(i), s = 0; s < i; s++) n[s] = arguments[s];
                  return (
                    ((t = e.call.apply(e, [this].concat(n)) || this).faceSlot = void 0),
                    (t._pusher = null),
                    (t.lifeSpan = 10),
                    (t.deathCD = 10),
                    t
                  );
                }
                t(n, e);
                var s = n.prototype;
                return (
                  (s.playSpecialZombieDie = function (e) {
                    this.judgeDeath(0),
                      [
                        a.throwOneImpByLnC(
                          h.pirate_imp,
                          this.inLane,
                          this.worldPosition,
                          new r(-1, 0 == this.lIndex ? 0 : 1),
                          1,
                          20,
                          0.5
                        ),
                        a.throwOneImpByLnC(
                          h.pirate_imp,
                          this.inLane,
                          this.worldPosition,
                          new r(-1, 4 == this.lIndex ? 0 : -1),
                          1,
                          20,
                          0.5
                        ),
                      ].forEach(function (e) {
                        e.body.playAnimation('Fly', 1 / 0);
                      });
                  }),
                  (s.setChiliStun = function (e) {
                    return !1;
                  }),
                  (s.playSpecialZombieDieForced = function () {
                    this.pusher = null;
                  }),
                  (s.specialZombieOnEnable = function () {
                    var e;
                    (this.deathCD = this.lifeSpan), (this.pusher = null), null == (e = this.faceSlot) || e._setDisplayIndex(0);
                  }),
                  (s.specialZombieOnLoad = function () {
                    var e;
                    this.faceSlot = null == (e = this.db.armature()) ? void 0 : e.getSlot('face');
                  }),
                  (s.onDamaged = function (e, t) {
                    var i;
                    null == (i = this.faceSlot) || i._setDisplayIndex(2 - Math.floor((3 * t) / this.toughness));
                  }),
                  (s.onKnockBackStart = function () {
                    this.pusher = null;
                  }),
                  (s.shouldSpeedScale = function () {
                    return this._pusher
                      ? this.pusher.shouldSpeedScale() * (this.pusher.walking ? 1 : 0)
                      : this.defaultShouldSpeedScale();
                  }),
                  (s.specialZombieUpdate = function (e) {
                    this._pusher
                      ? ((this.randomSpeed = this._pusher.randomSpeed),
                        (this.worldPositionX = this.pusher.barrelSlot.worldPosition.x))
                      : ((this.randomSpeed = 0), this.deathCD > 0 && ((this.deathCD -= e), this.deathCD <= 0 && this.playDie()));
                  }),
                  (s.detectPlant = function (e) {
                    var t = this;
                    this.pusher &&
                      this.inLane.plantPool().forEach(function (e) {
                        t.bodyRec.judgeCrossRec(e.bodyRec) && e.smash(t, !1);
                      });
                  }),
                  (s.lobberTarget = function () {
                    return this.pusher ? this.pusher : this;
                  }),
                  i(n, [
                    {
                      key: 'pusher',
                      get: function () {
                        return this._pusher;
                      },
                      set: function (e) {
                        this.pusher && this.pusher != e && (this.pusher.barrel = null),
                          null != e ? (this._pusher = e) : ((this._pusher = null), (this.randomSpeed = 0));
                      },
                    },
                  ]),
                  n
                );
              })(o))
            ) || l
          );
        n._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/PirateCaptainParrotZombie.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Zombie.ts',
    './Plant.ts',
    './NodePools.ts',
    './Square.ts',
    './SoundRescourses.ts',
    './CharacterManager.ts',
  ],
  function (t) {
    var i, e, n, o, a, l, r, s, h, u, c, d, p, g, P, f;
    return {
      setters: [
        function (t) {
          (i = t.applyDecoratedDescriptor),
            (e = t.inheritsLoose),
            (n = t.initializerDefineProperty),
            (o = t.assertThisInitialized);
        },
        function (t) {
          (a = t.cclegacy), (l = t._decorator), (r = t.AudioClip), (s = t.Vec2), (h = t.Vec3);
        },
        function (t) {
          u = t.Zombie;
        },
        function (t) {
          c = t.PlantType;
        },
        function (t) {
          (d = t.NodePools), (p = t.ArrayGet);
        },
        function (t) {
          g = t.Square;
        },
        function (t) {
          P = t.sounds;
        },
        function (t) {
          f = t.PlantPool;
        },
      ],
      execute: function () {
        var v, w, y, b, m;
        a._RF.push({}, 'b1388sOiqVNAo9pYaZUS1g8', 'PirateCaptainParrotZombie', void 0);
        var _ = l.ccclass,
          C = l.property,
          S = t(
            'parrotCapture',
            (function () {
              function t() {}
              return (
                (t.judgePlantCapturable = function (t) {
                  if (t)
                    return !t.dead && !t.short_ && t.eaterDetectable && !t.fooding && t.plantType == c.plant && !t.invincible;
                }),
                (t.getRandomPlantCapturable = function () {
                  for (
                    var t,
                      i = this,
                      e = [0, 1, 2, 3, 4],
                      n = function () {
                        var t = p.getRandom(e);
                        e.splice(e.indexOf(t), 1);
                        for (var n = g.getLaneComponent(t).plantPool(), o = [], a = 0; a < n.length; a++)
                          i.judgePlantCapturable(n[a]) && o.push(n[a]);
                        if (o.length > 0) {
                          var l = o[0];
                          return (
                            o.forEach(function (t) {
                              t._worldPositionX > l._worldPositionX && (l = t);
                            }),
                            { v: l }
                          );
                        }
                      };
                    e.length > 0;

                  )
                    if ((t = n())) return t.v;
                  return null;
                }),
                (t.judgeHaveCapturablePlant = function () {
                  for (var t = f.pool().concat(), i = 0; i < t.length; i++) if (this.judgePlantCapturable(t[i])) return !0;
                  return !1;
                }),
                t
              );
            })()
          );
        t(
          'PirateCaptainParrotZombie',
          ((v = _('PirateCaptainParrotZombie')),
          (w = C(r)),
          v(
            ((m = i(
              (b = (function (t) {
                function i() {
                  for (var i, e = arguments.length, a = new Array(e), l = 0; l < e; l++) a[l] = arguments[l];
                  return (
                    (i = t.call.apply(t, [this].concat(a)) || this),
                    n(i, 'captureSound', m, o(i)),
                    (i.orgHeight = 60),
                    (i.flyingSpeed = 100),
                    (i.targetPlant = void 0),
                    (i.captain = void 0),
                    (i.followedPlant = null),
                    (i.captureCD = 0),
                    (i.captured = !1),
                    (i._vx = 0),
                    (i._vy = 0),
                    (i.fleeing = !1),
                    i
                  );
                }
                e(i, t);
                var a = i.prototype;
                return (
                  (a.playSpecialZombieDie = function (t) {
                    this.judgeDeath(0);
                  }),
                  (a.detectPlantOn = function () {
                    return !1;
                  }),
                  (a.playWalk = function (t) {}),
                  (a.specialZombieOnEnable = function () {
                    (this.followedPlant = null),
                      (this.captain = null),
                      (this.fleeing = !1),
                      (this.captured = !1),
                      (this.switching = !0),
                      this.playIdle(),
                      (this.height = this.orgHeight);
                  }),
                  (a.onLaneSpawnSettled = function (t) {
                    this.height = this.orgHeight;
                  }),
                  (a.onPutDirectly = function (t) {
                    (this.height = this.orgHeight), (this.targetPlant = S.getRandomPlantCapturable());
                  }),
                  (a.onDirtSpawned = function (t) {
                    this.height = this.orgHeight;
                  }),
                  (a.playSpecialZombieDieForced = function () {
                    this.followedPlant && (this.followedPlant.node.destroy(), (this.followedPlant = null));
                  }),
                  (a.specialZombieUpdate = function (t) {
                    var i, e, n;
                    (S.judgePlantCapturable(this.targetPlant) || ((this.targetPlant = null), (this.captured = !1)),
                    (null != (i = this.captain) && i.isAlive()) || (this.captain = null),
                    this.fleeing)
                      ? ((this.height += 300 * t),
                        null != (e = this.followedPlant) &&
                          e.isValid &&
                          (this.followedPlant.height = this.height - this.orgHeight),
                        this.height > 2100 &&
                          (this.followedPlant && (this.followedPlant.node.destroy(), (this.followedPlant = null)),
                          null != (n = this.captain) && n.isAlive()
                            ? ((this.fleeing = !1),
                              (this.height = this.orgHeight),
                              (this.worldPositionX = g.getSquareWorldPosition(0, 8).x + 2 * g.SquareDisW),
                              (this.worldPositionY = this.captain.worldPositionY),
                              (this.targetPlant = null))
                            : (this.playDie(!0), d.destroyPooly(this.node))))
                      : this.targetPlant
                      ? this.captured
                        ? ((this._vx = 0), (this._vy = 0))
                        : (this.moveTo(this.targetPlant, t),
                          this.targetPlant.worldPosition.clone().add(this.worldPosition.clone().negative()).length() <= 6 &&
                            ((this.captured = !0), P.play(this.captureSound), (this.captureCD = 5)))
                      : this.captain
                      ? (this.moveTo(this.captain, t),
                        this.captain.worldPosition.clone().add(this.worldPosition.clone().negative()).length() <= 6 &&
                          this.captain.returnParrot(this))
                      : ((this.fleeing = !0), (this._vx = 0), (this._vy = 0));
                    this.captured &&
                      (this.targetPlant.worldPosition.clone().add(this.worldPosition.clone().negative()).length() > 6 &&
                        (this.captured = !1),
                      (this.captureCD -= t),
                      this.captureCD <= 0 &&
                        ((this.fleeing = !0),
                        this.targetPlant &&
                          (this.targetPlant.die(!1),
                          (this.followedPlant = this.targetPlant),
                          this.targetPlant.anmControl.setTimeScale(0),
                          (this.targetPlant = null))));
                  }),
                  (a.onButtered = function (t) {
                    this.playDie();
                  }),
                  (a.specialDisblowable = function () {
                    return this.fleeing;
                  }),
                  (a.currentFarBodyRec = function () {
                    return this.fleeing;
                  }),
                  (a.lobberToPos = function (t) {
                    return new s(this.worldPositionX + this._vx * t * 2, this.worldPositionY + this._vy * t * 2);
                  }),
                  (a.moveTo = function (t, i) {
                    var e = new s(t._worldPositionX - this._worldPositionX, t._worldPositionY - this._worldPositionY)
                      .normalize()
                      .multiplyScalar(this.flyingSpeed * i);
                    (this._vx = e.x), (this._vy = e.y);
                    var n = 1;
                    e.x > 0 && (n = -1);
                    var o = this.body.node.scale.clone();
                    (this.body.node.scale = new h(Math.abs(o.x) * n, o.y, o.z)),
                      (this.worldPosition = this.worldPosition.clone().add(e));
                  }),
                  i
                );
              })(u)).prototype,
              'captureSound',
              [w],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (y = b))
          ) || y)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/PirateCaptainZombie.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Zombie.ts', './NodePools.ts', './Zombies.ts', './PirateCaptainParrotZombie.ts'],
  function (t) {
    var o, a, r, e, i, n, s, l, h;
    return {
      setters: [
        function (t) {
          o = t.inheritsLoose;
        },
        function (t) {
          (a = t.cclegacy), (r = t._decorator);
        },
        function (t) {
          e = t.Zombie;
        },
        function (t) {
          i = t.NodePools;
        },
        function (t) {
          (n = t.zombies), (s = t.ZombieEnum);
        },
        function (t) {
          (l = t.PirateCaptainParrotZombie), (h = t.parrotCapture);
        },
      ],
      execute: function () {
        var d;
        a._RF.push({}, '4d566STzN1PH4DfXdxb2aT9', 'PirateCaptainZombie', void 0);
        var c = r.ccclass;
        r.property,
          t(
            'PirateCaptainZombie',
            c('PirateCaptainZombie')(
              (d = (function (t) {
                function a() {
                  for (var o, a = arguments.length, r = new Array(a), e = 0; e < a; e++) r[e] = arguments[e];
                  return (
                    ((o = t.call.apply(t, [this].concat(r)) || this).haveParrot = !0),
                    (o.parrotHealth = 300),
                    (o.parrotCooldown = 7),
                    (o.parrotRetryCooldown = 1),
                    (o._cd = 0),
                    (o.oldGroanSound = []),
                    o
                  );
                }
                o(a, t);
                var r = a.prototype;
                return (
                  (r.specialZombieOnLoad = function () {
                    this.oldGroanSound = this.groanSound;
                  }),
                  (r.playSpecialZombieDie = function (t) {
                    this.judgeDeath();
                  }),
                  (r.specialZombieOnEnable = function () {
                    (this.haveParrot = !0),
                      (this.parrotHealth = 300),
                      (this.groanSound = this.oldGroanSound),
                      (this._cd = this.parrotCooldown);
                  }),
                  (r.createParrot = function () {
                    var t = n.createZombie(this.lIndex, s.pirate_parrot);
                    if (t) {
                      var o;
                      null == (o = this.body.body.armature().getSlot('Parrot_HEAD')) || o._setDisplayIndex(-1);
                      var a = t.getComponent(l);
                      return (
                        (a.worldPosition = this.worldPosition),
                        (a.captain = this),
                        (this.haveParrot = !1),
                        (this.groanSound = []),
                        (a.health = this.parrotHealth),
                        (a.targetPlant = h.getRandomPlantCapturable()),
                        a
                      );
                    }
                  }),
                  (r.returnParrot = function (t) {
                    var o;
                    (this.groanSound = this.oldGroanSound),
                      (this.haveParrot = !0),
                      (this.parrotHealth = t.health),
                      null == (o = this.body.body.armature().getSlot('Parrot_HEAD')) || o._setDisplayIndex(0),
                      (this._cd = this.parrotCooldown),
                      t.playDie(!0),
                      i.destroyPooly(t.node);
                  }),
                  (r.specialZombieUpdate = function (t) {
                    this.haveParrot &&
                      (this._cd > 0 && (this._cd -= t),
                      this._cd <= 0 &&
                        (h.judgeHaveCapturablePlant() ? this.createParrot() : (this._cd = this.parrotRetryCooldown)));
                  }),
                  a
                );
              })(e))
            ) || d
          );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/PirateGargantuarZombie.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './GargantuarZombie.ts', './NodePools.ts', './Zombies.ts'],
  function (t) {
    var r, a, e, i, n, o, u, s, c, p;
    return {
      setters: [
        function (t) {
          (r = t.applyDecoratedDescriptor),
            (a = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (i = t.assertThisInitialized);
        },
        function (t) {
          (n = t.cclegacy), (o = t._decorator), (u = t.AudioClip);
        },
        function (t) {
          s = t.GargantuarZombie;
        },
        function (t) {
          c = t.ArrayGet;
        },
        function (t) {
          p = t.ZombieEnum;
        },
      ],
      execute: function () {
        var l, m, h, f, d;
        n._RF.push({}, 'e2284uKBI9GQpaHbL+zvftu', 'PirateGargantuarZombie', void 0);
        var y = o.ccclass,
          b = o.property;
        t(
          'PirateGargantuarZombie',
          ((l = y('PirateGargantuarZombie')),
          (m = b([u])),
          l(
            ((d = r(
              (f = (function (t) {
                function r() {
                  for (var r, a = arguments.length, n = new Array(a), o = 0; o < a; o++) n[o] = arguments[o];
                  return (
                    (r = t.call.apply(t, [this].concat(n)) || this), e(r, 'steadySounds', d, i(r)), (r.impEnum = p.pirate_imp), r
                  );
                }
                a(r, t);
                var n = r.prototype;
                return (
                  (n.specialGargantuarAnimationListener = function (t) {
                    'steady' == t.name && this.playOneShot(c.getRandom(this.steadySounds));
                  }),
                  (n.throwImp = function () {
                    this._throwImp(Math.floor(5 * Math.random()), 2, 350),
                      (this._haveImp = !0),
                      this._throwImp(Math.floor(5 * Math.random()), 4, 350);
                  }),
                  r
                );
              })(s)).prototype,
              'steadySounds',
              [m],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (h = f))
          ) || h)
        );
        n._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/PirateImpCannonZombie.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Zombie.ts',
    './Square.ts',
    './Zombies.ts',
    './GargantuarZombie.ts',
    './levelController.ts',
  ],
  function (o) {
    var t, i, n, e, a, l, r, s, h, u, p, c, m, d, b, f;
    return {
      setters: [
        function (o) {
          (t = o.applyDecoratedDescriptor),
            (i = o.inheritsLoose),
            (n = o.initializerDefineProperty),
            (e = o.assertThisInitialized);
        },
        function (o) {
          (a = o.cclegacy),
            (l = o._decorator),
            (r = o.AudioClip),
            (s = o.CCFloat),
            (h = o.CCInteger),
            (u = o.tween),
            (p = o.Vec2);
        },
        function (o) {
          c = o.Zombie;
        },
        function (o) {
          m = o.Square;
        },
        function (o) {
          d = o.ZombieEnum;
        },
        function (o) {
          b = o.gargantuar;
        },
        function (o) {
          f = o.LevelPlay;
        },
      ],
      execute: function () {
        var y, S, C, D, g, v, w, P, Z, x, L, T, I, E, M;
        a._RF.push({}, '317a8MCv7NEjpaQruuwM9bq', 'PirateImpCannonZombie', void 0);
        var _ = l.ccclass,
          z = l.property;
        o(
          'PirateImpCannonZombie',
          ((y = _('PirateImpCannonZombie')),
          (S = z(r)),
          (C = z(r)),
          (D = z(r)),
          (g = z(s)),
          (v = z(s)),
          (w = z(h)),
          y(
            ((x = t(
              (Z = (function (o) {
                function t() {
                  for (var t, i = arguments.length, a = new Array(i), l = 0; l < i; l++) a[l] = arguments[l];
                  return (
                    (t = o.call.apply(o, [this].concat(a)) || this),
                    n(t, 'RollSound', x, e(t)),
                    n(t, 'ShootSound', L, e(t)),
                    n(t, 'ExplodeSound', T, e(t)),
                    (t.moveToShipTween = null),
                    (t.knockBackable = !1),
                    (t.leapable = !1),
                    n(t, 'initialShootDuration', I, e(t)),
                    n(t, 'shootDuration', E, e(t)),
                    (t.shootCD = 7.5),
                    n(t, 'maxShootCount', M, e(t)),
                    (t.shotCount = 0),
                    (t.shooting = !1),
                    (t.impEnum = d.pirate_imp),
                    t
                  );
                }
                i(t, o);
                var a = t.prototype;
                return (
                  (a.specialZombieOnEnable = function () {
                    (this.shotCount = 0),
                      (this.shooting = !1),
                      (this.shootCD = this.initialShootDuration),
                      (this.body.DeathAnm = 'Death'),
                      (this.currentFlyZombie = !1),
                      (this.flying = !1);
                  }),
                  (a.onLaneSpawnSettled = function () {
                    var o = this;
                    this.displayed ||
                      ((this.moveToShipTween = u(this)
                        .to(4, { worldPositionX: m.getLnC(0, 8).node.worldPosition.x + m.SquareDisW }, { easing: 'quadIn' })
                        .call(function () {
                          o.moveToShipTween = null;
                        })
                        .start()),
                      this.playOneShot(this.RollSound),
                      this.playIdle());
                  }),
                  (a.detectPlant = function (o) {}),
                  (a.playSpecialZombieDie = function (o) {
                    this.judgeDeath(0);
                  }),
                  (a.playSpecialZombieDieForced = function () {
                    var o;
                    null == (o = this.moveToShipTween) || o.stop();
                  }),
                  (a.specialZombieUpdate = function (o) {
                    this.moveToShipTween ||
                      this.shooting ||
                      (this.shootCD > 0 && (this.shootCD -= o),
                      this.shootCD <= 0 &&
                        (this.shotCount < this.maxShootCount
                          ? ((this.shooting = !0),
                            (this.shootCD = this.shootDuration),
                            this.body.playAnimation('Shoot', 2),
                            this.shotCount++)
                          : ((this.body.DeathAnm = 'Explode'),
                            this.playDie(!1, null, !1, null, !1),
                            f.component.setLevelVictoryCountDown(3))));
                  }),
                  (a._shoot = function (o, t, i, n, e) {
                    void 0 === i && (i = -30), void 0 === n && (n = 45), void 0 === e && (e = 1);
                    var a = b.throwOneImpToLnC(
                      this.impEnum,
                      this.inLane,
                      new p(this.headDropPoint.worldPosition.x, this._worldPositionY),
                      m.getLnC(o, t),
                      this.headDropPoint.worldPosition.y - this._worldPositionY + i,
                      n,
                      e
                    );
                    return a.body.playAnimation('Fly', 1 / 0), (a.tallNutBlock = !0), a;
                  }),
                  (a.playWalk = function (o) {}),
                  (a.specialAnimationListener = function (o) {
                    if ('Shoot' == o.name)
                      this.playOneShot(this.ShootSound), this._shoot(this.inLane.LaneIndex, 4 + Math.round(Math.random()));
                    else if ('shootingOff' == o.name) (this.shooting = !1), this.playIdle();
                    else if ('Explode' == o.name) {
                      this.playOneShot(this.ExplodeSound);
                      for (var t = 0; t < 5; t++) {
                        var i = 100 + 150 * Math.random(),
                          n = i / 150;
                        this._shoot(Math.floor(5 * Math.random()), Math.floor(4 * Math.random()) + 2, -10, i, n).tallNutBlock =
                          !1;
                      }
                    }
                  }),
                  t
                );
              })(c)).prototype,
              'RollSound',
              [S],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (L = t(Z.prototype, 'ShootSound', [C], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (T = t(Z.prototype, 'ExplodeSound', [D], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (I = t(Z.prototype, 'initialShootDuration', [g], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 3;
              },
            })),
            (E = t(Z.prototype, 'shootDuration', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 7.5;
              },
            })),
            (M = t(Z.prototype, 'maxShootCount', [w], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 5;
              },
            })),
            (P = Z))
          ) || P)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/PirateSeagullZombie.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Zombie.ts', './NodePools.ts', './SoundRescourses.ts'],
  function (e) {
    var t, i, a, l, n, o, r, s, u, d, c, h, p, g;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (i = e.inheritsLoose),
            (a = e.initializerDefineProperty),
            (l = e.assertThisInitialized),
            (n = e.createClass);
        },
        function (e) {
          (o = e.cclegacy), (r = e._decorator), (s = e.AudioClip), (u = e.Prefab), (d = e.Vec3);
        },
        function (e) {
          c = e.Zombie;
        },
        function (e) {
          (h = e.ArrayGet), (p = e.NodePools);
        },
        function (e) {
          g = e.sounds;
        },
      ],
      execute: function () {
        var m, f, y, b, S, v, P, H, D;
        o._RF.push({}, 'dec02612ItEKJCfPpyA9YNR', 'PirateSeagullZombie', void 0);
        var I = r.ccclass,
          _ = r.property;
        e(
          'PirateSeagullZombie',
          ((m = I('PirateSeagullZombie')),
          (f = _([s])),
          (y = _([s])),
          (b = _(u)),
          m(
            ((P = t(
              (v = (function (e) {
                function t() {
                  for (var t, i = arguments.length, n = new Array(i), o = 0; o < i; o++) n[o] = arguments[o];
                  return (
                    (t = e.call.apply(e, [this].concat(n)) || this),
                    a(t, 'seagullButteredSounds', P, l(t)),
                    a(t, 'seagullIdleSounds', H, l(t)),
                    (t.seagullIdleSayCD = 3),
                    (t._haveHead = !0),
                    a(t, 'birdExplParticle', D, l(t)),
                    (t.seagullArmature = void 0),
                    t
                  );
                }
                i(t, e);
                var o = t.prototype;
                return (
                  (o.specialZombieUpdate = function (e) {
                    this.seagullIdleSayCD > 0
                      ? (this.seagullIdleSayCD -= e)
                      : ((this.seagullIdleSayCD = 5 + 3 * Math.random()), g.play(h.getRandom(this.seagullIdleSounds), 0.7, 1));
                  }),
                  (o.setButter = function (e, t) {
                    var i;
                    e > 0 &&
                      (this.playDie(!1, this.defaultDirection()),
                      g.play(h.getRandom(this.seagullButteredSounds)),
                      null == (i = this.seagullArmature) || null == (i = i.animation) || i.play('Death', 1));
                    return !0;
                  }),
                  (o.plantEatAllowed = function (e) {
                    return !e.short_;
                  }),
                  (o._dropHead = function (e) {
                    void 0 === e && (e = 1),
                      this.zombieHead &&
                        this.haveHead &&
                        ((this.haveHead = !1),
                        this.playBreakSound(),
                        this.drop(
                          this.zombieHead,
                          e,
                          new d(this.shadeSocket.worldPosition.x, this._worldPositionY, 0),
                          null,
                          this.node.parent
                        ));
                  }),
                  (o.specialAnimationListener = function (e) {
                    'dropHead' == e.name && this._dropHead();
                  }),
                  (o.dropHead = function (e, t) {
                    var i = this;
                    void 0 === t && (t = this.zombieHeight),
                      this.armors.length &&
                        (this.armors.concat().forEach(function (e) {
                          i.throwArmor(e, null), p.destroyPooly(e.node);
                        }),
                        (this.armors = []));
                  }),
                  (o.playSpecialZombieDie = function (e) {
                    var t;
                    this.judgeDeath(0);
                    var i = 'Escape';
                    if (e) {
                      (i = 'Explode'), g.playBirdExpl();
                      var a = p.instantiatePooly(this.birdExplParticle);
                      (a.parent = this.node.parent),
                        (a.worldPosition = this.node.worldPosition),
                        (a.worldScale = this.node.worldScale),
                        a.setSiblingIndex(this.node.getSiblingIndex() + 1);
                    } else this._dropHead(10);
                    null == (t = this.seagullArmature) || null == (t = t.animation) || t.play(i, 1);
                  }),
                  (o.specialZombieOnEnable = function () {
                    var e;
                    (this.seagullIdleSayCD = 3 * Math.random()),
                      (this.haveHead = !0),
                      null == (e = this.seagullArmature) || null == (e = e.animation) || e.play('Idle', 1 / 0);
                  }),
                  (o.specialZombieOnLoad = function () {
                    var e;
                    this.seagullArmature = null == (e = this.db.armature().getSlot('Seagull')) ? void 0 : e.childArmature;
                  }),
                  n(t, [
                    {
                      key: 'haveHead',
                      get: function () {
                        return this._haveHead;
                      },
                      set: function (e) {
                        var t;
                        null == (t = this.body) ||
                          null == (t = t.body) ||
                          null == (t = t.armature()) ||
                          null == (t = t.getSlots()) ||
                          t.forEach(function (t) {
                            t.name.includes('_head') && t._setDisplayIndex(e ? 0 : -1);
                          }),
                          (this._haveHead = e);
                      },
                    },
                  ]),
                  t
                );
              })(c)).prototype,
              'seagullButteredSounds',
              [f],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (H = t(v.prototype, 'seagullIdleSounds', [y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (D = t(v.prototype, 'birdExplParticle', [b], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (S = v))
          ) || S)
        );
        o._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/PirateSwashbucklerZombie.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Zombie.ts', './NodePools.ts', './Square.ts'],
  function (i) {
    var t, e, n, s, o, a, r, l, u, c;
    return {
      setters: [
        function (i) {
          (t = i.applyDecoratedDescriptor),
            (e = i.inheritsLoose),
            (n = i.initializerDefineProperty),
            (s = i.assertThisInitialized);
        },
        function (i) {
          (o = i.cclegacy), (a = i._decorator), (r = i.AudioClip);
        },
        function (i) {
          l = i.Zombie;
        },
        function (i) {
          u = i.ArrayGet;
        },
        function (i) {
          c = i.Square;
        },
      ],
      execute: function () {
        var h, d, m, p, S;
        o._RF.push({}, 'b79edvrTFZGVLeVacR4otOc', 'PirateSwashbucklerZombie', void 0);
        var f = a.ccclass,
          w = a.property;
        i(
          'PirateSwashbucklerZombie',
          ((h = f('PirateSwashbucklerZombie')),
          (d = w([r])),
          h(
            ((S = t(
              (p = (function (i) {
                function t() {
                  for (var t, e = arguments.length, o = new Array(e), a = 0; a < e; a++) o[a] = arguments[a];
                  return ((t = i.call.apply(i, [this].concat(o)) || this).willLandColumn = 4), n(t, 'swingSounds', S, s(t)), t;
                }
                e(t, i);
                var o = t.prototype;
                return (
                  (o.onButtered = function (i) {
                    this.smartShadeHider && (this.butterStun = 0);
                  }),
                  (o.onChiliStunned = function (i) {
                    this.smartShadeHider && (this.chiliStun = 0);
                  }),
                  (o.specialAnimationListener = function (i) {
                    if ('swing' == i.name) this.playOneShot(u.getRandom(this.swingSounds));
                    else if ('swingJudge' == i.name) {
                      var t;
                      null != (t = this.inLane) && t.isSea && Math.random() < 0.05
                        ? ((this.worldPositionX += 2 * c.SquareDisW),
                          (this.body.DeathAnm = 'SwingFailure'),
                          this.playDie(!0),
                          this.judgeDeath())
                        : this.body.playAnimation('SwingSuccess', 2);
                    } else 'dropHead' == i.name ? this.dropHead(null, 1) : 'switchingFalse' == i.name && this.judgeDeath(0);
                  }),
                  (o.onDirtSpawned = function (i) {
                    (this.currentFlyZombie = !1), (this.flying = !1);
                  }),
                  (o.specialOnLeapEnd = function () {
                    this.smartShadeHider = !1;
                  }),
                  (o.prevDistance = function () {
                    return 0;
                  }),
                  (o.swing = function () {
                    this.playIdle(),
                      this.body.playAnimation('SwingBack', 1 / 0),
                      (this.worldPositionX = c.getSquareWorldPosition(0, this.willLandColumn).x),
                      (this.switching = !0),
                      this.setBodyRec(!0);
                  }),
                  (o.resetWillLandColume = function () {
                    this.willLandColumn = 4;
                  }),
                  (o.specialZombieOnEnable = function () {
                    (this.smartShadeHider = !0), (this.body.DeathAnm = 'Death'), this.resetWillLandColume();
                  }),
                  (o.onLaneSpawnSettled = function (i) {
                    this.resetWillLandColume(), this.swing();
                  }),
                  (o.onPutDirectly = function (i) {
                    (this.willLandColumn = i.cIndex), this.swing();
                  }),
                  t
                );
              })(l)).prototype,
              'swingSounds',
              [d],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (m = p))
          ) || m)
        );
        o._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Plant.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Particles.ts',
    './Character.ts',
    './SoundRescourses.ts',
    './CharacterManager.ts',
    './NodePools.ts',
    './LnC.ts',
    './AnimationController.ts',
    './Materials.ts',
    './UI.ts',
    './levelController.ts',
    './Plants.ts',
    './SoundsController.ts',
  ],
  function (t) {
    var n, i, e, a, o, l, s, h, r, d, u, p, c, f, y, m, v, P, g, b, C, L, S, w, T, D, E, O, I, A, M, _, F;
    return {
      setters: [
        function (t) {
          (n = t.applyDecoratedDescriptor),
            (i = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (a = t.assertThisInitialized),
            (o = t.createClass);
        },
        function (t) {
          (l = t.cclegacy),
            (s = t._decorator),
            (h = t.Enum),
            (r = t.AudioClip),
            (d = t.Size),
            (u = t.Vec2),
            (p = t.AudioSource),
            (c = t.dragonBones),
            (f = t.Material),
            (y = t.tween),
            (m = t.Vec3),
            (v = t.Color),
            (P = t.EventMouse),
            (g = t.Node);
        },
        function (t) {
          b = t.particle;
        },
        function (t) {
          C = t.Character;
        },
        function (t) {
          L = t.sounds;
        },
        function (t) {
          (S = t.Rectangle), (w = t.PlantPool);
        },
        function (t) {
          (T = t.NodePools), (D = t.ArrayGet);
        },
        function (t) {
          E = t.TileType;
        },
        function (t) {
          O = t.AnimationController;
        },
        function (t) {
          I = t.materialRes;
        },
        function (t) {
          A = t.UIInGame;
        },
        function (t) {
          M = t.LevelPlay;
        },
        function (t) {
          _ = t.PlantEnum;
        },
        function (t) {
          F = t.SoundFXController;
        },
      ],
      execute: function () {
        var q, k, W, N, U, x, B, z, R, H, j, V, X, Y, G, J, K, Q, Z;
        l._RF.push({}, 'de59daihTVDgJBO/PJ5zQ6J', 'Plant', void 0);
        var $ = s.ccclass,
          tt = s.property,
          nt = t(
            'PlantType',
            (function (t) {
              return (
                (t[(t.plant = 0)] = 'plant'),
                (t[(t.vine = 1)] = 'vine'),
                (t[(t.pot = 2)] = 'pot'),
                (t[(t.lilyPad = 3)] = 'lilyPad'),
                (t[(t.tile = 4)] = 'tile'),
                t
              );
            })({})
          ),
          it = t(
            'PlantFamily',
            (function (t) {
              return (
                (t[(t.Peashooter = 0)] = 'Peashooter'),
                (t[(t.Melee = 1)] = 'Melee'),
                (t[(t.Cold = 2)] = 'Cold'),
                (t[(t.Sun = 3)] = 'Sun'),
                (t[(t.Poison = 4)] = 'Poison'),
                (t[(t.Shadow = 5)] = 'Shadow'),
                (t[(t.Slow = 6)] = 'Slow'),
                (t[(t.Defence = 7)] = 'Defence'),
                (t[(t.Electricity = 8)] = 'Electricity'),
                (t[(t.Fire = 9)] = 'Fire'),
                (t[(t.Explosive = 10)] = 'Explosive'),
                (t[(t.Sharp = 11)] = 'Sharp'),
                (t[(t.Lobber = 12)] = 'Lobber'),
                (t[(t.None = 13)] = 'None'),
                t
              );
            })({})
          );
        h(it);
        t(
          'Plant',
          ((q = $('Plant')),
          (k = tt({ type: it })),
          (W = tt(Boolean)),
          (N = tt(Boolean)),
          (U = tt([r])),
          (x = tt(Boolean)),
          (B = tt(d)),
          (z = tt(Boolean)),
          (R = tt(Boolean)),
          q(
            ((V = n(
              (j = (function (t) {
                function n() {
                  for (var n, i = arguments.length, o = new Array(i), l = 0; l < i; l++) o[l] = arguments[l];
                  return (
                    ((n = t.call.apply(t, [this].concat(o)) || this).fooding = !1),
                    (n.audioSource = void 0),
                    (n.anmControl = null),
                    (n.bodyTweens = []),
                    (n.allowStack = !1),
                    (n.leapTween = null),
                    e(n, 'family', V, a(n)),
                    (n._foodable = !0),
                    (n.foodLightParticle = null),
                    e(n, 'tall', X, a(n)),
                    (n.tall_ = !1),
                    e(n, 'short', Y, a(n)),
                    (n.short_ = !1),
                    (n.ID = _.Peashooter),
                    (n.TYPE = []),
                    (n.SUNCOST = 0),
                    (n.plantType = nt.plant),
                    (n.dead = void 0),
                    (n.flyingPlant = !1),
                    (n.deathAnm = 'Death'),
                    e(n, 'deadSound', G, a(n)),
                    (n.eatDamagable = !0),
                    (n.eaterDetectable = !0),
                    (n.smasherDetectable = !0),
                    (n.plantInLnC = null),
                    (n.darkModeOn = !1),
                    e(n, 'haveDarkMode', J, a(n)),
                    e(n, 'bodySize', K, a(n)),
                    (n.bodyRec = S.createRectangleCenter(new u(0, 0), n.bodySize.width, n.bodySize.height)),
                    (n.toughness = 300),
                    (n.health = 300),
                    (n.hurting = 0),
                    (n.damagable = !0),
                    (n._invincible = !1),
                    (n.material = void 0),
                    e(n, 'haveWaterAnimation', Q, a(n)),
                    (n.waterAnm = 'Water'),
                    e(n, 'onFire', Z, a(n)),
                    (n.body = null),
                    (n.hot = 0),
                    (n.plantWave = null),
                    n
                  );
                }
                i(n, t);
                var l = n.prototype;
                return (
                  (l.shovelable = function () {
                    return !this.fooding && this.specialPlantShovelable() && !this._invincible;
                  }),
                  (l.specialPlantShovelable = function () {
                    return !0;
                  }),
                  (l.specialPlantOnLoad = function () {}),
                  (l.characterOnLoad = function () {
                    (this.body = this.node.getChildByName('Body')),
                      this.getComponent(p) || this.addComponent(p),
                      (this.audioSource = this.getComponent(p)),
                      (this.anmControl = this.getComponent(O)),
                      this.anmControl.setBody(),
                      (this.db = this.anmControl.body),
                      this.anmControl.body.on(c.EventObject.FRAME_EVENT, this.animationListener, this),
                      this.anmControl.body.on(c.EventObject.SOUND_EVENT, this.animationListener, this),
                      this.anmControl.anmCompleteListenerOn(),
                      this.anmControl.body.on(c.EventObject.COMPLETE, this.animationOnComplete, this);
                    var t = new f();
                    t.initialize({ effectAsset: I.addColorEffect, defines: { USE_TEXTURE: !0 } }),
                      (this.material = t),
                      this.material.setProperty('chillColor', 0),
                      this.specialPlantOnLoad();
                  }),
                  (l.inLnCArray = function () {
                    return this.plantType == nt.vine
                      ? this.inLnC.vineInSquare
                      : this.plantType == nt.pot || this.plantType == nt.lilyPad
                      ? []
                      : this.inLnC.plantInSquare;
                  }),
                  (l.leapTo = function (t, n, i, e) {
                    var a = this;
                    if ((void 0 === n && (n = 0.5), void 0 === i && (i = 200), !(this.leapTween || this.dead || this.fooding))) {
                      var o;
                      this.onLeapStart(), (this.invincible = !0);
                      var l,
                        s = t.plantPoint,
                        h = t.plantInSquare;
                      if (
                        (null == (o = this.anmControl.plantUpper) ||
                          null == (o = o.node) ||
                          o.setParent(t.inLane.plantUpperLayer, !0),
                        this.plantType == nt.vine)
                      )
                        (s = t.vinePoint),
                          (h = t.vineInSquare),
                          null == (l = this.anmControl.vineback) || null == (l = l.node) || l.setParent(t.vineBackPoint, !0);
                      else if (this.plantType == nt.pot) {
                        var r;
                        (s = t.potPoint),
                          (h = []),
                          (t.floawerPot = this.node),
                          (t.haveFloawerPot = !0),
                          (this.inLnC.floawerPot = null),
                          (this.inLnC.haveFloawerPot = !1),
                          null == (r = this.anmControl.potFront) || null == (r = r.node) || r.setParent(t.potPointUpper, !0);
                      } else
                        this.plantType == nt.lilyPad &&
                          ((s = t.potPoint),
                          (h = []),
                          (t.lilyPad = this.node),
                          (t.haveLilyPad = !0),
                          (this.inLnC.lilyPad = null),
                          (this.inLnC.haveLilyPad = !1));
                      this.node.setParent(s, !0);
                      var d = this.inLnCArray().indexOf(this);
                      -1 != d && this.inLnCArray().splice(d, 1),
                        -1 == h.indexOf(this) && h.push(this),
                        (this.plantInLnC = t),
                        (this.inLnC = t),
                        t.readIndex();
                      this.leapTween = y(this)
                        .to(n, { worldPositionX: s.worldPosition.x, worldPositionY: s.worldPosition.y })
                        .call(function () {
                          (a.leapTween = null),
                            (a.invincible = !1),
                            a.pushTideListner(t, t.getTileType(), t.plantable(), t.vineable(), t.floawerPotable(), t.flyable()),
                            a.dead || a.onLeapEnd();
                        })
                        .start();
                      var u = y(this)
                        .to(n / 2, { height: i }, { easing: 'quadOut' })
                        .to(n / 2, { height: 0 }, { easing: 'quadIn' })
                        .start();
                      this.bodyTweens.push(u, this.leapTween);
                    }
                  }),
                  (l.onLeapStart = function () {}),
                  (l.onLeapEnd = function () {}),
                  (l.animationListener = function (t) {}),
                  (l.animationOnComplete = function () {}),
                  (l.strengthen = function () {}),
                  (l.smash = function (t, n) {
                    void 0 === n && (n = !1),
                      n
                        ? this.inLnC.getAllPlants().forEach(function (n) {
                            n.normalSmash(t);
                          })
                        : this.plantType == nt.vine
                        ? this.normalSmash(t)
                        : this.plantType == nt.plant
                        ? this.inLnC.vineInSquare.length
                          ? this.inLnC.vineInSquare[0].normalSmash(t)
                          : this.normalSmash(t)
                        : (this.plantType != nt.pot && this.plantType != nt.lilyPad) ||
                          (this.inLnC.vineInSquare.length
                            ? this.inLnC.vineInSquare[0].normalSmash(t)
                            : this.inLnC.plantInSquare.length
                            ? this.inLnC.plantInSquare[0].normalSmash(t)
                            : this.normalSmash(t));
                  }),
                  (l.normalSmash = function (t) {
                    this.fooding || this.invincible || !this.smasherDetectable || this.die();
                  }),
                  (l.specialPlantOnSquareChange = function (t, n) {}),
                  (l.characterOnSquareChange = function (t, n) {
                    if (!this.dead) {
                      this.plantWave && this.plantWave.setParent(this.inLane.node, !0);
                      var i = n.node.worldPosition;
                      this.setBodyRec(new u(i.x, i.y)), this.specialPlantOnSquareChange(t, n);
                    }
                  }),
                  (l.characterOnLaneChange = function (t, n) {
                    t.deletePlant(this), n.addPlant(this);
                  }),
                  (l.burn = function () {
                    if (!this.fooding && !this.invincible) {
                      L.playPlantBurn();
                      var t = T.instantiatePooly(b.plantBurnt());
                      (t.parent = this.inLnC.plantPoint),
                        (t.worldPosition = this.inLnC.node.worldPosition),
                        t.setSiblingIndex(0),
                        this.die(!1),
                        this.node.destroy();
                    }
                  }),
                  (l.playDeathSound = function () {
                    this.deadSound.length && this.getComponent(p).playOneShot(D.getRandom(this.deadSound), F.SoundFXVolume);
                  }),
                  (l.kill = function () {
                    this.fooding || this.invincible || this.die();
                  }),
                  (l.specialPlantOnEaten = function (t, n, i, e) {}),
                  (l.eat = function (t, n) {
                    var i = this.health + 0;
                    this.dealDamage(t, 0),
                      i != this.health && this.specialPlantOnEaten(t, n, i, this.health),
                      this.health <= 0 && L.playZombieGulp();
                  }),
                  (l.plantCount = function () {
                    return 1;
                  }),
                  (l.die = function (t) {
                    var n = this;
                    if ((void 0 === t && (t = !0), !this.dead)) {
                      this.fooding && this.foodEnd(), (this.dead = !0), w.deletePlant(this), this.inLane.deletePlant(this);
                      var i = this.plantInLnC;
                      if (this.plantType == nt.plant) {
                        var e = i.plantInSquare.indexOf(this);
                        -1 != e && i.plantInSquare.splice(e, 1);
                      } else if (this.plantType == nt.vine) {
                        var a = i.vineInSquare.indexOf(this);
                        -1 != a && i.vineInSquare.splice(a, 1);
                      } else
                        this.plantType == nt.pot ? (i.haveFloawerPot = !1) : this.plantType == nt.lilyPad && (i.haveLilyPad = !1);
                      if ((i.readIndex(), t && this.playDeathSound(), this.specialPlantDie(), t))
                        if ('' == this.deathAnm)
                          (T.instantiatePooly(b.deadPlant()).parent = i.squareLower.node), this.node.destroy();
                        else
                          -1 != this.anmControl.body.armature().animation.animationNames.indexOf(this.deathAnm) &&
                            this.anmControl.playAnimation(this.deathAnm, 1),
                            this.anmControl.body.on(
                              c.EventObject.COMPLETE,
                              function (t) {
                                (T.instantiatePooly(b.deadPlant()).parent = i.squareLower.node), n.node.destroy();
                              },
                              this
                            );
                    }
                  }),
                  (l.specialPlantDie = function () {}),
                  (l.judgeDarkPlantMode = function () {
                    var t, n;
                    if (this.haveDarkMode) {
                      if ((null == (t = this.inLnC) ? void 0 : t.shadowCD) > 0 && !this.darkModeOn) {
                        var i,
                          e = null == (i = this.anmControl.body) ? void 0 : i.armature();
                        e &&
                          ((this.darkModeOn = !0),
                          null == e ||
                            e.getSlots().forEach(function (t) {
                              t.name.includes('_DARK') && (t.displayIndex = 1);
                            }));
                      }
                      if ((null == (n = this.inLnC) ? void 0 : n.shadowCD) <= 0 && this.darkModeOn) {
                        var a,
                          o = null == (a = this.anmControl.body) ? void 0 : a.armature();
                        o &&
                          ((this.darkModeOn = !1),
                          null == o ||
                            o.getSlots().forEach(function (t) {
                              t.name.includes('_DARK') && (t.displayIndex = 0);
                            }));
                      }
                    }
                  }),
                  (l.onTileTypeChange = function (t, n, i, e, a, o, l) {
                    this.dead || this.fooding || this.invincible || this.pushTideListner(t, i, e, a, o, l),
                      this.dead || this.fooding || this.invincible || t.putPlantAvailable(this.TYPE, !1) || this.die();
                  }),
                  (l.onSkyFallEnd = function () {
                    this.node.destroy();
                  }),
                  (l.fall = function () {
                    this.dead ||
                      (this.die(!1), this.anmControl.setTimeScale(0), this.anmControl.throwAllBackNFront(), this.fallInSky(!1));
                  }),
                  (l.pushTideListner = function (t, n, i, e, a, o) {
                    n != E.sea
                      ? n != E.sky ||
                        ((i || this.plantType != nt.plant) && (e || this.plantType != nt.vine) && this.plantType != nt.lilyPad) ||
                        this.flyingPlant ||
                        this.inLnC.haveFloawerPot
                        ? ((i || this.plantType != nt.plant) && (e || this.plantType != nt.vine)) ||
                          n != E.water ||
                          this.flyingPlant ||
                          this.drown()
                        : this.fall()
                      : this.drown(!0);
                  }),
                  (l.drown = function (t) {
                    void 0 === t && (t = !1),
                      this.die(!1),
                      t
                        ? b.spawnSeaSplash(this.inLane.LaneIndex, new m(this._worldPositionX, this._worldPositionY, 10))
                        : b.spawnWaterSplash(this.inLane.LaneIndex, new m(this._worldPositionX, this._worldPositionY, 10)),
                      this.node.destroy();
                  }),
                  (l.food = function (t) {
                    if ((void 0 === t && (t = !0), !this.fooding && this.foodable && !this.dead && !this.leapTween)) {
                      if (t) {
                        var n = T.instantiatePooly(b.foodLight());
                        (n.parent = this.inLnC.particleLowerPoint),
                          n.setPosition(0, 0, 0),
                          n.getComponent(c.ArmatureDisplay).playAnimation('Start', 1),
                          n.setParent(this.inLane.Food, !0),
                          n.setSiblingIndex(0),
                          (this.foodLightParticle = n),
                          this.body.setParent(this.inLane.Food, !0),
                          L.playPlantFoodStart();
                      }
                      (this.hurting = 60), (this.fooding = !0), (this.health = this.toughness), this.specialPlantFood(t);
                    }
                  }),
                  (l.specialPlantFood = function (t) {}),
                  (l.specialPlantFoodEnd = function () {}),
                  (l.foodEnd = function () {
                    var t;
                    this.foodLightParticle && this.foodLightParticle.getComponent(c.ArmatureDisplay).playAnimation('End', 1),
                      (this.hurting = 60),
                      (this.foodLightParticle = null),
                      this.node.isValid ? this.body.setParent(this.node, !0) : this.body.destroy(),
                      (this.body.position = new m(0, 0, 0)),
                      this.specialPlantFoodEnd(),
                      (this.fooding = !1),
                      this.pushTideListner(
                        this.inLnC,
                        this.inLnC.getTileType(),
                        this.inLnC.plantable(!1),
                        this.inLnC.vineable(!1),
                        this.inLnC.floawerPotable(!1),
                        this.inLnC.flyable(!1)
                      ),
                      null == (t = this.inLnC) || t.readIndex();
                  }),
                  (l.setBodyRec = function (t) {
                    this.bodyRec = S.createRectangleCenter(t, this.bodySize.width, this.bodySize.height);
                  }),
                  (l.umbrella = function () {
                    return !1;
                  }),
                  (l.dealDamage = function (t, n) {
                    if ((void 0 === t && (t = 0), void 0 === n && (n = 0), !this.invincible && this.damagable && !this.fooding)) {
                      if (1 == n) {
                        var i = !1;
                        if (
                          (this.inLnC.get3x3().forEach(function (t) {
                            var n;
                            i ||
                              null == t ||
                              null == (n = t.plantInSquare) ||
                              n.forEach(function (t) {
                                i || (t.umbrella() && (i = !0));
                              });
                          }),
                          i)
                        )
                          return;
                        this.plantType == nt.plant
                          ? this.dealNormalDamage(t, n)
                          : this.plantType == nt.vine
                          ? this.inLnC.plantInSquare.length
                            ? this.inLnC.plantInSquare[0].dealDamage(t, n)
                            : this.dealNormalDamage(t, n)
                          : (this.plantType != nt.pot && this.plantType != nt.lilyPad) ||
                            (this.inLnC.plantInSquare.length
                              ? this.inLnC.plantInSquare[0].dealDamage(t, n)
                              : this.inLnC.vineInSquare.length
                              ? this.inLnC.vineInSquare[0].dealDamage(t, n)
                              : this.dealNormalDamage(t, n));
                      } else
                        for (var e = this.inLnC.getAllPlants(), a = 0; a < e.length; a++) {
                          var o;
                          if (null != (o = e[a]) && o.eaterDetectable) {
                            var l;
                            null == (l = e[a]) || l.dealNormalDamage(t, n);
                            break;
                          }
                        }
                      return this.health;
                    }
                  }),
                  (l.defaultHurtLightStrength = function (t) {
                    return t && this.hurting > 0 ? this.hurting : 20;
                  }),
                  (l.onDamaged = function (t, n, i) {}),
                  (l.dealNormalDamage = function (t, n) {
                    void 0 === t && (t = 0), void 0 === n && (n = 0);
                    var i = 0 == n;
                    if (!i || this.eatDamagable) {
                      var e = this.health + 0;
                      return (
                        (this.health -= t),
                        t > 0 && ((this.hurting = this.defaultHurtLightStrength(i)), this.onDamaged(t, e, this.health + 0)),
                        this.health <= 0 && this.die(),
                        this.health
                      );
                    }
                  }),
                  (l.shouldMaterial = function () {
                    var t = new v(0, 0, 0, 255);
                    this.hurting > 0 && ((t.r += 5 * this.hurting), (t.g += 5 * this.hurting), (t.b += 5 * this.hurting));
                    var n = this.material.passes[0].getHandle('addColor');
                    this.material.passes[0].setUniform(n, t), (this.anmControl.body.customMaterial = this.material);
                  }),
                  (l.specialPlantOnMouseDown = function () {
                    return !1;
                  }),
                  (l.onMouseDown = function (t) {
                    if (t.getButton() == P.BUTTON_RIGHT) this.water();
                    else if (M.gameStarted && t.getButton() == P.BUTTON_LEFT && -1 == A.index)
                      return this.specialPlantOnMouseDown();
                    return !1;
                  }),
                  (l.mouseListener = function (t) {
                    void 0 === t && (t = !0),
                      t
                        ? this.inLnC.node.on(g.EventType.MOUSE_DOWN, this.onMouseDown, this)
                        : this.inLnC.node.off(g.EventType.MOUSE_DOWN, this.onMouseDown, this);
                  }),
                  (l.waterable = function () {
                    return !0;
                  }),
                  (l.water = function () {
                    !this.fooding &&
                      this.haveWaterAnimation &&
                      !this.dead &&
                      this.waterable() &&
                      this.anmControl.playAnimation(this.waterAnm, 1, 0.1);
                  }),
                  (l.specialPlantOnEnable = function () {}),
                  (l.lncStayable = function (t) {}),
                  (l.characterOnEnable = function () {
                    (this.short_ = this.short),
                      (this.tall_ = this.tall),
                      (this.bodyTweens = []),
                      (this.dead = !1),
                      (this.eaterDetectable = !0),
                      (this.smasherDetectable = !0),
                      (this.deathAnm = 'Death'),
                      (this.darkModeOn = !1),
                      (this.damagable = !0),
                      w.registerPlant(this),
                      (this.fooding = !1),
                      (this.health = this.toughness),
                      (this.darkModeOn = !this.haveDarkMode),
                      (this._invincible = !1),
                      (this.eatDamagable = !0),
                      this.specialPlantOnEnable();
                  }),
                  (l.specialPlantOnDisable = function () {}),
                  (l.characterOnDisable = function () {
                    this.fooding && this.foodEnd(),
                      this.die(!1),
                      this.plantWave &&
                        (this.plantWave.getComponent(c.ArmatureDisplay).playAnimation('Fade'), (this.plantWave = null)),
                      this.specialPlantOnDisable(),
                      w.deletePlant(this),
                      this.bodyTweens.forEach(function (t) {
                        null == t || t.stop();
                      });
                  }),
                  (l.specialPlantUpdate = function (t) {}),
                  (l.specialPlantLateUpdate = function (t) {}),
                  (l.lateUpdate = function (t) {
                    this.specialPlantLateUpdate(t);
                  }),
                  (l.plantHeat = function (t) {
                    this.hot > 0 && (this.hot -= t),
                      this.onFire &&
                        this.hot <= 0 &&
                        ((this.hot = 0), this.inLnC.plantHeat() && (this.hot = Math.round(8 * Math.random()) + 15));
                  }),
                  (l.replantable = function () {
                    return !1;
                  }),
                  (l.replant = function () {}),
                  (l.addWave = function (t) {
                    this.flyingPlant ||
                      (t != E.water ||
                        this.plantWave ||
                        !(this._height < -2) ||
                        this.inLnC.haveLilyPad ||
                        (this.ID != _.FloawerPot && this.inLnC.haveFloawerPot) ||
                        ((this.plantWave = T.instantiatePooly(b.plantWaterWave())),
                        this.plantWave.getComponent(c.ArmatureDisplay).playAnimation('Idle', 1 / 0),
                        (this.plantWave.parent = this.inLane.node)),
                      this.plantWave &&
                        ((this.plantWave.worldPosition = new m(this._worldPositionX, this._worldPositionY)),
                        (t != E.water || this._height >= -2) &&
                          (this.plantWave.getComponent(c.ArmatureDisplay).playAnimation('Fade'), (this.plantWave = null))));
                  }),
                  (l.characterUpdate = function (t) {
                    var n;
                    this.judgeDarkPlantMode(),
                      !this.dead &&
                        ((this.inLnC.haveFloawerPot && this.plantType != nt.pot) ||
                          (this.inLnC.haveLilyPad && this.plantType != nt.lilyPad)) &&
                        (this.height = this.inLnC.orgPlantPoint.worldPosition.y - this._worldPositionY),
                      M.gameStarted &&
                        !M.component.gameWon &&
                        !this.dead &&
                        !this.leapTween &&
                        this.inLnC &&
                        this.inLane &&
                        (this.specialPlantUpdate(t), this.plantHeat(t)),
                      this.hurting > 0 ? (this.hurting -= 60 * t * (this.fooding ? 4 : 1)) : (this.hurting = 0),
                      this.shouldMaterial(),
                      this.addWave(null == (n = this.inLnC) ? void 0 : n.getTileType()),
                      this.specialPlantUpdateForce(t);
                  }),
                  (l.specialPlantUpdateForce = function (t) {}),
                  o(n, [
                    {
                      key: 'foodable',
                      get: function () {
                        return this._foodable;
                      },
                      set: function (t) {
                        var n;
                        (this._foodable = t), null == (n = this.inLnC) || n.readIndex();
                      },
                    },
                    {
                      key: 'suncost',
                      get: function () {
                        return this.SUNCOST * this.plantCount();
                      },
                    },
                    {
                      key: 'invincible',
                      get: function () {
                        return this._invincible;
                      },
                      set: function (t) {
                        (this._invincible = t),
                          this.inLnC &&
                            this.pushTideListner(
                              this.inLnC,
                              this.inLnC.getTileType(),
                              this.inLnC.plantable(!1),
                              this.inLnC.vineable(!1),
                              this.inLnC.floawerPotable(!1),
                              this.inLnC.flyable(!1)
                            );
                      },
                    },
                  ]),
                  n
                );
              })(C)).prototype,
              'family',
              [k],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return it.None;
                },
              }
            )),
            (X = n(j.prototype, 'tall', [W], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !1;
              },
            })),
            (Y = n(j.prototype, 'short', [N], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !1;
              },
            })),
            (G = n(j.prototype, 'deadSound', [U], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (J = n(j.prototype, 'haveDarkMode', [x], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !1;
              },
            })),
            (K = n(j.prototype, 'bodySize', [B], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new d(48, 72);
              },
            })),
            (Q = n(j.prototype, 'haveWaterAnimation', [z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !0;
              },
            })),
            (Z = n(j.prototype, 'onFire', [R], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !1;
              },
            })),
            (H = j))
          ) || H)
        );
        l._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/plantFood.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './dropping.ts',
    './PlantFoodCount.ts',
    './SoundRescourses.ts',
    './levelController.ts',
  ],
  function (n) {
    var o, t, e, i, r, a, l, c, u, s, p;
    return {
      setters: [
        function (n) {
          (o = n.applyDecoratedDescriptor),
            (t = n.inheritsLoose),
            (e = n.initializerDefineProperty),
            (i = n.assertThisInitialized);
        },
        function (n) {
          (r = n.cclegacy), (a = n._decorator), (l = n.AudioClip);
        },
        function (n) {
          c = n.dropping;
        },
        function (n) {
          u = n.PlantFoodCount;
        },
        function (n) {
          s = n.sounds;
        },
        function (n) {
          p = n.LevelPlay;
        },
      ],
      execute: function () {
        var d, f, g, y, h;
        r._RF.push({}, '5176faDmB5OmZE/e9j24mx+', 'plantFood', void 0);
        var v = a.ccclass,
          F = a.property;
        n(
          'plantFood',
          ((d = v('plantFood')),
          (f = F(l)),
          d(
            ((h = o(
              (y = (function (n) {
                function o() {
                  for (var o, t = arguments.length, r = new Array(t), a = 0; a < t; a++) r[a] = arguments[a];
                  return (o = n.call.apply(n, [this].concat(r)) || this), e(o, 'startingSound', h, i(o)), o;
                }
                t(o, n);
                var r = o.prototype;
                return (
                  (r.goToUIPath = function () {
                    return 'Canvas/UIInGame/PlantFoodSlot/slotParent';
                  }),
                  (r.onGroundHit = function () {}),
                  (r.specialDroppingOnEnable = function () {
                    this.fadingOn(), s.play(this.startingSound);
                  }),
                  (r.specialCollectable = function () {
                    var n = !u.component.full();
                    return n || p.component.gameWon || s.playCardChooseFailed(!0), n;
                  }),
                  (r.specialGoToUI = function (n) {
                    u.component.plantFoodAdd();
                  }),
                  o
                );
              })(c)).prototype,
              'startingSound',
              [f],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (g = y))
          ) || g)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/PlantFoodCount.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './UI.ts',
    './NodePools.ts',
    './SoundsController.ts',
    './SandBoxLevelSettingWindow.ts',
    './SettingWindow.ts',
    './levelController.ts',
  ],
  function (o) {
    var t, n, e, i, s, a, l, d, h, u, r, p, c, m, y, C, g, f, v, w, F, N, S, P, b, A, B, I, k;
    return {
      setters: [
        function (o) {
          (t = o.applyDecoratedDescriptor),
            (n = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (i = o.assertThisInitialized),
            (s = o.createClass);
        },
        function (o) {
          (a = o.cclegacy),
            (l = o._decorator),
            (d = o.AudioClip),
            (h = o.Prefab),
            (u = o.CCInteger),
            (r = o.Node),
            (p = o.Color),
            (c = o.Vec3),
            (m = o.AnimationComponent),
            (y = o.AudioSource),
            (C = o.dragonBones),
            (g = o.EventMouse),
            (f = o.tween),
            (v = o.find),
            (w = o.Label),
            (F = o.UITransform),
            (N = o.instantiate),
            (S = o.Component);
        },
        function (o) {
          P = o.UIInGame;
        },
        function (o) {
          b = o.NodePools;
        },
        function (o) {
          A = o.SoundFXController;
        },
        function (o) {
          B = o.SandBoxLevelSettingWindow;
        },
        function (o) {
          I = o.SettingWindow;
        },
        function (o) {
          k = o.LevelPlay;
        },
      ],
      execute: function () {
        var T, x, D, E, O, L, W, U, _, z, M, G, K, R, H, X;
        a._RF.push({}, '954fdB0gXpF/Jaj7g2CsJh0', 'PlantFoodCount', void 0);
        var V = l.ccclass,
          j = l.property;
        o(
          'PlantFoodCount',
          ((T = V('PlantFoodCount')),
          (x = j(d)),
          (D = j(d)),
          (E = j(d)),
          (O = j(h)),
          (L = j(u)),
          (W = j(r)),
          T(
            (((X = (function (o) {
              function t() {
                for (var t, n = arguments.length, s = new Array(n), a = 0; a < n; a++) s[a] = arguments[a];
                return (
                  ((t = o.call.apply(o, [this].concat(s)) || this).initialSunCount = 0),
                  e(t, 'collectSound', z, i(t)),
                  e(t, 'activateSound', M, i(t)),
                  e(t, 'cheatAddSound', G, i(t)),
                  e(t, 'plantFoodInHand', K, i(t)),
                  e(t, 'maxCount', R, i(t)),
                  (t.slot = []),
                  (t.plantFoodNum = 0),
                  (t.chosen = void 0),
                  (t.keyTip = void 0),
                  (t.ui = void 0),
                  (t.keyRED = new p(255, 100, 100, 255)),
                  (t.keyGREEN = new p(100, 255, 100, 255)),
                  (t.keyYELLOW = new p(245, 255, 0, 255)),
                  e(t, 'addButton', H, i(t)),
                  (t.busyCollecting = !1),
                  (t.oldpos = new c(0, 0, 0)),
                  (t.conveyorpos = new c(0, 75, 0)),
                  (t.shown = !0),
                  t
                );
              }
              n(t, o),
                (t.plantfoodWarn = function () {
                  this.component.plantfoodWarn();
                });
              var a = t.prototype;
              return (
                (a.plantfoodWarn = function () {
                  this.getComponent(m).play('plantfoodWarn');
                }),
                (a.setKeyTipColor = function () {
                  this.keyTip &&
                    (this.plantFoodNum > 0 || B.freePF
                      ? (this.keyTip.color = this.chosen ? this.keyGREEN : this.keyYELLOW)
                      : (this.keyTip.color = this.keyRED),
                    (this.keyTip.node.scale = this.chosen ? new c(0.9, 0.9) : new c(0.7, 0.7)));
                }),
                (a.addMouseChild = function () {
                  this.getComponent(y).playOneShot(this.activateSound, A.SoundFXVolume);
                  var o = b.instantiatePooly(this.plantFoodInHand);
                  (o.parent = this.ui.plantInHandLayer), o.setPosition(-14, -20, 0);
                }),
                (a.choose = function () {
                  (this.chosen = -3 == this.ui.index),
                    this.chosen
                      ? this.node.getChildByName('Icon').getComponent(C.ArmatureDisplay).playAnimation('Pushed')
                      : this.node.getChildByName('Icon').getComponent(C.ArmatureDisplay).playAnimation('Idle');
                }),
                (a.setPlantFoodNum = function (o) {
                  var t = o + 0;
                  t > this.maxCount ? (t = this.maxCount) : t < 0 && (t = 0), (this.plantFoodNum = t);
                  for (var n = 0; n < this.maxCount; n++)
                    n < t
                      ? this.slot[n].getComponent(C.ArmatureDisplay).playAnimation('Collecting')
                      : this.slot[n].getComponent(C.ArmatureDisplay).playAnimation('Empty');
                  this.choose();
                }),
                (a.plantFoodAdd = function () {
                  this.plantFoodNum < this.maxCount &&
                    (this.plantFoodNum++,
                    this.getComponent(y).playOneShot(this.collectSound, A.SoundFXVolume),
                    this.slot[this.plantFoodNum - 1].getComponent(C.ArmatureDisplay).playAnimation('Collecting'),
                    this.busyCollecting ||
                      (this.node.getChildByName('Collecting').getComponent(C.ArmatureDisplay).playAnimation('IconCollecting', 1),
                      (this.busyCollecting = !0)),
                    this.choose());
                }),
                (a.plantFoodDec = function () {
                  this.plantFoodNum > 0 &&
                    (this.slot[this.plantFoodNum - 1].getComponent(C.ArmatureDisplay).playAnimation('Empty'),
                    this.plantFoodNum--,
                    this.choose());
                }),
                (a.onMouseDown = function (o) {
                  if (((o.preventSwallow = !0), o.getButton() == g.BUTTON_LEFT)) {
                    var t = this.plantFoodNum;
                    this.plantFoodAdd(),
                      t < this.plantFoodNum && this.getComponent(y).playOneShot(this.cheatAddSound, A.SoundFXVolume);
                  }
                }),
                (t.show = function (o, n) {
                  var e;
                  void 0 === o && (o = !1), void 0 === n && (n = null), null == (e = t.component) || e._show(o, n);
                }),
                (t.keyOn = function () {
                  var o;
                  null == (o = t.component) || o._keyOn();
                }),
                (a._show = function (o, t) {
                  void 0 === o && (o = !1),
                    void 0 === t && (t = null),
                    this.shown ||
                      (I.allowCheat || k.sandBoxModeOn || this.addButton.position.add(new c(-1e3, 1e3, 0)),
                      (this.shown = !0),
                      f(this.node)
                        .to(0.4, { position: o ? this.conveyorpos : this.oldpos }, { easing: 'cubicOut' })
                        .call(t)
                        .start());
                }),
                (a.full = function () {
                  return this.maxCount <= this.plantFoodNum;
                }),
                (a._keyOn = function () {
                  this.keyTip &&
                    (this.keyTip.node.worldPosition = new c(this.node.worldPosition.x, this.node.worldPosition.y - 20, 0));
                }),
                (a.rotate = function (o) {
                  void 0 === o && (o = !0);
                  var t = this.node.getChildByName('slotParent');
                  o ? ((t.angle = 0), (t.scale = new c(1, 1, 1))) : ((t.angle = -90), (t.scale = new c(1, -1, 1)));
                }),
                (a.update = function (o) {
                  this.setKeyTipColor();
                }),
                (a.onLoad = function () {
                  var o,
                    n = this;
                  (t.component = this),
                    (this.oldpos = this.node.position.clone()),
                    this.conveyorpos.add(this.oldpos),
                    this.rotate(),
                    this.node.position.add3f(0, 600, 0),
                    (this.shown = !1),
                    (this.ui = this.node.parent.getComponent(P)),
                    (this.chosen = !1),
                    v('Canvas/UIInGameUpper/KeyTip/KeyF') &&
                      (this.keyTip = null == (o = v('Canvas/UIInGameUpper/KeyTip/KeyF')) ? void 0 : o.getComponent(w)),
                    this.keyTip &&
                      (this.keyTip.node.worldPosition = new c(this.node.worldPosition.x, this.node.worldPosition.y - 20, 0)),
                    this.getComponent(y) || this.addComponent(y),
                    v('Canvas/UIInGame/SunSlot/add') &&
                      this.node
                        .getChildByName('add')
                        .setWorldPosition(
                          v('Canvas/UIInGame/SunSlot/add').getWorldPosition().x,
                          this.node.getChildByName('add').getWorldPosition().y,
                          0
                        ),
                    this.slot.push(this.node.getChildByName('slotParent').getChildByName('slots').getChildByName('slot')),
                    (this.node.getChildByName('slotParent').getChildByName('plantFoodSlots').getComponent(F).width =
                      316 + 48 * (this.maxCount - 3));
                  for (var e = 1; e < this.maxCount; e++) {
                    var i = N(this.slot[0]);
                    (i.parent = this.slot[0].parent),
                      i.setPosition(this.slot[e - 1].position.x + 48, this.slot[e - 1].position.y, 0),
                      this.slot.push(i);
                  }
                  this.node.getChildByName('add').on(r.EventType.MOUSE_DOWN, this.onMouseDown, this),
                    this.node
                      .getChildByName('Collecting')
                      .getComponent(C.ArmatureDisplay)
                      .on(
                        C.EventObject.COMPLETE,
                        function () {
                          n.busyCollecting = !1;
                        },
                        this
                      ),
                    this.choose();
                }),
                s(t, null, [
                  {
                    key: 'plantFoodNum',
                    get: function () {
                      return this.component.plantFoodNum;
                    },
                  },
                ]),
                t
              );
            })(S)).component = void 0),
            (z = t((_ = X).prototype, 'collectSound', [x], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (M = t(_.prototype, 'activateSound', [D], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (G = t(_.prototype, 'cheatAddSound', [E], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (K = t(_.prototype, 'plantFoodInHand', [O], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (R = t(_.prototype, 'maxCount', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 3;
              },
            })),
            (H = t(_.prototype, 'addButton', [W], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (U = _))
          ) || U)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Plants.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './CardFeatureTotal.ts'],
  function (e) {
    var r, t, a, n, i, l, o, u, s;
    return {
      setters: [
        function (e) {
          (r = e.applyDecoratedDescriptor),
            (t = e.inheritsLoose),
            (a = e.initializerDefineProperty),
            (n = e.assertThisInitialized);
        },
        function (e) {
          (i = e.cclegacy), (l = e._decorator), (o = e.JsonAsset), (u = e.Component);
        },
        function (e) {
          s = e.PlantsInCard;
        },
      ],
      execute: function () {
        var p,
          c,
          b,
          h,
          m,
          P,
          g,
          f,
          w,
          S,
          y,
          R,
          z,
          B,
          C,
          M,
          d,
          T,
          F,
          L,
          k,
          D,
          G,
          v,
          W,
          E,
          O,
          J,
          V,
          I,
          H,
          N,
          A,
          U,
          q,
          K,
          _,
          j,
          x,
          Y,
          Q,
          X,
          Z,
          $,
          ee,
          re,
          te,
          ae,
          ne,
          ie,
          le,
          oe,
          ue,
          se,
          pe,
          ce,
          be,
          he,
          me,
          Pe,
          ge,
          fe,
          we,
          Se,
          ye,
          Re,
          ze,
          Be,
          Ce,
          Me,
          de,
          Te,
          Fe,
          Le,
          ke,
          De,
          Ge,
          ve,
          We,
          Ee,
          Oe,
          Je,
          Ve,
          Ie,
          He,
          Ne,
          Ae,
          Ue,
          qe,
          Ke,
          _e,
          je,
          xe,
          Ye,
          Qe,
          Xe,
          Ze,
          $e,
          er,
          rr,
          tr,
          ar,
          nr,
          ir,
          lr,
          or,
          ur,
          sr,
          pr,
          cr,
          br,
          hr,
          mr,
          Pr,
          gr,
          fr,
          wr,
          Sr,
          yr,
          Rr,
          zr,
          Br,
          Cr,
          Mr,
          dr,
          Tr,
          Fr,
          Lr,
          kr,
          Dr,
          Gr,
          vr,
          Wr,
          Er,
          Or,
          Jr,
          Vr,
          Ir,
          Hr,
          Nr,
          Ar;
        i._RF.push({}, '69863LwbzhG4o6A+BjtBkHR', 'Plants', void 0);
        var Ur = l.ccclass,
          qr = l.property,
          Kr = e(
            'PlantEnum',
            (function (e) {
              return (
                (e[(e.Peashooter = 0)] = 'Peashooter'),
                (e[(e.Sunflower = 1)] = 'Sunflower'),
                (e[(e.Wallnut = 2)] = 'Wallnut'),
                (e[(e.PotatoMine = 3)] = 'PotatoMine'),
                (e[(e.CabbagePult = 4)] = 'CabbagePult'),
                (e[(e.Bloomerang = 5)] = 'Bloomerang'),
                (e[(e.IcebergLettuce = 6)] = 'IcebergLettuce'),
                (e[(e.BonkChoy = 7)] = 'BonkChoy'),
                (e[(e.Reapeater = 8)] = 'Reapeater'),
                (e[(e.MegaGatlingPea = 9)] = 'MegaGatlingPea'),
                (e[(e.ScaredyShroom = 10)] = 'ScaredyShroom'),
                (e[(e.FumeShroom = 11)] = 'FumeShroom'),
                (e[(e.GraveBuster = 12)] = 'GraveBuster'),
                (e[(e.Pumpkin = 13)] = 'Pumpkin'),
                (e[(e.PeaVine = 14)] = 'PeaVine'),
                (e[(e.FloawerPot = 15)] = 'FloawerPot'),
                (e[(e.FirePeashooter = 16)] = 'FirePeashooter'),
                (e[(e.ThreePeater = 17)] = 'ThreePeater'),
                (e[(e.PrimalPea = 18)] = 'PrimalPea'),
                (e[(e.Rotobaga = 19)] = 'Rotobaga'),
                (e[(e.HomingThistle = 20)] = 'HomingThistle'),
                (e[(e.StarFruit = 21)] = 'StarFruit'),
                (e[(e.ShootingStarfruit = 22)] = 'ShootingStarfruit'),
                (e[(e.LilyPad = 23)] = 'LilyPad'),
                (e[(e.SunShroom = 24)] = 'SunShroom'),
                (e[(e.TwinSunflower = 25)] = 'TwinSunflower'),
                (e[(e.Dragonbruit = 26)] = 'Dragonbruit'),
                (e[(e.Moonflower = 27)] = 'Moonflower'),
                (e[(e.SnowPea = 28)] = 'SnowPea'),
                (e[(e.LightningReed = 29)] = 'LightningReed'),
                (e[(e.KernelPult = 30)] = 'KernelPult'),
                (e[(e.MeteorFlower = 31)] = 'MeteorFlower'),
                (e[(e.SpringBean = 32)] = 'SpringBean'),
                (e[(e.UmbrellaLeaf = 33)] = 'UmbrellaLeaf'),
                (e[(e.MelonPult = 34)] = 'MelonPult'),
                (e[(e.WinterMelon = 35)] = 'WinterMelon'),
                (e[(e.Blover = 36)] = 'Blover'),
                (e[(e.Spikeweed = 37)] = 'Spikeweed'),
                (e[(e.Spikerock = 38)] = 'Spikerock'),
                (e[(e.Chomper = 39)] = 'Chomper'),
                (e[(e.GlacierShroom = 40)] = 'GlacierShroom'),
                (e[(e.PrimalWallnut = 41)] = 'PrimalWallnut'),
                (e[(e.Buttercup = 42)] = 'Buttercup'),
                (e[(e.BananaLauncher = 43)] = 'BananaLauncher'),
                (e[(e.MissileToe = 44)] = 'MissileToe'),
                (e[(e.CherryBomb = 45)] = 'CherryBomb'),
                (e[(e.DoomShroom = 46)] = 'DoomShroom'),
                (e[(e.CranJelly = 47)] = 'CranJelly'),
                (e[(e.BabyDragonbruit = 48)] = 'BabyDragonbruit'),
                (e[(e.Torchwood = 49)] = 'Torchwood'),
                (e[(e.Jalapeno = 50)] = 'Jalapeno'),
                (e[(e.PuffShroom = 51)] = 'PuffShroom'),
                (e[(e.GloomVine = 52)] = 'GloomVine'),
                (e[(e.Vamporcini = 53)] = 'Vamporcini'),
                (e[(e.PrimalPotatoMine = 54)] = 'PrimalPotatoMine'),
                (e[(e.Cactus = 55)] = 'Cactus'),
                (e[(e.PowerLily = 56)] = 'PowerLily'),
                (e[(e.CoconutCannon = 57)] = 'CoconutCannon'),
                (e[(e.PeaPod = 58)] = 'PeaPod'),
                (e[(e.SnapDragon = 59)] = 'SnapDragon'),
                (e[(e.GatlingPea = 60)] = 'GatlingPea'),
                (e[(e.SplitPea = 61)] = 'SplitPea'),
                (e[(e.ChiliBean = 62)] = 'ChiliBean'),
                (e[(e.Tallnut = 63)] = 'Tallnut'),
                (e[(e.Hurrikale = 64)] = 'Hurrikale'),
                (e[(e.Stallia = 65)] = 'Stallia'),
                (e[(e.ElectricPeashooter = 66)] = 'ElectricPeashooter'),
                (e[(e.Squash = 67)] = 'Squash'),
                (e[(e.amount = 68)] = 'amount'),
                e
              );
            })({})
          ),
          _r = e(
            'plants',
            (function () {
              function e() {}
              return (
                (e.getPlantsInCard = function (e) {
                  switch (e) {
                    case Kr.Peashooter:
                      return this.plantRes.Peashooter;
                    case Kr.Sunflower:
                      return this.plantRes.Sunflower;
                    case Kr.Wallnut:
                      return this.plantRes.Wallnut;
                    case Kr.PotatoMine:
                      return this.plantRes.PotatoMine;
                    case Kr.CabbagePult:
                      return this.plantRes.CabbagePult;
                    case Kr.Bloomerang:
                      return this.plantRes.Bloomerang;
                    case Kr.IcebergLettuce:
                      return this.plantRes.IcebergLettuce;
                    case Kr.BonkChoy:
                      return this.plantRes.BonkChoy;
                    case Kr.Reapeater:
                      return this.plantRes.Reapeater;
                    case Kr.MegaGatlingPea:
                      return this.plantRes.MegaGatlingPea;
                    case Kr.ScaredyShroom:
                      return this.plantRes.ScaredyShroom;
                    case Kr.FumeShroom:
                      return this.plantRes.FumeShroom;
                    case Kr.GraveBuster:
                      return this.plantRes.GraveBuster;
                    case Kr.Pumpkin:
                      return this.plantRes.Pumpkin;
                    case Kr.PeaVine:
                      return this.plantRes.PeaVine;
                    case Kr.FloawerPot:
                      return this.plantRes.FloawerPot;
                    case Kr.FirePeashooter:
                      return this.plantRes.FirePeashooter;
                    case Kr.ThreePeater:
                      return this.plantRes.ThreePeater;
                    case Kr.PrimalPea:
                      return this.plantRes.PrimalPea;
                    case Kr.Rotobaga:
                      return this.plantRes.Rotobaga;
                    case Kr.HomingThistle:
                      return this.plantRes.HomingThistle;
                    case Kr.StarFruit:
                      return this.plantRes.StarFruit;
                    case Kr.ShootingStarfruit:
                      return this.plantRes.ShootingStarfruit;
                    case Kr.LilyPad:
                      return this.plantRes.LilyPad;
                    case Kr.SunShroom:
                      return this.plantRes.SunShroom;
                    case Kr.TwinSunflower:
                      return this.plantRes.TwinSunflower;
                    case Kr.Dragonbruit:
                      return this.plantRes.Dragonbruit;
                    case Kr.Moonflower:
                      return this.plantRes.Moonflower;
                    case Kr.SnowPea:
                      return this.plantRes.SnowPea;
                    case Kr.LightningReed:
                      return this.plantRes.LightningReed;
                    case Kr.KernelPult:
                      return this.plantRes.KernelPult;
                    case Kr.MeteorFlower:
                      return this.plantRes.MeteorFlower;
                    case Kr.SpringBean:
                      return this.plantRes.SpringBean;
                    case Kr.UmbrellaLeaf:
                      return this.plantRes.UmbrellaLeaf;
                    case Kr.MelonPult:
                      return this.plantRes.MelonPult;
                    case Kr.WinterMelon:
                      return this.plantRes.WinterMelon;
                    case Kr.Blover:
                      return this.plantRes.Blover;
                    case Kr.Spikeweed:
                      return this.plantRes.Spikeweed;
                    case Kr.Spikerock:
                      return this.plantRes.Spikerock;
                    case Kr.Chomper:
                      return this.plantRes.Chomper;
                    case Kr.GlacierShroom:
                      return this.plantRes.GlacierShroom;
                    case Kr.PrimalWallnut:
                      return this.plantRes.PrimalWallnut;
                    case Kr.Buttercup:
                      return this.plantRes.Buttercup;
                    case Kr.BananaLauncher:
                      return this.plantRes.BananaLauncher;
                    case Kr.MissileToe:
                      return this.plantRes.MissileToe;
                    case Kr.CherryBomb:
                      return this.plantRes.CherryBomb;
                    case Kr.DoomShroom:
                      return this.plantRes.DoomShroom;
                    case Kr.CranJelly:
                      return this.plantRes.CranJelly;
                    case Kr.BabyDragonbruit:
                      return this.plantRes.BabyDragonbruit;
                    case Kr.Torchwood:
                      return this.plantRes.Torchwood;
                    case Kr.Jalapeno:
                      return this.plantRes.Jalapeno;
                    case Kr.PuffShroom:
                      return this.plantRes.PuffShroom;
                    case Kr.GloomVine:
                      return this.plantRes.GloomVine;
                    case Kr.Vamporcini:
                      return this.plantRes.Vamporcini;
                    case Kr.PrimalPotatoMine:
                      return this.plantRes.PrimalPotatoMine;
                    case Kr.Cactus:
                      return this.plantRes.Cactus;
                    case Kr.PowerLily:
                      return this.plantRes.PowerLily;
                    case Kr.CoconutCannon:
                      return this.plantRes.CoconutCannon;
                    case Kr.PeaPod:
                      return this.plantRes.PeaPod;
                    case Kr.SnapDragon:
                      return this.plantRes.SnapDragon;
                    case Kr.GatlingPea:
                      return this.plantRes.GatlingPea;
                    case Kr.SplitPea:
                      return this.plantRes.SplitPea;
                    case Kr.ChiliBean:
                      return this.plantRes.ChiliBean;
                    case Kr.Tallnut:
                      return this.plantRes.Tallnut;
                    case Kr.Hurrikale:
                      return this.plantRes.Hurrikale;
                    case Kr.Stallia:
                      return this.plantRes.Stallia;
                    case Kr.ElectricPeashooter:
                      return this.plantRes.ElectricPeashooter;
                    case Kr.Squash:
                      return this.plantRes.Squash;
                    default:
                      return this.plantRes.Peashooter;
                  }
                }),
                (e.getPlantFeature = function (e) {
                  return e < this.plantRes.PlantFeatures.length && e >= 0
                    ? this.plantRes.PlantFeatures[e]
                    : this.plantRes.PlantFeatures[0];
                }),
                (e.getPlantEnumByString = function (e) {
                  var r = -1;
                  return (
                    this.plantRes.PlantFeatures.forEach(function (t, a) {
                      -1 == r && t.CODENAME == e && (r = a);
                    }),
                    -1 == r && (r = 0),
                    r
                  );
                }),
                (e.getPlantByRTID = function (e) {
                  var r = e.concat(),
                    t = r.indexOf('RTID('),
                    a = r.indexOf('@PlantTypes)'),
                    n = '';
                  return -1 != t && (n = r.slice(t + 5, a)), this.getPlantEnumByString(n);
                }),
                e
              );
            })()
          );
        _r.plantRes = void 0;
        e('PlantFeature', function () {
          (this.ID = -1),
            (this.SUNCOST = 0),
            (this.NAME = ''),
            (this.PLANTTYPE = ''),
            (this.CODENAME = ''),
            (this.OBTAINWORLD = ''),
            (this.FAMILY = ''),
            (this.COOLDOWN = 5),
            (this.COOLDOWNFROM = 0),
            (this.TOUGHNESS = 3.14159),
            (this.TYPE = []),
            (this.BRIEFINTRODUCTION = '');
        }),
          e(
            'Plants',
            ((p = Ur('Plants')),
            (c = qr(s)),
            (b = qr(s)),
            (h = qr(s)),
            (m = qr(s)),
            (P = qr(s)),
            (g = qr(s)),
            (f = qr(s)),
            (w = qr(s)),
            (S = qr(s)),
            (y = qr(s)),
            (R = qr(s)),
            (z = qr(s)),
            (B = qr(s)),
            (C = qr(s)),
            (M = qr(s)),
            (d = qr(s)),
            (T = qr(s)),
            (F = qr(s)),
            (L = qr(s)),
            (k = qr(s)),
            (D = qr(s)),
            (G = qr(s)),
            (v = qr(s)),
            (W = qr(s)),
            (E = qr(s)),
            (O = qr(s)),
            (J = qr(s)),
            (V = qr(s)),
            (I = qr(s)),
            (H = qr(s)),
            (N = qr(s)),
            (A = qr(s)),
            (U = qr(s)),
            (q = qr(s)),
            (K = qr(s)),
            (_ = qr(s)),
            (j = qr(s)),
            (x = qr(s)),
            (Y = qr(s)),
            (Q = qr(s)),
            (X = qr(s)),
            (Z = qr(s)),
            ($ = qr(s)),
            (ee = qr(s)),
            (re = qr(s)),
            (te = qr(s)),
            (ae = qr(s)),
            (ne = qr(s)),
            (ie = qr(s)),
            (le = qr(s)),
            (oe = qr(s)),
            (ue = qr(s)),
            (se = qr(s)),
            (pe = qr(s)),
            (ce = qr(s)),
            (be = qr(s)),
            (he = qr(s)),
            (me = qr(s)),
            (Pe = qr(s)),
            (ge = qr(s)),
            (fe = qr(s)),
            (we = qr(s)),
            (Se = qr(s)),
            (ye = qr(s)),
            (Re = qr(s)),
            (ze = qr(s)),
            (Be = qr(s)),
            (Ce = qr(s)),
            (Me = qr(o)),
            p(
              ((Fe = r(
                (Te = (function (e) {
                  function r() {
                    for (var r, t = arguments.length, i = new Array(t), l = 0; l < t; l++) i[l] = arguments[l];
                    return (
                      (r = e.call.apply(e, [this].concat(i)) || this),
                      a(r, 'Peashooter', Fe, n(r)),
                      a(r, 'Sunflower', Le, n(r)),
                      a(r, 'Wallnut', ke, n(r)),
                      a(r, 'PotatoMine', De, n(r)),
                      a(r, 'CabbagePult', Ge, n(r)),
                      a(r, 'Bloomerang', ve, n(r)),
                      a(r, 'IcebergLettuce', We, n(r)),
                      a(r, 'BonkChoy', Ee, n(r)),
                      a(r, 'Reapeater', Oe, n(r)),
                      a(r, 'MegaGatlingPea', Je, n(r)),
                      a(r, 'ScaredyShroom', Ve, n(r)),
                      a(r, 'FumeShroom', Ie, n(r)),
                      a(r, 'GraveBuster', He, n(r)),
                      a(r, 'Pumpkin', Ne, n(r)),
                      a(r, 'PeaVine', Ae, n(r)),
                      a(r, 'FloawerPot', Ue, n(r)),
                      a(r, 'FirePeashooter', qe, n(r)),
                      a(r, 'ThreePeater', Ke, n(r)),
                      a(r, 'PrimalPea', _e, n(r)),
                      a(r, 'Rotobaga', je, n(r)),
                      a(r, 'HomingThistle', xe, n(r)),
                      a(r, 'StarFruit', Ye, n(r)),
                      a(r, 'ShootingStarfruit', Qe, n(r)),
                      a(r, 'LilyPad', Xe, n(r)),
                      a(r, 'SunShroom', Ze, n(r)),
                      a(r, 'TwinSunflower', $e, n(r)),
                      a(r, 'Dragonbruit', er, n(r)),
                      a(r, 'Moonflower', rr, n(r)),
                      a(r, 'SnowPea', tr, n(r)),
                      a(r, 'LightningReed', ar, n(r)),
                      a(r, 'KernelPult', nr, n(r)),
                      a(r, 'MeteorFlower', ir, n(r)),
                      a(r, 'SpringBean', lr, n(r)),
                      a(r, 'UmbrellaLeaf', or, n(r)),
                      a(r, 'MelonPult', ur, n(r)),
                      a(r, 'WinterMelon', sr, n(r)),
                      a(r, 'Blover', pr, n(r)),
                      a(r, 'Spikeweed', cr, n(r)),
                      a(r, 'Spikerock', br, n(r)),
                      a(r, 'Chomper', hr, n(r)),
                      a(r, 'GlacierShroom', mr, n(r)),
                      a(r, 'PrimalWallnut', Pr, n(r)),
                      a(r, 'Buttercup', gr, n(r)),
                      a(r, 'BananaLauncher', fr, n(r)),
                      a(r, 'MissileToe', wr, n(r)),
                      a(r, 'CherryBomb', Sr, n(r)),
                      a(r, 'DoomShroom', yr, n(r)),
                      a(r, 'CranJelly', Rr, n(r)),
                      a(r, 'BabyDragonbruit', zr, n(r)),
                      a(r, 'Torchwood', Br, n(r)),
                      a(r, 'Jalapeno', Cr, n(r)),
                      a(r, 'PuffShroom', Mr, n(r)),
                      a(r, 'GloomVine', dr, n(r)),
                      a(r, 'Vamporcini', Tr, n(r)),
                      a(r, 'PrimalPotatoMine', Fr, n(r)),
                      a(r, 'Cactus', Lr, n(r)),
                      a(r, 'PowerLily', kr, n(r)),
                      a(r, 'CoconutCannon', Dr, n(r)),
                      a(r, 'PeaPod', Gr, n(r)),
                      a(r, 'SnapDragon', vr, n(r)),
                      a(r, 'GatlingPea', Wr, n(r)),
                      a(r, 'SplitPea', Er, n(r)),
                      a(r, 'ChiliBean', Or, n(r)),
                      a(r, 'Tallnut', Jr, n(r)),
                      a(r, 'Hurrikale', Vr, n(r)),
                      a(r, 'Stallia', Ir, n(r)),
                      a(r, 'ElectricPeashooter', Hr, n(r)),
                      a(r, 'Squash', Nr, n(r)),
                      a(r, 'CardsFeatureJson', Ar, n(r)),
                      (r.PlantFeatures = []),
                      r
                    );
                  }
                  return (
                    t(r, e),
                    (r.prototype.onLoad = function () {
                      _r.plantRes = this;
                      var e = JSON.stringify(this.CardsFeatureJson);
                      this.PlantFeatures = JSON.parse(e).json.PLANTS;
                    }),
                    r
                  );
                })(u)).prototype,
                'Peashooter',
                [c],
                { configurable: !0, enumerable: !0, writable: !0, initializer: null }
              )),
              (Le = r(Te.prototype, 'Sunflower', [b], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (ke = r(Te.prototype, 'Wallnut', [h], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (De = r(Te.prototype, 'PotatoMine', [m], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (Ge = r(Te.prototype, 'CabbagePult', [P], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (ve = r(Te.prototype, 'Bloomerang', [g], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (We = r(Te.prototype, 'IcebergLettuce', [f], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: null,
              })),
              (Ee = r(Te.prototype, 'BonkChoy', [w], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (Oe = r(Te.prototype, 'Reapeater', [S], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (Je = r(Te.prototype, 'MegaGatlingPea', [y], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: null,
              })),
              (Ve = r(Te.prototype, 'ScaredyShroom', [R], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (Ie = r(Te.prototype, 'FumeShroom', [z], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (He = r(Te.prototype, 'GraveBuster', [B], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (Ne = r(Te.prototype, 'Pumpkin', [C], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (Ae = r(Te.prototype, 'PeaVine', [M], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (Ue = r(Te.prototype, 'FloawerPot', [d], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (qe = r(Te.prototype, 'FirePeashooter', [T], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: null,
              })),
              (Ke = r(Te.prototype, 'ThreePeater', [F], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (_e = r(Te.prototype, 'PrimalPea', [L], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (je = r(Te.prototype, 'Rotobaga', [k], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (xe = r(Te.prototype, 'HomingThistle', [D], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (Ye = r(Te.prototype, 'StarFruit', [G], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (Qe = r(Te.prototype, 'ShootingStarfruit', [v], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: null,
              })),
              (Xe = r(Te.prototype, 'LilyPad', [W], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (Ze = r(Te.prototype, 'SunShroom', [E], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              ($e = r(Te.prototype, 'TwinSunflower', [O], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (er = r(Te.prototype, 'Dragonbruit', [J], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (rr = r(Te.prototype, 'Moonflower', [V], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (tr = r(Te.prototype, 'SnowPea', [I], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (ar = r(Te.prototype, 'LightningReed', [H], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (nr = r(Te.prototype, 'KernelPult', [N], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (ir = r(Te.prototype, 'MeteorFlower', [A], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (lr = r(Te.prototype, 'SpringBean', [U], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (or = r(Te.prototype, 'UmbrellaLeaf', [q], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (ur = r(Te.prototype, 'MelonPult', [K], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (sr = r(Te.prototype, 'WinterMelon', [_], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (pr = r(Te.prototype, 'Blover', [j], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (cr = r(Te.prototype, 'Spikeweed', [x], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (br = r(Te.prototype, 'Spikerock', [Y], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (hr = r(Te.prototype, 'Chomper', [Q], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (mr = r(Te.prototype, 'GlacierShroom', [X], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (Pr = r(Te.prototype, 'PrimalWallnut', [Z], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (gr = r(Te.prototype, 'Buttercup', [$], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (fr = r(Te.prototype, 'BananaLauncher', [ee], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: null,
              })),
              (wr = r(Te.prototype, 'MissileToe', [re], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (Sr = r(Te.prototype, 'CherryBomb', [te], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (yr = r(Te.prototype, 'DoomShroom', [ae], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Rr = r(Te.prototype, 'CranJelly', [ne], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (zr = r(Te.prototype, 'BabyDragonbruit', [ie], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Br = r(Te.prototype, 'Torchwood', [le], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Cr = r(Te.prototype, 'Jalapeno', [oe], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Mr = r(Te.prototype, 'PuffShroom', [ue], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (dr = r(Te.prototype, 'GloomVine', [se], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Tr = r(Te.prototype, 'Vamporcini', [pe], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Fr = r(Te.prototype, 'PrimalPotatoMine', [ce], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Lr = r(Te.prototype, 'Cactus', [be], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (kr = r(Te.prototype, 'PowerLily', [he], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Dr = r(Te.prototype, 'CoconutCannon', [me], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Gr = r(Te.prototype, 'PeaPod', [Pe], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (vr = r(Te.prototype, 'SnapDragon', [ge], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Wr = r(Te.prototype, 'GatlingPea', [fe], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Er = r(Te.prototype, 'SplitPea', [we], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Or = r(Te.prototype, 'ChiliBean', [Se], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Jr = r(Te.prototype, 'Tallnut', [ye], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Vr = r(Te.prototype, 'Hurrikale', [Re], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Ir = r(Te.prototype, 'Stallia', [ze], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Hr = r(Te.prototype, 'ElectricPeashooter', [Be], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Nr = r(Te.prototype, 'Squash', [Ce], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return new s();
                },
              })),
              (Ar = r(Te.prototype, 'CardsFeatureJson', [Me], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: null,
              })),
              (de = Te))
            ) || de)
          );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/plantSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './SoundsController.ts', './NodePools.ts'],
  function (o) {
    var n, t, e, u, r, i, a;
    return {
      setters: [
        function (o) {
          n = o.inheritsLoose;
        },
        function (o) {
          (t = o.cclegacy), (e = o._decorator), (u = o.AudioSource), (r = o.Component);
        },
        function (o) {
          i = o.SoundFXController;
        },
        function (o) {
          a = o.ArrayGet;
        },
      ],
      execute: function () {
        var c;
        t._RF.push({}, '895baKWY3JKkpUWgFSSyXb2', 'plantSound', void 0);
        var l = e.ccclass;
        e.property,
          o(
            'plantSound',
            l('plantSound')(
              (c = (function (o) {
                function t() {
                  for (var n, t = arguments.length, e = new Array(t), u = 0; u < t; u++) e[u] = arguments[u];
                  return ((n = o.call.apply(o, [this].concat(e)) || this).audioSource = void 0), n;
                }
                n(t, o);
                var e = t.prototype;
                return (
                  (e.onLoad = function () {
                    this.getComponent(u) || this.addComponent(u), (this.audioSource = this.getComponent(u));
                  }),
                  (e.playOneShot = function (o, n) {
                    void 0 === n && (n = 1),
                      o && n > 0 && this.audioSource.playOneShot(o, (i.SoundFXVolume * n) / this.audioSource.volume);
                  }),
                  (e.playOneShotFromArray = function (o, n) {
                    void 0 === n && (n = 1),
                      o.length && this.audioSource.playOneShot(a.getRandom(o), (i.SoundFXVolume * n) / this.audioSource.volume);
                  }),
                  t
                );
              })(r))
            ) || c
          );
        t._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/PlayerProperties.ts', ['cc'], function (e) {
  var r, t;
  return {
    setters: [
      function (e) {
        (r = e.cclegacy), (t = e.sys);
      },
    ],
    execute: function () {
      r._RF.push({}, 'e4e03O6w5BJTotU0w9qk5Av', 'PlayerProperties', void 0);
      var l = e('UserDataDocument', 'PvZ2_PlayerProperties'),
        a = e('PlayerProperties', function () {
          (this.worldkey = 0),
            (this.gem = 0),
            (this.coin = 0),
            (this.obtainedPlants = []),
            (this.difficulty = 3),
            (this.currentWM = 0),
            (this.worldChooserI = 0),
            (this.egyptWMX = 0),
            (this.pirateWMX = 0),
            (this.cowboyWMX = 0);
        }),
        s = e(
          'AllPlayerProperties',
          (function () {
            function e() {}
            return (
              (e.savePP = function () {
                var r = e.allPlayers.concat();
                t.localStorage.setItem(l, JSON.stringify(r));
              }),
              (e.getPlayer = function (r) {
                var s,
                  n = null == (s = t.localStorage) ? void 0 : s.getItem(l),
                  i = [];
                return (
                  n && (i = JSON.parse(n)),
                  (e.allPlayers = i),
                  isNaN(e.allPlayers.length) || e.allPlayers.length - 1 < r
                    ? ((e.currentPlayer = new a()), e.allPlayers.push(e.currentPlayer))
                    : (e.currentPlayer = e.allPlayers[r]),
                  e.currentPlayer
                );
              }),
              e
            );
          })()
        );
      (s.currentPlayer = new a()), (s.allPlayers = []), r._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/PotatoMine.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './LnC.ts',
    './CharacterManager.ts',
    './Square.ts',
    './SoundRescourses.ts',
    './SoundsController.ts',
  ],
  function (t) {
    var n, o, e, i, a, r, l, s, u, d, c, h, p, g, f, m, w;
    return {
      setters: [
        function (t) {
          (n = t.applyDecoratedDescriptor),
            (o = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (i = t.assertThisInitialized);
        },
        function (t) {
          (a = t.cclegacy), (r = t._decorator), (l = t.CCFloat), (s = t.AudioClip), (u = t.CCInteger), (d = t.AudioSource);
        },
        function (t) {
          (c = t.PlantType), (h = t.Plant);
        },
        function (t) {
          p = t.LnC;
        },
        function (t) {
          g = t.Rectangle;
        },
        function (t) {
          f = t.Square;
        },
        function (t) {
          m = t.sounds;
        },
        function (t) {
          w = t.SoundFXController;
        },
      ],
      execute: function () {
        var C, b, y, S, v, P, A, R, F, L, _, x, D;
        a._RF.push({}, '8e90bzMJCRDvKfgEIWRnVBn', 'PotatoMine', void 0);
        var E = r.ccclass,
          z = r.property;
        t(
          'PotatoMinePlant',
          ((C = E('PotatoMinePlant')),
          (b = z(l)),
          (y = z(s)),
          (S = z(s)),
          (v = z(l)),
          (P = z(u)),
          C(
            ((F = n(
              (R = (function (t) {
                function n() {
                  for (var n, o = arguments.length, a = new Array(o), r = 0; r < o; r++) a[r] = arguments[r];
                  return (
                    (n = t.call.apply(t, [this].concat(a)) || this),
                    e(n, 'growthCountdown', F, i(n)),
                    (n.growthCountdown_ = 14),
                    e(n, 'foodSound', L, i(n)),
                    e(n, 'landSound', _, i(n)),
                    (n.grown = !1),
                    e(n, 'damage', x, i(n)),
                    e(n, 'maxFoodThrowAmount', D, i(n)),
                    (n.activated = !1),
                    (n.detector = void 0),
                    n
                  );
                }
                o(n, t);
                var a = n.prototype;
                return (
                  (a.specialPlantOnEnable = function () {
                    (this.activated = !1),
                      (this.grown = !1),
                      (this.growthCountdown_ = this.growthCountdown),
                      this.anmControl.playAnimation('Spawn_Baby', 1),
                      (this.anmControl.IdleAnim = 'Idle_Baby'),
                      (this.anmControl.RandomAnim = []),
                      (this.deathAnm = 'Death_Baby');
                  }),
                  (a.specialPlantFood = function (t) {
                    this.grown || this.grow(), (this.activated = !0), this.anmControl.playAnimation('Food');
                  }),
                  (a.grow = function () {
                    (this.grown = !0),
                      (this.eatDamagable = !1),
                      this.growSound(),
                      this.anmControl.playAnimation('Grow', 1),
                      (this.anmControl.IdleAnim = 'Idle'),
                      (this.deathAnm = 'Charging');
                  }),
                  (a.growSound = function () {
                    m.playDirtRise();
                  }),
                  (a.explodeAction = function () {
                    this.inLnC.explodeSqudow1x1(this.damage);
                  }),
                  (a.animationListener = function (t) {
                    switch (t.name) {
                      case 'activate':
                        this.activated = !0;
                        break;
                      case 'explode':
                        this.explodeAction();
                        break;
                      case 'die':
                        (this.deathAnm = ''), this.die();
                        break;
                      case 'throw':
                        this.throwChildren();
                        break;
                      case 'foodEnd':
                        this.foodEnd();
                        break;
                      case 'foodSound':
                        this.getComponent(d).playOneShot(this.foodSound, w.SoundFXVolume);
                    }
                  }),
                  (a.throwChildren = function () {
                    for (
                      var t = this, n = [], o = [], e = 0;
                      e < 45 && n.length < this.maxFoodThrowAmount && n.length + o.length < 45;

                    ) {
                      var i = f.getRandomSquare().getComponent(p);
                      -1 == n.indexOf(i) && -1 == o.indexOf(i) && (i.potatomineable() ? n.push(i) : o.push(i), e++);
                    }
                    n.forEach(function (n) {
                      var o = t.inLnC.spawnPlantByPlantEnum(t.ID);
                      o.judgeInLnC(),
                        o.node.setPosition(0, 0, 0),
                        o &&
                          (t.inLnC.pushPlant(o),
                          (o.plantType = c.plant),
                          o.anmControl.playAnimation('Flying', 1 / 0),
                          (o.damagable = !1),
                          o.leapTo(n, 0.8, 200));
                    });
                  }),
                  (a.onLeapStart = function () {
                    this.activated = !1;
                  }),
                  (a.onLeapEnd = function () {
                    this.grow(),
                      this.audioSource.playOneShot(this.landSound, w.SoundFXVolume),
                      this.anmControl.playAnimation('Spawn', 1);
                  }),
                  (a.specialPlantOnSquareChange = function (t, n) {
                    this.detector = g.createRectangleNodeCenter(n.node, f.SquareDisW, f.SquareDisH);
                  }),
                  (a.detectEnemy = function () {
                    var t,
                      n = this,
                      o = !1;
                    null == (t = this.inLane) ||
                      t.zombiePool().forEach(function (t) {
                        o ||
                          t.flying ||
                          (!t.plantDetectorRec.judgeCrossRec(n.bodyRec) && !t.bodyRec.judgeCrossRec(n.detector)) ||
                          (o = !0);
                      }),
                      o && ((this.activated = !1), this.die());
                  }),
                  (a.waterable = function () {
                    return this.activated;
                  }),
                  (a.specialPlantUpdate = function (t) {
                    this.grown ||
                      (this.growthCountdown_ > 0 && (this.growthCountdown_ -= t), this.growthCountdown_ < 0 && this.grow()),
                      this.activated && !this.fooding && this.detectEnemy();
                  }),
                  n
                );
              })(h)).prototype,
              'growthCountdown',
              [b],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 14;
                },
              }
            )),
            (L = n(R.prototype, 'foodSound', [y], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (_ = n(R.prototype, 'landSound', [S], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (x = n(R.prototype, 'damage', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 1800;
              },
            })),
            (D = n(R.prototype, 'maxFoodThrowAmount', [P], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 2;
              },
            })),
            (A = R))
          ) || A)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/PotatoMinePrimal.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './PotatoMine.ts', './SoundsController.ts'],
  function (o) {
    var t, n, e, i, r;
    return {
      setters: [
        function (o) {
          t = o.inheritsLoose;
        },
        function (o) {
          (n = o.cclegacy), (e = o._decorator);
        },
        function (o) {
          i = o.PotatoMinePlant;
        },
        function (o) {
          r = o.SoundFXController;
        },
      ],
      execute: function () {
        var a;
        n._RF.push({}, '7830fHqmAFNxJYmzEaUai+2', 'PotatoMinePrimal', void 0);
        var u = e.ccclass;
        e.property,
          o(
            'PotatoMinePrimalPlant',
            u('PotatoMinePrimalPlant')(
              (a = (function (o) {
                function n() {
                  return o.apply(this, arguments) || this;
                }
                t(n, o);
                var e = n.prototype;
                return (
                  (e.explodeAction = function () {
                    this.inLnC.explodeSpudow3x3(this.damage);
                  }),
                  (e.growSound = function () {
                    this.audioSource.playOneShot(this.landSound, r.SoundFXVolume);
                  }),
                  n
                );
              })(i))
            ) || a
          );
        n._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/PowerLily.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './CherryBomb.ts', './Sunflower.ts'],
  function (t) {
    var o, e, n, r, i;
    return {
      setters: [
        function (t) {
          o = t.inheritsLoose;
        },
        function (t) {
          (e = t.cclegacy), (n = t._decorator);
        },
        function (t) {
          r = t.CherryBombPlant;
        },
        function (t) {
          i = t.sunflower;
        },
      ],
      execute: function () {
        var s;
        e._RF.push({}, 'f51283ku6ZAkLASU1ALEGbz', 'PowerLily', void 0);
        var u = n.ccclass;
        n.property,
          t(
            'PowerLilyPlant',
            u('PowerLilyPlant')(
              (s = (function (t) {
                function e() {
                  return t.apply(this, arguments) || this;
                }
                return (
                  o(e, t),
                  (e.prototype.animationListener = function (t) {
                    'produce' == t.name && ((this.deathAnm = 'Death'), i.producePlantFood(this.worldPosition), this.die());
                  }),
                  e
                );
              })(r))
            ) || s
          );
        e._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/PowerupFingers.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './UI.ts',
    './Square.ts',
    './Mouse.ts',
    './SoundRescourses.ts',
    './CharacterManager.ts',
    './SettingWindow.ts',
    './levelController.ts',
  ],
  function (t) {
    var n, o, e, i, r, a, s, u, l, h, p, c, d, w, f, g, m, y, b, B, v, x, U;
    return {
      setters: [
        function (t) {
          (n = t.applyDecoratedDescriptor),
            (o = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (i = t.assertThisInitialized),
            (r = t.createClass);
        },
        function (t) {
          (a = t.cclegacy),
            (s = t._decorator),
            (u = t.Button),
            (l = t.JsonAsset),
            (h = t.Vec3),
            (p = t.Sprite),
            (c = t.find),
            (d = t.Color),
            (w = t.tween),
            (f = t.Component);
        },
        function (t) {
          g = t.UIInGame;
        },
        function (t) {
          m = t.Square;
        },
        function (t) {
          y = t.Mouse;
        },
        function (t) {
          b = t.sounds;
        },
        function (t) {
          (B = t.ZombiePool), (v = t.TombPool);
        },
        function (t) {
          x = t.SettingWindow;
        },
        function (t) {
          U = t.LevelPlay;
        },
      ],
      execute: function () {
        var j, P, C, I, S, D, T, M, z, O, L, R, G, N, F, k;
        a._RF.push({}, '18097APbSZKvbjiWDz1LyEh', 'PowerupFingers', void 0);
        var E = s.ccclass,
          _ = s.property;
        t(
          'PowerupFingers',
          ((j = E('PowerupFingers')),
          (P = _(u)),
          (C = _(u)),
          (I = _(u)),
          (S = _(u)),
          (D = _(u)),
          (T = _(l)),
          j(
            (((k = (function (t) {
              function n() {
                for (var n, o = arguments.length, r = new Array(o), a = 0; a < o; a++) r[a] = arguments[a];
                return (
                  ((n = t.call.apply(t, [this].concat(r)) || this).oldPos = new h(0, 0, 0)),
                  e(n, 'fireButton', O, i(n)),
                  e(n, 'snowButton', L, i(n)),
                  e(n, 'tossButton', R, i(n)),
                  e(n, 'zapButton', G, i(n)),
                  e(n, 'cherryButton', N, i(n)),
                  e(n, 'pupjson', F, i(n)),
                  (n.PowerUpProperties = []),
                  (n.powerUpBorder = new p()),
                  (n.powerUpBG = new p()),
                  (n.mousePushed = !1),
                  (n.totalTime = 5),
                  (n.countDown = 0),
                  (n.index = -1),
                  (n.oldAlpha = 0),
                  n
                );
              }
              o(n, t);
              var a = n.prototype;
              return (
                (a.judgeMouseDownStart = function () {
                  return 4 == this.index && m.lawnRec.judgeInRecP(y.position);
                }),
                (a.judgeMouseMoveStart = function () {
                  if (1 == this.index) {
                    var t = !1;
                    return (
                      B.pool().forEach(function (n) {
                        t || (n.bodyRec.judgeCrossLine(y.moveLine) && (t = !0));
                      }),
                      t ||
                        v.pool().forEach(function (n) {
                          t || (n.bodyRec.judgeCrossLine(y.moveLine) && (t = !0));
                        }),
                      t
                    );
                  }
                  return !1;
                }),
                (a.snowBallUpdate = function (t, n) {
                  if (this.mousePushed)
                    for (
                      var o = this.getObjdataByIndex(1).TimePerUse, e = Math.floor(t / o) - Math.floor(n / o), i = 0;
                      i < e;
                      i++
                    )
                      this.throwOneSnowBall();
                }),
                (a.throwOneSnowBall = function () {
                  n.prjManager.throwSnowBall(350, y.position.clone());
                }),
                (a.update = function (t) {
                  if (this.countDown > 0) {
                    var n = this.countDown + 0,
                      o = Math.floor((7 * this.countDown) / this.totalTime);
                    this.countDown -= t;
                    var e = this.countDown + 0;
                    o != Math.floor((7 * this.countDown) / this.totalTime) && b.playPowerUpCD(this.countDown / this.totalTime),
                      (this.powerUpBG.fillRange = this.countDown / this.totalTime),
                      1 == this.index && this.snowBallUpdate(n, e),
                      this.countDown <= 0 && this.tryChangingIndex(-1, null);
                  }
                  -5 == g.index &&
                    -1 != this.index &&
                    this.mousePushed &&
                    this.countDown <= 0 &&
                    this.judgeMouseMoveStart() &&
                    this.powerUpStart();
                }),
                (a.powerUpStart = function () {
                  var t,
                    n = null == (t = this.getObjdataByIndex(this.index)) ? void 0 : t.TotalTime;
                  (this.totalTime = isNaN(n) ? 4 : n),
                    (this.countDown = this.totalTime),
                    this.allButtons.forEach(function (t) {
                      t.interactable = !1;
                    }),
                    b.playPowerUpStart(this.index);
                }),
                (a.onMouseDown = function (t) {
                  (this.mousePushed = !0),
                    -5 == g.index &&
                      -1 != this.index &&
                      (this.countDown <= 0 && this.judgeMouseDownStart() && this.powerUpStart(),
                      this.countDown > 0 && 1 == this.index && this.throwOneSnowBall());
                }),
                (a.onMouseUp = function (t) {
                  this.mousePushed = !1;
                }),
                (a.onLoad = function () {
                  var t = JSON.stringify(this.pupjson);
                  (this.PowerUpProperties = JSON.parse(t).json.objects),
                    (this.countDown = 0),
                    (n.component = this),
                    (this.oldPos = this.node.position.clone()),
                    (this.node.position = this.oldPos.clone().add3f(0, -300, 0));
                }),
                (a.start = function () {
                  var t, n;
                  (this.mousePushed = !1),
                    (this.powerUpBG = null == (t = c('Canvas/LawnCommon/lawnTotal/powerUpBG')) ? void 0 : t.getComponent(p)),
                    (this.powerUpBorder =
                      null == (n = c('Canvas/LawnCommon/lawnTotal/powerUpBorder')) ? void 0 : n.getComponent(p)),
                    this.tryChangingIndex(-1, null, !1);
                }),
                (n.gameStart = function () {
                  var t;
                  null == (t = n.component) || t._gameStart();
                }),
                (a.judgeUIIndex = function () {
                  -5 != g.index && this.tryChangingIndex(-1, null, !1);
                }),
                (a.tryChangingIndex = function (t, n, o) {
                  if ((void 0 === o && (o = !0), !(this.countDown > 0)))
                    switch (t) {
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                        if (!n || t == this.index) {
                          this.tryChangingIndex(-1, null);
                          break;
                        }
                        o && -5 != g.index && g.uiingame.tryChangingIndex(-5), (this.index = t);
                        var e = n.BoardTimerColor;
                        (this.powerUpBG.color = new d(e.mRed, e.mGreen, e.mBlue, e.mAlpha)),
                          (this.powerUpBorder.color = new d(e.mRed, e.mGreen, e.mBlue, 255));
                        break;
                      default:
                        this.allButtons.forEach(function (t) {
                          t.interactable = !0;
                        }),
                          (this.index = -1),
                          (this.powerUpBG.color = new d(255, 255, 255, 0)),
                          (this.powerUpBorder.color = new d(255, 255, 255, 0)),
                          o && g.uiingame.tryChangingIndex(-1),
                          (this.powerUpBG.fillRange = 1);
                    }
                }),
                (a.getObjdataByIndex = function (t) {
                  var n = null;
                  return (
                    this.PowerUpProperties.forEach(function (o) {
                      var e, i, r, a, s;
                      n ||
                        (((0 == t && 'powerupflamethrower' == (null == o || null == (e = o.objdata) ? void 0 : e.TypeName)) ||
                          (1 == t && 'powerupsnowball' == (null == o || null == (i = o.objdata) ? void 0 : i.TypeName)) ||
                          (2 == t && 'powerupflickzombie' == (null == o || null == (r = o.objdata) ? void 0 : r.TypeName)) ||
                          (3 == t && 'powerupwizardfinger' == (null == o || null == (a = o.objdata) ? void 0 : a.TypeName)) ||
                          (4 == t && 'powerupcherrybomb' == (null == o || null == (s = o.objdata) ? void 0 : s.TypeName))) &&
                          (n = o.objdata));
                    }),
                    n
                  );
                }),
                (a.powerUpFlame = function () {
                  var t = this.getObjdataByIndex(0);
                  this.tryChangingIndex(0, t);
                }),
                (a.powerUpSnow = function () {
                  var t = this.getObjdataByIndex(1);
                  this.tryChangingIndex(1, t);
                }),
                (a.powerUpToss = function () {
                  var t = this.getObjdataByIndex(2);
                  this.tryChangingIndex(2, t);
                }),
                (a.powerUpZap = function () {
                  var t = this.getObjdataByIndex(3);
                  this.tryChangingIndex(3, t);
                }),
                (a.powerUpCherry = function () {
                  var t = this.getObjdataByIndex(4);
                  this.tryChangingIndex(4, t);
                }),
                (a._gameStart = function () {
                  (x.allowCheat || U.component.PowerUpsForceShow) &&
                    w(this.node).to(0.3, { position: this.oldPos }, { easing: 'cubicOut' }).start();
                }),
                r(
                  n,
                  [
                    {
                      key: 'allButtons',
                      get: function () {
                        return [this.fireButton, this.snowButton, this.tossButton, this.zapButton, this.cherryButton];
                      },
                    },
                  ],
                  [
                    {
                      key: 'uiIndexLocked',
                      get: function () {
                        return this.component.countDown > 0;
                      },
                    },
                  ]
                ),
                n
              );
            })(f)).prjManager = void 0),
            (k.component = void 0),
            (O = n((z = k).prototype, 'fireButton', [P], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (L = n(z.prototype, 'snowButton', [C], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (R = n(z.prototype, 'tossButton', [I], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (G = n(z.prototype, 'zapButton', [S], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (N = n(z.prototype, 'cherryButton', [D], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (F = n(z.prototype, 'pupjson', [T], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (M = z))
          ) || M)
        );
        a._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/preSplashScene.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (e) {
  var n, r, t, c, o;
  return {
    setters: [
      function (e) {
        n = e.inheritsLoose;
      },
      function (e) {
        (r = e.cclegacy), (t = e._decorator), (c = e.director), (o = e.Component);
      },
    ],
    execute: function () {
      var s;
      r._RF.push({}, '6e631wnaMVDZL2Rx3CcISnG', 'preSplashScene', void 0);
      var p = t.ccclass;
      t.property,
        e(
          'preSplashScene',
          p('preSplashScene')(
            (s = (function (e) {
              function r() {
                return e.apply(this, arguments) || this;
              }
              return (
                n(r, e),
                (r.prototype.start = function () {
                  c.loadScene('splashScene');
                }),
                r
              );
            })(o))
          ) || s
        );
      r._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/PrimalPeashooter.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Peashooter.ts',
    './commonShot.ts',
    './NodePools.ts',
    './SoundsController.ts',
    './Zombie.ts',
  ],
  function (o) {
    var t, n, e, i, a, r, s, u, l, c, h, d, f, p;
    return {
      setters: [
        function (o) {
          (t = o.applyDecoratedDescriptor),
            (n = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (i = o.assertThisInitialized);
        },
        function (o) {
          (a = o.cclegacy), (r = o._decorator), (s = o.AudioClip), (u = o.Size), (l = o.AudioSource);
        },
        function (o) {
          c = o.PeashooterPlant;
        },
        function (o) {
          h = o.SplashDamage;
        },
        function (o) {
          d = o.ArrayGet;
        },
        function (o) {
          f = o.SoundFXController;
        },
        function (o) {
          p = o.zombiePoison;
        },
      ],
      execute: function () {
        var m, P, S, y, g;
        a._RF.push({}, '47ba7dMXhNDu4+WxuxwF5lY', 'PrimalPeashooter', void 0);
        var C = r.ccclass,
          b = r.property;
        o(
          'PrimalPeashooterPlant',
          ((m = C('PrimalPeashooter')),
          (P = b([s])),
          m(
            ((g = t(
              (y = (function (o) {
                function t() {
                  for (var t, n = arguments.length, a = new Array(n), r = 0; r < n; r++) a[r] = arguments[r];
                  return ((t = o.call.apply(o, [this].concat(a)) || this).foodCount = 0), e(t, 'foodShootSound', g, i(t)), t;
                }
                n(t, o);
                var a = t.prototype;
                return (
                  (a.shotInitialize = function (o) {
                    if (this.fooding)
                      o.setKnockBack(1),
                        o.setDamage(100),
                        o.setSplashDamages([new h(100, new u(2, 1), 0, 0, 0, new p(0, 0), 3, 1)]),
                        o.setStun(3);
                    else {
                      var t = Math.round(Math.random());
                      o.setKnockBack(t), o.setStun(1 - t);
                    }
                  }),
                  (a.specialPlantFood = function () {
                    (this.foodCount = 0), this.anmControl.playAnimation('Food', 1 / 0), (this.busy = 1 / 0);
                  }),
                  (a.animationListenerAdd = function (o) {
                    'shootFood' == o.name &&
                      (this._shoot(),
                      this.getComponent(l).playOneShot(d.getRandom(this.foodShootSound), f.SoundFXVolume),
                      ++this.foodCount >= this.foodPeaMaxCount && this.foodEnd());
                  }),
                  (a.specialPlantOnEnable = function () {
                    this.initialize(), (this.foodCount = 0);
                  }),
                  t
                );
              })(c)).prototype,
              'foodShootSound',
              [P],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (S = y))
          ) || S)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/PrimalWallNut.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './WallNut.ts'],
  function (t) {
    var i, l, s, a;
    return {
      setters: [
        function (t) {
          i = t.inheritsLoose;
        },
        function (t) {
          (l = t.cclegacy), (s = t._decorator);
        },
        function (t) {
          a = t.WallNutPlant;
        },
      ],
      execute: function () {
        var e;
        l._RF.push({}, '66600o+bKNIBIyIoFQGsqb0', 'PrimalWallNut', void 0);
        var r = s.ccclass;
        s.property,
          t(
            'PrimalWallNutPlant',
            r('PrimalWallNutPlant')(
              (e = (function (t) {
                function l() {
                  return t.apply(this, arguments) || this;
                }
                return (
                  i(l, t),
                  (l.prototype.normalSmash = function (t) {
                    if (!this.fooding && !this.invincible)
                      if (this.armorHealth > 0) (this.armorHealth = 0), (this.foodable = !0), this.setArmor();
                      else if (this.hurtStage < 3) {
                        for (var i = this.health + 0; i - this.toughness / 4 > 0; ) i -= this.toughness / 4;
                        this.dealNormalDamage(i);
                      } else this.die();
                  }),
                  l
                );
              })(a))
            ) || e
          );
        l._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/Prizes.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (e) {
  var r, i, n, t, o, c, a, s;
  return {
    setters: [
      function (e) {
        (r = e.applyDecoratedDescriptor), (i = e.inheritsLoose), (n = e.initializerDefineProperty), (t = e.assertThisInitialized);
      },
      function (e) {
        (o = e.cclegacy), (c = e._decorator), (a = e.Prefab), (s = e.Component);
      },
    ],
    execute: function () {
      var u, l, p, f, b;
      o._RF.push({}, 'f36f0SuWO5FcKaAAqnkCjmU', 'Prizes', void 0);
      var g = c.ccclass,
        h = c.property,
        y = e(
          'prizeRes',
          (function () {
            function e() {}
            return (
              (e.coinbag = function () {
                return this.res.coinbag;
              }),
              e
            );
          })()
        );
      y.res = void 0;
      e(
        'Prizes',
        ((u = g('Prizes')),
        (l = h(a)),
        u(
          ((b = r(
            (f = (function (e) {
              function r() {
                for (var r, i = arguments.length, o = new Array(i), c = 0; c < i; c++) o[c] = arguments[c];
                return (r = e.call.apply(e, [this].concat(o)) || this), n(r, 'coinbag', b, t(r)), r;
              }
              return (
                i(r, e),
                (r.prototype.onLoad = function () {
                  y.res = this;
                }),
                r
              );
            })(s)).prototype,
            'coinbag',
            [l],
            { configurable: !0, enumerable: !0, writable: !0, initializer: null }
          )),
          (p = f))
        ) || p)
      );
      o._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/ProjectileManager.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './commonShot.ts',
    './Character.ts',
    './NodePools.ts',
    './CabbagePult.ts',
    './Square.ts',
    './SoundRescourses.ts',
    './PowerupFingers.ts',
  ],
  function (e) {
    var n, o, t, r, a, i, l, s, c, u, p, f, g, m, d, y, h, b, w;
    return {
      setters: [
        function (e) {
          (n = e.applyDecoratedDescriptor),
            (o = e.inheritsLoose),
            (t = e.initializerDefineProperty),
            (r = e.assertThisInitialized);
        },
        function (e) {
          (a = e.cclegacy), (i = e._decorator), (l = e.Prefab), (s = e.AudioClip), (c = e.Vec3), (u = e.Component);
        },
        function (e) {
          (p = e.commonShot), (f = e.ProjectileEnemyType);
        },
        function (e) {
          g = e.CharacterType;
        },
        function (e) {
          (m = e.NodePools), (d = e.ArrayGet);
        },
        function (e) {
          y = e.cabbagePult;
        },
        function (e) {
          h = e.Square;
        },
        function (e) {
          b = e.sounds;
        },
        function (e) {
          w = e.PowerupFingers;
        },
      ],
      execute: function () {
        var P, j, v, S, C, T, B;
        a._RF.push({}, 'e2a4aMwVmVCUL8xjgLJS6yF', 'ProjectileManager', void 0);
        var L = i.ccclass,
          z = i.property,
          M = e(
            'projectile',
            (function () {
              function e() {}
              return (
                (e.disableProjectile = function (e) {
                  var n = this.manager,
                    o = n.prjs.indexOf(e);
                  -1 != o && n.prjs.splice(o, 1);
                }),
                (e.registerProjectile = function (e, n, o) {
                  var t = this.manager;
                  if (e.getComponent(p)) {
                    var r = e.getComponent(p);
                    n == g.plant ? (r.enemyType = f.plant) : n == g.zombie ? (r.enemyType = f.zombie) : (r.enemyType = f.none),
                      -1 == t.prjs.indexOf(e) && t.prjs.push(e);
                  }
                }),
                e
              );
            })()
          );
        M.manager = void 0;
        e(
          'ProjectileManager',
          ((P = L('ProjectileManager')),
          (j = z(l)),
          (v = z([s])),
          P(
            ((T = n(
              (C = (function (e) {
                function n() {
                  for (var n, o = arguments.length, a = new Array(o), i = 0; i < o; i++) a[i] = arguments[i];
                  return (
                    ((n = e.call.apply(e, [this].concat(a)) || this).prjs = []),
                    t(n, 'snowBall', T, r(n)),
                    t(n, 'snowBallThrowSound', B, r(n)),
                    n
                  );
                }
                o(n, e);
                var a = n.prototype;
                return (
                  (a.onLoad = function () {
                    (M.manager = this), (w.prjManager = this);
                  }),
                  (a.throwSnowBall = function (e, n) {
                    var o,
                      t = m.instantiatePooly(this.snowBall),
                      r = h.getLaneComponent(2),
                      a = y.lobOneCabbageOnPos(
                        t,
                        new c(r.toLeft.worldPosition.x, r.floorY, 100),
                        10,
                        r.prjLayer,
                        n,
                        9,
                        g.zombie,
                        13,
                        40
                      );
                    null == (o = a.db) || o.playAnimation(d.getRandom(['Idle', 'Idle1', 'Idle2'])),
                      a.setDamage(e),
                      b.play(d.getRandom(this.snowBallThrowSound));
                  }),
                  n
                );
              })(u)).prototype,
              'snowBall',
              [j],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (B = n(C.prototype, 'snowBallThrowSound', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (S = C))
          ) || S)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/PuffShroom.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Peashooter.ts',
    './CharacterManager.ts',
    './peaShooterSound.ts',
    './Square.ts',
    './puffShroomSound.ts',
  ],
  function (o) {
    var t, n, e, i, a, r, l, s, f, c, u, h, d, p, m;
    return {
      setters: [
        function (o) {
          (t = o.applyDecoratedDescriptor),
            (n = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (i = o.assertThisInitialized),
            (a = o.createClass);
        },
        function (o) {
          (r = o.cclegacy), (l = o._decorator), (s = o.CCFloat), (f = o.Color);
        },
        function (o) {
          c = o.PeashooterPlant;
        },
        function (o) {
          (u = o.PlantPool), (h = o.Rectangle);
        },
        function (o) {
          d = o.peaShooterSound;
        },
        function (o) {
          p = o.Square;
        },
        function (o) {
          m = o.puffShroomSound;
        },
      ],
      execute: function () {
        var S, C, g, D, y;
        r._RF.push({}, '34ee0ldRRtFW6EvDX/mfEQ7', 'PuffShroom', void 0);
        var P = l.ccclass,
          v = l.property;
        o(
          'PuffShroomPlant',
          ((S = P('PuffShroomPlant')),
          (C = v(s)),
          S(
            ((y = t(
              (D = (function (o) {
                function t() {
                  for (var t, n = arguments.length, a = new Array(n), r = 0; r < n; r++) a[r] = arguments[r];
                  return (
                    ((t = o.call.apply(o, [this].concat(a)) || this).foodDuration = 0),
                    e(t, 'lifeSpan', y, i(t)),
                    (t._lifeCD = 60),
                    t
                  );
                }
                n(t, o);
                var r = t.prototype;
                return (
                  (r.specialPlantFood = function (o) {
                    var n = this;
                    void 0 === o && (o = !0),
                      o &&
                        (this.getComponent(d).playFood(),
                        u
                          .pool()
                          .concat()
                          .forEach(function (o) {
                            if (!o.fooding && o.node.name == n.node.name) {
                              var e = o.getComponent(t),
                                i = e.inLnC.cIndex - n.inLnC.cIndex,
                                a = e.inLnC.lIndex - n.inLnC.lIndex,
                                r = Math.sqrt(i * i + a * a);
                              (e.foodDuration = r / 8), e.food(!1);
                            }
                          })),
                      (this.lifeCD = this.lifeSpan),
                      this.anmControl.playAnimation('FoodStart', 2, 0, 1 / (this.foodDuration + 0.05));
                  }),
                  (r.setDetecter = function (o, t) {
                    this.detector = h.createRectangleNodeSide(t.node, 3.5 * p.SquareDisW, p.SquareDisH);
                  }),
                  (r.shotInitialize = function (o) {
                    o.maxDistance_ = 4;
                  }),
                  (r.specialPeashooterUpdate = function (o) {
                    this.fooding || (this.lifeCD -= o);
                  }),
                  (r.specialPeashooterOnEnable = function () {
                    (this.lifeCD = this.lifeSpan), (this.deathAnm = 'Death');
                  }),
                  (r.specialPlantFoodEnd = function () {
                    this.anmControl.playAnimation('FoodEnd', 1);
                  }),
                  (r.animationListenerAdd = function (o) {
                    'toFooding' == o.name && (this.anmControl.playAnimation('Fooding', 1 / 0, 0, 1), this.foodShooting());
                  }),
                  a(t, [
                    {
                      key: 'lifeCD',
                      get: function () {
                        return this._lifeCD;
                      },
                      set: function (o) {
                        var t,
                          n = 0;
                        if (((this._lifeCD = o), o <= 0))
                          return (this.deathAnm = 'Fade'), this.getComponent(m).playFadeSound(), void this.die();
                        for (n = 0; n < 3 && !(o > (this.lifeSpan / 3) * n && o <= (this.lifeSpan / 3) * (n + 1)); n++);
                        null == (t = this.anmControl.body.armature().getSlot('head')) || t._setDisplayIndex(2 - n);
                        var e = 1 == (!this.fooding && o < 10 && o > 0 && Math.floor(4 * o) % 4) ? 100 : 255,
                          i = this.anmControl.body.color.clone();
                        this.anmControl.body.color = new f(i.r, i.g, i.b, e);
                      },
                    },
                  ]),
                  t
                );
              })(c)).prototype,
              'lifeSpan',
              [C],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 60;
                },
              }
            )),
            (g = D))
          ) || g)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/puffShroomSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './peaShooterSound.ts', './NodePools.ts'],
  function (o) {
    var t, e, n, r, i, u, a, s, d;
    return {
      setters: [
        function (o) {
          (t = o.applyDecoratedDescriptor),
            (e = o.inheritsLoose),
            (n = o.initializerDefineProperty),
            (r = o.assertThisInitialized);
        },
        function (o) {
          (i = o.cclegacy), (u = o._decorator), (a = o.AudioClip);
        },
        function (o) {
          s = o.peaShooterSound;
        },
        function (o) {
          d = o.ArrayGet;
        },
      ],
      execute: function () {
        var f, p, c, l, S, h, y;
        i._RF.push({}, 'ad057XU3pFDDo6YHtUHYiqf', 'puffShroomSound', void 0);
        var m = u.ccclass,
          g = u.property;
        o(
          'puffShroomSound',
          ((f = m('puffShroomSound')),
          (p = g([a])),
          (c = g([a])),
          f(
            ((h = t(
              (S = (function (o) {
                function t() {
                  for (var t, e = arguments.length, i = new Array(e), u = 0; u < e; u++) i[u] = arguments[u];
                  return (
                    (t = o.call.apply(o, [this].concat(i)) || this),
                    n(t, 'foodStartSounds', h, r(t)),
                    n(t, 'fadeSounds', y, r(t)),
                    t
                  );
                }
                e(t, o);
                var i = t.prototype;
                return (
                  (i.playFood = function () {
                    this.playOneShot(d.getRandom(this.foodStartSounds));
                  }),
                  (i.playFadeSound = function () {
                    this.playOneShot(d.getRandom(this.fadeSounds));
                  }),
                  t
                );
              })(s)).prototype,
              'foodStartSounds',
              [p],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (y = t(S.prototype, 'fadeSounds', [c], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (l = S))
          ) || l)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Pumpkin.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './WallNut.ts', './wallnutSound.ts'],
  function (t) {
    var n, i, e, o, a;
    return {
      setters: [
        function (t) {
          n = t.inheritsLoose;
        },
        function (t) {
          (i = t.cclegacy), (e = t._decorator);
        },
        function (t) {
          o = t.WallNutPlant;
        },
        function (t) {
          a = t.wallnutSound;
        },
      ],
      execute: function () {
        var s;
        i._RF.push({}, '4a226yglb9CeIyVMLO4Q5/8', 'Pumpkin', void 0);
        var l = e.ccclass;
        e.property,
          t(
            'PumpkinPlant',
            l('PumpkinPlant')(
              (s = (function (t) {
                function i() {
                  return t.apply(this, arguments) || this;
                }
                n(i, t);
                var e = i.prototype;
                return (
                  (e.onDamaged = function (t, n, i) {
                    for (var e = 1; e <= 3; e++)
                      n >= (this.toughness / 3) * e && i <= (this.toughness / 3) * e && this.setAnimation(3 - e);
                  }),
                  (e.specialPlantFood = function (t) {
                    (this.armorHealth = this.armorToughness),
                      (this.foodable = !1),
                      this.setArmor(0),
                      this.setAnimation(),
                      this.getComponent(a).playFoodSound(),
                      this.foodEnd();
                  }),
                  (e.setAnimation = function (t) {
                    void 0 === t && (t = 0), (this.deathAnm = '');
                    var n,
                      i = this.anmControl;
                    switch (((i.RandomAnim = []), (this.hurtStage = t), t)) {
                      case 1:
                        i.IdleAnim = 'Idle2';
                        break;
                      case 2:
                        i.IdleAnim = 'Idle3';
                        break;
                      default:
                        (i.IdleAnim = 'Idle1'), (this.hurtStage = 0);
                    }
                    this.dead || (i.playRandom(), this.replantable() && (null == (n = this.inLnC) || n.readIndex()));
                  }),
                  i
                );
              })(o))
            ) || s
          );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Repeater.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Peashooter.ts', './peaShooterSound.ts'],
  function (t) {
    var o, e, n, a, i, r, s, l, p, c, u;
    return {
      setters: [
        function (t) {
          (o = t.applyDecoratedDescriptor),
            (e = t.inheritsLoose),
            (n = t.initializerDefineProperty),
            (a = t.assertThisInitialized);
        },
        function (t) {
          (i = t.cclegacy), (r = t._decorator), (s = t.Prefab), (l = t.tween), (p = t.dragonBones);
        },
        function (t) {
          c = t.PeashooterPlant;
        },
        function (t) {
          u = t.peaShooterSound;
        },
      ],
      execute: function () {
        var h, f, d, m, y;
        i._RF.push({}, '0ce4bS4im9AmLSjGLyc0BdI', 'Repeater', void 0);
        var g = r.ccclass,
          P = r.property;
        t(
          'RepeaterPlant',
          ((h = g('RepeaterPlant')),
          (f = P(s)),
          h(
            ((y = o(
              (m = (function (t) {
                function o() {
                  for (var o, e = arguments.length, i = new Array(e), r = 0; r < e; r++) i[r] = arguments[r];
                  return (o = t.call.apply(t, [this].concat(i)) || this), n(o, 'peaMega', y, a(o)), o;
                }
                e(o, t);
                var i = o.prototype;
                return (
                  (i.specialPlantFood = function () {
                    var t = this;
                    this.anmControl.playAnimation('Food', 1 / 0),
                      this.getComponent(u).playFood(),
                      (this.busy = 1 / 0),
                      (this._foodLeftPeaCount = this.foodPeaMaxCount);
                    var o = this.getComponent(c);
                    l(o)
                      .to(2, { foodLeftPeaCount: 0 })
                      .call(function () {
                        t.anmControl.playAnimation('FoodBig', 1), t.anmControl.body.once(p.EventObject.COMPLETE, t.foodEnd, t);
                      })
                      .start();
                  }),
                  (i.animationListener = function (t) {
                    'Shoot' == t.name && this._shoot(),
                      'shootMega' == t.name && (this._shoot(!1, !1, this.peaMega), this.getComponent(u).playShootMega()),
                      'ShootSound' == t.name && this.getComponent(u).playShootSound();
                  }),
                  o
                );
              })(c)).prototype,
              'peaMega',
              [f],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (d = m))
          ) || d)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Rotobaga.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Peashooter.ts',
    './NodePools.ts',
    './Character.ts',
    './commonShot.ts',
    './Square.ts',
    './rotobagaSound.ts',
    './CharacterManager.ts',
  ],
  function (o) {
    var t, n, e, a, i, r, s, c, h, u, l, d, p, f, m, y, S, g, P, C;
    return {
      setters: [
        function (o) {
          (t = o.applyDecoratedDescriptor),
            (n = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (a = o.assertThisInitialized);
        },
        function (o) {
          (i = o.cclegacy), (r = o._decorator), (s = o.Prefab), (c = o.Vec2), (h = o.Vec3), (u = o.HALF_PI);
        },
        function (o) {
          (l = o.peaShooter), (d = o.PeashooterPlant);
        },
        function (o) {
          p = o.NodePools;
        },
        function (o) {
          f = o.CharacterType;
        },
        function (o) {
          m = o.commonShot;
        },
        function (o) {
          y = o.Square;
        },
        function (o) {
          S = o.rotobagaSound;
        },
        function (o) {
          (g = o.Rectangle), (P = o.ZombiePool), (C = o.TombPool);
        },
      ],
      execute: function () {
        var w, v, b, L, D;
        i._RF.push({}, '7c365RLDvtKUKsmFwtGwl+1', 'Rotobaga', void 0);
        var M = r.ccclass,
          R = r.property;
        o(
          'RotobagaPlant',
          ((w = M('Rotobaga')),
          (v = R(s)),
          w(
            ((D = t(
              (L = (function (o) {
                function t() {
                  for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
                  return ((t = o.call.apply(o, [this].concat(i)) || this).detectors = []), e(t, 'peaMega', D, a(t)), t;
                }
                n(t, o);
                var i = t.prototype;
                return (
                  (i._shootX = function (o, t, n, e) {
                    void 0 === o && (o = new c(1, 1)),
                      void 0 === t && (t = !1),
                      void 0 === n && (n = this.pea),
                      void 0 === e && (e = 15);
                    var a = 0;
                    t && (a = Math.round(5 * Math.random()) - 2.5), (e = 15 + a);
                    var i = new c(y.SquareDisW * o.x + 2 * a, y.SquareDisH * o.y).normalize().multiplyScalar(e),
                      r = p.instantiatePooly(n);
                    if (r) {
                      var s = l
                        .shootOnePea(
                          r,
                          new h(this.peaSpawnpoint.worldPosition.x, this.inLnC.plantPoint.worldPosition.y, 0),
                          Math.max(1, this.peaSpawnpoint.worldPosition.y - this.inLnC.plantPoint.worldPosition.y),
                          this.inLane.prjLayer,
                          i,
                          f.zombie
                        )
                        .getComponent(m);
                      this.inLnC.havePeaBuff && s.addPeaBuff();
                    }
                  }),
                  (i.onFoodLeftPeaCountDec = function () {
                    var o = this;
                    [new c(1, 1), new c(-1, 1), new c(1, -1), new c(-1, -1)].forEach(function (t) {
                      o._shootX(t, !0, o.peaMega);
                    });
                  }),
                  (i.setDetecter = function (o, t) {
                    (this.detectors = []),
                      this.detectors.push(
                        g.createRectangleNodeCenter(
                          t.node,
                          16 * y.SquareDisW,
                          30,
                          (90 * Math.atan2(y.SquareDisH, y.SquareDisW)) / u
                        ),
                        g.createRectangleNodeCenter(
                          t.node,
                          16 * y.SquareDisW,
                          30,
                          (90 * Math.atan2(-y.SquareDisH, y.SquareDisW)) / u
                        )
                      );
                  }),
                  (i.specialPlantFoodEnd = function () {
                    this.getComponent(S).playFoodEnd(), (this.busy = 0);
                  }),
                  (i.specialPlantFood = function () {
                    this.anmControl.playAnimation('Food', 1), this.getComponent(S).playFood(), (this.busy = 1 / 0);
                  }),
                  (i.detectEnemy = function () {
                    var o = this,
                      t = !1;
                    return (
                      this.detectors.forEach(function (n) {
                        t ||
                          (P.pool().forEach(function (o) {
                            t || (n.judgeCrossRec(o.bodyRec) && (t = !0));
                          }),
                          C.pool().forEach(function (n) {
                            t ||
                              (Math.abs(n.inLnC.cIndex - o.inLnC.cIndex) == Math.abs(n.inLnC.lIndex - o.inLnC.lIndex) &&
                                (t = !0));
                          }));
                      }),
                      t
                    );
                  }),
                  (i._shootPeaAnimation = function () {
                    this.getComponent(S).playBreath(),
                      this.anmControl.playAnimation('Shoot', 1, 0.1, Math.max(1.35 / this.shootInterval, 1));
                  }),
                  (i.animationListener = function (o) {
                    var t = this;
                    'Shoot' == o.name &&
                      [new c(1, 1), new c(-1, 1), new c(1, -1), new c(-1, -1)].forEach(function (o) {
                        t._shootX(o, !1);
                      }),
                      'ShootSound' == o.name && this.getComponent(S).playShootSound(),
                      'shootStart' == o.name && (this.getComponent(S).playFoodShoot(), this.foodShooting()),
                      'shootEnd' == o.name && this.foodEnd();
                  }),
                  t
                );
              })(d)).prototype,
              'peaMega',
              [v],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (b = L))
          ) || b)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/rotobagaSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './plantSound.ts'],
  function (o) {
    var t, n, e, i, r, a, u, l, d;
    return {
      setters: [
        function (o) {
          (t = o.applyDecoratedDescriptor),
            (n = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (i = o.assertThisInitialized);
        },
        function (o) {
          (r = o.cclegacy), (a = o._decorator), (u = o.AudioClip);
        },
        function (o) {
          l = o.ArrayGet;
        },
        function (o) {
          d = o.plantSound;
        },
      ],
      execute: function () {
        var c, s, h, p, S, f, y, b, g, m, v, z, F;
        r._RF.push({}, '2d9e91fGxtJZIwmH6DWzHsQ', 'rotobagaSound', void 0);
        var w = a.ccclass,
          R = a.property;
        o(
          'rotobagaSound',
          ((c = w('rotobagaSound')),
          (s = R(u)),
          (h = R([u])),
          (p = R([u])),
          (S = R([u])),
          (f = R([u])),
          c(
            ((g = t(
              (b = (function (o) {
                function t() {
                  for (var t, n = arguments.length, r = new Array(n), a = 0; a < n; a++) r[a] = arguments[a];
                  return (
                    (t = o.call.apply(o, [this].concat(r)) || this),
                    e(t, 'foodSound', g, i(t)),
                    e(t, 'shootSound', m, i(t)),
                    e(t, 'breathSound', v, i(t)),
                    e(t, 'foodEndSound', z, i(t)),
                    e(t, 'shootFoodSound', F, i(t)),
                    (t.volumeScale = 0.5),
                    t
                  );
                }
                n(t, o);
                var r = t.prototype;
                return (
                  (r.playFood = function () {
                    this.playOneShot(this.foodSound, this.volumeScale);
                  }),
                  (r.playBreath = function () {
                    this.playOneShot(l.getRandom(this.breathSound), this.volumeScale);
                  }),
                  (r.playFoodEnd = function () {
                    this.playOneShot(l.getRandom(this.foodEndSound), this.volumeScale);
                  }),
                  (r.playShootSound = function () {
                    this.playOneShot(l.getRandom(this.shootSound), this.volumeScale);
                  }),
                  (r.playFoodShoot = function () {
                    this.playOneShot(l.getRandom(this.shootFoodSound), this.volumeScale);
                  }),
                  t
                );
              })(d)).prototype,
              'foodSound',
              [s],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (m = t(b.prototype, 'shootSound', [h], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (v = t(b.prototype, 'breathSound', [p], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (z = t(b.prototype, 'foodEndSound', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (F = t(b.prototype, 'shootFoodSound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (y = b))
          ) || y)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/SandBoxLevelSettingWindow.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './levelController.ts', './SettingWindow.ts', './LnC.ts', './UI.ts'],
  function (e) {
    var t, n, r, o, i, l, a, f, c, u, s, p, S;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (n = e.inheritsLoose),
            (r = e.initializerDefineProperty),
            (o = e.assertThisInitialized),
            (i = e.createClass);
        },
        function (e) {
          (l = e.cclegacy), (a = e._decorator), (f = e.Sprite), (c = e.Component);
        },
        function (e) {
          u = e.LevelPlay;
        },
        function (e) {
          s = e.SettingWindow;
        },
        function (e) {
          p = e.LnCSpawnZombieStyleEnum;
        },
        function (e) {
          S = e.UIInGame;
        },
      ],
      execute: function () {
        var P, d, _, y, D, E, h, b, g, v;
        l._RF.push({}, 'fe53aD9ndVEk5T/aGwBI+tn', 'SandBoxLevelSettingWindow', void 0);
        var w = a.ccclass,
          C = a.property;
        e(
          'SandBoxLevelSettingWindow',
          ((P = w('SandBoxLevelSettingWindow')),
          (d = C(f)),
          (_ = C(f)),
          (y = C(f)),
          P(
            (((v = (function (e) {
              function t() {
                for (var t, n = arguments.length, i = new Array(n), l = 0; l < n; l++) i[l] = arguments[l];
                return (
                  (t = e.call.apply(e, [this].concat(i)) || this),
                  r(t, 'fpSetter', h, o(t)),
                  r(t, 'noCDSetter', b, o(t)),
                  r(t, 'fpfSetter', g, o(t)),
                  t
                );
              }
              n(t, e);
              var l = t.prototype;
              return (
                (l.onLoad = function () {
                  t.cp = this;
                }),
                (l.reverseFreePlant = function () {
                  (t._freePlant = !t._freePlant), (this.fpSetter.color = t._freePlant ? s.GREEN : s.RED);
                }),
                (l.reverseNoCDPlant = function () {
                  (t._noCDPlant = !t._noCDPlant), (this.noCDSetter.color = t._noCDPlant ? s.GREEN : s.RED);
                }),
                (l.reverseFreePF = function () {
                  (t._freePF = !t._freePF), (this.fpfSetter.color = t._freePF ? s.GREEN : s.RED);
                }),
                (l.onEnable = function () {
                  (this.fpSetter.color = t._freePlant ? s.GREEN : s.RED),
                    (this.noCDSetter.color = t._noCDPlant ? s.GREEN : s.RED),
                    (this.fpfSetter.color = t._freePF ? s.GREEN : s.RED);
                }),
                i(t, null, [
                  {
                    key: 'freePlant',
                    get: function () {
                      return this._freePlant && u.sandBoxModeOn;
                    },
                  },
                  {
                    key: 'noCDPlant',
                    get: function () {
                      return this._noCDPlant && u.sandBoxModeOn;
                    },
                  },
                  {
                    key: 'freePF',
                    get: function () {
                      return this._freePF && u.sandBoxModeOn;
                    },
                  },
                  {
                    key: 'zombieSpawnStyle',
                    get: function () {
                      return this._zombieSpawnStyle;
                    },
                    set: function (e) {
                      e >= p.amount && (e = p.directPut), S.uiingame.readSBZombieSpawnStyle(e), (this._zombieSpawnStyle = e);
                    },
                  },
                ]),
                t
              );
            })(c))._freePlant = !0),
            (v._noCDPlant = !0),
            (v._freePF = !0),
            (v._zombieSpawnStyle = 0),
            (v.zombieReversed = !1),
            (v.cp = void 0),
            (h = t((E = v).prototype, 'fpSetter', [d], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (b = t(E.prototype, 'noCDSetter', [_], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (g = t(E.prototype, 'fpfSetter', [y], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (D = E))
          ) || D)
        );
        l._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/SandBoxZombieCards.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './CardFeatureTotalZombie.ts',
    './cardSelectAlmanac.ts',
    './Zombies.ts',
    './UI.ts',
    './BodyGrouper.ts',
    './SoundRescourses.ts',
  ],
  function (e) {
    var n, o, t, i, r, a, s, c, u, d, l, m, p, f, h, C, y, b, g;
    return {
      setters: [
        function (e) {
          (n = e.applyDecoratedDescriptor),
            (o = e.inheritsLoose),
            (t = e.initializerDefineProperty),
            (i = e.assertThisInitialized);
        },
        function (e) {
          (r = e.cclegacy),
            (a = e._decorator),
            (s = e.Node),
            (c = e.instantiate),
            (u = e.Vec3),
            (d = e.dragonBones),
            (l = e.Color),
            (m = e.EventMouse),
            (p = e.Component);
        },
        function (e) {
          f = e.CardFeatureTotalZombie;
        },
        function (e) {
          h = e.cardSelectAlmanac;
        },
        function (e) {
          C = e.zombies;
        },
        function (e) {
          y = e.UIInGame;
        },
        function (e) {
          b = e.BodyGrouper;
        },
        function (e) {
          g = e.sounds;
        },
      ],
      execute: function () {
        var v, x, S, B, E, I;
        r._RF.push({}, '99826QbZU5LHoKNL0lEg500', 'SandBoxZombieCards', void 0);
        var z = a.ccclass,
          D = a.property;
        e(
          'SandBoxZombieCards',
          ((v = z('SandBoxZombieCards')),
          (x = D([f])),
          v(
            (((I = (function (e) {
              function n() {
                for (var n, o = arguments.length, r = new Array(o), a = 0; a < o; a++) r[a] = arguments[a];
                return (
                  (n = e.call.apply(e, [this].concat(r)) || this),
                  t(n, 'zombieCards', E, i(n)),
                  (n.currentID = 0),
                  (n.index = -1),
                  n
                );
              }
              o(n, e);
              var r = n.prototype;
              return (
                (r.onLoad = function () {
                  var e = this;
                  (n.component = this),
                    (this.index = -1),
                    this.node.on(
                      s.EventType.MOUSE_WHEEL,
                      function (n) {
                        var o = n.getScrollY() < 0 ? 1 : -1,
                          t = e.zombieCards[0].ID;
                        e.zombieCards.forEach(function (e, n) {
                          e.cardGrouper(t + n + o, !1);
                        });
                      },
                      this
                    );
                }),
                (r.zombieGhost = function (e) {
                  var n, o;
                  this.currentID = e;
                  var t = C.getZombie(e, !0).getChildByName('Body'),
                    i = c(t);
                  (i.parent = y.uiingame.plantInHandLayer),
                    (i.position = new u(0, -20, 0)),
                    (i.worldScale = new u(0.45, 0.45, 0.45)),
                    null == (n = i.getChildByName('butterFacePAR')) ||
                      null == (n = n.getComponent(d.ArmatureDisplay)) ||
                      null == (n = n.color) ||
                      n.set(new l(0, 0, 0, 0));
                  var r = i.getComponent(d.ArmatureDisplay),
                    a = r.getComponent(b);
                  (a.body = r),
                    null == (o = r.armature().getSlot('POISONFACE')) || o._setDisplayIndex(-1),
                    r.playAnimation(a.IdleAnm, 1 / 0),
                    a.showArm(!0);
                }),
                (r.update = function (e) {
                  var n = this;
                  this.zombieCards.forEach(function (e, o) {
                    e.getComponent(h).index = n.index == o ? 1 : 0;
                  });
                }),
                (r.start = function () {
                  var e = this;
                  this.zombieCards.forEach(function (n, o) {
                    n.cardGrouper(o, !1),
                      (n.getComponent(h).suncostShown = !1),
                      n.node.on(
                        s.EventType.MOUSE_DOWN,
                        function (t) {
                          if (!y.uiingame.indexLocked && t.getButton() == m.BUTTON_LEFT) {
                            var i = 9 != y.index || o != e.index ? 9 : -1;
                            (y.uiingame.index = -1),
                              y.uiingame.tryChangingIndex(i),
                              9 == y.index
                                ? (e.zombieGhost(n.ID), g.playCardChosen(), (e.index = o))
                                : (g.playCardCancel(), (e.index = -1));
                          }
                        },
                        e
                      );
                  });
                }),
                n
              );
            })(p)).component = void 0),
            (E = n((B = I).prototype, 'zombieCards', [x], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (S = B))
          ) || S)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/ScaredyShroom.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './NodePools.ts',
    './Peashooter.ts',
    './Character.ts',
    './scaredyShroomSound.ts',
    './CharacterManager.ts',
    './Square.ts',
    './Lane.ts',
    './Plants.ts',
  ],
  function (t) {
    var o, n, e, i, a, r, s, h, d, l, c, u, p, m, f, y, g, b, P, S, v, C;
    return {
      setters: [
        function (t) {
          (o = t.applyDecoratedDescriptor),
            (n = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (i = t.assertThisInitialized);
        },
        function (t) {
          (a = t.cclegacy),
            (r = t._decorator),
            (s = t.Prefab),
            (h = t.Node),
            (d = t.Vec3),
            (l = t.Vec2),
            (c = t.macro),
            (u = t.dragonBones);
        },
        function (t) {
          p = t.Plant;
        },
        function (t) {
          m = t.NodePools;
        },
        function (t) {
          f = t.peaShooter;
        },
        function (t) {
          y = t.CharacterType;
        },
        function (t) {
          g = t.scaredyShroomSound;
        },
        function (t) {
          (b = t.PlantPool), (P = t.Rectangle);
        },
        function (t) {
          S = t.Square;
        },
        function (t) {
          v = t.Lane;
        },
        function (t) {
          C = t.PlantEnum;
        },
      ],
      execute: function () {
        var R, L, w, M, k, E, I, A, z, x, D, H, _, N, j, F, q, O, B;
        a._RF.push({}, 'bb74fHTzXNArIOYLe9wP4Rc', 'ScaredyShroom', void 0);
        var T = r.ccclass,
          U = r.property;
        t(
          'ScaredyShroomPlant',
          ((R = T('ScaredyShroomPlant')),
          (L = U({ type: Number, min: 0 })),
          (w = U(s)),
          (M = U(s)),
          (k = U(s)),
          (E = U(s)),
          (I = U(Number)),
          (A = U(Number)),
          (z = U(h)),
          R(
            ((H = o(
              (D = (function (t) {
                function o() {
                  for (var o, n = arguments.length, a = new Array(n), r = 0; r < n; r++) a[r] = arguments[r];
                  return (
                    (o = t.call.apply(t, [this].concat(a)) || this),
                    e(o, 'foodPeaMaxCount', H, i(o)),
                    e(o, 'sporeFood', _, i(o)),
                    e(o, 'spore0', N, i(o)),
                    e(o, 'spore1', j, i(o)),
                    e(o, 'spore2', F, i(o)),
                    e(o, 'knockBackRate', q, i(o)),
                    (o.detector = null),
                    (o.projectileSpeed = 1),
                    (o.oldIdle = ''),
                    (o.oldRandom = []),
                    (o.scaryDetector = null),
                    e(o, 'shootInterval', O, i(o)),
                    (o.hiding = !1),
                    e(o, 'sporeSpawnPointUp', B, i(o)),
                    (o.busy = 0),
                    (o.shooting = !1),
                    o
                  );
                }
                n(o, t);
                var a = o.prototype;
                return (
                  (a.waterable = function () {
                    return !this.hiding && !this.shooting;
                  }),
                  (a._shoot = function (t, o, n, e) {
                    void 0 === t && (t = !1),
                      void 0 === o && (o = !1),
                      void 0 === n && (n = this.spore0),
                      void 0 === e && (e = !1);
                    var i = m.instantiatePooly(n);
                    if (i) {
                      var a = 0;
                      t && (a = Math.pow(-1, Math.round(Math.random())) * Math.round(3 * Math.random()) * 5);
                      var r = 0;
                      o && (r = Math.round(5 * Math.random()));
                      var s = f.shootOnePea(
                        i,
                        new d(this.sporeSpawnPointUp.getWorldPosition().x, this.inLnC.plantPoint.worldPosition.y, 0),
                        this.sporeSpawnPointUp.getWorldPosition().y - this.inLnC.plantPoint.worldPosition.y + a,
                        this.inLane.prjLayer,
                        new l(
                          (15 + (o ? 1 : 0) * r) * this.projectileSpeed,
                          0 * (o ? 1 : 0) * (Math.round(10 * Math.random()) * Math.pow(-1, Math.round(Math.random())))
                        ),
                        y.zombie
                      );
                      e && s.setKnockBack(0.2);
                    }
                  }),
                  (a.specialPlantFoodEnd = function () {
                    var t;
                    (t = this.detectScary()) ? this.hide(t) : this.anmControl.playRandom(), (this.busy = 0);
                  }),
                  (a.specialPlantFood = function (t) {
                    var o = this;
                    if ((void 0 === t && (t = !0), t)) {
                      this.getComponent(g).playFoodSound();
                      var n = [];
                      b.pool().forEach(function (t) {
                        o.scaryDetector.judgeInRecNode(t.node) && 'ScaredyShroomPLANT' == t.node.name && n.push(t.node);
                      }),
                        n.forEach(function (t) {
                          t.getComponent(p).food(!1);
                        });
                    }
                    this.anmControl.playAnimation('Food', c.REPEAT_FOREVER), (this.busy = 1 / 0);
                    var e = 0;
                    this.schedule(
                      function () {
                        o._shoot(!0, !0, o.sporeFood, !0), ++e >= o.foodPeaMaxCount && o.foodEnd();
                      },
                      2 / this.foodPeaMaxCount,
                      this.foodPeaMaxCount,
                      0.01
                    );
                  }),
                  (a._shootPeaAnimation = function () {
                    var t = 'Shoot2';
                    Math.round(100 * Math.random()) <= this.knockBackRate && (t = 'Shoot'),
                      this.anmControl.playAnimation(t, 1, 0.1, Math.max(1.35 / this.shootInterval, 1));
                  }),
                  (a.animationListener = function (t) {
                    ('Shoot' != t.name && 'ShootKnockback' != t.name) ||
                      this._shoot(!1, !1, 'ShootKnockback' == t.name ? this.spore2 : this.spore0, 'ShootKnockback' == t.name),
                      'ShootSound' == t.name && this.getComponent(g).playShootSound(),
                      'HideEnd' == t.name && (this.hiding = !1);
                  }),
                  (a.setDetecter = function () {
                    (this.detector = P.createRectangleNodeSide(this.inLnC.node, S.SquareDisW * (9 - this.cIndex), S.SquareDisH)),
                      (this.scaryDetector = P.createRectangleNodeCenter(this.inLnC.node, 3 * S.SquareDisW, 3 * S.SquareDisH));
                  }),
                  (a.specialPlantOnEnable = function () {
                    var t = this;
                    (this.shooting = !1),
                      (this.hiding = !1),
                      (this.oldIdle = this.anmControl.IdleAnim),
                      (this.oldRandom = this.anmControl.RandomAnim),
                      (this.projectileSpeed = 1),
                      this.anmControl.body.addEventListener(
                        u.EventObject.COMPLETE,
                        function (o) {
                          t.shooting = !1;
                        },
                        this
                      );
                  }),
                  (a.detectScary = function () {
                    var t = this,
                      o = 0;
                    if (this.havePumpkin()) return 0;
                    var n = this.inLane.zombiePool(),
                      e = S.getLane(this.inLane.LaneIndex - 1)
                        .getComponent(v)
                        .zombiePool(),
                      i = S.getLane(this.inLane.LaneIndex + 1)
                        .getComponent(v)
                        .zombiePool();
                    return (
                      n.concat(e, i).forEach(function (n) {
                        if (1 != o && t.scaryDetector.judgeCrossRec(n.bodyRec)) {
                          if (n.node.worldPosition.x < t.node.worldPosition.x) return void (o = 1);
                          if (n.node.worldPosition.x >= t.node.worldPosition.x) return void (o = 2);
                        }
                      }),
                      o
                    );
                  }),
                  (a.specialPlantOnSquareChange = function (t, o) {
                    this.setDetecter();
                  }),
                  (a.startShooting = function () {
                    this.shooting = !0;
                    var t = 0.03 * Math.round(5 * Math.random()) * (this.shootInterval / 1.35);
                    this._shootPeaAnimation(), (this.busy = 60 * (t + this.shootInterval));
                  }),
                  (a.hideEnd = function () {
                    (this.hiding = !1),
                      (this.short_ = this.short),
                      this.getComponent(g).playHideSound(),
                      (this.anmControl.IdleAnim = this.oldIdle),
                      (this.anmControl.RandomAnim = this.oldRandom),
                      this.fooding ? (this.hiding = !1) : this.anmControl.playAnimation('HideEnd', 1);
                  }),
                  (a.hide = function (t) {
                    this.getComponent(g).playHideSound(),
                      (this.hiding = !0),
                      (this.short_ = !0),
                      (this.deathAnm = 'DeathHiding'),
                      (this.anmControl.IdleAnim = 'Hiding'),
                      (this.anmControl.RandomAnim = ['Hiding']),
                      this.fooding ||
                        (1 == t
                          ? this.anmControl.playAnimation('HideStartL', 1)
                          : 2 == t && this.anmControl.playAnimation('HideStartR', 1));
                  }),
                  (a.detectEnemy = function () {
                    for (var t = this.inLane.zombiePool(), o = 0; o < t.length; o++)
                      if (this.detector.judgeCrossRec(t[o].bodyRec)) return !0;
                    for (var n = this.inLane.tombPool(), e = 0; e < n.length; e++)
                      if (this.detector.judgeCrossRec(n[e].bodyRec)) return !0;
                    return !1;
                  }),
                  (a.havePumpkin = function () {
                    for (var t = this.inLnC.vineInSquare.concat(), o = 0; o < t.length; o++) if (t[o].ID == C.Pumpkin) return !0;
                    return !1;
                  }),
                  (a.specialPlantUpdate = function (t) {
                    this.busy > 0 && (this.busy -= 60 * t),
                      this.busy <= 0 && !this.hiding && this.detectEnemy() && this.startShooting();
                    var o = this.detectScary();
                    this.hiding || !o || this.shooting || this.hide(o), this.hiding && 0 == o && this.hideEnd();
                  }),
                  o
                );
              })(p)).prototype,
              'foodPeaMaxCount',
              [L],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 60;
                },
              }
            )),
            (_ = o(D.prototype, 'sporeFood', [w], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (N = o(D.prototype, 'spore0', [M], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (j = o(D.prototype, 'spore1', [k], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (F = o(D.prototype, 'spore2', [E], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (q = o(D.prototype, 'knockBackRate', [I], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 20;
              },
            })),
            (O = o(D.prototype, 'shootInterval', [A], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 1.35;
              },
            })),
            (B = o(D.prototype, 'sporeSpawnPointUp', [z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (x = D))
          ) || x)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/scaredyShroomSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './SoundsController.ts'],
  function (o) {
    var n, t, e, i, r, u, d, a, l, s, c;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (i = o.assertThisInitialized);
        },
        function (o) {
          (r = o.cclegacy), (u = o._decorator), (d = o.AudioClip), (a = o.AudioSource), (l = o.Component);
        },
        function (o) {
          s = o.ArrayGet;
        },
        function (o) {
          c = o.SoundFXController;
        },
      ],
      execute: function () {
        var h, p, S, f, y, m, g, b, C;
        r._RF.push({}, '98a37rPBuhLJYXCacd7ICjy', 'scaredyShroomSound', void 0);
        var v = u.ccclass,
          F = u.property;
        o(
          'scaredyShroomSound',
          ((h = v('scaredyShroomSound')),
          (p = F([d])),
          (S = F([d])),
          (f = F([d])),
          h(
            ((g = n(
              (m = (function (o) {
                function n() {
                  for (var n, t = arguments.length, r = new Array(t), u = 0; u < t; u++) r[u] = arguments[u];
                  return (
                    (n = o.call.apply(o, [this].concat(r)) || this),
                    e(n, 'shootSound', g, i(n)),
                    e(n, 'foodSound', b, i(n)),
                    e(n, 'hideSound', C, i(n)),
                    n
                  );
                }
                t(n, o);
                var r = n.prototype;
                return (
                  (r.onEnable = function () {
                    this.getComponent(a) || this.addComponent(a);
                  }),
                  (r.playHideSound = function () {
                    this.hideSound.length && this.getComponent(a).playOneShot(s.getRandom(this.hideSound), c.SoundFXVolume);
                  }),
                  (r.playShootSound = function () {
                    this.shootSound.length && this.getComponent(a).playOneShot(s.getRandom(this.shootSound), c.SoundFXVolume);
                  }),
                  (r.playFoodSound = function () {
                    this.foodSound.length && this.getComponent(a).playOneShot(s.getRandom(this.foodSound), c.SoundFXVolume);
                  }),
                  n
                );
              })(l)).prototype,
              'shootSound',
              [p],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (b = n(m.prototype, 'foodSound', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (C = n(m.prototype, 'hideSound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (y = m))
          ) || y)
        );
        r._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/Scenes.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (e) {
  var n, r, t, i, c, s, o, a;
  return {
    setters: [
      function (e) {
        (n = e.applyDecoratedDescriptor), (r = e.inheritsLoose), (t = e.initializerDefineProperty), (i = e.assertThisInitialized);
      },
      function (e) {
        (c = e.cclegacy), (s = e._decorator), (o = e.SceneAsset), (a = e.Component);
      },
    ],
    execute: function () {
      var l, u, p, S, f, h, d, y, b;
      c._RF.push({}, '1ee17OeWA9Fk4wRPxkLGPEx', 'Scenes', void 0);
      var m = s.ccclass,
        w = s.property,
        R = e(
          'scenes',
          (function () {
            function e() {}
            return (
              (e.inGameScene = function () {
                return this.sceneRes.inGameScene;
              }),
              (e.splashScene = function () {
                return this.sceneRes.splashScene;
              }),
              (e.worldMapScene = function () {
                return this.sceneRes.worldMapScene;
              }),
              e
            );
          })()
        );
      R.sceneRes = void 0;
      e(
        'Scenes',
        ((l = m('Scenes')),
        (u = w(o)),
        (p = w(o)),
        (S = w(o)),
        l(
          ((d = n(
            (h = (function (e) {
              function n() {
                for (var n, r = arguments.length, c = new Array(r), s = 0; s < r; s++) c[s] = arguments[s];
                return (
                  (n = e.call.apply(e, [this].concat(c)) || this),
                  t(n, 'inGameScene', d, i(n)),
                  t(n, 'splashScene', y, i(n)),
                  t(n, 'worldMapScene', b, i(n)),
                  n
                );
              }
              return (
                r(n, e),
                (n.prototype.onLoad = function () {
                  R.sceneRes = this;
                }),
                n
              );
            })(a)).prototype,
            'inGameScene',
            [u],
            { configurable: !0, enumerable: !0, writable: !0, initializer: null }
          )),
          (y = n(h.prototype, 'splashScene', [p], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
          (b = n(h.prototype, 'worldMapScene', [S], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
          (f = h))
        ) || f)
      );
      c._RF.pop();
    },
  };
});

System.register('chunks:///_virtual/ScrollViewWithoutTouchevent.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (o) {
  var t, e, n, c;
  return {
    setters: [
      function (o) {
        t = o.inheritsLoose;
      },
      function (o) {
        (e = o.cclegacy), (n = o._decorator), (c = o.ScrollView);
      },
    ],
    execute: function () {
      var u;
      e._RF.push({}, '80311OHvhFO54C5ub8cMLg6', 'ScrollViewWithoutTouchevent', void 0);
      var i = n.ccclass;
      n.property,
        o(
          'ScrollViewWithoutTouchevent',
          i('ScrollViewWithoutTouchevent')(
            (u = (function (o) {
              function e() {
                return o.apply(this, arguments) || this;
              }
              t(e, o);
              var n = e.prototype;
              return (
                (n._onTouchMoved = function (o, t) {}),
                (n._onTouchBegan = function (o, t) {}),
                (n._onTouchCancelled = function (o, t) {}),
                (n._onTouchEnded = function (o, t) {}),
                e
              );
            })(c))
          ) || u
        );
      e._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/SeagullZombieAshParticle.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './ZombieAshParticle.ts', './SoundRescourses.ts'],
  function (e) {
    var t, i, o, r, s;
    return {
      setters: [
        function (e) {
          t = e.inheritsLoose;
        },
        function (e) {
          (i = e.cclegacy), (o = e._decorator);
        },
        function (e) {
          r = e.ZombieAshParticle;
        },
        function (e) {
          s = e.sounds;
        },
      ],
      execute: function () {
        var n;
        i._RF.push({}, '29924/V30VDGZlGTJp/vFVt', 'SeagullZombieAshParticle', void 0);
        var c = o.ccclass;
        o.property,
          e(
            'SeagullZombieAshParticle',
            c('SeagullZombieAshParticle')(
              (n = (function (e) {
                function i() {
                  return e.apply(this, arguments) || this;
                }
                return (
                  t(i, e),
                  (i.prototype.zombieAshDBListener = function (e) {
                    'birdExpl' == e.name && s.playBirdExpl();
                  }),
                  i
                );
              })(r))
            ) || n
          );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/SeedChooser.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './CardFeatureTotal.ts',
    './NodePools.ts',
    './cardSelectAlmanac.ts',
    './SoundRescourses.ts',
    './Plants.ts',
  ],
  function (e) {
    var t, i, a, r, n, s, o, l, c, p, d, u, h, b, y, f, g, w, S, m, C, k;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (i = e.inheritsLoose),
            (a = e.initializerDefineProperty),
            (r = e.assertThisInitialized);
        },
        function (e) {
          (n = e.cclegacy),
            (s = e._decorator),
            (o = e.Enum),
            (l = e.SpriteFrame),
            (c = e.Sprite),
            (p = e.Node),
            (d = e.ScrollView),
            (u = e.Label),
            (h = e.EventMouse),
            (b = e.Vec2),
            (y = e.Vec3),
            (f = e.Component),
            (g = e.instantiate);
        },
        function (e) {
          w = e.CardFeatureTotal;
        },
        function (e) {
          S = e.NodePools;
        },
        function (e) {
          m = e.cardSelectAlmanac;
        },
        function (e) {
          C = e.sounds;
        },
        function (e) {
          k = e.PlantEnum;
        },
      ],
      execute: function () {
        var v, P, D, T, O, N, I, B, E, V, z, _, A, F, L, M, R, U, G;
        n._RF.push({}, 'e1b80ReMENKi7VVz0yCcde6', 'SeedChooser', void 0);
        var j = s.ccclass,
          W = s.property,
          x = (function (e) {
            return (
              (e[(e.default = 0)] = 'default'),
              (e[(e.egypt = 1)] = 'egypt'),
              (e[(e.pirate = 2)] = 'pirate'),
              (e[(e.cowboy = 3)] = 'cowboy'),
              (e[(e.future = 4)] = 'future'),
              (e[(e.dark = 5)] = 'dark'),
              (e[(e.beach = 6)] = 'beach'),
              (e[(e.beach_water = 7)] = 'beach_water'),
              (e[(e.ice = 8)] = 'ice'),
              (e[(e.lostcity = 9)] = 'lostcity'),
              (e[(e.stage = 10)] = 'stage'),
              (e[(e.dino = 11)] = 'dino'),
              (e[(e.modern = 12)] = 'modern'),
              (e[(e.boost = 13)] = 'boost'),
              (e[(e.market = 14)] = 'market'),
              e
            );
          })(x || {});
        o(k);
        e(
          'SeedChooser',
          ((v = j('SeedChooser')),
          (P = W({ type: [k] })),
          (D = W([l])),
          (T = W(c)),
          (O = W(p)),
          (N = W(d)),
          (I = W(p)),
          (B = W(u)),
          (E = W(u)),
          v(
            ((_ = t(
              (z = (function (e) {
                function t() {
                  for (var t, i = arguments.length, n = new Array(i), s = 0; s < i; s++) n[s] = arguments[s];
                  return (
                    (t = e.call.apply(e, [this].concat(n)) || this),
                    a(t, 'defaultSeedBank', _, r(t)),
                    a(t, 'bgSprites', A, r(t)),
                    a(t, 'displayBG', F, r(t)),
                    (t.PlantsInCard = []),
                    a(t, 'card0', L, r(t)),
                    a(t, 'scrollView', M, r(t)),
                    a(t, 'plantDisplayer', R, r(t)),
                    (t.plantDisplayed = void 0),
                    a(t, 'plantNameLabel', U, r(t)),
                    a(t, 'briefIntro', G, r(t)),
                    (t.displayed = -1),
                    t
                  );
                }
                i(t, e);
                var n = t.prototype;
                return (
                  (n.judgeAllowed = function (e, t) {}),
                  (n.layCards = function (e) {
                    var t = this;
                    void 0 === e && (e = this.defaultSeedBank);
                    var i = this.card0.getComponent(w);
                    i.cardGrouper(e[0]), this.PlantsInCard.push(this.card0.getComponent(w));
                    var a = this.card0.getComponent(m);
                    (a.seedChooserModeOn = !0),
                      this.card0.on(p.EventType.MOUSE_DOWN, function (e) {
                        e.getButton() == h.BUTTON_LEFT && (t.switchPlant(0), C.playCardChosen());
                      }),
                      this.judgeAllowed(i, a);
                    for (
                      var r = function (i) {
                          var a = g(t.card0);
                          a.parent = t.card0.parent;
                          var r = a.getComponent(w);
                          r.cardGrouper(e[i]);
                          var n = a.getComponent(m);
                          (n.seedChooserModeOn = !0),
                            t.judgeAllowed(r, n),
                            t.PlantsInCard.push(a.getComponent(w)),
                            a.on(p.EventType.MOUSE_DOWN, function (e) {
                              e.getButton() == h.BUTTON_LEFT && (t.switchPlant(i), C.playCardChosen());
                            });
                        },
                        n = 1;
                      n < e.length;
                      n++
                    )
                      r(n);
                    this.scrollView.scrollToTop(0), this.scrollView.stopAutoScroll();
                  }),
                  (n.scrowUp = function () {
                    this.scrollView.scrollToOffset(new b(0, this.scrollView.getScrollOffset().y - 100), 0.2);
                  }),
                  (n.scrowDown = function () {
                    this.scrollView.scrollToOffset(new b(0, this.scrollView.getScrollOffset().y + 100), 0.2);
                  }),
                  (n.switchPlant = function (e) {
                    if (e < this.PlantsInCard.length && this.displayed != e) {
                      this.plantDisplayed && S.destroyPooly(this.plantDisplayed);
                      var t = this.PlantsInCard[e];
                      (this.plantDisplayed = S.instantiatePooly(t.thisCard.plantDIS)),
                        (this.plantDisplayed.parent = this.plantDisplayer),
                        (this.plantDisplayed.position = new y(0, 0, 0)),
                        (this.plantNameLabel.string = t.thisPlant.NAME),
                        (this.briefIntro.string = t.thisPlant.BRIEFINTRODUCTION),
                        (this.displayed = e);
                      var i = this.bgSprites[0];
                      switch (t.thisPlant.OBTAINWORLD) {
                        case 'modern':
                          i = this.bgSprites[x.modern];
                          break;
                        case 'egypt':
                          i = this.bgSprites[x.egypt];
                          break;
                        case 'pirate':
                          i = this.bgSprites[x.pirate];
                          break;
                        case 'cowboy':
                          i = this.bgSprites[x.cowboy];
                          break;
                        case 'future':
                          i = this.bgSprites[x.future];
                          break;
                        case 'dark':
                          i = this.bgSprites[x.dark];
                          break;
                        case 'beach':
                          i = this.bgSprites[x.beach];
                          break;
                        case 'ice':
                          i = this.bgSprites[x.ice];
                          break;
                        case 'lostcity':
                          i = this.bgSprites[x.lostcity];
                          break;
                        case 'stage':
                          i = this.bgSprites[x.stage];
                          break;
                        case 'dino':
                          i = this.bgSprites[x.dino];
                          break;
                        case 'market':
                          i = this.bgSprites[x.market];
                      }
                      this.displayBG.spriteFrame = i;
                    }
                  }),
                  (n.onEnable = function () {
                    (this.displayed = -1), (this.plantDisplayed = null), this.layCards(), this.switchPlant(0);
                  }),
                  t
                );
              })(f)).prototype,
              'defaultSeedBank',
              [P],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (A = t(z.prototype, 'bgSprites', [D], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (F = t(z.prototype, 'displayBG', [T], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (L = t(z.prototype, 'card0', [O], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (M = t(z.prototype, 'scrollView', [N], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (R = t(z.prototype, 'plantDisplayer', [I], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (U = t(z.prototype, 'plantNameLabel', [B], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (G = t(z.prototype, 'briefIntro', [E], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (V = z))
          ) || V)
        );
        n._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/SettingWindow.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './SoundsController.ts',
    './UI.ts',
    './ElectronAPI.ts',
    './levelController.ts',
    './Square.ts',
    './PlayerProperties.ts',
  ],
  function (e) {
    var t, i, n, o, l, r, s, u, a, c, d, p, S, f, g, h, m, y, R, w, C, b, x;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (i = e.inheritsLoose),
            (n = e.initializerDefineProperty),
            (o = e.assertThisInitialized);
        },
        function (e) {
          (l = e.cclegacy),
            (r = e._decorator),
            (s = e.Label),
            (u = e.JsonAsset),
            (a = e.SpriteComponent),
            (c = e.Slider),
            (d = e.Vec2),
            (p = e.Color),
            (S = e.sys),
            (f = e.director),
            (g = e.ProgressBar),
            (h = e.Component);
        },
        function (e) {
          (m = e.MusicController), (y = e.SoundFXController);
        },
        function (e) {
          R = e.UIInGame;
        },
        function (e) {
          w = e.default;
        },
        function (e) {
          C = e.LevelPlay;
        },
        function (e) {
          b = e.Square;
        },
        function (e) {
          x = e.AllPlayerProperties;
        },
      ],
      execute: function () {
        var v, I, A, N, E, M, V, D, L, P, F, U, T, z, G, X, k, O, J, K, q, _;
        l._RF.push({}, '1978cSMPitG/7HCQRS5rNTh', 'SettingWindow', void 0);
        var B = r.ccclass,
          W = r.property,
          H = 'PvZ2_Settings',
          j = function () {
            (this.MusicVolume = 1),
              (this.SFXVolume = 1),
              (this.CardsAtUpper = !1),
              (this.LnCSelectionMode = 0),
              (this.AllowCheat = !0),
              (this.ResolutionIndex = -1);
          },
          Q = e(
            'Setting',
            (function () {
              function e() {}
              return (
                (e.saveSettings = function () {
                  var e = {
                    MusicVolume: m.MusicVolume,
                    SFXVolume: y.SoundFXVolume,
                    CardsAtUpper: R.cardsAtUpper,
                    LnCSelectionMode: b.lncSelectionMode,
                    AllowCheat: Z.allowCheat,
                    ResolutionIndex: Z.ResolutionIndex,
                  };
                  S.localStorage.setItem(H, JSON.stringify(e));
                }),
                (e.getSettings = function () {
                  var e = S.localStorage.getItem(H),
                    t = JSON.parse(e);
                  return t || new j();
                }),
                e
              );
            })()
          ),
          Z = e(
            'SettingWindow',
            ((v = B('SettingWindow')),
            (I = W(s)),
            (A = W(u)),
            (N = W(a)),
            (E = W(a)),
            (M = W(c)),
            (V = W(c)),
            (D = W(s)),
            (L = W(a)),
            (P = W(s)),
            v(
              (((_ = (function (e) {
                function t() {
                  for (var t, i = arguments.length, l = new Array(i), r = 0; r < i; r++) l[r] = arguments[r];
                  return (
                    (t = e.call.apply(e, [this].concat(l)) || this),
                    n(t, 'resolutionSettingKeyTip', T, o(t)),
                    n(t, 'debugLevelJson', z, o(t)),
                    n(t, 'uiCardsAtUpperSprite', G, o(t)),
                    n(t, 'fullScreenSprite', X, o(t)),
                    n(t, 'musicSlider', k, o(t)),
                    n(t, 'sfxSlider', O, o(t)),
                    n(t, 'ssmodeToolTip', J, o(t)),
                    n(t, 'allowCheatSprite', K, o(t)),
                    n(t, 'difficultyLevel', q, o(t)),
                    t
                  );
                }
                i(t, e),
                  (t.getDefaultResolution = function () {
                    var e = w.getCurrentResolution();
                    if (null != e && e.length) {
                      var t = e.indexOf('×'),
                        i = e.concat().slice(0, t),
                        n = e.concat().slice(t + 1, e.length),
                        o = Number(i),
                        l = Number(n);
                      if (!isNaN(o) && !isNaN(l)) return new d(o, l);
                    }
                    return new d(1920, 1200);
                  });
                var l = t.prototype;
                return (
                  (l.setResolution = function () {
                    t.ResolutionIndex++,
                      (t.ResolutionIndex < -1 || t.ResolutionIndex >= t.resolutionOptions.length) && (t.ResolutionIndex = -1);
                    var e = new d();
                    (e = t.ResolutionIndex < 0 ? t.defaultResolution : t.resolutionOptions[t.ResolutionIndex]),
                      w.setScreenResolution(e.x, e.y),
                      t.ResolutionIndex >= 0
                        ? (this.resolutionSettingKeyTip.string = e.x.toString() + 'x' + e.y.toString())
                        : (this.resolutionSettingKeyTip.string = 'Default'),
                      Q.saveSettings();
                  }),
                  (l.goToDebugLevel = function () {
                    (C.levelJson = this.debugLevelJson), f.loadScene('inGameScene');
                  }),
                  (l.blockMouse = function () {}),
                  (l.onLoad = function () {
                    var e = Q.getSettings();
                    null == t.defaultResolution && (t.defaultResolution = t.getDefaultResolution()),
                      (m.MusicVolume = isNaN(e.MusicVolume) ? 1 : e.MusicVolume),
                      (y.SoundFXVolume = isNaN(e.SFXVolume) ? 1 : e.SFXVolume),
                      (R.cardsAtUpper = e.CardsAtUpper),
                      (t.allowCheat = e.AllowCheat),
                      (t.ResolutionIndex = isNaN(e.ResolutionIndex) ? -1 : e.ResolutionIndex),
                      (b.lncSelectionMode = isNaN(e.LnCSelectionMode) ? 0 : e.LnCSelectionMode),
                      Q.saveSettings();
                  }),
                  (l.start = function () {
                    (this.musicSlider.progress = m.MusicVolume),
                      (this.sfxSlider.progress = y.SoundFXVolume),
                      (this.uiCardsAtUpperSprite.color = R.cardsAtUpper ? t.GREEN : t.RED),
                      (this.allowCheatSprite.color = t.allowCheat ? t.GREEN : t.RED),
                      (this.fullScreenSprite.color = null != w && w.isFullScreen() ? t.GREEN : t.RED),
                      (this.sfxSlider.handle.node.angle = 360 * -this.sfxSlider.progress),
                      (this.musicSlider.handle.node.angle = 360 * -this.musicSlider.progress),
                      isNaN(x.currentPlayer.difficulty) && (x.currentPlayer.difficulty = 3);
                    var e = x.currentPlayer.difficulty;
                    e < 0 && (e = 3), e > 3 && (e = 0), (x.currentPlayer.difficulty = e);
                    var i = 'A';
                    switch (e) {
                      case 0:
                        i = 'D';
                        break;
                      case 1:
                        i = 'C';
                        break;
                      case 2:
                        i = 'B';
                        break;
                      default:
                        i = 'A';
                    }
                    this.difficultyLevel.string = i;
                    var n = new d();
                    t.ResolutionIndex >= 0 && ((n = t.resolutionOptions[t.ResolutionIndex]), w.setScreenResolution(n.x, n.y)),
                      t.ResolutionIndex >= 0
                        ? (this.resolutionSettingKeyTip.string = n.x.toString() + 'x' + n.y.toString())
                        : (this.resolutionSettingKeyTip.string = 'Default');
                  }),
                  (l.uiCardsAtUpper = function () {
                    (R.cardsAtUpper = !R.cardsAtUpper),
                      (this.uiCardsAtUpperSprite.color = R.cardsAtUpper ? t.GREEN : t.RED),
                      Q.saveSettings();
                  }),
                  (l.quit = function () {
                    w.quit();
                  }),
                  (t.fullScreen = function () {
                    if (w.isFullScreen())
                      w.window(),
                        t.ResolutionIndex > 0 &&
                          (w.setResolution(t.defaultResolution.x, t.defaultResolution.y), w.setSize(1138, 640));
                    else if ((w.fullScreen(), t.ResolutionIndex > 0)) {
                      var e = t.resolutionOptions[t.ResolutionIndex];
                      w.setResolution(e.x, e.y);
                    }
                  }),
                  (l.fullScreen = function () {
                    t.fullScreen();
                  }),
                  (l.musicSlide = function () {
                    m.setMusicVolume(this.musicSlider.progress),
                      (this.musicSlider.handle.node.angle = 360 * -this.musicSlider.progress),
                      (this.musicSlider.getComponent(g).progress = m.MusicVolume);
                  }),
                  (l.sfxSlide = function () {
                    y.setSoundFxVolume(this.sfxSlider.progress),
                      (this.sfxSlider.handle.node.angle = 360 * -this.sfxSlider.progress),
                      (this.sfxSlider.getComponent(g).progress = y.SoundFXVolume);
                  }),
                  (l.ssmodeChange = function () {
                    (b.lncSelectionMode = 1 - b.lncSelectionMode), Q.saveSettings();
                  }),
                  (l.setAllowCheat = function () {
                    (t.allowCheat = !t.allowCheat),
                      (this.allowCheatSprite.color = t.allowCheat ? t.GREEN : t.RED),
                      Q.saveSettings();
                  }),
                  (l.setDifficulty = function () {
                    var e = x.currentPlayer.difficulty - 1;
                    e < 0 && (e = 3), e > 3 && (e = 0), (x.currentPlayer.difficulty = e);
                    var t = 'A';
                    switch (e) {
                      case 0:
                        t = 'D';
                        break;
                      case 1:
                        t = 'C';
                        break;
                      case 2:
                        t = 'B';
                        break;
                      default:
                        t = 'A';
                    }
                    this.difficultyLevel.string = t;
                  }),
                  (l.update = function (e) {
                    (this.fullScreenSprite.color = w.isFullScreen() ? t.GREEN : t.RED),
                      (this.musicSlider.getComponent(g).progress = m.MusicVolume),
                      (this.sfxSlider.getComponent(g).progress = y.SoundFXVolume),
                      (this.ssmodeToolTip.string = 0 == b.lncSelectionMode ? 'Each Square' : 'Crossing');
                  }),
                  t
                );
              })(h)).ResolutionIndex = -1),
              (_.resolutionOptions = [
                new d(1920, 1200),
                new d(1920, 1080),
                new d(1680, 1050),
                new d(1600, 900),
                new d(1440, 900),
                new d(1400, 1050),
                new d(1280, 1024),
                new d(1152, 864),
                new d(960, 640),
                new d(800, 600),
              ]),
              (_.defaultResolution = null),
              (_.allowCheat = !0),
              (_.GREEN = new p(20, 255, 0, 255)),
              (_.RED = new p(255, 0, 0, 255)),
              (T = t((U = _).prototype, 'resolutionSettingKeyTip', [I], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: null,
              })),
              (z = t(U.prototype, 'debugLevelJson', [A], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (G = t(U.prototype, 'uiCardsAtUpperSprite', [N], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: null,
              })),
              (X = t(U.prototype, 'fullScreenSprite', [E], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: null,
              })),
              (k = t(U.prototype, 'musicSlider', [M], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (O = t(U.prototype, 'sfxSlider', [V], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (J = t(U.prototype, 'ssmodeToolTip', [D], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (K = t(U.prototype, 'allowCheatSprite', [L], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: null,
              })),
              (q = t(U.prototype, 'difficultyLevel', [P], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (F = U))
            ) || F)
          );
        l._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/shadeFloor.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (e) {
  var o, t, n, r, i, a, s, l, c, h;
  return {
    setters: [
      function (e) {
        (o = e.applyDecoratedDescriptor), (t = e.inheritsLoose), (n = e.initializerDefineProperty), (r = e.assertThisInitialized);
      },
      function (e) {
        (i = e.cclegacy), (a = e._decorator), (s = e.Prefab), (l = e.NodePool), (c = e.instantiate), (h = e.Component);
      },
    ],
    execute: function () {
      var u, p, d, f, v, y;
      i._RF.push({}, '04a71WG3ztLwYYMDSzCOCjz', 'shadeFloor', void 0);
      var P = a.ccclass,
        g = a.property;
      e(
        'shadeFloor',
        ((u = P('shadeFloor')),
        (p = g(s)),
        u(
          (((y = (function (e) {
            function o() {
              for (var o, t = arguments.length, i = new Array(t), a = 0; a < t; a++) i[a] = arguments[a];
              return (o = e.call.apply(e, [this].concat(i)) || this), n(o, 'shade', v, r(o)), (o.shadePool = new l()), o;
            }
            t(o, e);
            var i = o.prototype;
            return (
              (i.giveShade = function () {
                return this.shadePool.size() ? this.shadePool.get() : c(this.shade);
              }),
              (i.putShade = function (e) {
                this.shadePool.put(e);
              }),
              (i.onLoad = function () {
                o.component = this;
              }),
              o
            );
          })(h)).component = void 0),
          (v = o((f = y).prototype, 'shade', [p], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
          (d = f))
        ) || d)
      );
      i._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/ShootingStarfruit.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Square.ts',
    './starFruitSound.ts',
    './CharacterManager.ts',
    './StarFruit.ts',
    './Lane.ts',
  ],
  function (o) {
    var t, n, i, e, a, s, r, h, d, l;
    return {
      setters: [
        function (o) {
          t = o.inheritsLoose;
        },
        function (o) {
          (n = o.cclegacy), (i = o._decorator), (e = o.Vec2);
        },
        function (o) {
          a = o.Square;
        },
        function (o) {
          s = o.starFruitSound;
        },
        function (o) {
          (r = o.ZombiePool), (h = o.TombPool);
        },
        function (o) {
          d = o.StarFruitPlant;
        },
        function (o) {
          l = o.Lane;
        },
      ],
      execute: function () {
        var f;
        n._RF.push({}, '37416Pe9UdD54fshPVpOQxg', 'ShootingStarfruit', void 0);
        var p = i.ccclass;
        i.property,
          o(
            'ShootingStarfruitPlant',
            p('ShootingStarfruit')(
              (f = (function (o) {
                function n() {
                  return o.apply(this, arguments) || this;
                }
                t(n, o);
                var i = n.prototype;
                return (
                  (i.specialPlantFood = function () {
                    this.anmControl.playAnimation('Food', 1), (this.busy = 1 / 0);
                  }),
                  (i.specialPlantFoodEnd = function () {
                    this.busy = 0;
                  }),
                  (i.animationListener = function (o) {
                    var t = this;
                    if (
                      ('Shoot' == o.name && (this._shootStars(), this.fooding || this.getComponent(s).playShootSound()),
                      'foodEnd' == o.name && this.foodEnd(),
                      'foodStart' == o.name)
                    ) {
                      this.getComponent(s).playFoodSound(),
                        this.anmControl.playAnimation('Fooding', 1 / 0),
                        this.anmControl.playAnimation('Fooding', 1 / 0);
                      var n = 0;
                      this.schedule(
                        function () {
                          t._shootStars(!0, !0, t.peaFood, 20), ++n >= t.foodPeaMaxCount && t.foodEnd();
                        },
                        1 / this.foodPeaMaxCount,
                        this.foodPeaMaxCount,
                        0.01
                      );
                    }
                    if ('do' == o.name) {
                      this._shootStars(), this.getComponent(s).playPiano(1);
                      var i = this._shoot(!1, !1, this.peaFood, 15, new e(1, 0));
                      i.worldPosition = new e(i._worldPositionX, a.getLane(4).getComponent(l).floorY);
                    }
                    if ('re' == o.name) {
                      this._shootStars(), this.getComponent(s).playPiano(2);
                      var r = this._shoot(!1, !1, this.peaFood, 15, new e(1, 0));
                      r.worldPosition = new e(r._worldPositionX, a.getLane(3).getComponent(l).floorY);
                    }
                    if ('mi' == o.name) {
                      this._shootStars(), this.getComponent(s).playPiano(3);
                      var h = this._shoot(!1, !1, this.peaFood, 15, new e(1, 0));
                      h.worldPosition = new e(h._worldPositionX, a.getLane(2).getComponent(l).floorY);
                    }
                    if ('fa' == o.name) {
                      this._shootStars(), this.getComponent(s).playPiano(4);
                      var d = this._shoot(!1, !1, this.peaFood, 15, new e(1, 0));
                      d.worldPosition = new e(d._worldPositionX, a.getLane(1).getComponent(l).floorY);
                    }
                    if ('so' == o.name) {
                      this._shootStars(), this.getComponent(s).playPiano(5);
                      var f = this._shoot(!1, !1, this.peaFood, 15, new e(1, 0));
                      f.worldPosition = new e(f._worldPositionX, a.getLane(0).getComponent(l).floorY);
                    }
                    if ('la' == o.name) {
                      this._shootStars(), this.getComponent(s).playPiano(6);
                      var p = this._shoot(!1, !1, this.peaFood, 15, new e(1, 0));
                      p.worldPosition = new e(p._worldPositionX, a.getLane(0).getComponent(l).floorY + a.SquareDisH);
                    }
                  }),
                  (i.detectEnemy = function () {
                    var o = this,
                      t = !1;
                    return (
                      r.pool().forEach(function (n) {
                        t || (n.node.worldPosition.x > o.node.worldPosition.x && (t = !0));
                      }),
                      !!t ||
                        (h.pool().forEach(function (n) {
                          t || (n.inLnC.cIndex > o.inLnC.cIndex && (t = !0));
                        }),
                        t)
                    );
                  }),
                  (i._shootStars = function (o, t, n, i) {
                    void 0 === o && (o = !1), void 0 === t && (t = !1), void 0 === n && (n = this.pea), void 0 === i && (i = 20);
                    for (var s = 0; s <= 4; s++) {
                      var r = this._shoot(o, t, n, i, new e(1, 0));
                      r.worldPosition = new e(r._worldPositionX, a.getLane(s).getComponent(l).floorY);
                    }
                  }),
                  n
                );
              })(d))
            ) || f
          );
        n._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/Shovel.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (n) {
  var t, e, o, i, s, r;
  return {
    setters: [
      function (n) {
        t = n.inheritsLoose;
      },
      function (n) {
        (e = n.cclegacy), (o = n._decorator), (i = n.dragonBones), (s = n.Node), (r = n.Component);
      },
    ],
    execute: function () {
      var a;
      e._RF.push({}, '9ac6bbxNX5PRbmn33VVbBXO', 'Shovel', void 0);
      var h = o.ccclass;
      o.property,
        n(
          'Shovel',
          h('Shovel')(
            (a = (function (n) {
              function e() {
                for (var t, e = arguments.length, o = new Array(e), i = 0; i < e; i++) o[i] = arguments[i];
                return ((t = n.call.apply(n, [this].concat(o)) || this).index = 0), (t.indexPoint = 0), t;
              }
              t(e, n);
              var o = e.prototype;
              return (
                (o.select = function () {
                  0 == this.index
                    ? 1 == this.indexPoint
                      ? this.node.getComponent(i.ArmatureDisplay).playAnimation('Pointed', -1)
                      : this.node.getComponent(i.ArmatureDisplay).playAnimation('Idle', -1)
                    : 1 == this.index && this.node.getComponent(i.ArmatureDisplay).playAnimation('Chosen', -1);
                }),
                (o.onBtnEnter = function () {
                  (this.indexPoint = 1), this.select();
                }),
                (o.onBtnLeave = function () {
                  (this.indexPoint = 0), this.select();
                }),
                (o.onLoad = function () {
                  this.node.on(s.EventType.MOUSE_ENTER, this.onBtnEnter, this),
                    this.node.on(s.EventType.MOUSE_LEAVE, this.onBtnLeave, this),
                    (this.index = 0),
                    (this.indexPoint = 0);
                }),
                e
              );
            })(r))
          ) || a
        );
      e._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/ShovelUIController.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Shovel.ts', './NodePools.ts'],
  function (e) {
    var o, t, n, i, s, l, r, h, a, c, p, d, u, v, f, y;
    return {
      setters: [
        function (e) {
          (o = e.applyDecoratedDescriptor),
            (t = e.inheritsLoose),
            (n = e.initializerDefineProperty),
            (i = e.assertThisInitialized);
        },
        function (e) {
          (s = e.cclegacy),
            (l = e._decorator),
            (r = e.Prefab),
            (h = e.Node),
            (a = e.Vec3),
            (c = e.math),
            (p = e.find),
            (d = e.Label),
            (u = e.instantiate),
            (v = e.Component);
        },
        function (e) {
          f = e.Shovel;
        },
        function (e) {
          y = e.NodePools;
        },
      ],
      execute: function () {
        var I, S, w, C, g, m, b, P, U, k;
        s._RF.push({}, '229dc/E+75CkLChHl2JtR8h', 'ShovelUIController', void 0);
        var x = l.ccclass,
          T = l.property;
        e(
          'ShovelUIController',
          ((I = x('ShovelUIController')),
          (S = T(r)),
          (w = T(r)),
          (C = T(h)),
          I(
            (((k = (function (e) {
              function o() {
                for (var o, t = arguments.length, s = new Array(t), l = 0; l < t; l++) s[l] = arguments[l];
                return (
                  ((o = e.call.apply(e, [this].concat(s)) || this).index = 0),
                  (o.UIParent = null),
                  n(o, 'Shovel', b, i(o)),
                  n(o, 'shovelInHand', P, i(o)),
                  n(o, 'KeyTip', U, i(o)),
                  (o.keyOffset = new a(0, 0, 0)),
                  (o.shovelIcon = null),
                  (o.shovelReady = null),
                  (o.oldpos = new a(0, 0, 0)),
                  o
                );
              }
              t(o, e),
                (o.gameStart = function () {
                  this.shovelUI._gameStart();
                });
              var s = o.prototype;
              return (
                (s._gameStart = function () {
                  (this.node.position = this.oldpos), (this.KeyTip.position = this.node.position.clone().add(this.keyOffset));
                }),
                (s.keyScale = function () {
                  return this.index ? new a(0.9, 0.9) : new a(0.7, 0.7);
                }),
                (s.keyColor = function () {
                  return this.index ? new c.Color(100, 255, 100, 255) : new c.Color(245, 255, 0, 255);
                }),
                (s.shovelSelect = function () {
                  (this.index = -2 == this.UIParent.index ? 1 : 0),
                    (this.shovelIcon.getComponent(f).index = this.index),
                    this.shovelIcon.getComponent(f).select(),
                    this.index &&
                      ((this.shovelReady = y.instantiatePooly(this.shovelInHand)),
                      (this.shovelReady.parent = p('Canvas/UIInGameUpper/plantInHand'))),
                    (this.KeyTip.getComponent(d).color = this.keyColor()),
                    (this.KeyTip.scale = this.keyScale());
                }),
                (s.start = function () {}),
                (s.onLoad = function () {
                  (o.shovelUI = this),
                    (this.shovelIcon = u(this.Shovel)),
                    this.shovelIcon.setPosition(0, 0),
                    (this.shovelIcon.parent = this.node),
                    (this.oldpos = this.node.position.clone()),
                    (this.KeyTip.worldPosition = new a(this.node.worldPosition.x + 30, this.node.worldPosition.y - 20, 0)),
                    (this.keyOffset = this.KeyTip.position.clone().add(this.node.position.clone().negative())),
                    (this.node.position = new a(5e3, 5e3, 5e3)),
                    (this.KeyTip.position = this.node.position.clone().add(this.keyOffset));
                }),
                o
              );
            })(v)).shovelUI = void 0),
            (b = o((m = k).prototype, 'Shovel', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (P = o(m.prototype, 'shovelInHand', [w], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (U = o(m.prototype, 'KeyTip', [C], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (g = m))
          ) || g)
        );
        s._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/SleighCartZombie.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Zombie.ts',
    './NodePools.ts',
    './LnC.ts',
    './SoundsController.ts',
    './Icetile.ts',
    './Square.ts',
  ],
  function (e) {
    var n, t, i, o, a, r, l, s, u, h, c, d, g, p, m, f, S, b, y, I;
    return {
      setters: [
        function (e) {
          (n = e.applyDecoratedDescriptor),
            (t = e.inheritsLoose),
            (i = e.initializerDefineProperty),
            (o = e.assertThisInitialized);
        },
        function (e) {
          (a = e.cclegacy),
            (r = e._decorator),
            (l = e.AudioClip),
            (s = e.Prefab),
            (u = e.AudioSource),
            (h = e.dragonBones),
            (c = e.Vec3),
            (d = e.UITransform);
        },
        function (e) {
          (g = e.zombieDamageType), (p = e.Zombie);
        },
        function (e) {
          (m = e.ArrayGet), (f = e.NodePools);
        },
        function (e) {
          S = e.TileType;
        },
        function (e) {
          b = e.SoundFXController;
        },
        function (e) {
          y = e.Icetile;
        },
        function (e) {
          I = e.Square;
        },
      ],
      execute: function () {
        var w, C, D, v, k, W, A, x, T, P, L, q, B, z, R, Z, F;
        a._RF.push({}, 'f2cc7F3BvtLhblv4mRSDEN5', 'SleighCartZombie', void 0);
        var _ = r.ccclass,
          O = r.property;
        e(
          'ModernSleighCartZombie',
          ((w = _('ModernSleighCartZombie')),
          (C = O([l])),
          (D = O([l])),
          (v = O([l])),
          (k = O([l])),
          (W = O([l])),
          (A = O(s)),
          (x = O(l)),
          w(
            ((L = n(
              (P = (function (e) {
                function n() {
                  for (var n, t = arguments.length, a = new Array(t), r = 0; r < t; r++) a[r] = arguments[r];
                  return (
                    (n = e.call.apply(e, [this].concat(a)) || this),
                    i(n, 'blopSound', L, o(n)),
                    i(n, 'initiateSound', q, o(n)),
                    i(n, 'explodeSound', B, o(n)),
                    i(n, 'rollingSound', z, o(n)),
                    i(n, 'smashSound', R, o(n)),
                    i(n, 'ice', Z, o(n)),
                    (n.growingIce = null),
                    i(n, 'eruptSound', F, o(n)),
                    n
                  );
                }
                t(n, e);
                var a = n.prototype;
                return (
                  (a.dealHurrikale = function (e) {}),
                  (a.setPerfume = function (e) {}),
                  (a.setChiliStun = function (e) {
                    return !1;
                  }),
                  (a.specialSoundEventListener = function (e) {
                    'blop' == e.name && this.getComponent(u).playOneShot(m.getRandom(this.blopSound), b.SoundFXVolume),
                      'explode' == e.name &&
                        this.getComponent(u).playOneShot(m.getRandom(this.explodeSound), 2 * b.SoundFXVolume),
                      'roll' == e.name && this.getComponent(u).playOneShot(m.getRandom(this.rollingSound), b.SoundFXVolume),
                      'smash' == e.name && this.getComponent(u).playOneShot(m.getRandom(this.smashSound), b.SoundFXVolume);
                  }),
                  (a.playSpecialZombieDie = function (e) {
                    this.judgeDeath(), this.growingIce && (this.growingIce.master = null), (this.growingIce = null);
                  }),
                  (a.breakArm = function () {}),
                  (a.setChill = function (e) {
                    return !1;
                  }),
                  (a.setButter = function (e) {
                    return !1;
                  }),
                  (a.specialZombieOnSquareChange = function (e, n) {
                    var t = n.getTileType();
                    (t != S.deck && t != S.floor) || this.spawnIce(e, n);
                  }),
                  (a.judgeHitPoint = function () {
                    this.health > (2 * this.toughness) / 3
                      ? 'Walk' != this.body.WalkAnm &&
                        (this.body.getComponent(h.ArmatureDisplay).playAnimation('Walk'), (this.body.WalkAnm = 'Walk'))
                      : this.health > this.toughness / 3 && this.health <= (2 * this.toughness) / 3
                      ? 'Walk_Broken1' != this.body.WalkAnm &&
                        (this.body.getComponent(h.ArmatureDisplay).playAnimation('Break0_1'),
                        (this.body.WalkAnm = 'Walk_Broken1'),
                        this.playBreakSound())
                      : this.health > 0 &&
                        this.health <= this.toughness / 3 &&
                        'Walk_Broken2' != this.body.WalkAnm &&
                        (this.body.getComponent(h.ArmatureDisplay).playAnimation('Break1_2'),
                        (this.body.WalkAnm = 'Walk_Broken2'),
                        this.playBreakSound());
                  }),
                  (a.spawnIce = function (e, n) {
                    if (!(this.shouldSpeedScale() <= 0)) {
                      this.growingIce && (this.growingIce.master = null), (this.growingIce = null);
                      var t = n.getTileType();
                      if (
                        t != S.sky &&
                        t != S.sea &&
                        t != S.water &&
                        !(e.cIndex <= n.cIndex && 9 != n.cIndex) &&
                        5 != n.lIndex &&
                        -1 != n.lIndex &&
                        -1 != n.cIndex
                      )
                        if (n.iceTile || 9 == n.cIndex) {
                          if (n.iceTile && 9 != n.cIndex) this.growingIce = n.iceTile;
                          else if (9 == n.cIndex) {
                            var i = this.inLane;
                            i.meltCountdown = 80;
                            var o = null;
                            if (i.iceTile) o = i.iceTile.node;
                            else {
                              ((o = f.instantiatePooly(this.ice)).parent = this.inLane.Lower),
                                (o.scale = new c(-I.SquareDisW / 164.5, I.SquareDisW / 164.5, I.SquareDisW / 164.5));
                              var a = I.getSquareWorldPosition(i.LaneIndex, 8, 1, 0.5);
                              o.setWorldPosition(a.x + 2 * I.SquareDisW, a.y, 0),
                                (o.getComponent(d).width = 0),
                                (o.getComponent(y).length = 0),
                                (i.iceTile = o.getComponent(y)),
                                (o.getComponent(y).lane = i),
                                i.addIceTile(o.getComponent(y));
                            }
                            this.growingIce = o.getComponent(y);
                          }
                        } else {
                          var r,
                            l = f.instantiatePooly(this.ice);
                          (l.parent = this.inLane.Lower),
                            (l.scale = new c(-I.SquareDisW / 164.5, I.SquareDisW / 164.5, I.SquareDisW / 164.5));
                          var s = I.getSquareWorldPosition(n.lIndex, n.cIndex, 1, 0.5);
                          l.setWorldPosition(s.x, s.y, 0),
                            (this.growingIce = l.getComponent(y)),
                            (this.growingIce.length = 0),
                            (this.growingIce.getComponent(d).width = 0),
                            (n.iceTile = this.growingIce),
                            null == n ||
                              null == (r = n.getAllPlants()) ||
                              r.forEach(function (e) {
                                null == e || e.die();
                              }),
                            (this.growingIce.lnc = n),
                            this.inLane.addIceTile(l.getComponent(y)),
                            n.readIndex();
                        }
                    }
                  }),
                  (a.setFreeze = function (e) {
                    return !1;
                  }),
                  (a.detectPlant = function (e) {
                    var n = this;
                    this.inLane &&
                      this.inLane.plantPool().forEach(function (e) {
                        e.smasherDetectable && n.bodyRec.judgeCrossRec(e.bodyRec) && e.smash(n);
                      });
                  }),
                  (a.specialZombieUpdate = function (e) {
                    this.isAlive() &&
                      ((this.inLane.meltCountdown = 80),
                      this.growingIce && (this.growingIce.master || (this.growingIce.master = this)));
                  }),
                  (a.specialZombieOnDisable = function () {}),
                  (a.specialZombieOnEnable = function () {
                    this.judgeHitPoint(),
                      this.getComponent(u).playOneShot(m.getRandom(this.initiateSound), b.SoundFXVolume),
                      (this.body.DeathAnm = 'Death'),
                      this.scheduleOnce(function () {}, 0),
                      (this.deathSound = [this.eruptSound]);
                  }),
                  (a.dealDamage = function (e, n, t, i, o, a, r) {
                    void 0 === e && (e = 0),
                      void 0 === n && (n = !0),
                      void 0 === t && (t = !0),
                      void 0 === i && (i = !0),
                      void 0 === o && (o = null),
                      void 0 === a && (a = g.physicle),
                      void 0 === r && (r = !0),
                      e >= this.totalToughness() || a == g.fire
                        ? (this.body.DeathAnm = 'Explode')
                        : (this.body.DeathAnm = 'Death');
                    var l = this.dealNormalDamage(e, n, t, i, o, a, r);
                    return (
                      this.dead
                        ? 'Death' == this.body.DeathAnm
                          ? (this.deathSound = [this.eruptSound])
                          : (this.deathSound = [])
                        : this.judgeHitPoint(),
                      l
                    );
                  }),
                  n
                );
              })(p)).prototype,
              'blopSound',
              [C],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (q = n(P.prototype, 'initiateSound', [D], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (B = n(P.prototype, 'explodeSound', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (z = n(P.prototype, 'rollingSound', [k], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (R = n(P.prototype, 'smashSound', [W], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Z = n(P.prototype, 'ice', [A], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (F = n(P.prototype, 'eruptSound', [x], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (T = P))
          ) || T)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/SnapDragon.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './Square.ts',
    './CharacterManager.ts',
    './NodePools.ts',
    './SnapDragonFoodPar.ts',
    './Zombie.ts',
    './snapDragonSound.ts',
  ],
  function (a) {
    var t, n, e, o, i, r, c, l, s, d, u, p, f, h, m, g, L;
    return {
      setters: [
        function (a) {
          (t = a.applyDecoratedDescriptor),
            (n = a.inheritsLoose),
            (e = a.initializerDefineProperty),
            (o = a.assertThisInitialized);
        },
        function (a) {
          (i = a.cclegacy), (r = a._decorator), (c = a.Prefab), (l = a.CCFloat), (s = a.Vec3), (d = a.dragonBones);
        },
        function (a) {
          u = a.Plant;
        },
        function (a) {
          p = a.Square;
        },
        function (a) {
          f = a.Rectangle;
        },
        function (a) {
          h = a.NodePools;
        },
        function (a) {
          m = a.SnapDragonFoodPar;
        },
        function (a) {
          g = a.zombieDamageType;
        },
        function (a) {
          L = a.snapDragonSound;
        },
      ],
      execute: function () {
        var P, b, S, y, D, k, C, w, v, z, R, E, F;
        i._RF.push({}, '453b1GI2oNCAZ6L07SmB6zz', 'SnapDragon', void 0);
        var q = r.ccclass,
          A = r.property;
        a(
          'SnapDragon',
          ((P = q('SnapDragon')),
          (b = A(c)),
          (S = A(c)),
          (y = A(l)),
          (D = A(l)),
          (k = A(l)),
          P(
            ((v = t(
              (w = (function (a) {
                function t() {
                  for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
                  return (
                    (t = a.call.apply(a, [this].concat(i)) || this),
                    e(t, 'attPar', v, o(t)),
                    e(t, 'foodPar', z, o(t)),
                    e(t, 'attackDamage', R, o(t)),
                    e(t, 'foodDamage', E, o(t)),
                    e(t, 'attackInterval', F, o(t)),
                    (t.detector = void 0),
                    (t.attacking = !1),
                    (t.cd = 0),
                    t
                  );
                }
                n(t, a);
                var i = t.prototype;
                return (
                  (i.attParScale = function () {
                    return p.SquareDisH / 350;
                  }),
                  (i.foodParScale = function () {
                    return (3 * p.SquareDisH) / 440;
                  }),
                  (i.specialPlantOnSquareChange = function (a, t) {
                    this.detector = f.createRectangleNodeSide(this.inLnC.node, 2.5 * p.SquareDisW, 3 * p.SquareDisH);
                  }),
                  (i.specialPlantOnEnable = function () {
                    (this.cd = 0), (this.attacking = !1);
                  }),
                  (i.specialPlantFood = function (a) {
                    (this.cd = 0), (this.attacking = !1), this.anmControl.playAnimation('Food', 1);
                  }),
                  (i.waterable = function () {
                    return !this.attacking;
                  }),
                  (i.animationListener = function (a) {
                    var t = this;
                    if ('attackSound' == a.name) this.getComponent(L).playAttackSound();
                    else if ('flap' == a.name) this.getComponent(L).playFlapSound();
                    else if ('flap' == a.name) this.getComponent(L).playFlapSound();
                    else if ('attackEnd' == a.name) this.attacking = !1;
                    else if ('foodEnd' == a.name) this.foodEnd();
                    else if ('foodAttack' == a.name) {
                      var n = h.instantiatePooly(this.foodPar);
                      (n.parent = this.inLane.LowerLane.prjLayer),
                        (n.worldPosition = this.inLnC.node.worldPosition.clone().add3f(2 * p.SquareDisW, 0, 0));
                      var e = this.foodParScale();
                      (n.worldScale = new s(e, e, e)), this.getComponent(L).playFoodSound();
                      var o = n.getComponent(m);
                      (o.inLane = this.inLane), (o.damage = this.foodDamage);
                    } else
                      'attackPar' == a.name
                        ? [this.inLane.UpperLane, this.inLane, this.inLane.LowerLane].forEach(function (a, n) {
                            if (!(a.LaneIndex < 0 || a.LaneIndex > 4)) {
                              var e = -(n - 1) * p.SquareDisH,
                                o = h.instantiatePooly(t.attPar);
                              (o.parent = a.prjLayer),
                                (o.worldPosition = t.inLnC.node.worldPosition.clone().add3f(2.5 * p.SquareDisW, e, 0));
                              var i = t.attParScale();
                              (o.worldScale = new s(i, i, i)),
                                o
                                  .getComponent(d.ArmatureDisplay)
                                  .playAnimation('Play' + (Math.round(Math.random()) + 1).toString());
                            }
                          })
                        : 'attack' == a.name
                        ? (this.inLane
                            .zombiePool()
                            .concat(this.inLane.UpperLane.zombiePool(), this.inLane.LowerLane.zombiePool())
                            .forEach(function (a) {
                              a.bodyRec.judgeCrossRec(t.detector) && a.dealDamage(t.attackDamage / 2, !0, !1, !1, null, g.fire);
                            }),
                          this.inLane
                            .tombPool()
                            .concat(this.inLane.UpperLane.tombPool(), this.inLane.LowerLane.tombPool())
                            .forEach(function (a) {
                              a.bodyRec.judgeCrossRec(t.detector) && a.dealDamage(t.attackDamage / 2);
                            }))
                        : 'attackSound' == a.name
                        ? this.getComponent(L).playAttackSound()
                        : ('flap' == a.name || 'flap' == a.name) && this.getComponent(L).playFlapSound();
                  }),
                  (i.detectEnemy = function () {
                    var a = this,
                      t = !1;
                    return (
                      this.inLane
                        .zombiePool()
                        .concat(this.inLane.UpperLane.zombiePool(), this.inLane.LowerLane.zombiePool())
                        .forEach(function (n) {
                          t || (t = n.bodyRec.judgeCrossRec(a.detector));
                        }),
                      t ||
                        this.inLane
                          .tombPool()
                          .concat(this.inLane.UpperLane.tombPool(), this.inLane.LowerLane.tombPool())
                          .forEach(function (n) {
                            t || (t = n.bodyRec.judgeCrossRec(a.detector));
                          }),
                      t
                    );
                  }),
                  (i.specialPlantUpdate = function (a) {
                    this.fooding ||
                      (this.cd > 0 && (this.cd -= a),
                      this.cd <= 0 &&
                        this.detectEnemy() &&
                        ((this.attacking = !0),
                        (this.cd = this.attackInterval + 0.15 * Math.random()),
                        this.anmControl.playAnimation(
                          'Attack',
                          1,
                          0.1,
                          this.attackInterval > 1.33 ? 1 : 1.33 / this.attackInterval
                        )));
                  }),
                  t
                );
              })(u)).prototype,
              'attPar',
              [b],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (z = t(w.prototype, 'foodPar', [S], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (R = t(w.prototype, 'attackDamage', [y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 30;
              },
            })),
            (E = t(w.prototype, 'foodDamage', [D], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 1800;
              },
            })),
            (F = t(w.prototype, 'attackInterval', [k], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 1.85;
              },
            })),
            (C = w))
          ) || C)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/SnapDragonFoodPar.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './ParticleSelfdestroy.ts',
    './NodePools.ts',
    './Square.ts',
    './CharacterManager.ts',
    './Zombie.ts',
  ],
  function (e) {
    var a, n, o, i, t, r, s, l, c, d, u, f, p;
    return {
      setters: [
        function (e) {
          (a = e.applyDecoratedDescriptor),
            (n = e.inheritsLoose),
            (o = e.initializerDefineProperty),
            (i = e.assertThisInitialized);
        },
        function (e) {
          (t = e.cclegacy), (r = e._decorator), (s = e.Prefab), (l = e.dragonBones);
        },
        function (e) {
          c = e.ParticleSelfdestroy;
        },
        function (e) {
          d = e.NodePools;
        },
        function (e) {
          u = e.Square;
        },
        function (e) {
          f = e.Rectangle;
        },
        function (e) {
          p = e.zombieDamageType;
        },
      ],
      execute: function () {
        var b, m, h, g, L;
        t._RF.push({}, 'dc80fH7moFB7aL6Kk0BRt3H', 'SnapDragonFoodPar', void 0);
        var y = r.ccclass,
          v = r.property;
        e(
          'SnapDragonFoodPar',
          ((b = y('SnapDragonFoodPar')),
          (m = v(s)),
          b(
            ((L = a(
              (g = (function (e) {
                function a() {
                  for (var a, n = arguments.length, t = new Array(n), r = 0; r < n; r++) t[r] = arguments[r];
                  return (
                    ((a = e.call.apply(e, [this].concat(t)) || this).inLane = void 0),
                    o(a, 'ballFire', L, i(a)),
                    (a.damage = 1800),
                    (a.dealtZombies = []),
                    (a.dealtTombs = []),
                    (a.burning = !0),
                    a
                  );
                }
                n(a, e);
                var t = a.prototype;
                return (
                  (t.specialOnEnable = function () {
                    (this.dealtTombs = []), (this.dealtZombies = []), (this.burning = !1);
                  }),
                  (t.animationListener = function (e) {
                    var a = this;
                    'burn' == e.name &&
                      ((this.burning = !0),
                      [-1, 0, 1].forEach(function (e) {
                        [-1, 0, 1].forEach(function (n) {
                          var o = a.inLane;
                          if (
                            (-1 == e ? (o = a.inLane.UpperLane) : 1 == e && (o = a.inLane.LowerLane),
                            !(o.LaneIndex < 0 || o.LaneIndex > 4))
                          ) {
                            var i = d.instantiatePooly(a.ballFire);
                            (i.parent = o.prjLayer),
                              i
                                .getComponent(l.ArmatureDisplay)
                                .playAnimation('Play' + (1 + Math.round(Math.random())).toString()),
                              (i.worldPosition = a.node.worldPosition.clone().add3f(n * u.SquareDisW, -e * u.SquareDisH, 0));
                          }
                        });
                      }));
                  }),
                  (t.update = function (e) {
                    var a = this;
                    if (
                      (this.dealtZombies.concat().forEach(function (e) {
                        if (!e.isAlive()) {
                          var n = a.dealtZombies.indexOf(e);
                          a.dealtZombies.splice(n, 1);
                        }
                      }),
                      this.dealtTombs.concat().forEach(function (e) {
                        if (e.dead) {
                          var n = a.dealtTombs.indexOf(e);
                          a.dealtTombs.splice(n, 1);
                        }
                      }),
                      this.burning)
                    ) {
                      var n = f.createRectangleNodeCenter(this.node, 3 * u.SquareDisW, 3 * u.SquareDisH);
                      [this.inLane.UpperLane, this.inLane, this.inLane.LowerLane].forEach(function (e) {
                        e.zombiePool().forEach(function (e) {
                          -1 == a.dealtZombies.indexOf(e) &&
                            e.bodyRec.judgeCrossRec(n) &&
                            (e.dealDamage(a.damage, !1, !1, !1, null, p.fire), e.isAlive() && a.dealtZombies.push(e));
                        }),
                          e.tombPool().forEach(function (e) {
                            -1 == a.dealtTombs.indexOf(e) &&
                              e.bodyRec.judgeCrossRec(n) &&
                              (e.dealDamage(a.damage), e.dead || a.dealtTombs.push(e));
                          });
                      });
                    }
                  }),
                  a
                );
              })(c)).prototype,
              'ballFire',
              [m],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (h = g))
          ) || h)
        );
        t._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/snapDragonSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './plantSound.ts', './SoundRescourses.ts', './NodePools.ts'],
  function (n) {
    var o, t, r, a, e, i, u, l, c, p;
    return {
      setters: [
        function (n) {
          (o = n.applyDecoratedDescriptor),
            (t = n.inheritsLoose),
            (r = n.initializerDefineProperty),
            (a = n.assertThisInitialized);
        },
        function (n) {
          (e = n.cclegacy), (i = n._decorator), (u = n.AudioClip);
        },
        function (n) {
          l = n.plantSound;
        },
        function (n) {
          c = n.sounds;
        },
        function (n) {
          p = n.ArrayGet;
        },
      ],
      execute: function () {
        var s, d, f, S, y, h, g, b, D;
        e._RF.push({}, '2cc67f57FNFK7/1mDxBUX+L', 'snapDragonSound', void 0);
        var m = i.ccclass,
          v = i.property;
        n(
          'snapDragonSound',
          ((s = m('snapDragonSound')),
          (d = v(u)),
          (f = v([u])),
          (S = v([u])),
          s(
            ((g = o(
              (h = (function (n) {
                function o() {
                  for (var o, t = arguments.length, e = new Array(t), i = 0; i < t; i++) e[i] = arguments[i];
                  return (
                    (o = n.call.apply(n, [this].concat(e)) || this),
                    r(o, 'foodSound', g, a(o)),
                    r(o, 'attackSound', b, a(o)),
                    r(o, 'flapSound', D, a(o)),
                    o
                  );
                }
                t(o, n);
                var e = o.prototype;
                return (
                  (e.playFoodSound = function () {
                    this.playOneShot(this.foodSound);
                  }),
                  (e.playAttackSound = function () {
                    c.play(p.getRandom(this.attackSound), 1, 0.2);
                  }),
                  (e.playFlapSound = function () {
                    this.playOneShotFromArray(this.flapSound);
                  }),
                  o
                );
              })(l)).prototype,
              'foodSound',
              [d],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (b = o(h.prototype, 'attackSound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (D = o(h.prototype, 'flapSound', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (y = h))
          ) || y)
        );
        e._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/SniperPlant.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './NodePools.ts',
    './UI.ts',
    './SoundRescourses.ts',
    './levelController.ts',
    './Square.ts',
  ],
  function (n) {
    var t, e, a, i, o, l, r, c, s, u, p, f, h, P, d;
    return {
      setters: [
        function (n) {
          (t = n.applyDecoratedDescriptor),
            (e = n.inheritsLoose),
            (a = n.initializerDefineProperty),
            (i = n.assertThisInitialized);
        },
        function (n) {
          (o = n.cclegacy), (l = n._decorator), (r = n.Prefab), (c = n.input), (s = n.Input);
        },
        function (n) {
          u = n.Plant;
        },
        function (n) {
          p = n.NodePools;
        },
        function (n) {
          f = n.UIInGame;
        },
        function (n) {
          h = n.sounds;
        },
        function (n) {
          P = n.LevelPlay;
        },
        function (n) {
          d = n.Square;
        },
      ],
      execute: function () {
        var S, g, y, b, L;
        o._RF.push({}, '60bc59fo5ZBs5/odIcq+Yex', 'SniperPlant', void 0);
        var m = l.ccclass,
          C = l.property;
        n(
          'SniperPlant',
          ((S = m('SniperPlant')),
          (g = C(r)),
          S(
            ((L = t(
              (b = (function (n) {
                function t() {
                  for (var t, e = arguments.length, o = new Array(e), l = 0; l < e; l++) o[l] = arguments[l];
                  return (t = n.call.apply(n, [this].concat(o)) || this), a(t, 'locator', L, i(t)), (t.locatorNode = null), t;
                }
                e(t, n);
                var o = t.prototype;
                return (
                  (o.baseLocatable = function () {
                    return !(this.fooding || this.dead || -1 != f.index || this.leapTween || this.locatorNode);
                  }),
                  (o.LocateStartKeyCode = function () {
                    return null;
                  }),
                  (o.specialPlantOnLoad = function () {
                    var n = this;
                    c.on(
                      s.EventType.KEY_DOWN,
                      function (t) {
                        t.keyCode == n.LocateStartKeyCode() &&
                          P.gameStarted &&
                          n.sniperPlantLocatable() &&
                          n.baseLocatable() &&
                          n.locateStart();
                      },
                      this
                    );
                  }),
                  (o.specialSniperPlantDie = function () {}),
                  (o.specialPlantDie = function () {
                    f.uiingame.currentSniperPlant == this && (f.uiingame.tryChangingIndex(-1), this.locateCancel()),
                      this.specialSniperPlantDie();
                  }),
                  (o.sniperPlantLocatable = function () {
                    return !1;
                  }),
                  (o.specialPlantOnMouseDown = function () {
                    return !(!this.sniperPlantLocatable() || !this.baseLocatable()) && (this.locateStart(), !0);
                  }),
                  (o.locateCancel = function () {
                    (this.locatorNode = null), h.playSniperPlantCancelSound(), this.specialSniperPlantLocateCancel();
                  }),
                  (o.locateStart = function () {
                    (this.locatorNode = p.instantiatePooly(this.locator)),
                      (this.locatorNode.parent = f.uiingame.plantInHandLayer),
                      f.uiingame.tryChangingIndex(-4),
                      (f.uiingame.currentSniperPlant = this),
                      h.playLocateSound(),
                      1 != d.lncSelectionMode && f.uiingame.squares.plantGhost(),
                      this.specialSniperPlantLocateStart();
                  }),
                  (o.trigger = function (n) {
                    this.specialSniperPlantTrigger(n),
                      (f.uiingame.currentSniperPlant = null),
                      (this.locatorNode = null),
                      f.uiingame.tryChangingIndex(-1);
                  }),
                  (o.specialPlantOnEnable = function () {
                    (this.locatorNode = null), this.specialSniperPlantOnEnable();
                  }),
                  (o.specialSniperPlantOnEnable = function () {}),
                  (o.specialSniperPlantLocateStart = function () {}),
                  (o.specialSniperPlantLocateCancel = function () {}),
                  (o.specialSniperPlantTrigger = function (n) {}),
                  t
                );
              })(u)).prototype,
              'locator',
              [g],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (y = b))
          ) || y)
        );
        o._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/SnowPea.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Peashooter.ts', './peaShooterSound.ts', './NodePools.ts'],
  function (o) {
    var e, t, n, i, a, r, s, l, c, h, d, p, u, P, f, w;
    return {
      setters: [
        function (o) {
          (e = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (n = o.initializerDefineProperty),
            (i = o.assertThisInitialized),
            (a = o.createClass);
        },
        function (o) {
          (r = o.cclegacy),
            (s = o._decorator),
            (l = o.Prefab),
            (c = o.CCFloat),
            (h = o.Sprite),
            (d = o.tween),
            (p = o.Vec3),
            (u = o.AnimationComponent);
        },
        function (o) {
          P = o.PeashooterPlant;
        },
        function (o) {
          f = o.peaShooterSound;
        },
        function (o) {
          w = o.NodePools;
        },
      ],
      execute: function () {
        var y, F, m, C, g, b, S, z, v;
        r._RF.push({}, '827e88tbrhBe4CasTGWMNaj', 'SnowPea', void 0);
        var I = s.ccclass,
          L = s.property;
        o(
          'SnowPeaPlant',
          ((y = I('SnowPeaPlant')),
          (F = L(l)),
          (m = L(l)),
          (C = L(c)),
          y(
            ((S = e(
              (b = (function (o) {
                function e() {
                  for (var e, t = arguments.length, a = new Array(t), r = 0; r < t; r++) a[r] = arguments[r];
                  return (
                    (e = o.call.apply(o, [this].concat(a)) || this),
                    n(e, 'snowPeaFoodPar', S, i(e)),
                    (e.snowPeaFoodIce = null),
                    n(e, 'peaFreezy', z, i(e)),
                    n(e, 'freezeChance', v, i(e)),
                    e
                  );
                }
                t(e, o);
                var r = e.prototype;
                return (
                  (r.specialPlantFoodEnd = function () {
                    if (
                      (this.anmControl.playAnimation('Water', 1),
                      (this.busy = 0),
                      this.getComponent(f).playFoodEnd(),
                      this.snowPeaFoodIce)
                    ) {
                      var o = this.snowPeaFoodIce,
                        e = o.getChildByName('bg'),
                        t = o.getChildByName('face').getComponent(h);
                      d(t.color).to(1, { a: 0 }).start(),
                        d(e)
                          .to(1, { position: new p(3e3) })
                          .call(function () {
                            (e.position = new p()), w.destroyPooly(o);
                          })
                          .start();
                    }
                    this.snowPeaFoodIce = null;
                  }),
                  (r.specialPeashooterUpdate = function (o) {
                    var e = this;
                    this.inLane &&
                      this.fooding &&
                      this.inLane.zombiePool().forEach(function (o) {
                        o.node.worldPosition.x > e.node.worldPosition.x && o.setChill(5);
                      });
                  }),
                  (r.specialPlantFood = function () {
                    this.anmControl.playAnimation('FoodStart', 2, 0, 1.2),
                      this.getComponent(f).playFood(),
                      this.snowPeaFoodPar &&
                        ((this.snowPeaFoodIce = w.instantiatePooly(this.snowPeaFoodPar)),
                        (this.snowPeaFoodIce.parent = this.inLane.Lower),
                        (this.snowPeaFoodIce.worldPosition = this.inLnC.node.worldPosition),
                        this.snowPeaFoodIce.getComponent(u).play()),
                      (this.busy = 1 / 0);
                  }),
                  (r.animationListenerAdd = function (o) {
                    'foodStart' == o.name && (this.anmControl.playAnimation('Food', 1 / 0), this.foodShooting());
                  }),
                  a(e, [
                    {
                      key: 'defaultPea',
                      get: function () {
                        return Math.random() < this.freezeChance ? this.peaFreezy : this.pea;
                      },
                    },
                  ]),
                  e
                );
              })(P)).prototype,
              'snowPeaFoodPar',
              [F],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (z = e(b.prototype, 'peaFreezy', [m], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (v = e(b.prototype, 'freezeChance', [C], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 0.2;
              },
            })),
            (g = b))
          ) || g)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/SoundManager.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './SoundsController.ts', './cactusSound.ts'],
  function (t) {
    var e, i, a, r, o, n, u, s, l, c, M, p;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor),
            (i = t.initializerDefineProperty),
            (a = t.inheritsLoose),
            (r = t.assertThisInitialized);
        },
        function (t) {
          (o = t.cclegacy), (n = t._decorator), (u = t.AudioClip), (s = t.Enum), (l = t.AudioSource), (c = t.Component);
        },
        function (t) {
          M = t.MusicController;
        },
        function (t) {
          p = t.cactusSound;
        },
      ],
      execute: function () {
        var h, y, B, _, m, G, E, g, L, d, U, S, V, b, D, k, A, P;
        o._RF.push({}, '1d62fK5aZxCqp3U26v5DPCm', 'SoundManager', void 0);
        var f = n.ccclass,
          C = n.property,
          v = t(
            'Music',
            ((h = f('Music')),
            (y = C(u)),
            (B = C(Number)),
            h(
              ((G = e(
                (m = function () {
                  i(this, 'clip', G, this), i(this, 'musicLength', E, this);
                }).prototype,
                'clip',
                [y],
                {
                  configurable: !0,
                  enumerable: !0,
                  writable: !0,
                  initializer: function () {
                    return null;
                  },
                }
              )),
              (E = e(m.prototype, 'musicLength', [B], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 10;
                },
              })),
              (_ = m))
            ) || _)
          ),
          w = t('MusicGroup', function () {
            (this.musicStart = I.MusicAmount), (this.musicLoop = I.MusicAmount);
          }),
          F = t(
            'WorldMusic',
            (function (t) {
              return (
                (t[(t.Modern = 0)] = 'Modern'),
                (t[(t.Egypt = 1)] = 'Egypt'),
                (t[(t.Pirate = 2)] = 'Pirate'),
                (t[(t.Cowboy = 3)] = 'Cowboy'),
                (t[(t.Future = 4)] = 'Future'),
                (t[(t.Dark = 5)] = 'Dark'),
                (t[(t.Beach = 6)] = 'Beach'),
                (t[(t.Ice = 7)] = 'Ice'),
                (t[(t.Lost = 8)] = 'Lost'),
                (t[(t.Punk = 9)] = 'Punk'),
                (t[(t.Pop = 10)] = 'Pop'),
                (t[(t.Rap = 11)] = 'Rap'),
                (t[(t.Eightbit = 12)] = 'Eightbit'),
                (t[(t.Metal = 13)] = 'Metal'),
                (t[(t.Ballad = 14)] = 'Ballad'),
                (t[(t.Dino = 15)] = 'Dino'),
                (t[(t.Sky = 16)] = 'Sky'),
                t
              );
            })({})
          ),
          R = t(
            'MusicSortEnum',
            (function (t) {
              return (
                (t[(t.FourStages = 0)] = 'FourStages'),
                (t[(t.UltimateBattle = 1)] = 'UltimateBattle'),
                (t[(t.Victory = 2)] = 'Victory'),
                (t[(t.DemonstrateMinigame = 3)] = 'DemonstrateMinigame'),
                (t[(t.Leave = 4)] = 'Leave'),
                (t[(t.Lose = 5)] = 'Lose'),
                t
              );
            })({})
          ),
          I = t(
            'musicType',
            (function (t) {
              return (
                (t[(t.Worldmap = 0)] = 'Worldmap'),
                (t[(t.UB_Egypt = 1)] = 'UB_Egypt'),
                (t[(t.UB_Pirate = 2)] = 'UB_Pirate'),
                (t[(t.UB_Cowboy = 3)] = 'UB_Cowboy'),
                (t[(t.UB_Future = 4)] = 'UB_Future'),
                (t[(t.UB_Dark = 5)] = 'UB_Dark'),
                (t[(t.UB_Beach = 6)] = 'UB_Beach'),
                (t[(t.UB_Ice = 7)] = 'UB_Ice'),
                (t[(t.UB_Lost = 8)] = 'UB_Lost'),
                (t[(t.UB_Sky = 9)] = 'UB_Sky'),
                (t[(t.UB_Dino = 10)] = 'UB_Dino'),
                (t[(t.UB_Modern = 11)] = 'UB_Modern'),
                (t[(t.MG_Egypt = 12)] = 'MG_Egypt'),
                (t[(t.MG_Pirate = 13)] = 'MG_Pirate'),
                (t[(t.MG_Cowboy = 14)] = 'MG_Cowboy'),
                (t[(t.MG_Future = 15)] = 'MG_Future'),
                (t[(t.MG_Dark = 16)] = 'MG_Dark'),
                (t[(t.MG_Beach = 17)] = 'MG_Beach'),
                (t[(t.MG_Ice = 18)] = 'MG_Ice'),
                (t[(t.MG_Lost = 19)] = 'MG_Lost'),
                (t[(t.MG_Sky = 20)] = 'MG_Sky'),
                (t[(t.MG_Dino = 21)] = 'MG_Dino'),
                (t[(t.MG_Modern = 22)] = 'MG_Modern'),
                (t[(t.MG_Ballad = 23)] = 'MG_Ballad'),
                (t[(t.MG_Pop = 24)] = 'MG_Pop'),
                (t[(t.MG_Rap = 25)] = 'MG_Rap'),
                (t[(t.MG_EightBit = 26)] = 'MG_EightBit'),
                (t[(t.MG_Metal = 27)] = 'MG_Metal'),
                (t[(t.UB_Victory = 28)] = 'UB_Victory'),
                (t[(t.MG_Victory = 29)] = 'MG_Victory'),
                (t[(t.LEAVE_Egypt = 30)] = 'LEAVE_Egypt'),
                (t[(t.LEAVE_Pirate = 31)] = 'LEAVE_Pirate'),
                (t[(t.LEAVE_Cowboy = 32)] = 'LEAVE_Cowboy'),
                (t[(t.LEAVE_Future = 33)] = 'LEAVE_Future'),
                (t[(t.LEAVE_Dark = 34)] = 'LEAVE_Dark'),
                (t[(t.LEAVE_Beach = 35)] = 'LEAVE_Beach'),
                (t[(t.LEAVE_Ice = 36)] = 'LEAVE_Ice'),
                (t[(t.LEAVE_Lost = 37)] = 'LEAVE_Lost'),
                (t[(t.LEAVE_Stage = 38)] = 'LEAVE_Stage'),
                (t[(t.LEAVE_Dino = 39)] = 'LEAVE_Dino'),
                (t[(t.LEAVE_Modern = 40)] = 'LEAVE_Modern'),
                (t[(t.MusicAmount = 41)] = 'MusicAmount'),
                t
              );
            })({})
          );
        s(w), s(R);
        t(
          'SoundManager',
          ((g = f('SoundManager')),
          (L = C([v])),
          (d = C({ type: R })),
          (U = C(l)),
          (S = C(l)),
          g(
            ((D = e(
              (b = (function (t) {
                function e() {
                  for (var e, a = arguments.length, o = new Array(a), n = 0; n < a; n++) o[n] = arguments[n];
                  return (
                    (e = t.call.apply(t, [this].concat(o)) || this),
                    i(e, 'BackgroundMusic', D, r(e)),
                    i(e, 'currentMusicSort', k, r(e)),
                    (e.currentWorldMusic = F.Modern),
                    (e.leftRepeat = 0),
                    i(e, 'audioSource', A, r(e)),
                    i(e, 'audioSourceReplay', P, r(e)),
                    (e.currentPlayingComponent = null),
                    (e.currentMusic = null),
                    (e.keepupMusic = null),
                    e
                  );
                }
                a(e, t);
                var o = e.prototype;
                return (
                  (o.switchMusic = function (t, e) {
                    if (e == R.Victory)
                      this.currentMusicSort == R.UltimateBattle
                        ? this.playBGM(I.UB_Victory, !1, 1)
                        : this.currentMusicSort == R.DemonstrateMinigame && this.playBGM(I.MG_Victory, !1, 1);
                    else
                      switch (t) {
                        case F.Egypt:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Egypt, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_Egypt, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Egypt, !1, 1);
                          break;
                        case F.Pirate:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Pirate, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_Pirate, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Pirate, !1, 1);
                          break;
                        case F.Cowboy:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Cowboy, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_Cowboy, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Cowboy, !1, 1);
                          break;
                        case F.Future:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Future, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_Future, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Future, !1, 1);
                          break;
                        case F.Dark:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Dark, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_Dark, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Dark, !1, 1);
                          break;
                        case F.Beach:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Beach, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_Beach, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Beach, !1, 1);
                          break;
                        case F.Ice:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Ice, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_Ice, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Ice, !1, 1);
                          break;
                        case F.Lost:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Lost, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_Lost, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Lost, !1, 1);
                          break;
                        case F.Sky:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Sky, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_Sky, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Future, !1, 1);
                          break;
                        case F.Ballad:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Future, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_Ballad, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Stage, !1, 1);
                          break;
                        case F.Punk:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Future, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_Future, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Stage, !1, 1);
                          break;
                        case F.Pop:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Future, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_Pop, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Stage, !1, 1);
                          break;
                        case F.Rap:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Future, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_Rap, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Stage, !1, 1);
                          break;
                        case F.Eightbit:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Future, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_EightBit, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Stage, !1, 1);
                          break;
                        case F.Metal:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Future, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_Metal, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Stage, !1, 1);
                          break;
                        case F.Dino:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Dino, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_Dino, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Dino, !1, 1);
                          break;
                        default:
                          e == R.UltimateBattle
                            ? this.playBGM(I.UB_Modern, !0)
                            : e == R.DemonstrateMinigame
                            ? this.playBGM(I.MG_Modern, !0)
                            : e == R.Leave && this.playBGM(I.LEAVE_Modern, !1, 1);
                      }
                    (this.currentMusicSort = e), (this.currentWorldMusic = t);
                  }),
                  (o.switchWorldMusic = function (t) {
                    this.switchMusic(t, this.currentMusicSort);
                  }),
                  (o.switchMusicSort = function (t) {
                    this.switchMusic(this.currentWorldMusic, t);
                  }),
                  (o.playBGM = function (t, e, i) {
                    if ((void 0 === e && (e = !1), void 0 === i && (i = 1 / 0), !(t >= I.MusicAmount))) {
                      this.leftRepeat = i - 1;
                      var a = this.currentPlayingComponent && e ? this.currentPlayingComponent.currentTime : 0;
                      this.audioSource.stop(),
                        this.audioSourceReplay.stop(),
                        (this.audioSourceReplay.currentTime = 0),
                        (this.currentMusic = this.BackgroundMusic[t]),
                        (this.keepupMusic = this.BackgroundMusic[t]),
                        (this.audioSource.clip = this.currentMusic.clip),
                        (this.audioSourceReplay.clip = this.currentMusic.clip),
                        (this.currentPlayingComponent = this.audioSource),
                        this.currentPlayingComponent.play(),
                        (this.currentPlayingComponent.currentTime = a),
                        (this.currentPlayingComponent.volume = M.MusicVolume);
                    }
                  }),
                  (o.pauseBGM = function () {
                    this.audioSource.playing && this.audioSource.pause(),
                      this.audioSourceReplay.playing && this.audioSourceReplay.pause();
                  }),
                  (o.resumeBGM = function () {
                    this.currentMusic &&
                      this.currentPlayingComponent &&
                      (this.currentPlayingComponent.play(), (this.currentPlayingComponent.volume = M.MusicVolume));
                  }),
                  (o.changeLoopPlayer = function () {
                    (this.currentPlayingComponent =
                      this.currentPlayingComponent == this.audioSource ? this.audioSourceReplay : this.audioSource),
                      this.currentPlayingComponent.play(),
                      (this.currentPlayingComponent.currentTime = 0),
                      (this.currentPlayingComponent.volume = M.MusicVolume),
                      this.leftRepeat--;
                  }),
                  (o.onLoad = function () {}),
                  (o.update = function (t) {
                    this.currentMusic &&
                      this.currentPlayingComponent &&
                      ((this.currentPlayingComponent.volume = M.MusicVolume),
                      this.leftRepeat > 0 &&
                        this.currentPlayingComponent.currentTime >= this.currentMusic.musicLength &&
                        this.changeLoopPlayer()),
                      p.shakeSoundCD > 0 && (p.shakeSoundCD -= t);
                  }),
                  e
                );
              })(c)).prototype,
              'BackgroundMusic',
              [L],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (k = e(b.prototype, 'currentMusicSort', [d], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return R.UltimateBattle;
              },
            })),
            (A = e(b.prototype, 'audioSource', [U], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (P = e(b.prototype, 'audioSourceReplay', [S], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (V = b))
          ) || V)
        );
        o._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/SoundRescourses.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './SoundsController.ts', './NodePools.ts', './UI.ts'],
  function (e) {
    var o, i, t, n, a, l, r, u, p, s, c, h;
    return {
      setters: [
        function (e) {
          (o = e.applyDecoratedDescriptor),
            (i = e.inheritsLoose),
            (t = e.initializerDefineProperty),
            (n = e.assertThisInitialized);
        },
        function (e) {
          (a = e.cclegacy), (l = e._decorator), (r = e.AudioClip), (u = e.AudioSource), (p = e.Component);
        },
        function (e) {
          s = e.SoundFXController;
        },
        function (e) {
          c = e.ArrayGet;
        },
        function (e) {
          h = e.gamingSpeed;
        },
      ],
      execute: function () {
        var d,
          y,
          S,
          f,
          b,
          m,
          w,
          g,
          C,
          v,
          z,
          O,
          F,
          R,
          P,
          D,
          X,
          V,
          W,
          k,
          A,
          U,
          B,
          L,
          H,
          M,
          Z,
          I,
          x,
          E,
          G,
          T,
          _,
          N,
          j,
          Y,
          q,
          J,
          K,
          Q,
          $,
          ee,
          oe,
          ie,
          te,
          ne,
          ae,
          le,
          re,
          ue,
          pe,
          se,
          ce,
          he,
          de,
          ye,
          Se,
          fe,
          be,
          me,
          we,
          ge,
          Ce,
          ve,
          ze,
          Oe,
          Fe,
          Re,
          Pe,
          De,
          Xe,
          Ve,
          We,
          ke,
          Ae,
          Ue,
          Be,
          Le,
          He,
          Me,
          Ze,
          Ie,
          xe,
          Ee,
          Ge,
          Te,
          _e,
          Ne,
          je,
          Ye,
          qe,
          Je,
          Ke,
          Qe,
          $e,
          eo,
          oo,
          io,
          to,
          no,
          ao,
          lo,
          ro,
          uo,
          po,
          so,
          co,
          ho,
          yo,
          So,
          fo,
          bo,
          mo,
          wo,
          go;
        a._RF.push({}, '904d1auYeNBHZ5TOCP4aBg3', 'SoundRescourses', void 0);
        var Co = l.ccclass,
          vo = l.property,
          zo = function (e, o, i) {
            (this.clip = void 0), (this.volume = 1), (this.cooldown = 0), (this.clip = e), (this.volume = o), (this.cooldown = i);
          },
          Oo = e(
            'sounds',
            (function () {
              function e() {}
              return (
                (e.playLocateSound = function () {
                  this.sr.playLocateSound();
                }),
                (e.playSniperPlantCancelSound = function () {
                  this.sr.playSniperPlantCancelSound();
                }),
                (e.playLavaIdle = function () {
                  this.sr.playLavaIdle();
                }),
                (e.playCameraMove = function () {
                  this.sr.playCameraMove();
                }),
                (e.playAwooga = function () {
                  this.sr.playAwooga();
                }),
                (e.playPlantBurn = function () {
                  this.sr.playPlantBurn();
                }),
                (e.playReadySetPlant = function () {
                  this.sr.playReadySetPlant();
                }),
                (e.playHugeWave = function () {
                  this.sr.playHugeWave();
                }),
                (e.playFinalWave = function () {
                  this.sr.playFinalWave();
                }),
                (e.playSeedChooserOn = function () {
                  this.sr.playSeedChooserOn();
                }),
                (e.playSeedChooserOff = function () {
                  this.sr.playSeedChooserOff();
                }),
                (e.playLetsRock = function () {
                  this.sr.playLetsRock();
                }),
                (e.playButterOn = function () {
                  this.sr.playButterOn();
                }),
                (e.playTombBreak = function () {
                  this.sr.playTombBreak();
                }),
                (e.playTombRiseHeavy = function () {
                  this.sr.playTombRiseHeavy();
                }),
                (e.playZombieGulp = function () {
                  this.sr.playZombieGulp();
                }),
                (e.playZombieChew = function () {
                  this.sr.playzombieChew();
                }),
                (e.playTileShadowSpawn = function () {
                  this.sr.playTileShadowSpawn();
                }),
                (e.playSeaSplash = function () {
                  this.sr.playSeaSplash();
                }),
                (e.playWaterSplash = function () {
                  this.sr.playWaterSplash();
                }),
                (e.playPlantFoodStart = function () {
                  this.sr.playPlantFoodStart();
                }),
                (e.playZombieLie = function () {
                  this.sr.playZombieLie();
                }),
                (e.playZombieLimbPop = function () {
                  this.sr.playZombieLimbPop();
                }),
                (e.playCardChooseFailed = function (e) {
                  void 0 === e && (e = !1), this.sr.playCardChooseFailed(e);
                }),
                (e.playCardCancel = function () {
                  this.sr.playCardCancel();
                }),
                (e.playCardChosen = function () {
                  this.sr.playCardChosen();
                }),
                (e.playRightButtonCancel = function () {
                  this.sr.playRightButtonCancel();
                }),
                (e.playShovelActive = function () {
                  this.sr.playShovelActive();
                }),
                (e.playSpeedUp = function () {
                  this.sr.playSpeedUp();
                }),
                (e.playPlantOnWater = function () {
                  this.sr.playPlantOnWater();
                }),
                (e.playPlantOnFloor = function () {
                  this.sr.playPlantOnFloor();
                }),
                (e.playShovelDig = function () {
                  this.sr.playShovelDig();
                }),
                (e.playShovelDigWater = function () {
                  this.sr.playShovelDigWater();
                }),
                (e.playZombieShock = function (e) {
                  void 0 === e && (e = !1), this.sr.playZombieShock(e);
                }),
                (e.playGargantuarAsh = function () {
                  this.sr.playGargantuarAsh();
                }),
                (e.playDirtRise = function (e, o) {
                  void 0 === e && (e = !1), void 0 === o && (o = !0), this.sr.playDirtRise(e, o);
                }),
                (e.playTombRiseMagical = function () {
                  this.sr.playTombRiseMagical();
                }),
                (e.playSpudow = function () {
                  this.sr.playSpudow();
                }),
                (e.playExplosion = function () {
                  this.sr.playExplosion();
                }),
                (e.playArmorHitPlastic = function () {
                  this.sr.playArmorHitPlastic();
                }),
                (e.playArmorHitShield = function () {
                  this.sr.playArmorHitShield();
                }),
                (e.playConveyorArrive = function () {
                  this.sr.playConveyorArrive();
                }),
                (e.playPause = function () {
                  this.sr.playPause();
                }),
                (e.playWorldMapStart = function () {
                  this.sr.playWorldMapStart();
                }),
                (e.playSandStormWarn = function () {
                  this.sr.playSandStormWarn();
                }),
                (e.playReadyOrSet = function () {
                  this.sr.playReadyOrSet();
                }),
                (e.playPowerUpCD = function (e) {
                  this.sr.playPowerUpCD(e);
                }),
                (e.playPowerUpStart = function (e) {
                  this.sr.playPowerUpStart(e);
                }),
                (e.playBirdExpl = function () {
                  this.sr.playBirdExpl();
                }),
                (e.playGemSpawn = function () {
                  this.sr.playGemSpawn();
                }),
                (e.playZombieFart = function () {
                  this.sr.playZombieFart();
                }),
                (e.play = function (e, o, i) {
                  void 0 === o && (o = 1), void 0 === i && (i = null), e && this.sr.play(e, o, i);
                }),
                e
              );
            })()
          );
        Oo.sr = void 0;
        e(
          'SoundRescourses',
          ((d = Co('SoundRescourses')),
          (y = vo(r)),
          (S = vo([r])),
          (f = vo(r)),
          (b = vo(r)),
          (m = vo([r])),
          (w = vo(r)),
          (g = vo(r)),
          (C = vo(r)),
          (v = vo(r)),
          (z = vo(r)),
          (O = vo(r)),
          (F = vo(r)),
          (R = vo([r])),
          (P = vo([r])),
          (D = vo([r])),
          (X = vo([r])),
          (V = vo([r])),
          (W = vo([r])),
          (k = vo([r])),
          (A = vo(r)),
          (U = vo([r])),
          (B = vo([r])),
          (L = vo([r])),
          (H = vo([r])),
          (M = vo([r])),
          (Z = vo(r)),
          (I = vo(r)),
          (x = vo(r)),
          (E = vo(r)),
          (G = vo(r)),
          (T = vo(r)),
          (_ = vo(r)),
          (N = vo(r)),
          (j = vo(r)),
          (Y = vo([r])),
          (q = vo([r])),
          (J = vo(r)),
          (K = vo([r])),
          (Q = vo([r])),
          ($ = vo([r])),
          (ee = vo([r])),
          (oe = vo([r])),
          (ie = vo([r])),
          (te = vo([r])),
          (ne = vo(r)),
          (ae = vo(r)),
          (le = vo(r)),
          (re = vo(r)),
          (ue = vo(r)),
          (pe = vo(r)),
          (se = vo([r])),
          (ce = vo(r)),
          (he = vo(r)),
          (de = vo([r])),
          (ye = vo(r)),
          (Se = vo(r)),
          d(
            ((me = o(
              (be = (function (e) {
                function o() {
                  for (var o, i = arguments.length, a = new Array(i), l = 0; l < i; l++) a[l] = arguments[l];
                  return (
                    (o = e.call.apply(e, [this].concat(a)) || this),
                    t(o, 'plantFoodStart', me, n(o)),
                    t(o, 'zombieLie', we, n(o)),
                    t(o, 'zombieLimbPop', ge, n(o)),
                    t(o, 'seaSplash', Ce, n(o)),
                    t(o, 'waterSplash', ve, n(o)),
                    t(o, 'cardChooseFailed', ze, n(o)),
                    (o.cardChooseFailedCD = 0),
                    t(o, 'cardChosen', Oe, n(o)),
                    t(o, 'cardCancel', Fe, n(o)),
                    t(o, 'rightButtonCancel', Re, n(o)),
                    t(o, 'shovelActive', Pe, n(o)),
                    t(o, 'speedUp', De, n(o)),
                    t(o, 'speedLower', Xe, n(o)),
                    t(o, 'shovelDig', Ve, n(o)),
                    t(o, 'shovelDigWater', We, n(o)),
                    t(o, 'plantOnWater', ke, n(o)),
                    t(o, 'plantOnFloor', Ae, n(o)),
                    t(o, 'tileShadowSpawn', Ue, n(o)),
                    (o.coolingDownSounds = []),
                    (o.tickPlaySounds = []),
                    t(o, 'zombieShock', Be, n(o)),
                    t(o, 'gargantuarShock', Le, n(o)),
                    t(o, 'gargantuarAsh', He, n(o)),
                    t(o, 'dirtRise', Me, n(o)),
                    t(o, 'dirtRiseHeavy', Ze, n(o)),
                    (o.dirtRiseCooldown = 0),
                    t(o, 'tombRiseMagical', Ie, n(o)),
                    t(o, 'spudow', xe, n(o)),
                    t(o, 'explosion', Ee, n(o)),
                    t(o, 'cameraMove', Ge, n(o)),
                    t(o, 'plantBurn', Te, n(o)),
                    t(o, 'awooga', _e, n(o)),
                    t(o, 'hugeWave', Ne, n(o)),
                    t(o, 'finalWave', je, n(o)),
                    t(o, 'readySetPlant', Ye, n(o)),
                    t(o, 'seedChooserOn', qe, n(o)),
                    t(o, 'seedChooserOff', Je, n(o)),
                    t(o, 'letsRock', Ke, n(o)),
                    t(o, 'butterOn', Qe, n(o)),
                    t(o, 'tombBreak', $e, n(o)),
                    t(o, 'tombRiseHeavy', eo, n(o)),
                    t(o, 'lavaIdle', oo, n(o)),
                    (o.lavaIdleCooldown = 0),
                    t(o, 'locateSound', io, n(o)),
                    t(o, 'sniperPlantCancelSound', to, n(o)),
                    (o.audioSource = void 0),
                    t(o, 'zombieChew', no, n(o)),
                    (o.zombieChewCoolDown = 0),
                    t(o, 'zombieGulp', ao, n(o)),
                    (o.zombieGulpCoolDown = 1),
                    t(o, 'armorHitPlastic', lo, n(o)),
                    t(o, 'armorHitShield', ro, n(o)),
                    t(o, 'conveyorArrive', uo, n(o)),
                    t(o, 'pause', po, n(o)),
                    t(o, 'worldMapStart', so, n(o)),
                    t(o, 'sandStormWarn', co, n(o)),
                    t(o, 'readyOrSet', ho, n(o)),
                    t(o, 'powerUpEnd', yo, n(o)),
                    t(o, 'powerUpCD', So, n(o)),
                    t(o, 'powerUpSnowStart', fo, n(o)),
                    t(o, 'powerUpCherryStart', bo, n(o)),
                    t(o, 'birdExpl', mo, n(o)),
                    t(o, 'gemSpawn', wo, n(o)),
                    t(o, 'zombieFart', go, n(o)),
                    o
                  );
                }
                i(o, e);
                var a = o.prototype;
                return (
                  (a.playPlantFoodStart = function () {
                    this.audioSource.playOneShot(this.plantFoodStart, s.SoundFXVolume);
                  }),
                  (a.playZombieLie = function () {
                    this.play(c.getRandom(this.zombieLie), 1, 0.2);
                  }),
                  (a.playZombieLimbPop = function () {
                    this.play(this.zombieLimbPop);
                  }),
                  (a.playSeaSplash = function () {
                    this.audioSource.playOneShot(this.seaSplash, s.SoundFXVolume);
                  }),
                  (a.playWaterSplash = function () {
                    this.audioSource.playOneShot(c.getRandom(this.waterSplash), s.SoundFXVolume);
                  }),
                  (a.playCardChooseFailed = function (e) {
                    void 0 === e && (e = !1),
                      (!e || this.cardChooseFailedCD <= 0) &&
                        (this.audioSource.playOneShot(this.cardChooseFailed, s.SoundFXVolume), (this.cardChooseFailedCD = 0.5));
                  }),
                  (a.playCardChosen = function () {
                    this.audioSource.playOneShot(this.cardChosen, s.SoundFXVolume);
                  }),
                  (a.playCardCancel = function () {
                    this.audioSource.playOneShot(this.cardCancel, s.SoundFXVolume);
                  }),
                  (a.playRightButtonCancel = function () {
                    this.audioSource.playOneShot(this.rightButtonCancel, s.SoundFXVolume);
                  }),
                  (a.playShovelActive = function () {
                    this.audioSource.playOneShot(this.shovelActive, s.SoundFXVolume);
                  }),
                  (a.playSpeedUp = function () {
                    1 == h
                      ? this.audioSource.playOneShot(this.speedLower, s.SoundFXVolume)
                      : this.audioSource.playOneShot(this.speedUp, s.SoundFXVolume);
                  }),
                  (a.playShovelDig = function () {
                    this.audioSource.playOneShot(c.getRandom(this.shovelDig), s.SoundFXVolume);
                  }),
                  (a.playShovelDigWater = function () {
                    this.audioSource.playOneShot(c.getRandom(this.shovelDigWater), s.SoundFXVolume);
                  }),
                  (a.playPlantOnWater = function () {
                    this.audioSource.playOneShot(c.getRandom(this.plantOnWater), s.SoundFXVolume);
                  }),
                  (a.playPlantOnFloor = function () {
                    this.audioSource.playOneShot(c.getRandom(this.plantOnFloor), s.SoundFXVolume);
                  }),
                  (a.playTileShadowSpawn = function () {
                    this.play(c.getRandom(this.tileShadowSpawn));
                  }),
                  (a.update = function (e) {
                    this.cardChooseFailedCD > 0 && (this.cardChooseFailedCD -= e),
                      this.cardChooseFailedCD < 0 && (this.cardChooseFailedCD = 0),
                      this.dirtRiseCooldown > 0 && (this.dirtRiseCooldown -= e),
                      this.dirtRiseCooldown < 0 && (this.dirtRiseCooldown = 0),
                      this.zombieChewCoolDown > 0 && (this.zombieChewCoolDown -= e),
                      this.zombieChewCoolDown < 0 && (this.zombieChewCoolDown = 0),
                      this.lavaIdleCooldown > 0 && (this.lavaIdleCooldown -= e),
                      this.lavaIdleCooldown < 0 && (this.lavaIdleCooldown = 0);
                  }),
                  (a.lateUpdate = function (e) {
                    var o = this;
                    this.tickPlaySounds.forEach(function (e) {
                      e && o.audioSource.playOneShot(e.clip, s.SoundFXVolume * e.volume);
                    }),
                      (this.tickPlaySounds = []),
                      this.coolingDownSounds.concat().forEach(function (i) {
                        if ((i.cooldown > 0 && (i.cooldown -= e), i.cooldown <= 0)) {
                          var t = o.coolingDownSounds.indexOf(i);
                          -1 != t && o.coolingDownSounds.splice(t, 1);
                        }
                      });
                  }),
                  (a.playZombieShock = function (e) {
                    void 0 === e && (e = !1),
                      this.audioSource.playOneShot(c.getRandom(e ? this.gargantuarShock : this.zombieShock), s.SoundFXVolume);
                  }),
                  (a.playGargantuarAsh = function () {
                    Oo.play(this.gargantuarAsh);
                  }),
                  (a.playDirtRise = function (e, o) {
                    void 0 === o && (o = !0),
                      (this.dirtRiseCooldown <= 0 || !o) &&
                        (this.audioSource.playOneShot(c.getRandom(e ? this.dirtRiseHeavy : this.dirtRise), s.SoundFXVolume),
                        (this.dirtRiseCooldown = 1));
                  }),
                  (a.playTombRiseMagical = function () {
                    this.audioSource.playOneShot(c.getRandom(this.tombRiseMagical), s.SoundFXVolume);
                  }),
                  (a.playSpudow = function () {
                    this.audioSource.playOneShot(c.getRandom(this.spudow), s.SoundFXVolume);
                  }),
                  (a.playExplosion = function () {
                    this.audioSource.playOneShot(c.getRandom(this.explosion), s.SoundFXVolume);
                  }),
                  (a.playCameraMove = function () {
                    this.audioSource.playOneShot(this.cameraMove, s.SoundFXVolume);
                  }),
                  (a.playPlantBurn = function () {
                    this.play(this.plantBurn);
                  }),
                  (a.playAwooga = function () {
                    this.audioSource.playOneShot(this.awooga, s.SoundFXVolume);
                  }),
                  (a.playHugeWave = function () {
                    this.audioSource.playOneShot(this.hugeWave, s.SoundFXVolume);
                  }),
                  (a.playFinalWave = function () {
                    this.audioSource.playOneShot(this.finalWave, s.SoundFXVolume);
                  }),
                  (a.playReadySetPlant = function () {
                    this.audioSource.playOneShot(this.readySetPlant, s.SoundFXVolume);
                  }),
                  (a.playSeedChooserOn = function () {
                    this.audioSource.playOneShot(this.seedChooserOn, s.SoundFXVolume);
                  }),
                  (a.playSeedChooserOff = function () {
                    this.audioSource.playOneShot(this.seedChooserOff, s.SoundFXVolume);
                  }),
                  (a.playLetsRock = function () {
                    this.audioSource.playOneShot(this.letsRock, s.SoundFXVolume);
                  }),
                  (a.playButterOn = function () {
                    this.play(c.getRandom(this.butterOn));
                  }),
                  (a.playTombBreak = function () {
                    this.play(c.getRandom(this.tombBreak));
                  }),
                  (a.playTombRiseHeavy = function () {
                    this.audioSource.playOneShot(this.tombRiseHeavy, s.SoundFXVolume);
                  }),
                  (a.playLavaIdle = function () {
                    this.lavaIdleCooldown <= 0 &&
                      (this.audioSource.playOneShot(c.getRandom(this.lavaIdle), s.SoundFXVolume),
                      (this.lavaIdleCooldown = 5 * Math.random() + 2.5));
                  }),
                  (a.playLocateSound = function () {
                    this.audioSource.playOneShot(this.locateSound, s.SoundFXVolume);
                  }),
                  (a.playSniperPlantCancelSound = function () {
                    this.audioSource.playOneShot(this.sniperPlantCancelSound, s.SoundFXVolume);
                  }),
                  (a.onLoad = function () {
                    (Oo.sr = this), this.getComponent(u) || this.addComponent(u), (this.audioSource = this.getComponent(u));
                  }),
                  (a.playzombieChew = function () {
                    0 == this.zombieChewCoolDown &&
                      (this.audioSource.playOneShot(c.getRandom(this.zombieChew), s.SoundFXVolume),
                      (this.zombieChewCoolDown = 0.5));
                  }),
                  (a.playZombieGulp = function () {
                    this.play(c.getRandom(this.zombieGulp));
                  }),
                  (a.playArmorHitPlastic = function () {
                    this.play(c.getRandom(this.armorHitPlastic));
                  }),
                  (a.playArmorHitShield = function () {
                    this.play(c.getRandom(this.armorHitShield));
                  }),
                  (a.playConveyorArrive = function () {
                    this.audioSource.playOneShot(this.conveyorArrive, s.SoundFXVolume);
                  }),
                  (a.playPause = function () {
                    this.audioSource.playOneShot(this.pause, s.SoundFXVolume);
                  }),
                  (a.playWorldMapStart = function () {
                    this.audioSource.playOneShot(this.worldMapStart, s.SoundFXVolume);
                  }),
                  (a.playSandStormWarn = function () {
                    this.audioSource.playOneShot(this.sandStormWarn, s.SoundFXVolume);
                  }),
                  (a.playReadyOrSet = function () {
                    this.audioSource.playOneShot(this.readyOrSet, s.SoundFXVolume);
                  }),
                  (a.playPowerUpCD = function (e) {
                    if (e <= 0) this.audioSource.playOneShot(this.powerUpEnd, s.SoundFXVolume);
                    else if (this.powerUpCD.length > 0) {
                      var o = Math.ceil(e * (this.powerUpCD.length - 1));
                      this.audioSource.playOneShot(this.powerUpCD[this.powerUpCD.length - 1 - o], s.SoundFXVolume);
                    }
                  }),
                  (a.playPowerUpStart = function (e) {
                    switch (e) {
                      case 1:
                        this.audioSource.playOneShot(this.powerUpSnowStart, s.SoundFXVolume);
                        break;
                      case 4:
                        this.audioSource.playOneShot(this.powerUpCherryStart, s.SoundFXVolume);
                    }
                  }),
                  (a.playBirdExpl = function () {
                    this.play(c.getRandom(this.birdExpl));
                  }),
                  (a.playGemSpawn = function () {
                    this.audioSource.playOneShot(this.gemSpawn, s.SoundFXVolume);
                  }),
                  (a.playZombieFart = function () {
                    this.audioSource.playOneShot(this.zombieFart, s.SoundFXVolume);
                  }),
                  (a.play = function (e, o, i) {
                    if ((void 0 === o && (o = 1), void 0 === i && (i = null), e && null == i && (i = e.getDuration() / 2), e)) {
                      for (var t = 0; t < this.coolingDownSounds.length; t++) if (this.coolingDownSounds[t].clip == e) return;
                      for (var n = 0; n < this.tickPlaySounds.length; n++)
                        if (this.tickPlaySounds[n].clip == e)
                          return void (this.tickPlaySounds[n].volume = Math.min(1, this.tickPlaySounds[n].volume + o));
                      i < 0 && (i = 0);
                      var a = new zo(e, o, i);
                      this.tickPlaySounds.push(a), i > 0 && this.coolingDownSounds.push(a);
                    }
                  }),
                  o
                );
              })(p)).prototype,
              'plantFoodStart',
              [y],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (we = o(be.prototype, 'zombieLie', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (ge = o(be.prototype, 'zombieLimbPop', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Ce = o(be.prototype, 'seaSplash', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (ve = o(be.prototype, 'waterSplash', [m], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (ze = o(be.prototype, 'cardChooseFailed', [w], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Oe = o(be.prototype, 'cardChosen', [g], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Fe = o(be.prototype, 'cardCancel', [C], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Re = o(be.prototype, 'rightButtonCancel', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Pe = o(be.prototype, 'shovelActive', [z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (De = o(be.prototype, 'speedUp', [O], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Xe = o(be.prototype, 'speedLower', [F], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Ve = o(be.prototype, 'shovelDig', [R], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (We = o(be.prototype, 'shovelDigWater', [P], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (ke = o(be.prototype, 'plantOnWater', [D], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Ae = o(be.prototype, 'plantOnFloor', [X], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Ue = o(be.prototype, 'tileShadowSpawn', [V], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Be = o(be.prototype, 'zombieShock', [W], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Le = o(be.prototype, 'gargantuarShock', [k], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (He = o(be.prototype, 'gargantuarAsh', [A], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (Me = o(be.prototype, 'dirtRise', [U], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Ze = o(be.prototype, 'dirtRiseHeavy', [B], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Ie = o(be.prototype, 'tombRiseMagical', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (xe = o(be.prototype, 'spudow', [H], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Ee = o(be.prototype, 'explosion', [M], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Ge = o(be.prototype, 'cameraMove', [Z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Te = o(be.prototype, 'plantBurn', [I], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (_e = o(be.prototype, 'awooga', [x], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Ne = o(be.prototype, 'hugeWave', [E], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (je = o(be.prototype, 'finalWave', [G], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Ye = o(be.prototype, 'readySetPlant', [T], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (qe = o(be.prototype, 'seedChooserOn', [_], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Je = o(be.prototype, 'seedChooserOff', [N], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Ke = o(be.prototype, 'letsRock', [j], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Qe = o(be.prototype, 'butterOn', [Y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            ($e = o(be.prototype, 'tombBreak', [q], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (eo = o(be.prototype, 'tombRiseHeavy', [J], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (oo = o(be.prototype, 'lavaIdle', [K], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (io = o(be.prototype, 'locateSound', [Q], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (to = o(be.prototype, 'sniperPlantCancelSound', [$], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (no = o(be.prototype, 'zombieChew', [ee], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (ao = o(be.prototype, 'zombieGulp', [oe], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (lo = o(be.prototype, 'armorHitPlastic', [ie], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (ro = o(be.prototype, 'armorHitShield', [te], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (uo = o(be.prototype, 'conveyorArrive', [ne], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (po = o(be.prototype, 'pause', [ae], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (so = o(be.prototype, 'worldMapStart', [le], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (co = o(be.prototype, 'sandStormWarn', [re], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (ho = o(be.prototype, 'readyOrSet', [ue], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (yo = o(be.prototype, 'powerUpEnd', [pe], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (So = o(be.prototype, 'powerUpCD', [se], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (fo = o(be.prototype, 'powerUpSnowStart', [ce], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (bo = o(be.prototype, 'powerUpCherryStart', [he], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (mo = o(be.prototype, 'birdExpl', [de], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (wo = o(be.prototype, 'gemSpawn', [ye], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (go = o(be.prototype, 'zombieFart', [Se], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (fe = be))
          ) || fe)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/SoundsController.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './SoundManager.ts', './SettingWindow.ts'],
  function (n) {
    var t, u, o, s, i, e;
    return {
      setters: [
        function (n) {
          t = n.inheritsLoose;
        },
        function (n) {
          (u = n.cclegacy), (o = n._decorator), (s = n.find);
        },
        function (n) {
          i = n.SoundManager;
        },
        function (n) {
          e = n.Setting;
        },
      ],
      execute: function () {
        u._RF.push({}, '48b91/HEXVLkrHSK09gtryZ', 'SoundsController', void 0);
        o.ccclass, o.property;
        var c = (function () {
          function n() {}
          return (
            (n.Instance = function () {
              return n.instance || (n.instance = new n()), n.instance;
            }),
            n
          );
        })();
        (c.instance = void 0),
          (c.SoundFXVolume = 1),
          (c.totalVolume = 1),
          (n(
            'SoundFXController',
            (function (n) {
              function u() {
                return n.apply(this, arguments) || this;
              }
              return (
                t(u, n),
                (u.setSoundFxVolume = function (n) {
                  (this.SoundFXVolume = n * this.totalVolume), e.saveSettings();
                }),
                u
              );
            })(c)
          ).SoundFXVolume = 1),
          (n(
            'MusicController',
            (function (n) {
              function u() {
                return n.apply(this, arguments) || this;
              }
              return (
                t(u, n),
                (u.soundManager = function () {
                  return s('Resources/Music').getComponent(i);
                }),
                (u.playMusic = function (n, t) {
                  void 0 === t && (t = !1), this.soundManager().playBGM(n, t);
                }),
                (u.switchMusic = function (n, t) {
                  this.soundManager().switchMusic(n, t);
                }),
                (u.switchWorldMusic = function (n) {
                  this.soundManager().switchWorldMusic(n);
                }),
                (u.switchMusicSort = function (n) {
                  this.soundManager().switchMusicSort(n);
                }),
                (u.pauseMusic = function () {
                  this.soundManager().pauseBGM();
                }),
                (u.resumeMusic = function () {
                  this.soundManager().resumeBGM();
                }),
                (u.setMusicVolume = function (n) {
                  (this.MusicVolume = n * this.totalVolume), e.saveSettings();
                }),
                u
              );
            })(c)
          ).MusicVolume = 1),
          u._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/Spikerock.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc', './Spikeweed.ts'], function (e) {
  var t, i, s, n, p;
  return {
    setters: [
      function (e) {
        t = e.inheritsLoose;
      },
      function (e) {
        (i = e.cclegacy), (s = e._decorator);
      },
      function (e) {
        (n = e.spikeweed), (p = e.SpikeweedPlant);
      },
    ],
    execute: function () {
      var l;
      i._RF.push({}, '41857lcip1ILqlkdZGd44Ij', 'Spikerock', void 0);
      var o = s.ccclass;
      s.property,
        e(
          'SpikerockPlant',
          o('SpikerockPlant')(
            (l = (function (e) {
              function i() {
                for (var t, i = arguments.length, s = new Array(i), n = 0; n < i; n++) s[n] = arguments[n];
                return ((t = e.call.apply(e, [this].concat(s)) || this).spikeLeft = 3), t;
              }
              t(i, e);
              var s = i.prototype;
              return (
                (s.normalSmash = function (e) {
                  n.stabOnZombie(null, e, this.damage), this.fooding || this.invincible || this.setSpikeSlot(this.spikeLeft - 1);
                }),
                (s.specialSpikeweedOnEnable = function () {
                  this.setSpikeSlot();
                }),
                (s.specialSpikeweedFood = function () {
                  this.setSpikeSlot();
                }),
                (s.replantable = function () {
                  return this.spikeLeft < 3;
                }),
                (s.replant = function () {
                  this.setSpikeSlot(3);
                }),
                (s.setSpikeSlot = function (e) {
                  void 0 === e && (e = 3);
                  var t = this.anmControl.body.armature();
                  switch (e) {
                    case 2:
                      t.getSlot('spikeL')._setDisplayIndex(0),
                        t.getSlot('spikeM')._setDisplayIndex(0),
                        t.getSlot('spikeR')._setDisplayIndex(-1),
                        (this.spikeLeft = 2);
                      break;
                    case 1:
                      t.getSlot('spikeL')._setDisplayIndex(0),
                        t.getSlot('spikeM')._setDisplayIndex(-1),
                        t.getSlot('spikeR')._setDisplayIndex(-1),
                        (this.spikeLeft = 1);
                      break;
                    case 0:
                      t.getSlot('spikeL')._setDisplayIndex(-1),
                        t.getSlot('spikeM')._setDisplayIndex(-1),
                        t.getSlot('spikeR')._setDisplayIndex(-1),
                        (this.spikeLeft = 0),
                        this.die();
                      break;
                    default:
                      t.getSlot('spikeL')._setDisplayIndex(0),
                        t.getSlot('spikeM')._setDisplayIndex(0),
                        t.getSlot('spikeR')._setDisplayIndex(0),
                        (this.spikeLeft = 3);
                  }
                  !this.dead && this.replantable() && this.inLnC.readIndex();
                }),
                i
              );
            })(p))
          ) || l
        );
      i._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/Spikeweed.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './CharacterManager.ts',
    './Zombie.ts',
    './LnC.ts',
    './Square.ts',
    './spikeweedSound.ts',
    './NodePools.ts',
    './Zombies.ts',
  ],
  function (e) {
    var t, n, i, o, a, r, s, l, c, u, d, p, f, h, m, b, g, y, k;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (n = e.inheritsLoose),
            (i = e.initializerDefineProperty),
            (o = e.assertThisInitialized);
        },
        function (e) {
          (a = e.cclegacy), (r = e._decorator), (s = e.CCFloat), (l = e.Prefab), (c = e.Vec2), (u = e.dragonBones);
        },
        function (e) {
          d = e.Plant;
        },
        function (e) {
          p = e.Rectangle;
        },
        function (e) {
          f = e.zombieDamageType;
        },
        function (e) {
          (h = e.LnC), (m = e.TileType);
        },
        function (e) {
          b = e.Square;
        },
        function (e) {
          g = e.spikeweedSound;
        },
        function (e) {
          y = e.NodePools;
        },
        function (e) {
          k = e.ZombieEnum;
        },
      ],
      execute: function () {
        var S, P, w, D, C, v, L, E, Z, z, A, O, R, F, T;
        a._RF.push({}, '4a5dc2VkfZMjLpTKsKE4QSn', 'Spikeweed', void 0);
        var I = r.ccclass,
          M = r.property,
          B = e(
            'spikeweed',
            (function () {
              function e() {}
              return (
                (e.stabOnZombie = function (e, t, n) {
                  switch (null == t ? void 0 : t.ID) {
                    case k.modern_sleighCart:
                      t.body.DeathAnm = Math.random() > 0.3 ? 'Death' : 'Lie';
                    case k.pirate_barrel:
                    case k.modern_catapult:
                      null == t || t.playDie(), null == e || e.normalSmash(t);
                      break;
                    default:
                      null == t || t.dealDamage(n, !0, !1, !0, null, f.physicle);
                  }
                }),
                e
              );
            })()
          );
        e(
          'SpikeweedPlant',
          ((S = I('SpikeweedPlant')),
          (P = M(s)),
          (w = M(s)),
          (D = M(s)),
          (C = M(s)),
          (v = M(s)),
          (L = M(l)),
          S(
            ((z = t(
              (Z = (function (e) {
                function t() {
                  for (var t, n = arguments.length, a = new Array(n), r = 0; r < n; r++) a[r] = arguments[r];
                  return (
                    (t = e.call.apply(e, [this].concat(a)) || this),
                    i(t, 'damage', z, o(t)),
                    i(t, 'attackInterval', A, o(t)),
                    i(t, 'foodDuration', O, o(t)),
                    i(t, 'foodSideDPS', R, o(t)),
                    i(t, 'foodMainDPS', F, o(t)),
                    i(t, 'pfSpikeParticle', T, o(t)),
                    (t.detector = p.createRectangleCenter(new c(2, 2), 2, 2)),
                    (t.foodSpikes = []),
                    (t.attacking = !1),
                    (t.busy = 0),
                    t
                  );
                }
                n(t, e);
                var a = t.prototype;
                return (
                  (a.animationListener = function (e) {
                    var t = this;
                    'attack' == e.name &&
                      (this.inLane.zombiePool().forEach(function (e) {
                        !e.flying && e.bodyRec.judgeCrossRec(t.detector) && t.damageOnZombie(e);
                      }),
                      (this.attacking = !1));
                  }),
                  (a.setDetector = function (e) {
                    this.detector = p.createRectangleNodeCenter(e.node, b.SquareDisW, b.SquareDisH);
                  }),
                  (a.specialPlantOnSquareChange = function (e, t) {
                    this.setDetector(t);
                  }),
                  (a.specialSpikeweedFood = function () {}),
                  (a.specialPlantFood = function (e) {
                    (this.foodSpikes = []),
                      this.anmControl.playAnimation('Food', 1 / 0),
                      this.scheduleOnce(this.foodEnd, this.foodDuration),
                      this.getComponent(g).playFoodSound();
                    for (var t = 0; t <= 8; t++) {
                      var n = b.getSquare(this.inLnC.lIndex, t).getComponent(h);
                      if (n != this.inLnC && (n.getTileType() == m.deck || n.getTileType() == m.floor)) {
                        var i = y.instantiatePooly(this.pfSpikeParticle);
                        (i.parent = n.inLane.prjLayer),
                          (i.worldPosition = n.plantPoint.worldPosition),
                          i.getComponent(u.ArmatureDisplay).playAnimation('Idle'),
                          this.foodSpikes.push(i.getComponent(u.ArmatureDisplay));
                      }
                    }
                    this.specialSpikeweedFood();
                  }),
                  (a.specialPlantFoodEnd = function () {
                    this.foodSpikes.forEach(function (e) {
                      e.playAnimation('Die');
                    }),
                      (this.foodSpikes = []),
                      this.anmControl.playRandom(),
                      this.getComponent(g).playFoodEndSound();
                  }),
                  (a.attackAnimation = function () {
                    (this.attacking = !0),
                      this.getComponent(g).playAttackSound(),
                      this.anmControl.playAnimation('Attack', 1, 0, Math.min(1, this.attackInterval / 0.5));
                  }),
                  (a.detectZombie = function () {
                    var e = this,
                      t = !1;
                    return (
                      this.inLane.zombiePool().forEach(function (n) {
                        t || (!n.flying && e.detector.judgeCrossRec(n.bodyRec) && (t = !0));
                      }),
                      t
                    );
                  }),
                  (a.specialPlantUpdate = function (e) {
                    var t = this;
                    this.busy > 0 && (this.busy -= e),
                      this.busy <= 0 &&
                        ((this.busy = 0),
                        !this.fooding && this.detectZombie() && ((this.busy = this.attackInterval), this.attackAnimation())),
                      this.fooding &&
                        (this.inLane.zombiePool().forEach(function (n) {
                          n.flying ||
                            (n.stun(0.2),
                            t.damageOnZombie(n, t.foodSideDPS * e),
                            n.bodyRec.judgeCrossRec(t.detector)
                              ? t.damageOnZombie(n, t.foodMainDPS * e)
                              : n.knockBackable &&
                                (n.node.worldPosition.x > t.node.worldPosition.x
                                  ? n.knockBackBy(new c(-0.4, 0), !1)
                                  : n.node.worldPosition.x <= t.node.worldPosition.x && n.knockBackBy(new c(0.4, 0), !1)));
                        }),
                        this.inLane.tombPool().forEach(function (n) {
                          n.dealDamage(t.foodSideDPS * e);
                        }));
                  }),
                  (a.specialSpikeweedOnEnable = function () {}),
                  (a.specialPlantOnEnable = function () {
                    (this.busy = 0),
                      (this.eaterDetectable = !1),
                      (this.attacking = !1),
                      (this.foodSpikes = []),
                      this.specialSpikeweedOnEnable();
                  }),
                  (a.waterable = function () {
                    return !this.attacking;
                  }),
                  (a.normalSmash = function (e) {
                    B.stabOnZombie(null, e, this.damage), this.fooding || this.invincible || this.die();
                  }),
                  (a.damageOnZombie = function (e, t) {
                    void 0 === t && (t = this.damage), B.stabOnZombie(this, e, t);
                  }),
                  t
                );
              })(d)).prototype,
              'damage',
              [P],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 10;
                },
              }
            )),
            (A = t(Z.prototype, 'attackInterval', [w], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 0.5;
              },
            })),
            (O = t(Z.prototype, 'foodDuration', [D], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 5;
              },
            })),
            (R = t(Z.prototype, 'foodSideDPS', [C], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 20;
              },
            })),
            (F = t(Z.prototype, 'foodMainDPS', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 400;
              },
            })),
            (T = t(Z.prototype, 'pfSpikeParticle', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (E = Z))
          ) || E)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/spikeweedSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './plantSound.ts', './SoundRescourses.ts'],
  function (o) {
    var n, t, e, i, r, u, a, d, c, l;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (i = o.assertThisInitialized);
        },
        function (o) {
          (r = o.cclegacy), (u = o._decorator), (a = o.AudioClip);
        },
        function (o) {
          d = o.ArrayGet;
        },
        function (o) {
          c = o.plantSound;
        },
        function (o) {
          l = o.sounds;
        },
      ],
      execute: function () {
        var s, p, f, S, y, h, b, g, k;
        r._RF.push({}, '6c1c8ealqJDJ7/0UD6hYUYO', 'spikeweedSound', void 0);
        var w = u.ccclass,
          m = u.property;
        o(
          'spikeweedSound',
          ((s = w('spikeweedSound')),
          (p = m([a])),
          (f = m([a])),
          (S = m([a])),
          s(
            ((b = n(
              (h = (function (o) {
                function n() {
                  for (var n, t = arguments.length, r = new Array(t), u = 0; u < t; u++) r[u] = arguments[u];
                  return (
                    (n = o.call.apply(o, [this].concat(r)) || this),
                    e(n, 'attackSound', b, i(n)),
                    e(n, 'foodSound', g, i(n)),
                    e(n, 'foodEndSound', k, i(n)),
                    n
                  );
                }
                t(n, o);
                var r = n.prototype;
                return (
                  (r.playAttackSound = function () {
                    l.play(d.getRandom(this.attackSound), 1, 0.2);
                  }),
                  (r.playFoodSound = function () {
                    this.playOneShot(d.getRandom(this.foodSound));
                  }),
                  (r.playFoodEndSound = function () {
                    this.playOneShot(d.getRandom(this.foodEndSound));
                  }),
                  n
                );
              })(c)).prototype,
              'attackSound',
              [p],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (g = n(h.prototype, 'foodSound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (k = n(h.prototype, 'foodEndSound', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (y = h))
          ) || y)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/splashScene.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './SettingWindow.ts'],
  function (e) {
    var s, r, o, a, t, n, i, l, c, g, d, u, P, p, f, b;
    return {
      setters: [
        function (e) {
          (s = e.applyDecoratedDescriptor),
            (r = e.inheritsLoose),
            (o = e.initializerDefineProperty),
            (a = e.assertThisInitialized);
        },
        function (e) {
          (t = e.cclegacy),
            (n = e._decorator),
            (i = e.ProgressBar),
            (l = e.Label),
            (c = e.Color),
            (g = e.tween),
            (d = e.resources),
            (u = e.Prefab),
            (P = e.director),
            (p = e.Sprite),
            (f = e.Component);
        },
        function (e) {
          b = e.SettingWindow;
        },
      ],
      execute: function () {
        var L, h, R, S, v, _, C;
        t._RF.push({}, '6ca297FSrxEoo6+4c+jGGKn', 'splashScene', void 0);
        var m = n.ccclass,
          y = n.property;
        e(
          'splashScene',
          ((L = m('splashScene')),
          (h = y(i)),
          (R = y(l)),
          L(
            ((_ = s(
              (v = (function (e) {
                function s() {
                  for (var s, r = arguments.length, t = new Array(r), n = 0; n < r; n++) t[n] = arguments[n];
                  return (
                    ((s = e.call.apply(e, [this].concat(t)) || this).screenColor = new c(0, 0, 0, 255)),
                    o(s, 'loadProgressBar', _, a(s)),
                    o(s, 'loadProgressLabel', C, a(s)),
                    s
                  );
                }
                r(s, e);
                var t = s.prototype;
                return (
                  (t.onLoad = function () {
                    null == b.defaultResolution && (b.defaultResolution = b.getDefaultResolution());
                  }),
                  (t.setProgress = function (e, s) {
                    if ((void 0 === s && (s = 0.2), this.loadProgressBar)) {
                      var r = e / 11;
                      s > 0 ? g(this.loadProgressBar).to(s, { progress: r }).start() : (this.loadProgressBar.progress = r);
                    }
                  }),
                  (t.loadRes = function () {
                    var e = this;
                    this.setProgress(0, 0),
                      (this.loadProgressLabel.string = 'Loading Materials...'),
                      d.load('resouce_prefabs/MaterialsRP', u, function (s, r) {
                        e.setProgress(1),
                          (e.loadProgressLabel.string = 'Loading Plants...'),
                          d.load('resouce_prefabs/PlantsRP', u, function (s, r) {
                            e.setProgress(2),
                              (e.loadProgressLabel.string = 'Loading Zombies...'),
                              d.load('resouce_prefabs/ZombiesRP', u, function (s, r) {
                                e.setProgress(3),
                                  (e.loadProgressLabel.string = 'Loading Musics...'),
                                  d.load('resouce_prefabs/MusicRP', u, function (s, r) {
                                    e.setProgress(4),
                                      (e.loadProgressLabel.string = 'Loading SFXs...'),
                                      d.load('resouce_prefabs/SoundsRP', u, function (s, r) {
                                        e.setProgress(5),
                                          (e.loadProgressLabel.string = 'Loading Levels...'),
                                          d.load('resouce_prefabs/LevelNodesRP', u, function (s, r) {
                                            e.setProgress(6),
                                              (e.loadProgressLabel.string = 'Loading Droppings...'),
                                              d.load('resouce_prefabs/DroppingsRP', u, function (s, r) {
                                                e.setProgress(7),
                                                  (e.loadProgressLabel.string = 'Loading Trophies...'),
                                                  d.load('resouce_prefabs/TrophiesRP', u, function (s, r) {
                                                    e.setProgress(8),
                                                      (e.loadProgressLabel.string = 'Loading Particles...'),
                                                      d.load('resouce_prefabs/ParticlesRP', u, function (s, r) {
                                                        e.setProgress(9),
                                                          (e.loadProgressLabel.string = 'Loading Worldmaps...'),
                                                          d.load('resouce_prefabs/WorldMapsRP', u, function (s, r) {
                                                            e.setProgress(10),
                                                              (e.loadProgressLabel.string = 'Loading Others...'),
                                                              d.load('resouce_prefabs/ScenesRP', u, function (s, r) {
                                                                e.setProgress(11), P.loadScene('mainScene');
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  }),
                  (t.start = function () {
                    var e = this;
                    (this.screenColor = new c(0, 0, 0, 255)),
                      (this.node.getChildByName('ScreenCover').getComponent(p).color = this.screenColor),
                      g(this.screenColor)
                        .to(1.33, { a: 0 })
                        .call(function () {
                          e.loadRes();
                        })
                        .start();
                  }),
                  (t.update = function (e) {
                    this.node.getChildByName('ScreenCover').getComponent(p).color = this.screenColor;
                  }),
                  s
                );
              })(f)).prototype,
              'loadProgressBar',
              [h],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (C = s(v.prototype, 'loadProgressLabel', [R], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (S = v))
          ) || S)
        );
        t._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/SplitPea.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Peashooter.ts', './Square.ts', './CharacterManager.ts', './peaShooterSound.ts'],
  function (t) {
    var o, e, n, a, i, r, s, h, c, l, u, f, d, p, P;
    return {
      setters: [
        function (t) {
          (o = t.applyDecoratedDescriptor),
            (e = t.inheritsLoose),
            (n = t.initializerDefineProperty),
            (a = t.assertThisInitialized),
            (i = t.createClass);
        },
        function (t) {
          (r = t.cclegacy), (s = t._decorator), (h = t.CCInteger), (c = t.Prefab), (l = t.tween), (u = t.Vec2);
        },
        function (t) {
          f = t.PeashooterPlant;
        },
        function (t) {
          d = t.Square;
        },
        function (t) {
          p = t.Rectangle;
        },
        function (t) {
          P = t.peaShooterSound;
        },
      ],
      execute: function () {
        var y, C, S, m, g, v, _;
        r._RF.push({}, '5cfcasdZnJG5Kr0DBCWOIf5', 'SplitPea', void 0);
        var B = s.ccclass,
          k = s.property;
        t(
          'SplitPeaPlant',
          ((y = B('SplitPeaPlant')),
          (C = k(h)),
          (S = k(c)),
          y(
            ((v = o(
              (g = (function (t) {
                function o() {
                  for (var o, e = arguments.length, i = new Array(e), r = 0; r < e; r++) i[r] = arguments[r];
                  return (
                    ((o = t.call.apply(t, [this].concat(i)) || this)._foodLeftBackPeaCount = 0),
                    n(o, 'foodBackPeaMaxCount', v, a(o)),
                    n(o, 'peaMega', _, a(o)),
                    o
                  );
                }
                e(o, t);
                var r = o.prototype;
                return (
                  (r.animationListenerAdd = function (t) {
                    'ShootL' == t.name
                      ? this.fooding
                        ? (this._shootBack(!1, !1, this.peaMega), this.getComponent(P).playShootMega(), this.foodEnd())
                        : this._shootBack(!1, !1)
                      : 'ShootR' == t.name && this._shoot();
                  }),
                  (r._shootBack = function (t, o, e) {
                    void 0 === e && (e = this.pea);
                    var n = this._shoot(t, o, e);
                    (n.linearVelocity.x *= -1), (n.worldPositionX -= 50);
                  }),
                  (r.foodShooting = function () {
                    var t = this;
                    (this._foodLeftBackPeaCount = this.foodBackPeaMaxCount),
                      (this._foodLeftPeaCount = this.foodPeaMaxCount),
                      l(this)
                        .to(2, { foodLeftPeaCount: 0, foodLeftBackPeaCount: 0 })
                        .call(function () {
                          t.anmControl.playAnimation('ShootL', 1);
                        })
                        .start();
                  }),
                  (r.setDetecter = function (t, o) {
                    var e = d.lawnRec.prjX();
                    this.detector = p.createRectangleCenter(
                      new u((e.x + e.y) / 2, o.node.worldPosition.y),
                      11 * d.SquareDisW,
                      d.SquareDisH
                    );
                  }),
                  (r.detectEnemySplit = function () {
                    var t = this,
                      o = 0;
                    return (
                      this.inLane.zombiePool().forEach(function (e) {
                        if (!(o >= 3) && e.bodyRec.judgeCrossRec(t.detector)) {
                          var n = e.bodyRec.prjX();
                          if ((1 != o && n.y > t._worldPositionX && (o += 1), o >= 3)) return;
                          2 != o && n.x <= t._worldPositionX && (o += 2);
                        }
                      }),
                      o
                    );
                  }),
                  (r.specialPlantUpdate = function (t) {
                    if ((this.busy > 0 && (this.busy -= t), this.busy <= 0 && !this.dead && !this.fooding)) {
                      var o = this.detectEnemySplit();
                      if (o > 0) {
                        1 == o && this.anmControl.playAnimation('ShootR', 1, 0.1, Math.min(this.shootInterval, 1)),
                          2 == o && this.anmControl.playAnimation('ShootL', 1, 0.1, Math.min(this.shootInterval, 1)),
                          3 == o && this.anmControl.playAnimation('ShootB', 1, 0.1, Math.min(this.shootInterval, 1)),
                          (this.shooting = !0);
                        var e = 0.15 * Math.random() * (this.shootInterval / 1.35);
                        this.busy = this.shootInterval + e;
                      }
                    }
                  }),
                  i(o, [
                    {
                      key: 'foodLeftBackPeaCount',
                      get: function () {
                        return this._foodLeftBackPeaCount;
                      },
                      set: function (t) {
                        for (var o = Math.floor(this._foodLeftBackPeaCount) - Math.floor(t), e = 0; e < o; e++)
                          this._shootBack(!0, !0);
                        this._foodLeftBackPeaCount = t;
                      },
                    },
                  ]),
                  o
                );
              })(f)).prototype,
              'foodBackPeaMaxCount',
              [C],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 60;
                },
              }
            )),
            (_ = o(g.prototype, 'peaMega', [S], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (m = g))
          ) || m)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/SpringBean.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Plant.ts', './CharacterManager.ts', './Square.ts', './springbeanSound.ts'],
  function (e) {
    var t, n, i, a, o, s, r, c, l, h, u, d, p;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (n = e.inheritsLoose),
            (i = e.initializerDefineProperty),
            (a = e.assertThisInitialized);
        },
        function (e) {
          (o = e.cclegacy), (s = e._decorator), (r = e.CCFloat), (c = e.Vec2);
        },
        function (e) {
          l = e.Plant;
        },
        function (e) {
          (h = e.Rectangle), (u = e.ZombiePool);
        },
        function (e) {
          d = e.Square;
        },
        function (e) {
          p = e.springbeanSound;
        },
      ],
      execute: function () {
        var m, y, b, f, g, D, S;
        o._RF.push({}, 'a736bTbuoxA64KEceTSlBIx', 'SpringBean', void 0);
        var R = s.ccclass,
          C = s.property;
        e(
          'SpringBean',
          ((m = R('SpringBean')),
          (y = C(r)),
          (b = C(r)),
          m(
            ((D = t(
              (g = (function (e) {
                function t() {
                  for (var t, n = arguments.length, o = new Array(n), s = 0; s < n; s++) o[s] = arguments[s];
                  return (
                    (t = e.call.apply(e, [this].concat(o)) || this),
                    i(t, 'knockBackDistance', D, a(t)),
                    (t.readyDetector = void 0),
                    (t.bounceDetector = void 0),
                    i(t, 'sleepDuration', S, a(t)),
                    (t.switching = !1),
                    (t.ready = !1),
                    (t.asleep = 0),
                    t
                  );
                }
                n(t, e);
                var o = t.prototype;
                return (
                  (o.dealLeapOnZombie = function (e) {
                    var t, n, i, a;
                    e.leapable &&
                      ((null == (t = e.inLane) || !t.isSea) && e.inLnC.cIndex >= 4 && null != (n = e.inLane.UpperLane) && n.isSea
                        ? e.leapBy(new c(1, 1))
                        : (null == (i = e.inLane) || !i.isSea) &&
                          e.inLnC.cIndex >= 4 &&
                          null != (a = e.inLane.LowerLane) &&
                          a.isSea
                        ? e.leapBy(new c(1, -1))
                        : e.leapBy(new c(this.knockBackDistance, 0), !0, 0.5, 27, !0, !0));
                  }),
                  (o.setDetector = function (e) {
                    (this.readyDetector = h.createRectangleNodeCenter(e.node, 3 * d.SquareDisW, d.SquareDisH)),
                      (this.bounceDetector = h.createRectangleNodeCenter(e.node, d.SquareDisW, d.SquareDisH));
                  }),
                  (o.setAnimation = function (e) {
                    void 0 === e && (e = 0);
                    var t = this.anmControl;
                    1 == e
                      ? ((t.IdleAnim = 'Idle_Ready'), (t.RandomAnim = ['Random_Ready']))
                      : 2 == e
                      ? ((t.IdleAnim = 'Sleep'), (t.RandomAnim = []))
                      : ((t.IdleAnim = 'Idle'), (t.RandomAnim = ['Random']));
                  }),
                  (o.animationListener = function (e) {
                    var t = this;
                    switch (e.name) {
                      case 'sleep':
                        (this.damagable = !0), (this.short_ = !1), (this.asleep = this.sleepDuration);
                        break;
                      case 'foodBounce':
                        u.pool().forEach(function (e) {
                          e.flying || t.dealLeapOnZombie(e);
                        }),
                          this.getComponent(p).playFoodBounceSound();
                        break;
                      case 'foodLeap':
                        this.getComponent(p).playFoodLeapSound();
                        break;
                      case 'ready':
                        (this.ready = !0), (this.switching = !1);
                        break;
                      case 'recover':
                        this.switching = !1;
                        break;
                      case 'foodEnd':
                        this.foodEnd();
                    }
                  }),
                  (o.specialPlantFood = function (e) {
                    this.setAnimation(),
                      this.anmControl.playAnimation('Food', 1),
                      this.getComponent(p).playFoodSound(),
                      (this.ready = !1),
                      (this.asleep = 0),
                      (this.switching = !1),
                      (this.damagable = !0);
                  }),
                  (o.getReady = function () {
                    (this.damagable = !1),
                      (this.short_ = !0),
                      (this.switching = !0),
                      this.getComponent(p).playReadySound(),
                      this.anmControl.playAnimation('Ready', 1),
                      this.setAnimation(1),
                      (this.eaterDetectable = !1),
                      (this.smasherDetectable = !1);
                  }),
                  (o.recover = function () {
                    (this.ready = !1),
                      (this.switching = !0),
                      (this.short_ = !1),
                      (this.damagable = !0),
                      this.anmControl.playAnimation('Recover', 1),
                      this.setAnimation(),
                      (this.asleep = 0),
                      (this.eaterDetectable = !0),
                      (this.smasherDetectable = !0);
                  }),
                  (o.bounce = function () {
                    (this.asleep = 1 / 0),
                      this.getComponent(p).playBounceSound(),
                      this.anmControl.playAnimation('Bounce', 1),
                      this.setAnimation(2),
                      (this.eaterDetectable = !0),
                      (this.smasherDetectable = !0);
                  }),
                  (o.specialPlantOnEnable = function () {
                    this.setAnimation(),
                      this.anmControl.playRandom(),
                      (this.ready = !1),
                      (this.switching = !1),
                      (this.asleep = 0);
                  }),
                  (o.detectReadyEnemy = function () {
                    var e,
                      t = this,
                      n = !1;
                    null == (e = this.inLane) ||
                      e.zombiePool().forEach(function (e) {
                        n || (e.bodyRec.judgeCrossRec(t.readyDetector) && (n = !0));
                      }),
                      n && !this.ready ? this.getReady() : !n && this.ready && this.recover();
                  }),
                  (o.detectBounceEnemy = function () {
                    var e,
                      t = this,
                      n = !1;
                    null == (e = this.inLane) ||
                      e.zombiePool().forEach(function (e) {
                        n ||
                          e.flying ||
                          !e.leapable ||
                          (e.bodyRec.judgeCrossRec(t.bounceDetector) && (t.dealLeapOnZombie(e), (n = !0), t.bounce()));
                      });
                  }),
                  (o.waterable = function () {
                    return !this.asleep && !this.ready && !this.switching;
                  }),
                  (o.specialPlantUpdate = function (e) {
                    this.asleep > 0 && ((this.asleep -= e), this.asleep <= 0 && ((this.asleep = 0), this.recover())),
                      !this.switching &&
                        !this.fooding &&
                        this.asleep <= 0 &&
                        (this.detectReadyEnemy(), this.ready && this.detectBounceEnemy());
                  }),
                  (o.specialPlantOnSquareChange = function (e, t) {
                    this.setDetector(t);
                  }),
                  t
                );
              })(l)).prototype,
              'knockBackDistance',
              [y],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 1.25;
                },
              }
            )),
            (S = t(g.prototype, 'sleepDuration', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 10;
              },
            })),
            (f = g))
          ) || f)
        );
        o._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/springbeanSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './plantSound.ts'],
  function (n) {
    var o, e, t, i, u, r, a, l;
    return {
      setters: [
        function (n) {
          (o = n.applyDecoratedDescriptor),
            (e = n.inheritsLoose),
            (t = n.initializerDefineProperty),
            (i = n.assertThisInitialized);
        },
        function (n) {
          (u = n.cclegacy), (r = n._decorator), (a = n.AudioClip);
        },
        function (n) {
          l = n.plantSound;
        },
      ],
      execute: function () {
        var d, c, p, f, s, S, y, b, h, g, m, v, z;
        u._RF.push({}, '2a2f1aLxRRHS4dm4yG3R06R', 'springbeanSound', void 0);
        var L = r.ccclass,
          R = r.property;
        n(
          'springbeanSound',
          ((d = L('springbeanSound')),
          (c = R(a)),
          (p = R(a)),
          (f = R(a)),
          (s = R(a)),
          (S = R(a)),
          d(
            ((h = o(
              (b = (function (n) {
                function o() {
                  for (var o, e = arguments.length, u = new Array(e), r = 0; r < e; r++) u[r] = arguments[r];
                  return (
                    (o = n.call.apply(n, [this].concat(u)) || this),
                    t(o, 'foodSound', h, i(o)),
                    t(o, 'foodLeapSound', g, i(o)),
                    t(o, 'foodBounceSound', m, i(o)),
                    t(o, 'bounceSound', v, i(o)),
                    t(o, 'readySound', z, i(o)),
                    o
                  );
                }
                e(o, n);
                var u = o.prototype;
                return (
                  (u.playFoodSound = function () {
                    this.playOneShot(this.foodSound);
                  }),
                  (u.playFoodLeapSound = function () {
                    this.playOneShot(this.foodLeapSound);
                  }),
                  (u.playFoodBounceSound = function () {
                    this.playOneShot(this.foodBounceSound);
                  }),
                  (u.playBounceSound = function () {
                    this.playOneShot(this.bounceSound);
                  }),
                  (u.playReadySound = function () {
                    this.playOneShot(this.readySound);
                  }),
                  o
                );
              })(l)).prototype,
              'foodSound',
              [c],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (g = o(b.prototype, 'foodLeapSound', [p], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (m = o(b.prototype, 'foodBounceSound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (v = o(b.prototype, 'bounceSound', [s], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (z = o(b.prototype, 'readySound', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (y = b))
          ) || y)
        );
        u._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Square.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './LnC.ts',
    './UI.ts',
    './LnCLower.ts',
    './FrontYard.ts',
    './Lane.ts',
    './CharacterManager.ts',
    './Mouse.ts',
  ],
  function (e) {
    var n, t, i, o, a, r, s, l, u, h, d, c, g, p, m, f, S, C, L, q, w;
    return {
      setters: [
        function (e) {
          (n = e.applyDecoratedDescriptor),
            (t = e.inheritsLoose),
            (i = e.initializerDefineProperty),
            (o = e.assertThisInitialized);
        },
        function (e) {
          (a = e.cclegacy),
            (r = e._decorator),
            (s = e.UITransform),
            (l = e.Node),
            (u = e.Vec2),
            (h = e.find),
            (d = e.Vec3),
            (c = e.instantiate),
            (g = e.Size),
            (p = e.Component);
        },
        function (e) {
          m = e.LnC;
        },
        function (e) {
          f = e.UIInGame;
        },
        function (e) {
          S = e.LnCLower;
        },
        function (e) {
          C = e.FrontYard;
        },
        function (e) {
          L = e.Lane;
        },
        function (e) {
          q = e.Rectangle;
        },
        function (e) {
          w = e.Mouse;
        },
      ],
      execute: function () {
        var x, y, v, I, P, b, H, R, N, B, T, D, z, W, G, U, M, F, A, O;
        a._RF.push({}, '3cbc1qLm3VDPKDOscw+4M6b', 'Square', void 0);
        var V = r.ccclass,
          E = r.property;
        e(
          'Square',
          ((x = V('Square')),
          (y = E(s)),
          (v = E(s)),
          (I = E(l)),
          (P = E(m)),
          (b = E(m)),
          (H = E(m)),
          (R = E(m)),
          (N = E(m)),
          x(
            (((O = (function (e) {
              function n() {
                for (var n, t = arguments.length, a = new Array(t), r = 0; r < t; r++) a[r] = arguments[r];
                return (
                  ((n = e.call.apply(e, [this].concat(a)) || this).laneAbstract = void 0),
                  (n.laneHere = void 0),
                  (n.laneThere = void 0),
                  (n.lanesInLawn = []),
                  i(n, 'selectCrossingV', D, o(n)),
                  i(n, 'selectCrossingH', z, o(n)),
                  (n.UIInGame = null),
                  (n.indexPlant = 0),
                  (n.indexVine = 0),
                  (n.indexFly = 0),
                  (n.indexFlowerPot = 0),
                  (n.indexLilyPad = 0),
                  (n.indexSpikeweed = 0),
                  (n.indexPotatomine = 0),
                  (n.indexGravebuster = 0),
                  (n.indexShovel = 0),
                  (n.indexPF = 0),
                  i(n, 'square00', W, o(n)),
                  (n.squares = []),
                  (n.inLawnLnCs = []),
                  i(n, 'LnCHere', G, o(n)),
                  i(n, 'LnCThere', U, o(n)),
                  i(n, 'LnCLeft', M, o(n)),
                  i(n, 'LnCRight', F, o(n)),
                  i(n, 'LnCAbstract', A, o(n)),
                  n
                );
              }
              t(n, e),
                (n.Square00WorldPosition = function () {
                  return new u(this.Square00.worldPosition.x, this.Square00.worldPosition.y);
                }),
                (n.getSquareWorldPosition = function (e, n, t, i) {
                  return (
                    void 0 === t && (t = 0.5),
                    void 0 === i && (i = 0.5),
                    new u(
                      this.Square00WorldPosition().x + n * this.SquareDisW + (t - 0.5) * this.SquareDisW,
                      this.Square00WorldPosition().y - e * this.SquareDisH + (i - 0.5) * this.SquareDisH
                    )
                  );
                }),
                (n.getSquare = function (e, n) {
                  if (e >= 0 && e <= 4) {
                    if (n >= 0 && n <= 8) return this.Square00.parent.getChildByName('Square' + e.toString() + n.toString());
                    if (9 == n) return this.Square00.parent.getChildByName('SquaresRight');
                    if (-1 == n) return this.Square00.parent.getChildByName('SquaresLeft');
                  } else {
                    if (5 == e) return this.Square00.parent.getChildByName('SquaresHere');
                    if (-1 == e) return this.Square00.parent.getChildByName('SquaresThere');
                  }
                  return this.Square00.parent.getChildByName('SquaresAbstract');
                }),
                (n.getLnC = function (e, n) {
                  if (e >= 0 && e <= 4) {
                    if (n >= 0 && n <= 8) return this.component.inLawnLnCs[e][n];
                    if (9 == n) return this.component.LnCRight;
                    if (-1 == n) return this.component.LnCLeft;
                  } else {
                    if (5 == e) return this.component.LnCHere;
                    if (-1 == e) return this.component.LnCThere;
                  }
                  return this.component.LnCAbstract;
                }),
                (n.getRandomSquare = function (e, n, t, i) {
                  void 0 === e && (e = 0), void 0 === n && (n = 4), void 0 === t && (t = 0), void 0 === i && (i = 8);
                  var o = Math.floor(e);
                  o < 0 && (o = 0), o > 4 && (o = 4);
                  var a = Math.floor(n);
                  a < 0 && (a = 0), a > 4 && (a = 4);
                  var r = Math.floor(t);
                  r < 0 && (r = 0), r > 8 && (r = 8);
                  var s = Math.floor(i);
                  s < 0 && (s = 0), s > 8 && (s = 8);
                  var l = Math.floor(Math.random() * (a - o + 1)) + o,
                    u = Math.floor(Math.random() * (s - r + 1)) + r;
                  return this.getSquare(l, u);
                }),
                (n.getRandomSquares = function (e) {
                  for (var n = []; n.length < e && n.length < 45; ) {
                    var t = this.getRandomSquare();
                    -1 == n.indexOf(t) && n.push(t);
                  }
                  return n;
                }),
                (n.getLane = function (e) {
                  return h(
                    e >= -1 && e <= 5
                      ? 'Canvas/LawnCommon/squaresLower/Row' + e.toString()
                      : 'Canvas/LawnCommon/squaresLower/Row-2'
                  );
                }),
                (n.getLaneComponent = function (e) {
                  if (
                    (this.component.laneAbstract || (this.component.laneAbstract = this.getLane(-2).getComponent(L)),
                    this.component.laneHere || (this.component.laneHere = this.getLane(5).getComponent(L)),
                    this.component.laneThere || (this.component.laneThere = this.getLane(-1).getComponent(L)),
                    this.component.lanesInLawn.length <= 0)
                  ) {
                    this.component.lanesInLawn = [];
                    for (var t = 0; t < 5; t++) this.component.lanesInLawn.push(n.getLane(t).getComponent(L));
                  }
                  return -1 == e
                    ? this.component.laneThere
                    : 5 == e
                    ? this.component.laneHere
                    : e >= 0 && e <= 4
                    ? this.component.lanesInLawn[e]
                    : this.component.laneAbstract;
                }),
                (n.judgeInLawn = function (e) {
                  return this.lawnRec.judgeInRecP(new u(e.x, e.y));
                }),
                (n.moveCrossing = function (e, n) {
                  if ((void 0 === e && (e = -1), void 0 === n && (n = -1), e >= 0 && e <= 4 && n >= 0 && n <= 8)) {
                    var t = this.getSquareWorldPosition(2, n);
                    this.component.selectCrossingV.node.worldPosition = new d(t.x, t.y, 10);
                    var i = this.getSquareWorldPosition(e, 4);
                    this.component.selectCrossingH.node.worldPosition = new d(i.x, i.y, 10);
                  } else
                    (this.component.selectCrossingV.node.worldPosition = new d(-1e3, 0)),
                      (this.component.selectCrossingH.node.worldPosition = new d(0, -1e3));
                });
              var a = n.prototype;
              return (
                (a.plantGhost = function () {
                  this.squares.forEach(function (e) {
                    var n = e.getComponent(m);
                    1 == n.indexPoint && ((n.index = 1), n.ghostPoint.destroyAllChildren(), n.plantGhost());
                  });
                }),
                (a.readIndex = function () {
                  var e = this.UIInGame.index <= 8 && this.UIInGame.index >= 0;
                  (this.indexSpikeweed = e && -1 != this.UIInGame.plantInHandType.indexOf('spikeweed') ? 1 : 0),
                    (this.indexPotatomine = e && -1 != this.UIInGame.plantInHandType.indexOf('potatomine') ? 1 : 0),
                    (this.indexLilyPad = e && -1 != this.UIInGame.plantInHandType.indexOf('lilypad') ? 1 : 0),
                    (this.indexFlowerPot = e && -1 != this.UIInGame.plantInHandType.indexOf('floawerPot') ? 1 : 0),
                    (this.indexPlant = e && -1 != this.UIInGame.plantInHandType.indexOf('plant') ? 1 : 0),
                    (this.indexVine = e && -1 != this.UIInGame.plantInHandType.indexOf('vine') ? 1 : 0),
                    (this.indexFly = e && -1 != this.UIInGame.plantInHandType.indexOf('fly') ? 1 : 0),
                    (this.indexGravebuster = e && -1 != this.UIInGame.plantInHandType.indexOf('gravebuster') ? 1 : 0),
                    (this.indexShovel = -2 == f.index ? 1 : 0),
                    (this.indexPF = -3 == f.index ? 1 : 0),
                    this.inLawnLnCs.forEach(function (e) {
                      e.forEach(function (e) {
                        e.selection();
                      });
                    });
                }),
                (a.deletePlantGhosts = function () {
                  this.squares.forEach(function (e) {
                    e.getChildByName('PlantPoint').destroyAllChildren();
                  });
                }),
                (a.onLoad = function () {
                  var e = this;
                  n.component = this;
                  var t = this.square00;
                  n.Square00 = t;
                  var i = null == t ? void 0 : t.getComponent(m);
                  if (i) {
                    (i.RowParent = this.node.parent.getChildByName('squaresLower').getChildByName('Row0')),
                      (i.SquaresTotal = this),
                      (i.inLane = i.RowParent.getComponent(L)),
                      (i.lIndex = i.cIndex = 0),
                      this.squares.push(t);
                    for (var o = 0; o <= 4; o++) {
                      for (var a = 1; a < 9; a++) {
                        var r = null;
                        ((r = c(t)).parent = this.node),
                          r.setPosition(
                            this.node.getChildByName('Square' + o.toString() + (a - 1).toString()).getPosition().x + n.SquareDisW,
                            this.node.getChildByName('Square' + o.toString() + (a - 1).toString()).getPosition().y
                          ),
                          (r.name = 'Square' + o.toString() + a.toString());
                        var s = r.getComponent(m);
                        (s.RowParent = n.getLane(o)),
                          (s.inLane = r.getComponent(m).RowParent.getComponent(L)),
                          (s.SquaresTotal = this),
                          (s.lIndex = o),
                          (s.cIndex = a),
                          this.squares.push(r);
                      }
                      if (4 == o) break;
                      var l = null;
                      ((l = c(this.node.getChildByName('Square' + o.toString() + '0'))).parent = this.node),
                        l.setPosition(
                          this.node.getChildByName('Square' + o.toString() + '0').getPosition().x,
                          this.node.getChildByName('Square' + o.toString() + '0').getPosition().y - n.SquareDisH
                        ),
                        (l.name = 'Square' + (o + 1).toString() + '0');
                      var u = l.getComponent(m);
                      (u.RowParent = n.getLane(o + 1)),
                        (u.inLane = l.getComponent(m).RowParent.getComponent(L)),
                        (u.SquaresTotal = this),
                        (u.lIndex = o + 1),
                        (u.cIndex = 0),
                        this.squares.push(l);
                    }
                    var d = this.node.parent.getChildByName('squaresLower').getChildByName('Row0').getChildByName('Square00');
                    d.getComponent(S).standardize(t);
                    for (var g = d.getSiblingIndex(), p = 0; p <= 4; p++) {
                      for (var C = 1; C < 9; C++) {
                        var q = c(d);
                        (q.parent = this.node.parent.getChildByName('squaresLower').getChildByName('Row' + p.toString())),
                          q.setSiblingIndex(g),
                          (q.name = 'Square' + p.toString() + C.toString()),
                          q.getComponent(S).standardize(this.node.getChildByName(q.name));
                      }
                      if (4 == p) break;
                      var w = c(d);
                      (w.parent = this.node.parent.getChildByName('squaresLower').getChildByName('Row' + (p + 1).toString())),
                        (w.name = 'Square' + (p + 1).toString() + '0'),
                        w.setSiblingIndex(g),
                        w.getComponent(S).standardize(this.node.getChildByName(w.name));
                    }
                    (this.UIInGame = h('Canvas/UIInGame').getComponent(f)),
                      (this.indexPlant = 0),
                      (this.indexVine = 0),
                      (this.indexFlowerPot = 0),
                      (this.indexLilyPad = 0),
                      (this.indexFly = 0),
                      (this.indexShovel = 0),
                      (this.indexPF = 0),
                      (this.indexSpikeweed = 0),
                      (this.indexPotatomine = 0),
                      (this.indexGravebuster = 0);
                    for (var x = -1; x <= 5; x++) n.getLaneComponent(x).midY = n.getSquareWorldPosition(x, 0).y;
                  }
                  [0, 1, 2, 3, 4].forEach(function (n) {
                    var t = [];
                    [0, 1, 2, 3, 4, 5, 6, 7, 8].forEach(function (i) {
                      t.push(e.squares[9 * n + i].getComponent(m));
                    }),
                      e.inLawnLnCs.push(t);
                  }),
                    [this.LnCAbstract, this.LnCLeft, this.LnCRight].forEach(function (e) {
                      e.inLane = n.getLane(-2).getComponent(L);
                    }),
                    (this.LnCHere.inLane = n.getLaneComponent(5)),
                    (this.LnCThere.inLane = n.getLaneComponent(-1));
                }),
                (a.update = function (e) {
                  if (1 == n.lncSelectionMode) {
                    var t = !1;
                    this.inLawnLnCs.forEach(function (e) {
                      t ||
                        e.forEach(function (e) {
                          t ||
                            (1 == e.index && e.rec.judgeInRecP(w.position, !0) && ((t = !0), n.moveCrossing(e.lIndex, e.cIndex)));
                        });
                    }),
                      t || n.moveCrossing(-1, -1);
                  }
                }),
                (a.start = function () {
                  (n.lawnRec = q.createRectangleNodeCenter(n.getSquare(2, 4), 9 * n.SquareDisW, 5 * n.SquareDisH)),
                    (n.zombieWinX = n.Square00WorldPosition().x - 1.5 * n.SquareDisW),
                    (n.zombieSpawnSpawnX = n.Square00WorldPosition().x + 10.5 * n.SquareDisW),
                    (this.selectCrossingV.contentSize = new g(n.SquareDisW, 5 * n.SquareDisH)),
                    (this.selectCrossingH.contentSize = new g(9 * n.SquareDisW, n.SquareDisH));
                }),
                (n.setSquareType = function () {
                  C.currentLawn.initialize(), C.currentLawn.tideOnLoad && C.addTide();
                }),
                n
              );
            })(p)).SquareDisH = 84),
            (O.SquareDisW = 72),
            (O.Square00 = null),
            (O.zombieWinX = 0),
            (O.zombieSpawnSpawnX = 1e3),
            (O.lawnRec = q.createRectangleCenter(new u(0, 0), 9 * O.SquareDisW, 5 * O.SquareDisH)),
            (O.lncSelectionMode = 0),
            (O.component = void 0),
            (D = n((T = O).prototype, 'selectCrossingV', [y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (z = n(T.prototype, 'selectCrossingH', [v], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (W = n(T.prototype, 'square00', [I], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (G = n(T.prototype, 'LnCHere', [P], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (U = n(T.prototype, 'LnCThere', [b], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (M = n(T.prototype, 'LnCLeft', [H], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (F = n(T.prototype, 'LnCRight', [R], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (A = n(T.prototype, 'LnCAbstract', [N], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (B = T))
          ) || B)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Squash.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './squashSound.ts',
    './CharacterManager.ts',
    './Square.ts',
    './LnC.ts',
    './levelController.ts',
    './NodePools.ts',
  ],
  function (t) {
    var o, i, e, n, s, a, l, r, h, d, c, u, f, m, g, p, y, b;
    return {
      setters: [
        function (t) {
          (o = t.applyDecoratedDescriptor),
            (i = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (n = t.assertThisInitialized);
        },
        function (t) {
          (s = t.cclegacy), (a = t._decorator), (l = t.CCInteger), (r = t.CCFloat), (h = t.Vec2), (d = t.tween);
        },
        function (t) {
          c = t.Plant;
        },
        function (t) {
          u = t.squashSound;
        },
        function (t) {
          (f = t.Rectangle), (m = t.ZombiePool);
        },
        function (t) {
          g = t.Square;
        },
        function (t) {
          p = t.TileType;
        },
        function (t) {
          y = t.LevelPlay;
        },
        function (t) {
          b = t.ArrayGet;
        },
      ],
      execute: function () {
        var P, T, L, k, C, w, A;
        s._RF.push({}, '5014euUaBJHzKQjX+6VD5ps', 'Squash', void 0);
        var R = a.ccclass,
          v = a.property;
        t(
          'SquashPlant',
          ((P = R('SquashPlant')),
          (T = v(l)),
          (L = v(r)),
          P(
            ((w = o(
              (C = (function (t) {
                function o() {
                  for (var o, i = arguments.length, s = new Array(i), a = 0; a < i; a++) s[a] = arguments[a];
                  return (
                    ((o = t.call.apply(t, [this].concat(s)) || this).lockedTarget = void 0),
                    (o.lookedAtTarget = void 0),
                    (o.facingLeft = !1),
                    (o.busy = !1),
                    e(o, 'foodSmashTime', w, n(o)),
                    (o.foodLeftTime = 2),
                    e(o, 'smashDamage', A, n(o)),
                    (o.detector = new f()),
                    o
                  );
                }
                i(o, t);
                var s = o.prototype;
                return (
                  (s.specialPlantOnEnable = function () {
                    (this.busy = !1),
                      (this.lockedTarget = null),
                      (this.lookedAtTarget = null),
                      (this.facingLeft = !1),
                      (this.deathAnm = 'Death'),
                      (this.eatDamagable = !1);
                  }),
                  (s.normalSmash = function (t) {}),
                  (s.animationListener = function (t) {
                    if ('judgeTarget' == t.name) {
                      if (this.fooding) return;
                      this.lookedAtTarget && this.lookedAtTarget.isAlive()
                        ? (this.getComponent(u).playLeapSay(),
                          this.anmControl.playAnimation('Jump' + (this.facingLeft ? 'L' : 'R'), 1))
                        : (this.anmControl.playRandom(), (this.busy = !1));
                    } else
                      'jump' == t.name
                        ? this.lookedAtTarget && this.lookedAtTarget.isAlive()
                          ? this.smashToZombie(this.lookedAtTarget)
                          : this.fooding
                          ? this.foodLeftTime < 0
                            ? this.smashToZombie(null)
                            : this.smashToZombie(b.getRandom(m.pool()))
                          : (this.anmControl.playRandom(), (this.facingLeft = !1), (this.busy = !1))
                        : 'die' == t.name && this.body.setParent(this.node, !0);
                  }),
                  (s.animationOnComplete = function () {
                    !this.busy || this.dead || this.fooding || this.smashToZombie(null),
                      this.fooding && (this.anmControl.playAnimation('JumpR', 1), this.foodLeftTime--);
                  }),
                  (s.specialPlantFood = function (t) {
                    this.anmControl.playAnimation('LookR', 1),
                      this.getComponent(u).playFood(),
                      (this.foodLeftTime = this.foodSmashTime);
                  }),
                  (s.lookAtZombie = function (t) {
                    (this.busy = !0), (this.eaterDetectable = !1), (this.smasherDetectable = !1), (this.lookedAtTarget = t);
                    var o = 'LookR';
                    (this.facingLeft = !1),
                      t.worldPositionX < this.worldPositionX && ((o = 'LookL'), (this.facingLeft = !0)),
                      this.getComponent(u).playLook(),
                      this.anmControl.playAnimation(o, 2);
                  }),
                  (s.smashZombies = function () {
                    var t = this,
                      o = f.createRectangleCenter(
                        new h(this.worldPositionX, g.getLnC(this.inLane.LaneIndex, 0).node.worldPosition.y),
                        2 * g.SquareDisW,
                        g.SquareDisH
                      ),
                      i = !1;
                    this.inLane.zombiePool().forEach(function (e) {
                      o.judgeCrossRec(e.bodyRec) && (e.dealDamage(t.smashDamage, !0, !0, !0, new h(0, -20)), (i = !0));
                    });
                    var e = !1;
                    if (!this.fooding) {
                      var n = this.inLnC.getTileType();
                      n == p.water || n == p.sea
                        ? (this.body.setParent(this.node, !0), this.drown(n == p.sea), (e = !0))
                        : n == p.sky
                        ? (this.body.setParent(this.node, !0), this.fall(), (e = !0))
                        : i && ((this.deathAnm = 'null'), this.die());
                    }
                    (this.lockedTarget = null),
                      (this.lookedAtTarget = null),
                      e || (y.shakeScreen(), this.getComponent(u).playSmash()),
                      this.fooding && this.foodLeftTime < 0 && this.foodEnd();
                  }),
                  (s.smashToZombie = function (t) {
                    var o = this;
                    t
                      ? (this.body.setParent(t.inLane.prjLayer, !0),
                        d(this)
                          .to(
                            0.2,
                            { height: 120, worldPositionX: t.worldPositionX, worldPositionY: t.worldPositionY },
                            { easing: 'quadOut' }
                          )
                          .to(0.2, {})
                          .call(function () {
                            (o.lockedTarget = t),
                              o.anmControl.playAnimation('Fall' + (o.facingLeft ? 'L' : 'R') + (o.fooding ? '' : 'Fade'), 1);
                          })
                          .to(0.1, { height: 0 })
                          .call(function () {
                            o.smashZombies();
                          })
                          .start())
                      : (this.body.setParent(this.node, !0),
                        (this.facingLeft = this.plantInLnC.plantPoint.worldPosition.x < this._worldPositionX),
                        d(this)
                          .to(
                            0.2,
                            {
                              height: 120,
                              worldPositionX: this.plantInLnC.plantPoint.worldPosition.x,
                              worldPositionY: this.plantInLnC.plantPoint.worldPosition.y,
                            },
                            { easing: 'quadOut' }
                          )
                          .to(0.2, {})
                          .call(function () {
                            o.anmControl.playAnimation('Fall' + (o.facingLeft ? 'L' : 'R') + (o.fooding ? '' : 'Fade'), 1);
                          })
                          .to(0.1, { height: 0 })
                          .call(function () {
                            o.smashZombies(), (o.busy = !1);
                          })
                          .start());
                  }),
                  (s.specialPlantOnSquareChange = function (t, o) {
                    this.detector = f.createRectangleNodeCenter(this.plantInLnC.node, 3 * g.SquareDisW, g.SquareDisH);
                  }),
                  (s.waterable = function () {
                    return !this.busy;
                  }),
                  (s.detectEnemies = function () {
                    var t = this,
                      o = 1 / 0,
                      i = null;
                    this.inLane.zombiePool().forEach(function (e) {
                      var n = e.bodyRec.prjX().x;
                      n < o && e.bodyRec.judgeCrossRec(t.detector) && ((i = e), (o = n));
                    }),
                      i && this.lookAtZombie(i);
                  }),
                  (s.burn = function () {}),
                  (s.specialPlantUpdate = function (t) {
                    this.lockedTarget &&
                      ((this.worldPositionX = this.lockedTarget.worldPositionX),
                      (this.worldPositionY = this.lockedTarget.worldPositionY)),
                      (this.busy &&
                        (!this.lockedTarget ||
                          (this.lockedTarget.isAlive() && this.detector.judgeCrossRec(this.lockedTarget.bodyRec)))) ||
                        (this.lockedTarget = null),
                      (this.busy &&
                        (!this.lookedAtTarget ||
                          (this.lookedAtTarget.isAlive() && this.detector.judgeCrossRec(this.lookedAtTarget.bodyRec)))) ||
                        (this.lookedAtTarget = null),
                      this.lookedAtTarget || this.busy || this.fooding || this.detectEnemies();
                  }),
                  (s.specialPlantUpdateForce = function (t) {
                    this.body.worldPosition = this.node.worldPosition;
                  }),
                  o
                );
              })(c)).prototype,
              'foodSmashTime',
              [T],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 2;
                },
              }
            )),
            (A = o(C.prototype, 'smashDamage', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 1800;
              },
            })),
            (k = C))
          ) || k)
        );
        s._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/squashSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './plantSound.ts'],
  function (o) {
    var n, t, r, e, i, a, u, s;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (r = o.initializerDefineProperty),
            (e = o.assertThisInitialized);
        },
        function (o) {
          (i = o.cclegacy), (a = o._decorator), (u = o.AudioClip);
        },
        function (o) {
          s = o.plantSound;
        },
      ],
      execute: function () {
        var l, p, c, S, d, y, h, f, b, m, g;
        i._RF.push({}, 'fa865YF/SVKV4g2J8EXZQnP', 'squashSound', void 0);
        var F = a.ccclass,
          v = a.property;
        o(
          'squashSound',
          ((l = F('squashSound')),
          (p = v([u])),
          (c = v([u])),
          (S = v([u])),
          (d = v([u])),
          l(
            ((f = n(
              (h = (function (o) {
                function n() {
                  for (var n, t = arguments.length, i = new Array(t), a = 0; a < t; a++) i[a] = arguments[a];
                  return (
                    (n = o.call.apply(o, [this].concat(i)) || this),
                    r(n, 'smashSounds', f, e(n)),
                    r(n, 'lookSounds', b, e(n)),
                    r(n, 'leapSaySounds', m, e(n)),
                    r(n, 'foodSounds', g, e(n)),
                    n
                  );
                }
                t(n, o);
                var i = n.prototype;
                return (
                  (i.playSmash = function () {
                    this.playOneShotFromArray(this.smashSounds);
                  }),
                  (i.playLook = function () {
                    this.playOneShotFromArray(this.lookSounds);
                  }),
                  (i.playLeapSay = function () {
                    this.playOneShotFromArray(this.leapSaySounds);
                  }),
                  (i.playFood = function () {
                    this.playOneShotFromArray(this.foodSounds);
                  }),
                  n
                );
              })(s)).prototype,
              'smashSounds',
              [p],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (b = n(h.prototype, 'lookSounds', [c], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (m = n(h.prototype, 'leapSaySounds', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (g = n(h.prototype, 'foodSounds', [d], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (y = h))
          ) || y)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/stageEffect.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './SoundsController.ts'],
  function (t) {
    var n, i, e, o, a, r, s, l, u, p, d, c, h;
    return {
      setters: [
        function (t) {
          (n = t.applyDecoratedDescriptor),
            (i = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (o = t.assertThisInitialized);
        },
        function (t) {
          (a = t.cclegacy),
            (r = t._decorator),
            (s = t.AudioClip),
            (l = t.dragonBones),
            (u = t.find),
            (p = t.AudioSource),
            (d = t.Component);
        },
        function (t) {
          c = t.ArrayGet;
        },
        function (t) {
          h = t.SoundFXController;
        },
      ],
      execute: function () {
        var f, m, y, g, S, A, C;
        a._RF.push({}, 'c9464IbAxdGdJwFFQW8KmBd', 'stageEffect', void 0);
        var w = r.ccclass,
          b = r.property;
        t(
          'StageEffect',
          ((f = w('stageEffect')),
          (m = b([s])),
          (y = b([s])),
          f(
            ((A = n(
              (S = (function (t) {
                function n() {
                  for (var n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                  return (
                    ((n = t.call.apply(t, [this].concat(a)) || this).lower = null),
                    (n.upper = null),
                    (n.initiated = !1),
                    e(n, 'startSound0', A, o(n)),
                    e(n, 'startSound1', C, o(n)),
                    n
                  );
                }
                i(n, t);
                var a = n.prototype;
                return (
                  (a.onEnable = function () {
                    (this.lower = this.getComponent(l.ArmatureDisplay)),
                      (this.upper = u('Canvas/LawnCommon/stageEffect/' + this.node.name).getComponent(l.ArmatureDisplay)),
                      this.getComponent(p) || this.addComponent(p),
                      this.playNone();
                  }),
                  (a.playEnd = function () {
                    this.initiated && ((this.initiated = !1), this.upper.playAnimation('End'), this.lower.playAnimation('End'));
                  }),
                  (a.playNone = function () {
                    this.initiated && (this.upper.playAnimation('None'), this.lower.playAnimation('None'), (this.initiated = !1));
                  }),
                  (a.playIdle = function () {
                    this.initiated || (this.upper.playAnimation('Idle'), this.lower.playAnimation('Idle'), (this.initiated = !0));
                  }),
                  (a.playStart = function () {
                    this.initiated ||
                      (this.upper.playAnimation('Start'),
                      this.lower.playAnimation('Start'),
                      this.startSound0.length && this.getComponent(p).playOneShot(c.getRandom(this.startSound0), h.SoundFXVolume),
                      this.startSound1.length && this.getComponent(p).playOneShot(c.getRandom(this.startSound1), h.SoundFXVolume),
                      (this.initiated = !0));
                  }),
                  n
                );
              })(d)).prototype,
              'startSound0',
              [m],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (C = n(S.prototype, 'startSound1', [y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (g = S))
          ) || g)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Stallia.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './CharacterManager.ts',
    './Square.ts',
    './stalliaSound.ts',
    './levelController.ts',
  ],
  function (e) {
    var t, n, o, i, a, r, l, s, c, u, p, h, d, f, m;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (n = e.inheritsLoose),
            (o = e.initializerDefineProperty),
            (i = e.assertThisInitialized);
        },
        function (e) {
          (a = e.cclegacy), (r = e._decorator), (l = e.CCFloat), (s = e.Color), (c = e.tween);
        },
        function (e) {
          u = e.Plant;
        },
        function (e) {
          (p = e.Rectangle), (h = e.ZombiePool);
        },
        function (e) {
          d = e.Square;
        },
        function (e) {
          f = e.stalliaSound;
        },
        function (e) {
          m = e.LevelPlay;
        },
      ],
      execute: function () {
        var b, y, C, S, g, P, v, D, L;
        a._RF.push({}, 'c8ac1JjQAJDaqryEOtad9Lt', 'Stallia', void 0);
        var w = r.ccclass,
          E = r.property;
        e(
          'StalliaPlant',
          ((b = w('StalliaPlant')),
          (y = E(l)),
          (C = E(s)),
          (S = E(s)),
          b(
            ((v = t(
              (P = (function (e) {
                function t() {
                  for (var t, n = arguments.length, a = new Array(n), r = 0; r < n; r++) a[r] = arguments[r];
                  return (
                    (t = e.call.apply(e, [this].concat(a)) || this),
                    o(t, 'perfumeDuration', v, i(t)),
                    o(t, 'purple1', D, i(t)),
                    o(t, 'purple2', L, i(t)),
                    (t.screenColor = new s(0, 0, 0, 0)),
                    (t.detector = void 0),
                    t
                  );
                }
                n(t, e);
                var a = t.prototype;
                return (
                  (a.specialPlantOnEnable = function () {
                    (this.damagable = !1), (this.eaterDetectable = !1), (this.smasherDetectable = !1);
                  }),
                  (a.specialPlantLateUpdate = function (e) {
                    0 != this.screenColor.a && m.screenFlashColors.push(this.screenColor);
                  }),
                  (a.specialPlantFood = function (e) {
                    this.anmControl.playAnimation('Food');
                  }),
                  (a.animationListener = function (e) {
                    var t = this;
                    if ('explode' == e.name) {
                      var n,
                        o = p.createRectangleNodeCenter(this.inLnC.node, 3 * d.SquareDisW, 3 * d.SquareDisH);
                      this.getComponent(f).playExplodeSound(),
                        null == (n = this.inLane) ||
                          n
                            .zombiePool()
                            .concat(this.inLane.UpperLane.zombiePool(), this.inLane.LowerLane.zombiePool())
                            .forEach(function (e) {
                              e.bodyRec.judgeCrossRec(o) && e.setPerfume(t.perfumeDuration);
                            });
                    } else if ('foodExplode' == e.name) {
                      h.pool()
                        .concat()
                        .forEach(function (e) {
                          e.setPerfume(t.perfumeDuration);
                        });
                      var i = c(this.screenColor)
                        .to(1 / 60 / this.anmControl.body.timeScale, {
                          r: this.purple2.r,
                          g: this.purple2.g,
                          b: this.purple2.b,
                          a: this.purple2.a,
                        })
                        .to(1 / 4 / this.anmControl.body.timeScale, { a: 0 })
                        .start();
                      this.bodyTweens.push(i);
                    } else if ('foodEnd' == e.name) this.foodEnd();
                    else if ('foodExplodeStart' == e.name) {
                      this.getComponent(f).playFoodSound(),
                        (this.screenColor = new s(this.purple1.r, this.purple1.g, this.purple1.b, 0));
                      var a = c(this.screenColor)
                        .to(0.4 / this.anmControl.body.timeScale, { a: this.purple1.a })
                        .start();
                      this.bodyTweens.push(a);
                    }
                  }),
                  (a.specialPlantUpdate = function (e) {
                    this.fooding || this.detectEnemy();
                  }),
                  (a.detectEnemy = function () {
                    var e,
                      t = this,
                      n = !1;
                    null == (e = this.inLane) ||
                      e.zombiePool().forEach(function (e) {
                        n || (e.shouldSpeedScale() * e.randomSpeed > 0 && e.bodyRec.judgeCrossRec(t.detector) && (n = !0));
                      }),
                      n && this.die();
                  }),
                  (a.specialPlantOnSquareChange = function (e, t) {
                    this.detector = p.createRectangleNodeCenter(t.node, 0.5 * d.SquareDisW, d.SquareDisH);
                  }),
                  t
                );
              })(u)).prototype,
              'perfumeDuration',
              [y],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 12;
                },
              }
            )),
            (D = t(P.prototype, 'purple1', [C], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new s(255, 255, 255, 255);
              },
            })),
            (L = t(P.prototype, 'purple2', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new s(255, 255, 255, 255);
              },
            })),
            (g = P))
          ) || g)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/stalliaSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './plantSound.ts'],
  function (o) {
    var n, t, e, r, i, a, l, u;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (e = o.initializerDefineProperty),
            (r = o.assertThisInitialized);
        },
        function (o) {
          (i = o.cclegacy), (a = o._decorator), (l = o.AudioClip);
        },
        function (o) {
          u = o.plantSound;
        },
      ],
      execute: function () {
        var d, p, c, s, f, S, y;
        i._RF.push({}, 'dd72esMSwhIvJfkd2y8xG78', 'stalliaSound', void 0);
        var h = a.ccclass,
          v = a.property;
        o(
          'stalliaSound',
          ((d = h('stalliaSound')),
          (p = v([l])),
          (c = v([l])),
          d(
            ((S = n(
              (f = (function (o) {
                function n() {
                  for (var n, t = arguments.length, i = new Array(t), a = 0; a < t; a++) i[a] = arguments[a];
                  return (
                    (n = o.call.apply(o, [this].concat(i)) || this), e(n, 'foodSound', S, r(n)), e(n, 'explodeSound', y, r(n)), n
                  );
                }
                t(n, o);
                var i = n.prototype;
                return (
                  (i.playFoodSound = function () {
                    this.playOneShotFromArray(this.foodSound);
                  }),
                  (i.playExplodeSound = function () {
                    this.playOneShotFromArray(this.explodeSound);
                  }),
                  n
                );
              })(u)).prototype,
              'foodSound',
              [p],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (y = n(f.prototype, 'explodeSound', [c], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (s = f))
          ) || s)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/StarFruit.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Peashooter.ts', './Square.ts', './starFruitSound.ts', './CharacterManager.ts'],
  function (e) {
    var t, o, n, i, a, r, s, c, u, d, l, h, f, S, p;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (o = e.inheritsLoose),
            (n = e.initializerDefineProperty),
            (i = e.assertThisInitialized);
        },
        function (e) {
          (a = e.cclegacy), (r = e._decorator), (s = e.Prefab), (c = e.HALF_PI), (u = e.Vec2);
        },
        function (e) {
          d = e.PeashooterPlant;
        },
        function (e) {
          l = e.Square;
        },
        function (e) {
          h = e.starFruitSound;
        },
        function (e) {
          (f = e.Rectangle), (S = e.ZombiePool), (p = e.TombPool);
        },
      ],
      execute: function () {
        var D, y, g, m, F;
        a._RF.push({}, 'e7d20dLX0JKjqlLE9Yio589', 'StarFruit', void 0);
        var q = r.ccclass,
          b = r.property;
        e(
          'StarFruitPlant',
          ((D = q('StarFruit')),
          (y = b(s)),
          D(
            ((F = t(
              (m = (function (e) {
                function t() {
                  for (var t, o = arguments.length, a = new Array(o), r = 0; r < o; r++) a[r] = arguments[r];
                  return (
                    (t = e.call.apply(e, [this].concat(a)) || this),
                    n(t, 'peaFood', F, i(t)),
                    (t.sideDetectors = []),
                    (t.laneDetector = null),
                    t
                  );
                }
                o(t, e);
                var a = t.prototype;
                return (
                  (a.specialPlantFood = function () {
                    this.anmControl.playAnimation('FoodStart', 1 / 0), (this.busy = 1 / 0);
                  }),
                  (a.setDetecter = function (e, t) {
                    (this.sideDetectors = []),
                      this.sideDetectors.push(
                        f.createRectangleNodeCenter(t.node, 30, 5 * l.SquareDisH),
                        f.createRectangleNodeSide(
                          t.node,
                          10 * l.SquareDisW,
                          30,
                          (90 * Math.atan2(l.SquareDisH, 1.732 * l.SquareDisW)) / c
                        ),
                        f.createRectangleNodeSide(
                          t.node,
                          10 * l.SquareDisW,
                          30,
                          (90 * -Math.atan2(l.SquareDisH, 1.732 * l.SquareDisW)) / c
                        )
                      ),
                      (this.laneDetector = f.createRectangleNodeSide(t.node, -(t.cIndex + 1) * l.SquareDisW, l.SquareDisH));
                  }),
                  (a.detectEnemy = function () {
                    var e = this,
                      t = !1;
                    return (
                      this.inLane.zombiePool().forEach(function (o) {
                        t || (o.isAlive() && o.bodyRec.judgeCrossRec(e.laneDetector) && (t = !0));
                      }),
                      !!t ||
                        (this.inLane.tombPool().forEach(function (o) {
                          t || (o.bodyRec.judgeCrossRec(e.laneDetector) && (t = !0));
                        }),
                        !!t ||
                          (S.pool()
                            .concat()
                            .forEach(function (o) {
                              t ||
                                e.sideDetectors.forEach(function (e) {
                                  t || (e.judgeCrossRec(o.bodyRec) && (t = !0));
                                });
                            }),
                          !!t ||
                            (p
                              .pool()
                              .concat()
                              .forEach(function (o) {
                                t ||
                                  e.sideDetectors.forEach(function (e) {
                                    t || (e.judgeCrossRec(o.bodyRec) && (t = !0));
                                  });
                              }),
                            t)))
                    );
                  }),
                  (a.specialPlantFoodEnd = function () {
                    (this.busy = 0), this.anmControl.playAnimation('FoodEnd', 1);
                  }),
                  (a._shootStars = function (e, t, o, n) {
                    var i = this;
                    void 0 === e && (e = !1),
                      void 0 === t && (t = !1),
                      void 0 === o && (o = this.pea),
                      void 0 === n && (n = 20),
                      [
                        new u(-1, 0),
                        new u(0, 1),
                        new u(0, -1),
                        new u(1.732 * l.SquareDisW, l.SquareDisH),
                        new u(1.732 * l.SquareDisW, -l.SquareDisH),
                      ].forEach(function (a) {
                        i._shoot(e, t, o, n, a);
                      });
                  }),
                  (a.onFoodLeftPeaCountDec = function () {
                    this._shootStars(!0, !0, this.peaFood, 20);
                  }),
                  (a.animationListener = function (e) {
                    'Shoot' == e.name && (this._shootStars(), this.getComponent(h).playShootSound()),
                      'foodStart' == e.name &&
                        (this.getComponent(h).playFoodSound(),
                        this.anmControl.playAnimation('Fooding', 1 / 0),
                        this.anmControl.playAnimation('Fooding', 1 / 0),
                        this.foodShooting());
                  }),
                  t
                );
              })(d)).prototype,
              'peaFood',
              [y],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (g = m))
          ) || g)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/starFruitSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './plantSound.ts'],
  function (o) {
    var t, n, i, r, e, a, u, l, s;
    return {
      setters: [
        function (o) {
          (t = o.applyDecoratedDescriptor),
            (n = o.inheritsLoose),
            (i = o.initializerDefineProperty),
            (r = o.assertThisInitialized);
        },
        function (o) {
          (e = o.cclegacy), (a = o._decorator), (u = o.AudioClip);
        },
        function (o) {
          l = o.ArrayGet;
        },
        function (o) {
          s = o.plantSound;
        },
      ],
      execute: function () {
        var p, c, d, f, h, S, y, b, g;
        e._RF.push({}, 'f3256b6vk1HN4BGjsa6spjx', 'starFruitSound', void 0);
        var v = a.ccclass,
          F = a.property;
        o(
          'starFruitSound',
          ((p = v('starFruitSound')),
          (c = F([u])),
          (d = F([u])),
          (f = F([u])),
          p(
            ((y = t(
              (S = (function (o) {
                function t() {
                  for (var t, n = arguments.length, e = new Array(n), a = 0; a < n; a++) e[a] = arguments[a];
                  return (
                    (t = o.call.apply(o, [this].concat(e)) || this),
                    i(t, 'shootSound', y, r(t)),
                    i(t, 'foodSound', b, r(t)),
                    i(t, 'piano', g, r(t)),
                    t
                  );
                }
                n(t, o);
                var e = t.prototype;
                return (
                  (e.playShootSound = function () {
                    this.playOneShot(l.getRandom(this.shootSound));
                  }),
                  (e.playFoodSound = function () {
                    this.playOneShot(l.getRandom(this.foodSound));
                  }),
                  (e.playPiano = function (o) {
                    o >= 1 && o <= 6 && this.playOneShot(this.piano[o - 1], 2);
                  }),
                  t
                );
              })(s)).prototype,
              'shootSound',
              [c],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (b = t(S.prototype, 'foodSound', [d], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (g = t(S.prototype, 'piano', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (h = S))
          ) || h)
        );
        e._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/sun.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './SunCount.ts', './dropping.ts', './Square.ts', './Droppings.ts'],
  function (o) {
    var i, t, n, s, e, r, a, l, h, d, b, u, c;
    return {
      setters: [
        function (o) {
          (i = o.applyDecoratedDescriptor),
            (t = o.inheritsLoose),
            (n = o.initializerDefineProperty),
            (s = o.assertThisInitialized),
            (e = o.createClass);
        },
        function (o) {
          (r = o.cclegacy), (a = o._decorator), (l = o.Vec2), (h = o.tween);
        },
        function (o) {
          d = o.SunCount;
        },
        function (o) {
          b = o.dropping;
        },
        function (o) {
          u = o.Square;
        },
        function (o) {
          c = o.droppings;
        },
      ],
      execute: function () {
        var p, w, P, m, f;
        r._RF.push({}, '36a5cpi8YZHxrqdx/7BmhHo', 'sun', void 0);
        var y = a.ccclass,
          g = a.property;
        o(
          'sun',
          ((p = y('sun')),
          (w = g([Number])),
          p(
            ((f = i(
              (m = (function (o) {
                function i() {
                  for (var i, t = arguments.length, e = new Array(t), r = 0; r < t; r++) e[r] = arguments[r];
                  return (
                    (i = o.call.apply(o, [this].concat(e)) || this),
                    n(i, 'value', f, s(i)),
                    (i.mode = 'Normal'),
                    (i.absorbTween = []),
                    (i._absorber = null),
                    i
                  );
                }
                t(i, o);
                var r = i.prototype;
                return (
                  (r.specialDroppingFadable = function () {
                    return 'Normal' == this.mode;
                  }),
                  (r.specialDroppingOnEnable = function () {
                    this.absorbTween.forEach(function (o) {
                      o.stop();
                    }),
                      (this.absorbTween = []),
                      (this.absorber = null),
                      (this.mode = 'Normal'),
                      this.db.playAnimation('Normal', 1 / 0);
                  }),
                  (r.goToUIPath = function () {
                    return 'Canvas/UIInGame/SunSlot';
                  }),
                  (r.specialDroppingUpdate = function (o, i) {
                    var t;
                    (!this.collected && u.judgeInLawn(this.node.worldPosition) ? c.registerSun(this) : c.deleteSun(this),
                    this._absorber) &&
                      !this.collected &&
                      i.judgeInRecNode(this._absorber.absorber) &&
                      (this.fade(), null == (t = this.absorber) || null == (t = t.absorbedValue) || t.push(this.value));
                  }),
                  (r.switchMode = function (o) {
                    'Red' == o
                      ? ('Normal' == this.mode
                          ? this.db.playAnimation('N-R')
                          : 'Blue' == this.mode && this.db.playAnimation('B-R'),
                        (this.mode = 'Red'))
                      : 'Blue' == o
                      ? ('Normal' == this.mode
                          ? this.db.playAnimation('N-B')
                          : 'Red' == this.mode && this.db.playAnimation('R-B'),
                        (this.mode = 'Blue'))
                      : ('Blue' == this.mode ? this.db.playAnimation('B-N') : 'Red' == this.mode && this.db.playAnimation('R-N'),
                        (this.mode = 'Normal'));
                  }),
                  (r.specialGoToUI = function (o) {
                    c.deleteSun(this),
                      this.switchMode('Normal'),
                      d.component.playCollect(),
                      d.component.SunAdd(this.value, !1),
                      this.absorbTween.forEach(function (o) {
                        o.stop();
                      }),
                      (this.absorbTween = []),
                      (this.absorber = null);
                  }),
                  (r.specialUICall = function (o) {
                    d.component.SunAdd();
                  }),
                  e(i, [
                    {
                      key: 'absorber',
                      get: function () {
                        return this._absorber;
                      },
                      set: function (o) {
                        var i = this;
                        if (((this._absorber = o), o)) {
                          (this.linearVelocity = new l()), (this.gravity = 0), (this.bodyLinearVelocity = 0);
                          var t = 0.4,
                            n = this;
                          o.absorber.worldPosition.x,
                            this._worldPositionX,
                            o._worldPositionY,
                            this._worldPositionY,
                            o.absorber.worldPosition.y,
                            o._worldPositionY,
                            this.height;
                          this.absorbTween = [
                            h(n)
                              .by(t, {
                                height: (o.absorber.worldPosition.y - o._worldPositionY - this.height) / 4,
                                worldPositionX: (o.absorber.worldPosition.x - this._worldPositionX) / 4,
                                worldPositionY: (o._worldPositionY - this._worldPositionY) / 4,
                              })
                              .by(t, { height: 0 })
                              .call(function () {
                                i.absorbTween.push(
                                  h(n)
                                    .by(t, {
                                      height: (o.absorber.worldPosition.y - o._worldPositionY - i.height) / 3,
                                      worldPositionX: (o.absorber.worldPosition.x - i._worldPositionX) / 3,
                                      worldPositionY: (o._worldPositionY - i._worldPositionY) / 3,
                                    })
                                    .by(t, { height: 0 })
                                    .call(function () {
                                      i.absorbTween.push(
                                        h(n)
                                          .by(t, {
                                            height: (o.absorber.worldPosition.y - o._worldPositionY - i.height) / 2,
                                            worldPositionX: (o.absorber.worldPosition.x - i._worldPositionX) / 2,
                                            worldPositionY: (o._worldPositionY - i._worldPositionY) / 2,
                                          })
                                          .by(t, { height: 0 })
                                          .call(function () {
                                            i.absorbTween.push(
                                              h(n)
                                                .to(t, {
                                                  height: o.absorber.worldPosition.y - o._worldPositionY,
                                                  worldPositionX: o.absorber.worldPosition.x,
                                                  worldPositionY: o._worldPositionY,
                                                })
                                                .start()
                                            );
                                          })
                                          .start()
                                      );
                                    })
                                    .start()
                                );
                              })
                              .start(),
                          ];
                        } else
                          this.absorbTween.forEach(function (o) {
                            o.stop();
                          }),
                            (this.absorbTween = []);
                      },
                    },
                  ]),
                  i
                );
              })(b)).prototype,
              'value',
              [w],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 25;
                },
              }
            )),
            (P = m))
          ) || P)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/SunCount.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Cards.ts',
    './SoundsController.ts',
    './NodePools.ts',
    './SettingWindow.ts',
    './levelController.ts',
  ],
  function (t) {
    var n, o, e, u, i, s, a, d, r, h, S, C, l, p, c, g, m, f, y, T;
    return {
      setters: [
        function (t) {
          (n = t.applyDecoratedDescriptor),
            (o = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (u = t.assertThisInitialized);
        },
        function (t) {
          (i = t.cclegacy),
            (s = t._decorator),
            (a = t.AudioClip),
            (d = t.Node),
            (r = t.Vec3),
            (h = t.Label),
            (S = t.AudioSource),
            (C = t.EventMouse),
            (l = t.tween),
            (p = t.dragonBones),
            (c = t.Component);
        },
        function (t) {
          g = t.Cards;
        },
        function (t) {
          m = t.SoundFXController;
        },
        function (t) {
          f = t.ArrayGet;
        },
        function (t) {
          y = t.SettingWindow;
        },
        function (t) {
          T = t.LevelPlay;
        },
      ],
      execute: function () {
        var b, w, x, E, v, B, A, M, N, D;
        i._RF.push({}, '1d63d0cB5hDTobysSOpxOPK', 'SunCount', void 0);
        var O = s.ccclass,
          _ = s.property;
        t(
          'SunCount',
          ((b = O('SunCount')),
          (w = _([a])),
          (x = _(a)),
          (E = _(d)),
          b(
            (((D = (function (t) {
              function n() {
                for (var n, o = arguments.length, i = new Array(o), s = 0; s < o; s++) i[s] = arguments[s];
                return (
                  ((n = t.call.apply(t, [this].concat(i)) || this).initialSunCount = 1e3),
                  (n.SunCount = 0),
                  (n.SunCountTarget = 0),
                  (n.ExpressedSunCount = 0),
                  e(n, 'addSound', A, u(n)),
                  e(n, 'cheatAddSound', M, u(n)),
                  e(n, 'addButton', N, u(n)),
                  (n.oldpos = new r(0, 0, 0)),
                  (n.shown = !0),
                  n
                );
              }
              o(n, t);
              var i = n.prototype;
              return (
                (i.setSunCount = function (t) {
                  t || (t = 50),
                    (this.SunCount = t),
                    (this.SunCountTarget = t),
                    (this.ExpressedSunCount = t),
                    (this.node.getChildByName('SunCount').getComponent(h).string = this.ExpressedSunCount.toString());
                }),
                (i.playCollect = function () {
                  this.getComponent(S).playOneShot(f.getRandom(this.addSound), m.SoundFXVolume);
                }),
                (i.SunAdd = function (t, n) {
                  void 0 === t && (t = 0),
                    void 0 === n && (n = !0),
                    (this.SunCount = Math.min(this.SunCount + t, 9900)),
                    this.JudgeCardAffordable(),
                    n && (this.SunCountTarget = this.SunCount);
                }),
                (i.SunDec = function (t, n) {
                  void 0 === t && (t = 0),
                    void 0 === n && (n = !0),
                    (this.SunCount = Math.max(this.SunCount - t, 0)),
                    this.JudgeCardAffordable(),
                    n && (this.SunCountTarget = this.SunCount);
                }),
                (i.JudgeCardAffordable = function () {
                  this.node.parent.getChildByName('Cards').getComponent(g).JudgeCardsSelectable();
                }),
                (i.onMouseDown = function (t) {
                  (t.preventSwallow = !0),
                    t.getButton() == C.BUTTON_LEFT
                      ? (9900 != this.SunCount &&
                          (this.getComponent(S).playOneShot(this.cheatAddSound, m.SoundFXVolume),
                          this.getComponent(S).playOneShot(f.getRandom(this.addSound), m.SoundFXVolume)),
                        this.SunAdd(1e3))
                      : t.getButton() == C.BUTTON_RIGHT && this.SunDec(1e3),
                    (this.SunCountTarget = this.SunCount);
                }),
                (i.onLoad = function () {
                  (n.component = this),
                    (this.oldpos = this.node.position.clone()),
                    this.node.position.add3f(0, 400, 0),
                    (this.shown = !1),
                    this.getComponent(S) || this.addComponent(S),
                    this.node.getChildByName('add').on(d.EventType.MOUSE_DOWN, this.onMouseDown, this),
                    (this.SunCount = this.initialSunCount),
                    (this.SunCountTarget = this.initialSunCount),
                    (this.ExpressedSunCount = this.initialSunCount),
                    (this.node.getChildByName('SunCount').getComponent(h).string = this.ExpressedSunCount.toString());
                }),
                (n.show = function () {
                  var t;
                  null == (t = this.component) || t._show();
                }),
                (i._show = function () {
                  y.allowCheat || T.sandBoxModeOn || this.addButton.position.add(new r(-1e3, 1e3, 0)),
                    this.shown ||
                      ((this.shown = !0), l(this.node).to(0.4, { position: this.oldpos }, { easing: 'cubicInOut' }).start());
                }),
                (i.update = function (t) {
                  if (
                    (this.ExpressedSunCount < this.SunCountTarget
                      ? this.node.getChildByName('SunSlotIcon').getComponent(p.ArmatureDisplay).playAnimation('sunRising')
                      : this.node.getChildByName('SunSlotIcon').getComponent(p.ArmatureDisplay).playAnimation('sun'),
                    this.ExpressedSunCount != this.SunCountTarget)
                  ) {
                    var n = 1;
                    (n =
                      Math.abs(this.ExpressedSunCount - this.SunCountTarget) > 500
                        ? 75
                        : Math.abs(this.ExpressedSunCount - this.SunCountTarget) <= 500 &&
                          Math.abs(this.ExpressedSunCount - this.SunCountTarget) > 100
                        ? 25
                        : Math.abs(this.ExpressedSunCount - this.SunCountTarget) <= 100 &&
                          Math.abs(this.ExpressedSunCount - this.SunCountTarget) > 5
                        ? 5
                        : 1),
                      this.ExpressedSunCount > this.SunCountTarget
                        ? (this.ExpressedSunCount -= n)
                        : this.ExpressedSunCount < this.SunCountTarget && (this.ExpressedSunCount += n),
                      (this.node.getChildByName('SunCount').getComponent(h).string = Math.round(
                        this.ExpressedSunCount
                      ).toString());
                  }
                }),
                n
              );
            })(c)).component = void 0),
            (A = n((B = D).prototype, 'addSound', [w], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (M = n(B.prototype, 'cheatAddSound', [x], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (N = n(B.prototype, 'addButton', [E], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (v = B))
          ) || v)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Sunflower.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './sunflowerSound.ts',
    './NodePools.ts',
    './dropping.ts',
    './Droppings.ts',
    './Square.ts',
    './sun.ts',
    './plantFood.ts',
    './coin.ts',
    './gem.ts',
    './SoundRescourses.ts',
  ],
  function (n) {
    var o, t, i, e, a, r, u, l, s, c, d, y, p, h, f, P, m, g, w, v;
    return {
      setters: [
        function (n) {
          (o = n.applyDecoratedDescriptor),
            (t = n.inheritsLoose),
            (i = n.initializerDefineProperty),
            (e = n.assertThisInitialized);
        },
        function (n) {
          (a = n.cclegacy), (r = n._decorator), (u = n.Node), (l = n.Vec2), (s = n.dragonBones);
        },
        function (n) {
          c = n.Plant;
        },
        function (n) {
          d = n.sunflowerSound;
        },
        function (n) {
          y = n.NodePools;
        },
        function (n) {
          p = n.dropping;
        },
        function (n) {
          h = n.droppings;
        },
        function (n) {
          f = n.Square;
        },
        function (n) {
          P = n.sun;
        },
        function (n) {
          m = n.plantFood;
        },
        function (n) {
          g = n.coin;
        },
        function (n) {
          w = n.gem;
        },
        function (n) {
          v = n.sounds;
        },
      ],
      execute: function () {
        var x, S, b, M, C, L, F;
        a._RF.push({}, '463e4u984hEbLGhv6WBjBYc', 'Sunflower', void 0);
        var R = r.ccclass,
          V = r.property,
          j = n(
            'sunflower',
            (function () {
              function n() {}
              return (
                (n.producePlantFood = function (n) {
                  var o = y.instantiatePooly(h.plantFood);
                  o.parent = h.layer;
                  var t = n.clone(),
                    i = f.lawnRec.prjX(),
                    e = f.lawnRec.prjY();
                  t.x < i.x ? (t.x = i.x) : t.x > i.y && (t.x = i.y), t.y < e.x ? (t.y = e.x) : t.y > e.y && (t.y = e.y);
                  var a = o.getComponent(m);
                  (a.worldPosition = t),
                    (a.linearVelocity = new l(Math.random() - 0.5, Math.random() - 0.5).normalize().multiplyScalar(5)),
                    (a.gravity = 0);
                }),
                (n.dropOneCoin = function (n, o) {
                  void 0 === o && (o = 0);
                  var t = h.CoinSilver;
                  1 == o && (t = h.CoinGold);
                  var i = y.instantiatePooly(t);
                  i.parent = h.layer;
                  var e = n.clone(),
                    a = f.lawnRec.prjX(),
                    r = f.lawnRec.prjY();
                  e.x < a.x ? (e.x = a.x) : e.x > a.y && (e.x = a.y), e.y < r.x ? (e.y = r.x) : e.y > r.y && (e.y = r.y);
                  var u = i.getComponent(g),
                    s = Math.round(6 * Math.random());
                  return (
                    (u.linearVelocity = new l(-3 + s, 0)), (u.bodyLinearVelocity = 10), (u.worldPosition = e), (u.gravity = 1), u
                  );
                }),
                (n.dropOneGem = function (n) {
                  var o = h.Gem,
                    t = y.instantiatePooly(o);
                  t.parent = h.layer;
                  var i = n.clone(),
                    e = f.lawnRec.prjX(),
                    a = f.lawnRec.prjY();
                  i.x < e.x ? (i.x = e.x) : i.x > e.y && (i.x = e.y), i.y < a.x ? (i.y = a.x) : i.y > a.y && (i.y = a.y);
                  var r = t.getComponent(w),
                    u = Math.round(6 * Math.random());
                  return (
                    (r.linearVelocity = new l(-3 + u, 0)),
                    (r.bodyLinearVelocity = 10),
                    (r.worldPosition = i),
                    (r.gravity = 1),
                    v.playGemSpawn(),
                    r
                  );
                }),
                (n.produceSun = function (n, o, t) {
                  var i = f.getSquareWorldPosition(0, 0, 0, 0),
                    e = f.getSquareWorldPosition(4, 8, 1, 1),
                    a = o.clone();
                  a.x < i.x ? (a.x = i.x) : a.x > e.x && (a.x = e.x);
                  var r = [];
                  switch (n) {
                    case 5:
                      r = [y.instantiatePooly(h.SunTiny)];
                      break;
                    case 25:
                      r = [y.instantiatePooly(h.SunSmall)];
                      break;
                    case 50:
                      r = [y.instantiatePooly(h.SunMid)];
                      break;
                    case 75:
                      r = [y.instantiatePooly(h.SunLarge)];
                      break;
                    case 100:
                      r = [y.instantiatePooly(h.SunMid), y.instantiatePooly(h.SunMid)];
                      break;
                    default:
                      for (var u = n + 0; u >= 75; ) (u -= 75), r.push(y.instantiatePooly(h.SunLarge));
                      for (; u >= 50; ) (u -= 50), r.push(y.instantiatePooly(h.SunMid));
                      for (; u >= 25; ) (u -= 25), r.push(y.instantiatePooly(h.SunSmall));
                      for (; u >= 5; ) (u -= 5), r.push(y.instantiatePooly(h.SunTiny));
                  }
                  for (var s = 0; s < r.length; s++) {
                    var c = r[s],
                      d = r.length;
                    c.parent = h.layer;
                    var m = c.getComponent(p);
                    (m.height = t), (m.worldPosition = new l(d <= 1 ? a.x : a.x - 15 + (30 / (d - 1)) * s, a.y)), (m.gravity = 1);
                    var g = Math.round(6 * Math.random());
                    (m.linearVelocity = new l(-3 + g, 0)), (m.bodyLinearVelocity = 10);
                  }
                  var w = [];
                  return (
                    r.forEach(function (n) {
                      w.push(n.getComponent(P));
                    }),
                    w
                  );
                }),
                n
              );
            })()
          );
        n(
          'SunflowerPlant',
          ((x = R('Sunflower')),
          (S = V(Number)),
          (b = V(u)),
          x(
            ((L = o(
              (C = (function (n) {
                function o() {
                  for (var o, t = arguments.length, a = new Array(t), r = 0; r < t; r++) a[r] = arguments[r];
                  return (
                    (o = n.call.apply(n, [this].concat(a)) || this),
                    i(o, 'foodProduceAmount', L, e(o)),
                    (o.sunValue = 50),
                    (o.twin = !1),
                    i(o, 'sunSpawnpoint', F, e(o)),
                    (o.producing = !1),
                    (o.busy = 0),
                    o
                  );
                }
                t(o, n);
                var a = o.prototype;
                return (
                  (a.playProduceAnimation = function () {
                    (this.producing = !0),
                      (this.busy = 23.5 + 1.5 * Math.random()),
                      this.anmControl.playAnimation('Produce', 1, 0.1);
                  }),
                  (a.specialPlantFood = function () {
                    var n;
                    (this.producing = !1),
                      (this.busy = 1 / 0),
                      null == (n = this.getComponent(d)) || n.playFoodSound(),
                      this.anmControl.playAnimation('Food', this.foodProduceAmount),
                      this.anmControl.body.once(s.EventObject.COMPLETE, this.foodEnd, this);
                  }),
                  (a.waterable = function () {
                    return !this.producing;
                  }),
                  (a.specialPlantFoodEnd = function () {
                    (this.producing = !1), (this.busy = 23.5 + 1.5 * Math.random()), this.anmControl.playRandom();
                  }),
                  (a._produce = function () {
                    var n;
                    (this.producing = !1),
                      null == (n = this.getComponent(d)) || n.playProduceSound(),
                      j.produceSun(
                        this.sunValue * (this.twin ? 2 : 1),
                        this.node.worldPosition,
                        this.sunSpawnpoint.getWorldPosition().y - this.node.getWorldPosition().y
                      );
                  }),
                  (a.animationListener = function (n) {
                    'Produce' == n.name && this._produce();
                  }),
                  (a.specialPlantOnEnable = function () {
                    (this.twin = 'SunflowerTwinPLANT' == this.node.name),
                      (this.producing = !1),
                      (this.busy = 5 + 5 * Math.random());
                  }),
                  (a.specialPlantUpdate = function (n) {
                    this.busy > 0 && (this.busy -= n), this.busy <= 0 && this.playProduceAnimation();
                  }),
                  o
                );
              })(c)).prototype,
              'foodProduceAmount',
              [S],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 3;
                },
              }
            )),
            (F = o(C.prototype, 'sunSpawnpoint', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (M = C))
          ) || M)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/sunflowerSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './plantSound.ts', './SoundRescourses.ts'],
  function (o) {
    var n, e, r, t, u, i, l, c, a;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (e = o.inheritsLoose),
            (r = o.initializerDefineProperty),
            (t = o.assertThisInitialized);
        },
        function (o) {
          (u = o.cclegacy), (i = o._decorator), (l = o.AudioClip);
        },
        function (o) {
          c = o.plantSound;
        },
        function (o) {
          a = o.sounds;
        },
      ],
      execute: function () {
        var s, d, p, f, S, y, h;
        u._RF.push({}, '7506bWbU51J5oF21T6E1YSd', 'sunflowerSound', void 0);
        var b = i.ccclass,
          v = i.property;
        o(
          'sunflowerSound',
          ((s = b('sunflowerSound')),
          (d = v(l)),
          (p = v(l)),
          s(
            ((y = n(
              (S = (function (o) {
                function n() {
                  for (var n, e = arguments.length, u = new Array(e), i = 0; i < e; i++) u[i] = arguments[i];
                  return (
                    (n = o.call.apply(o, [this].concat(u)) || this), r(n, 'foodSound', y, t(n)), r(n, 'produceSound', h, t(n)), n
                  );
                }
                e(n, o);
                var u = n.prototype;
                return (
                  (u.playFoodSound = function () {
                    this.playOneShot(this.foodSound);
                  }),
                  (u.playProduceSound = function () {
                    a.play(this.produceSound, 1, 0.2);
                  }),
                  n
                );
              })(c)).prototype,
              'foodSound',
              [d],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (h = n(S.prototype, 'produceSound', [p], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (f = S))
          ) || f)
        );
        u._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/SunShroom.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Sunflower.ts', './sunShroomSound.ts'],
  function (t) {
    var o, n, i, e, r, s, a, h, l, u;
    return {
      setters: [
        function (t) {
          (o = t.applyDecoratedDescriptor),
            (n = t.inheritsLoose),
            (i = t.initializerDefineProperty),
            (e = t.assertThisInitialized);
        },
        function (t) {
          (r = t.cclegacy), (s = t._decorator), (a = t.dragonBones), (h = t.Vec3);
        },
        function (t) {
          l = t.SunflowerPlant;
        },
        function (t) {
          u = t.sunShroomSound;
        },
      ],
      execute: function () {
        var c, d, m, S, p;
        r._RF.push({}, '6fd60koRUVMwqjBq2Zaw4u+', 'SunShroom', void 0);
        var g = s.ccclass,
          w = s.property;
        t(
          'SunShroomPlant',
          ((c = g('SunShroom')),
          (d = w(Number)),
          c(
            ((p = o(
              (S = (function (t) {
                function o() {
                  for (var o, n = arguments.length, r = new Array(n), s = 0; s < n; s++) r[s] = arguments[s];
                  return (
                    (o = t.call.apply(t, [this].concat(r)) || this),
                    i(o, 'growthInterval', p, e(o)),
                    (o.growthCountdown = 0),
                    (o.growthStage = 0),
                    (o.shouldScale = 0.3),
                    (o.currentScale = 0.3),
                    (o.orgWorldScale = 0),
                    (o.produceAnm = 'Produce'),
                    (o.step = void 0),
                    o
                  );
                }
                n(o, t);
                var r = o.prototype;
                return (
                  (r.specialPlantFood = function () {
                    var t = this;
                    (this.busy = 1 / 0),
                      this.growthStage >= 2
                        ? (this.anmControl.playAnimation('Food', 1), this.getComponent(u).playFoodSound())
                        : ((this.growthStage = 1),
                          this.grow(),
                          this.anmControl.body.once(
                            a.EventObject.COMPLETE,
                            function () {
                              t.anmControl.playAnimation('Food', 1), t.getComponent(u).playFoodSound();
                            },
                            this
                          ));
                  }),
                  (r.specialPlantFoodEnd = function () {
                    (this.producing = !1), (this.busy = 23.5 + 1.5 * Math.random());
                  }),
                  (r.specialPlantOnEnable = function () {
                    (this.orgWorldScale = this.body.worldScale.x),
                      (this.shouldScale = 0.6 * this.orgWorldScale),
                      (this.currentScale = this.shouldScale),
                      (this.producing = !1),
                      (this.growthCountdown = 18),
                      (this.busy = 5 + 5 * Math.random()),
                      (this.growthStage = 0),
                      (this.sunValue = 25),
                      (this.produceAnm = 'Produce_Small'),
                      (this.anmControl.IdleAnim = 'Idle_Small'),
                      (this.anmControl.RandomAnim = ['Random_Small']),
                      this.anmControl.playRandom(),
                      (this.body.worldScale = new h(this.currentScale, this.currentScale, this.currentScale));
                  }),
                  (r.animationListener = function (t) {
                    'Produce' == t.name
                      ? this._produce()
                      : 'ProduceFood' == t.name
                      ? (this._produce(), this._produce(), this._produce())
                      : 'foodEnd' == t.name && this.foodEnd();
                  }),
                  (r.playProduceAnimation = function () {
                    (this.producing = !0),
                      (this.busy = 23.5 + 1.5 * Math.random()),
                      this.anmControl.playAnimation(this.produceAnm, 1, 0.1),
                      this.getComponent(u).playProduceSound();
                  }),
                  (r.grow = function () {
                    this.getComponent(u).playGrowSound(),
                      this.anmControl.playAnimation('Grow', 1),
                      (this.growthCountdown = 54),
                      this.growthStage++,
                      0 == this.growthStage
                        ? ((this.shouldScale = 0.6 * this.orgWorldScale),
                          (this.anmControl.IdleAnim = 'Idle_Small'),
                          (this.anmControl.RandomAnim = ['Random_Small']),
                          (this.produceAnm = 'Produce_Small'),
                          (this.sunValue = 25))
                        : 1 == this.growthStage
                        ? ((this.shouldScale = 0.8 * this.orgWorldScale),
                          (this.anmControl.IdleAnim = 'Idle_Mid'),
                          (this.anmControl.RandomAnim = ['Random_Mid']),
                          (this.produceAnm = 'Produce_Mid'),
                          (this.sunValue = 50))
                        : ((this.shouldScale = 1 * this.orgWorldScale),
                          (this.anmControl.IdleAnim = 'Idle'),
                          (this.anmControl.RandomAnim = ['Random']),
                          (this.produceAnm = 'Produce'),
                          (this.sunValue = 75));
                  }),
                  (r.specialPlantUpdate = function (t) {
                    if (
                      (this.busy > 0 && (this.busy -= t),
                      this.busy <= 0 && this.playProduceAnimation(),
                      this.growthCountdown > 0 && this.growthStage < 2 && (this.growthCountdown -= t),
                      this.growthCountdown <= 0 &&
                        ((this.growthCountdown = 0), !this.producing && this.growthStage < 2 && this.grow()),
                      this.currentScale != this.shouldScale)
                    ) {
                      var o = this.shouldScale - this.currentScale;
                      0 == this.step && (this.step = o / 60),
                        (this.currentScale += this.step * t * 60),
                        o * this.step < 0 && (this.currentScale = this.shouldScale);
                    } else this.step = 0;
                    this.body.worldScale.x != this.shouldScale &&
                      (this.body.worldScale = new h(this.currentScale, this.currentScale, this.currentScale));
                  }),
                  o
                );
              })(l)).prototype,
              'growthInterval',
              [d],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 30;
                },
              }
            )),
            (m = S))
          ) || m)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/sunShroomSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './SoundsController.ts', './NodePools.ts'],
  function (o) {
    var n, e, t, r, u, i, a, l, d, c, p;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (e = o.inheritsLoose),
            (t = o.initializerDefineProperty),
            (r = o.assertThisInitialized);
        },
        function (o) {
          (u = o.cclegacy), (i = o._decorator), (a = o.AudioClip), (l = o.AudioSource), (d = o.Component);
        },
        function (o) {
          c = o.SoundFXController;
        },
        function (o) {
          p = o.ArrayGet;
        },
      ],
      execute: function () {
        var s, S, f, h, m, y, g, b, C;
        u._RF.push({}, 'f1c7febNfRI54is2sJ2mHuS', 'sunShroomSound', void 0);
        var w = i.ccclass,
          v = i.property;
        o(
          'sunShroomSound',
          ((s = w('sunShroomSound')),
          (S = v([a])),
          (f = v([a])),
          (h = v([a])),
          s(
            ((g = n(
              (y = (function (o) {
                function n() {
                  for (var n, e = arguments.length, u = new Array(e), i = 0; i < e; i++) u[i] = arguments[i];
                  return (
                    (n = o.call.apply(o, [this].concat(u)) || this),
                    t(n, 'growSound', g, r(n)),
                    t(n, 'produceSound', b, r(n)),
                    t(n, 'foodSound', C, r(n)),
                    n
                  );
                }
                e(n, o);
                var u = n.prototype;
                return (
                  (u.onEnable = function () {
                    this.getComponent(l) || this.addComponent(l);
                  }),
                  (u.playGrowSound = function () {
                    this.getComponent(l).playOneShot(p.getRandom(this.growSound), c.SoundFXVolume);
                  }),
                  (u.playProduceSound = function () {
                    this.getComponent(l).playOneShot(p.getRandom(this.produceSound), c.SoundFXVolume);
                  }),
                  (u.playFoodSound = function () {
                    this.getComponent(l).playOneShot(p.getRandom(this.foodSound), c.SoundFXVolume);
                  }),
                  n
                );
              })(d)).prototype,
              'growSound',
              [S],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (b = n(y.prototype, 'produceSound', [f], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (C = n(y.prototype, 'foodSound', [h], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (m = y))
          ) || m)
        );
        u._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/TallNut.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './WallNut.ts', './wallnutSound.ts'],
  function (t) {
    var n, e, a, i, o;
    return {
      setters: [
        function (t) {
          n = t.inheritsLoose;
        },
        function (t) {
          (e = t.cclegacy), (a = t._decorator);
        },
        function (t) {
          i = t.WallNutPlant;
        },
        function (t) {
          o = t.wallnutSound;
        },
      ],
      execute: function () {
        var s;
        e._RF.push({}, '32029KEr/9LPa6AKkS+xB/b', 'TallNut', void 0);
        var l = a.ccclass;
        a.property,
          t(
            'TallNutPlant',
            l('TallNutPlant')(
              (s = (function (t) {
                function e() {
                  return t.apply(this, arguments) || this;
                }
                n(e, t);
                var a = e.prototype;
                return (
                  (a.specialPlantFood = function (t) {
                    this.getComponent(o).playFoodSound(),
                      this.setArmor(0),
                      (this.armorHealth = this.armorToughness),
                      (this.foodable = !1),
                      this.foodEnd(),
                      this.setAnimation(0);
                  }),
                  (a.setAnimation = function (t) {
                    void 0 === t && (t = 0), (this.hurtStage = t);
                    var n,
                      e = this.anmControl;
                    switch (t) {
                      case 1:
                        (e.IdleAnim = 'Idle1'), (this.deathAnm = 'Death1');
                        break;
                      case 2:
                        (e.IdleAnim = 'Idle2'), (this.deathAnm = 'Death2');
                        break;
                      default:
                        (e.IdleAnim = 'Idle0'), (this.deathAnm = 'Death0'), (this.hurtStage = 0);
                    }
                    this.dead || (e.playRandom(), this.replantable() && (null == (n = this.inLnC) || n.readIndex()));
                  }),
                  (a.onDamaged = function (t, n, e) {
                    for (var a = 1; a <= 3; a++)
                      n >= (this.toughness / 3) * a && e <= (this.toughness / 3) * a && this.setAnimation(3 - a);
                  }),
                  (a.animationListener = function (t) {}),
                  e
                );
              })(i))
            ) || s
          );
        e._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/testScene.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts'], function (i) {
  var n, t, e, a, o, s, l, r, h, d, p, m, u, c, y, g, S, w;
  return {
    setters: [
      function (i) {
        (n = i.applyDecoratedDescriptor), (t = i.inheritsLoose), (e = i.initializerDefineProperty), (a = i.assertThisInitialized);
      },
      function (i) {
        (o = i.cclegacy),
          (s = i._decorator),
          (l = i.dragonBones),
          (r = i.Label),
          (h = i.AudioClip),
          (d = i.EventMouse),
          (p = i.Color),
          (m = i.AudioSource),
          (u = i.input),
          (c = i.Input),
          (y = i.KeyCode),
          (g = i.Node),
          (S = i.Component);
      },
      function (i) {
        w = i.ArrayGet;
      },
    ],
    execute: function () {
      var A, f, F, E, O, b, _, C, D, P, I, L, W, T, v, z, R, N, H, k, G, M, x;
      o._RF.push({}, '1d57cs/IpdP/J12KO9nu/kj', 'testScene', void 0);
      var j = s.ccclass,
        K = s.property,
        B = function (i, n, t, e) {
          void 0 === e && (e = !1),
            (this.animationName = ''),
            (this.playTime = 3),
            (this.animation = ''),
            (this.lit = !1),
            (this.animationName = n),
            (this.animation = i),
            (this.playTime = t),
            (this.lit = e);
        };
      i(
        'testScene',
        ((A = j('testScene')),
        (f = K(l.ArmatureDisplay)),
        (F = K(l.ArmatureDisplay)),
        (E = K(l.ArmatureDisplay)),
        (O = K(l.ArmatureDisplay)),
        (b = K(r)),
        (_ = K([h])),
        (C = K([h])),
        (D = K(h)),
        (P = K(h)),
        (I = K(h)),
        A(
          ((T = n(
            (W = (function (i) {
              function n() {
                for (var n, t = arguments.length, o = new Array(t), s = 0; s < t; s++) o[s] = arguments[s];
                return (
                  ((n = i.call.apply(i, [this].concat(o)) || this).shroomAnimations = [
                    new B('Idle', 'IDLE_1', 2),
                    new B('Rand1', 'IDLE_2', 2),
                    new B('Rand2', 'IDLE_3', 3),
                    new B('Freeze', 'ATTACK', 3),
                    new B('Sleep', 'COOLDOWN', 3),
                    new B('Wake', 'RECHARGED', 3),
                    new B('Food', 'PLANT_FOOD', 3),
                    new B('Idle', 'IDLE_1_PF', 2, !0),
                    new B('Rand1', 'IDLE_2_PF', 2, !0),
                    new B('Rand2', 'IDLE_3_PF', 3, !0),
                    new B('Freeze', 'ATTACK_PF', 3, !0),
                  ]),
                  (n.fogAnimations = [
                    new B('Spawn', 'FOG_SPAWN', 1),
                    new B('Idle', 'FOG_LOOP', 3),
                    new B('Fade', 'FOG_FADE', 1),
                    new B('Spawn', 'FOG_SPAWN_PF', 1, !0),
                    new B('Idle', 'FOG_LOOP_PF', 3, !0),
                    new B('Fade', 'FOG_FADE_PF', 1, !0),
                  ]),
                  (n.showcaseAnimations = [
                    new B('Idle', 'SHOWCASE', 2),
                    new B('Rand1', 'SHOWCASE', 1),
                    new B('Idle', 'SHOWCASE', 2),
                    new B('Rand2', 'SHOWCASE', 1),
                    new B('Rand1', 'SHOWCASE', 1),
                    new B('Freeze', 'SHOWCASE', 1),
                    new B('Sleep', 'SHOWCASE', 3),
                    new B('Wake', 'SHOWCASE', 1),
                    new B('Food', 'SHOWCASE', 1),
                    new B('Idle', 'SHOWCASE', 1, !0),
                    new B('Rand1', 'SHOWCASE', 1, !0),
                    new B('Rand2', 'SHOWCASE', 1, !0),
                    new B('Freeze', 'SHOWCASE', 1, !0),
                    new B('Food', 'SHOWCASE', 1, !0),
                    new B('Water', 'WATERING', 4),
                    new B('Water', 'WATERING', 4, !0),
                  ]),
                  e(n, 'displayPlant', T, a(n)),
                  e(n, 'displayFog', v, a(n)),
                  e(n, 'displayFog1', z, a(n)),
                  e(n, 'displayFog2', R, a(n)),
                  (n.animationStage = 0),
                  e(n, 'displayLabel', N, a(n)),
                  e(n, 'freezeSound', H, a(n)),
                  e(n, 'steadySound', k, a(n)),
                  e(n, 'wakeSound', G, a(n)),
                  e(n, 'wakeSound2', M, a(n)),
                  e(n, 'tornadoSound', x, a(n)),
                  n
                );
              }
              t(n, i);
              var o = n.prototype;
              return (
                (o.onMouseDown = function (i) {
                  i.getButton() == d.BUTTON_MIDDLE && ((this.animationStage = 0), this.switchAnimation());
                }),
                (o.switchAnimation = function () {
                  if (this.animationStage < this.shroomAnimations.length) {
                    0 == this.animationStage &&
                      ((this.displayPlant.color = new p(255, 255, 255, 255)),
                      (this.displayFog.color = new p(255, 255, 255, 0)),
                      (this.displayFog1.color = new p(255, 255, 255, 0)),
                      (this.displayFog2.color = new p(255, 255, 255, 0)));
                    var i = this.shroomAnimations[this.animationStage];
                    this.displayPlant.playAnimation(i.animation, i.playTime),
                      (this.displayLabel.string = i.animationName),
                      this.displayPlant
                        .armature()
                        .getSlots()
                        .forEach(function (n) {
                          n.name.includes('_LIT') && n._setDisplayIndex(i.lit ? 0 : -1);
                        });
                  } else if (this.animationStage < this.fogAnimations.length + this.shroomAnimations.length) {
                    this.animationStage == this.shroomAnimations.length &&
                      ((this.displayPlant.color = new p(255, 255, 255, 0)),
                      (this.displayFog.color = new p(255, 255, 255, 255)),
                      (this.displayFog1.color = new p(255, 255, 255, 0)),
                      (this.displayFog2.color = new p(255, 255, 255, 0)));
                    var n = this.fogAnimations[this.animationStage - this.shroomAnimations.length];
                    this.displayFog.playAnimation(n.animation, n.playTime),
                      (this.displayLabel.string = n.animationName),
                      this.displayFog
                        .armature()
                        .getSlots()
                        .forEach(function (i) {
                          i.name.includes('falling_snow') && i._setDisplayIndex(n.lit ? 0 : -1);
                        });
                  } else {
                    if (
                      !(
                        this.animationStage <
                        this.fogAnimations.length + this.shroomAnimations.length + this.showcaseAnimations.length
                      )
                    )
                      return (this.animationStage = 0), void this.switchAnimation();
                    this.animationStage == this.shroomAnimations.length + this.fogAnimations.length &&
                      ((this.displayPlant.color = new p(255, 255, 255, 255)),
                      (this.displayFog.color = new p(255, 255, 255, 0)),
                      (this.displayFog1.color = new p(255, 255, 255, 255)),
                      (this.displayFog2.color = new p(255, 255, 255, 255)));
                    var t = this.animationStage - this.shroomAnimations.length - this.fogAnimations.length;
                    0 == t || (this.showcaseAnimations[t].lit && !this.showcaseAnimations[t - 1].lit)
                      ? (this.displayFog1.playAnimation('Spawn', 1), this.displayFog2.playAnimation('Spawn', 1))
                      : (t == this.showcaseAnimations.length - 1 ||
                          (!this.showcaseAnimations[t].lit && this.showcaseAnimations[t + 1].lit)) &&
                        (this.displayFog1.playAnimation('Fade', 1), this.displayFog2.playAnimation('Fade', 1));
                    var e = this.showcaseAnimations[t];
                    this.displayPlant.playAnimation(e.animation, e.playTime),
                      (this.displayLabel.string = e.animationName),
                      this.displayFog1
                        .armature()
                        .getSlots()
                        .forEach(function (i) {
                          i.name.includes('falling_snow') && i._setDisplayIndex(e.lit ? 0 : -1);
                        }),
                      this.displayFog2
                        .armature()
                        .getSlots()
                        .forEach(function (i) {
                          i.name.includes('falling_snow') && i._setDisplayIndex(e.lit ? 0 : -1);
                        }),
                      this.displayPlant
                        .armature()
                        .getSlots()
                        .forEach(function (i) {
                          i.name.includes('_LIT') && i._setDisplayIndex(e.lit ? 0 : -1);
                        });
                  }
                  this.animationStage++;
                }),
                (o.animationListener = function (i) {
                  'freezeSound' == i.name
                    ? this.getComponent(m).playOneShot(w.getRandom(this.freezeSound))
                    : 'steadySound' == i.name
                    ? this.getComponent(m).playOneShot(w.getRandom(this.steadySound))
                    : 'tornadoSound' == i.name
                    ? (this.displayPlant
                        .armature()
                        .getSlots()
                        .forEach(function (i) {
                          i.name.includes('_LIT') && i._setDisplayIndex(0);
                        }),
                      this.getComponent(m).playOneShot(this.tornadoSound))
                    : 'wakeSound' == i.name &&
                      (this.getComponent(m).playOneShot(this.wakeSound), this.getComponent(m).playOneShot(this.wakeSound2));
                }),
                (o.start = function () {
                  var i = this;
                  this.addComponent(m),
                    u.on(
                      c.EventType.KEY_DOWN,
                      function (n) {
                        n.keyCode == y.ENTER && ((i.animationStage = 0), i.switchAnimation());
                      },
                      this
                    ),
                    this.node.on(g.EventType.MOUSE_DOWN, this.onMouseDown, this),
                    this.displayPlant.on(l.EventObject.COMPLETE, this.switchAnimation, this),
                    this.displayPlant.on(l.EventObject.FRAME_EVENT, this.animationListener, this),
                    this.displayFog.on(l.EventObject.COMPLETE, this.switchAnimation, this);
                }),
                n
              );
            })(S)).prototype,
            'displayPlant',
            [f],
            { configurable: !0, enumerable: !0, writable: !0, initializer: null }
          )),
          (v = n(W.prototype, 'displayFog', [F], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
          (z = n(W.prototype, 'displayFog1', [E], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
          (R = n(W.prototype, 'displayFog2', [O], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
          (N = n(W.prototype, 'displayLabel', [b], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
          (H = n(W.prototype, 'freezeSound', [_], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return [];
            },
          })),
          (k = n(W.prototype, 'steadySound', [C], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return [];
            },
          })),
          (G = n(W.prototype, 'wakeSound', [D], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return null;
            },
          })),
          (M = n(W.prototype, 'wakeSound2', [P], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return null;
            },
          })),
          (x = n(W.prototype, 'tornadoSound', [I], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return null;
            },
          })),
          (L = W))
        ) || L)
      );
      o._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/ThreePeater.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Peashooter.ts',
    './peaShooterSound.ts',
    './NodePools.ts',
    './Character.ts',
    './commonShot.ts',
    './Square.ts',
    './CharacterManager.ts',
  ],
  function (o) {
    var t, n, e, a, i, s, r, h, c, u, d, l, L, p;
    return {
      setters: [
        function (o) {
          t = o.inheritsLoose;
        },
        function (o) {
          (n = o.cclegacy), (e = o._decorator), (a = o.Vec2), (i = o.Vec3), (s = o.HALF_PI);
        },
        function (o) {
          (r = o.peaShooter), (h = o.PeashooterPlant);
        },
        function (o) {
          c = o.peaShooterSound;
        },
        function (o) {
          u = o.NodePools;
        },
        function (o) {
          d = o.CharacterType;
        },
        function (o) {
          l = o.commonShot;
        },
        function (o) {
          L = o.Square;
        },
        function (o) {
          p = o.Rectangle;
        },
      ],
      execute: function () {
        var f;
        n._RF.push({}, 'f6610F4CzZNQrwBOcJg3XSi', 'ThreePeater', void 0);
        var P = e.ccclass;
        e.property,
          o(
            'ThreePeaterPlant',
            P('ThreePeater')(
              (f = (function (o) {
                function n() {
                  return o.apply(this, arguments) || this;
                }
                t(n, o);
                var e = n.prototype;
                return (
                  (e._shoot3 = function (o, t, n) {
                    void 0 === o && (o = 4), void 0 === t && (t = new a(15, 0)), void 0 === n && (n = this.pea);
                    var e = u.instantiatePooly(n),
                      s = this.inLane.prjLayer;
                    if (e) {
                      var h = r
                        .shootOnePea(
                          e,
                          new i(this.peaSpawnpoint.getWorldPosition().x, this.inLnC.plantPoint.worldPosition.y, 0),
                          Math.max(1, this.peaSpawnpoint.getWorldPosition().y - this.inLnC.plantPoint.worldPosition.y),
                          s,
                          t,
                          d.zombie
                        )
                        .getComponent(l);
                      this.inLnC.havePeaBuff && h.addPeaBuff(),
                        (0 != o && 2 != o) ||
                          (0 == o ? h.setLockLane(this.inLane.UpperLane) : 2 == o && h.setLockLane(this.inLane.LowerLane),
                          (h.linearVelocity = new a(15, 17 * (1 - o))),
                          (h.deceleration = new a(0, 0.9 * (o - 1))));
                    }
                  }),
                  (e.setDetecter = function () {
                    this.detector = p.createRectangleNodeSide(
                      this.inLnC.node,
                      L.SquareDisW * (9 - this.inLnC.cIndex),
                      3 * L.SquareDisH
                    );
                  }),
                  (e.detectEnemy = function () {
                    for (
                      var o = this.inLane
                          .zombiePool()
                          .concat(this.inLane.UpperLane.zombiePool(), this.inLane.LowerLane.zombiePool()),
                        t = this.inLane.tombPool().concat(this.inLane.UpperLane.tombPool(), this.inLane.LowerLane.tombPool()),
                        n = 0;
                      n < o.length;
                      n++
                    )
                      if (this.detector.judgeCrossRec(o[n].bodyRec)) return !0;
                    for (var e = 0; e < t.length; e++) if (t[e].inLnC.cIndex > this.inLnC.cIndex) return !0;
                    return !1;
                  }),
                  (e.animationListener = function (o) {
                    'shootM' == o.name && (this._shoot3(1), this.getComponent(c).playShootSound()),
                      'shootU' == o.name && 0 != this.inLane.LaneIndex && this._shoot3(0),
                      'shootD' == o.name && 5 != this.inLane.LaneIndex && this._shoot3(2);
                  }),
                  (e.specialPlantFood = function () {
                    var o = this;
                    this.isGatling() && this.upgrade(),
                      this.anmControl.playAnimation('Food', 1 / 0),
                      this.getComponent(c).playFood(),
                      (this.busy = 1 / 0);
                    var t = 0;
                    this.schedule(
                      function () {
                        var n =
                          (2 * s * (o.foodPeaMaxCount / 2 - Math.abs((t % o.foodPeaMaxCount) - o.foodPeaMaxCount / 2))) /
                          o.foodPeaMaxCount;
                        o._shoot3(3, new a(15 * Math.cos(n), 15 * Math.sin(n))),
                          o._shoot3(3, new a(15 * Math.cos(n), -15 * Math.sin(n))),
                          o._shoot3(3),
                          ++t > o.foodPeaMaxCount && o.foodEnd();
                      },
                      2 / this.foodPeaMaxCount,
                      this.foodPeaMaxCount,
                      0.01
                    );
                  }),
                  (e._shootPeaAnimation = function () {
                    var o = 'Shoot111';
                    0 == this.inLane.LaneIndex && (o = 'Shoot110'),
                      4 == this.inLane.LaneIndex && (o = 'Shoot011'),
                      this.anmControl.playAnimation(o, 1, 0.1, Math.max(1.35 / this.shootInterval, 1));
                  }),
                  n
                );
              })(h))
            ) || f
          );
        n._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Tide.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Square.ts',
    './NodePools.ts',
    './SoundsController.ts',
    './LnC.ts',
    './FrontYard.ts',
  ],
  function (t) {
    var e, n, i, o, r, s, a, u, l, h, d, c, p, f, b, m, g, v, y, S, w;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor),
            (n = t.inheritsLoose),
            (i = t.initializerDefineProperty),
            (o = t.assertThisInitialized);
        },
        function (t) {
          (r = t.cclegacy),
            (s = t._decorator),
            (a = t.Prefab),
            (u = t.AudioClip),
            (l = t.dragonBones),
            (h = t.AudioSource),
            (d = t.Vec3),
            (c = t.instantiate),
            (p = t.tween),
            (f = t.Color),
            (b = t.Component);
        },
        function (t) {
          m = t.Square;
        },
        function (t) {
          g = t.ArrayGet;
        },
        function (t) {
          v = t.SoundFXController;
        },
        function (t) {
          (y = t.LnC), (S = t.TileType);
        },
        function (t) {
          w = t.FrontYard;
        },
      ],
      execute: function () {
        var C, P, q, T, A, D, L, W, x, F, z;
        r._RF.push({}, 'c9fecsnRNZLHZrYMy0mtb8t', 'Tide', void 0);
        var M = s.ccclass,
          N = s.property,
          X = function (t, e) {
            (this.master = void 0), (this.node = void 0), (this.node = t), (this.master = e);
          };
        t(
          'Tide',
          ((C = M('Tide')),
          (P = N(a)),
          (q = N(u)),
          (T = N(u)),
          (A = N([u])),
          C(
            ((W = e(
              (L = (function (t) {
                function e() {
                  for (var e, n = arguments.length, r = new Array(n), s = 0; s < n; s++) r[s] = arguments[s];
                  return (
                    ((e = t.call.apply(t, [this].concat(r)) || this).blueSquares = []),
                    i(e, 'blue', W, o(e)),
                    (e.db = void 0),
                    (e.tweening = void 0),
                    (e.moving = !1),
                    (e.pos = 9),
                    i(e, 'pullSound', x, o(e)),
                    i(e, 'pushSound', F, o(e)),
                    i(e, 'ambience', z, o(e)),
                    (e.busyAmb = 0),
                    (e.leftestX = 0),
                    e
                  );
                }
                n(e, t);
                var r = e.prototype;
                return (
                  (r.onLoad = function () {
                    (this.db = this.node.getChildByName('Main').getComponent(l.ArmatureDisplay)),
                      this.getComponent(h) || this.addComponent(h);
                  }),
                  (r.standardize = function (t) {
                    void 0 === t && (t = 9), (this.leftestX = m.getSquareWorldPosition(0, 0, 0).x);
                    var e = m.getSquareWorldPosition(2, t - 1, 1);
                    (this.pos = t), (this.node.worldPosition = new d(e.x, e.y));
                    for (var n = 0; n < 5; n++)
                      for (var i = 0; i < 9; i++)
                        if ((n + i) % 2 == 0) {
                          var o = c(this.blue);
                          o.parent = this.node.getChildByName('BlueSquares');
                          var r = new X(o, m.getSquare(n, i)),
                            s = m.getSquareWorldPosition(n, i);
                          (r.node.worldPosition = new d(s.x, s.y)), this.blueSquares.push(r);
                        }
                    this.onPosChange(t - 1, t);
                  }),
                  (r.pushTide = function (t) {
                    var e = this;
                    if (!(this.moving || t <= 0)) {
                      this.pos - t < 0 && (t = this.pos), (this.moving = !0);
                      var n = p(this.node)
                        .by(3, { worldPosition: new d(-t * m.SquareDisW, 0, 0) }, { easing: 'cubicInOut' })
                        .call(function () {
                          e.moving = !1;
                        })
                        .start();
                      (this.tweening = n), this.getComponent(h).playOneShot(this.pushSound, v.SoundFXVolume);
                    }
                  }),
                  (r.pullTide = function (t) {
                    var e = this;
                    if (!(this.moving || t <= 0)) {
                      this.pos + t > 9 && (t = 9 - this.pos), (this.moving = !0);
                      var n = p(this.node)
                        .by(3, { worldPosition: new d(t * m.SquareDisW, 0, 0) }, { easing: 'cubicInOut' })
                        .call(function () {
                          e.moving = !1;
                        })
                        .start();
                      (this.tweening = n), this.getComponent(h).playOneShot(this.pullSound, v.SoundFXVolume);
                    }
                  }),
                  (r.moveTide = function (t) {
                    var e = t;
                    t > 9 && (e = 9), t < 0 && (e = 0);
                    var n = e - this.pos;
                    n < 0 && this.pushTide(-n), n > 0 && this.pullTide(n);
                  }),
                  (r.onDisable = function () {
                    this.tweening.stop();
                  }),
                  (r.playAmbience = function () {
                    if ((this.busyAmb > 0 && this.busyAmb--, this.busyAmb <= 0 && ((this.busyAmb = 0), this.ambience.length))) {
                      var t = 5 + Math.round(5 * Math.random());
                      (this.busyAmb = 60 * t), this.getComponent(h).playOneShot(g.getRandom(this.ambience), v.SoundFXVolume);
                    }
                  }),
                  (r.onPosChange = function (t, e) {
                    for (var n = e; n <= 9; n++)
                      for (var i = 0; i < 5; i++) {
                        var o;
                        null == (o = m.getSquare(i, n)) || null == (o = o.getComponent(y)) || o.setTileType(S.water);
                      }
                    for (var r = 0; r < e; r++)
                      for (var s = 0; s < 5; s++) {
                        var a;
                        null == (a = m.getSquare(s, r)) ||
                          null == (a = a.getComponent(y)) ||
                          a.setTileType(w.currentLawn.oldSquaresTypes[s][r]);
                      }
                  }),
                  (r.judgePos = function () {
                    for (
                      var t = this.pos, e = 9, n = this.node.worldPosition.x, i = m.getSquareWorldPosition(0, 0).x, o = 0;
                      o < 9;
                      o++
                    ) {
                      var r = i + m.SquareDisW * (o - 1),
                        s = i + m.SquareDisW * o;
                      if (r <= n && s > n) {
                        e = o;
                        break;
                      }
                    }
                    (this.pos = e), t != e && this.onPosChange(t, e);
                  }),
                  (r.update = function (t) {
                    var e = this,
                      n = this.db.color,
                      i = this.db.customMaterial,
                      o = i.passes[0].getHandle('chillColor');
                    i.passes[0].setUniform(o, w.currentLawn.atNight ? 1 : 0);
                    var r = w.currentLawn.atNight ? 177 : 255;
                    (this.db.color = n = new f(r, r, 255, 255)),
                      this.blueSquares.forEach(function (t) {
                        var i;
                        t.node.worldPosition = null == (i = t.master) ? void 0 : i.worldPosition;
                        var o = (t.node.worldPosition.x - e.node.worldPosition.x) / m.SquareDisW,
                          r = 255 * (o < 0 ? 0 : Math.min(1, o / 2));
                        t.node.getComponent(l.ArmatureDisplay).color = new f(n.r, n.g, n.b, r);
                      }),
                      this.playAmbience(),
                      this.judgePos();
                  }),
                  e
                );
              })(b)).prototype,
              'blue',
              [P],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (x = e(L.prototype, 'pullSound', [q], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (F = e(L.prototype, 'pushSound', [T], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (z = e(L.prototype, 'ambience', [A], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (D = L))
          ) || D)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Tomb.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Materials.ts',
    './NodePools.ts',
    './CharacterManager.ts',
    './SoundRescourses.ts',
    './Particles.ts',
    './Character.ts',
  ],
  function (t) {
    var e, i, n, a, o, s, l, r, h, d, u, c, g, b, p, y, m, f, S, P, v;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor),
            (i = t.inheritsLoose),
            (n = t.initializerDefineProperty),
            (a = t.assertThisInitialized),
            (o = t.createClass);
        },
        function (t) {
          (s = t.cclegacy),
            (l = t._decorator),
            (r = t.Prefab),
            (h = t.CCFloat),
            (d = t.Size),
            (u = t.Vec2),
            (c = t.dragonBones),
            (g = t.Material),
            (b = t.Color);
        },
        function (t) {
          p = t.materialRes;
        },
        function (t) {
          y = t.NodePools;
        },
        function (t) {
          (m = t.Rectangle), (f = t.TombPool);
        },
        function (t) {
          S = t.sounds;
        },
        function (t) {
          P = t.particle;
        },
        function (t) {
          v = t.Character;
        },
      ],
      execute: function () {
        var C, w, L, R, T, D, z, _, A, B, M;
        s._RF.push({}, 'f6bb0i5zL9AkK46tHIhjk6U', 'Tomb', void 0);
        var I = l.ccclass,
          N = l.property;
        t(
          'Tomb',
          ((C = I('Tomb')),
          (w = N(r)),
          (L = N(h)),
          (R = N(Boolean)),
          (T = N(d)),
          C(
            ((_ = e(
              (z = (function (t) {
                function e() {
                  for (var e, i = arguments.length, o = new Array(i), s = 0; s < i; s++) o[s] = arguments[s];
                  return (
                    (e = t.call.apply(t, [this].concat(o)) || this),
                    n(e, 'damageParticle', _, a(e)),
                    (e.health = 0),
                    n(e, 'toughness', A, a(e)),
                    (e.hurting = 0),
                    (e.body = null),
                    (e.stage = 0),
                    n(e, 'bustable', B, a(e)),
                    (e.dead = !1),
                    n(e, 'bodyRecSize', M, a(e)),
                    (e.bodyRec = m.createRectangleSide(new u(1e5, 1e5), 0, 0)),
                    (e._hidden = !1),
                    (e.material = void 0),
                    e
                  );
                }
                i(e, t);
                var s = e.prototype;
                return (
                  (s.onDamaged = function (t, e) {
                    if (e <= 0) this.die();
                    else {
                      var i,
                        n = 0;
                      if (
                        (e >= this.toughness
                          ? (n = 0)
                          : e >= (this.toughness / 4) * 3
                          ? (n = 1)
                          : e >= this.toughness / 2
                          ? (n = 2)
                          : e >= this.toughness / 4
                          ? (n = 3)
                          : e >= 0 && (n = 4),
                        n != this.stage)
                      )
                        (this.stage = n),
                          n > 1 && this.playParticle(n - 1),
                          null == (i = this.body.armature().getSlot('MAIN')) || i._setDisplayIndex(n);
                    }
                  }),
                  (s.playSpawnParticle = function () {
                    var t = y.instantiatePooly(P.dirtSpawn());
                    (t.parent = this.node.parent), (t.worldPosition = this.node.worldPosition), S.playDirtRise(!1);
                  }),
                  (s.playParticle = function (t) {
                    var e = y.instantiatePooly(this.damageParticle);
                    (e.parent = this.node.parent),
                      (e.worldPosition = this.node.worldPosition),
                      (e.worldScale = this.node.worldScale),
                      e.getComponent(c.ArmatureDisplay).playAnimation('Play' + t.toString()),
                      S.playTombBreak();
                  }),
                  (s.die = function (t) {
                    var e;
                    void 0 === t && (t = !0),
                      t && this.playParticle(4),
                      (this.dead = !0),
                      f.deleteTomb(this),
                      null == (e = this.inLane) || e.deleteTomb(this),
                      (this.inLane = null),
                      this.inLnC && ((this.inLnC.tombStone = null), this.inLnC.readIndex(), (this.inLnC = null)),
                      y.destroyPooly(this.node);
                  }),
                  (s.characterOnLoad = function () {
                    this.body = this.node.getChildByName('Body').getComponent(c.ArmatureDisplay);
                    var t = new g();
                    t.initialize({ effectAsset: p.addColorEffect, defines: { USE_TEXTURE: !0 } }),
                      (this.material = t),
                      this.material.setProperty('chillColor', 0);
                  }),
                  (s.characterOnEnable = function () {
                    (this.dead = !1),
                      f.registerTomb(this),
                      (this._hidden = !1),
                      this.body.playAnimation('Spawn'),
                      (this.health = this.toughness),
                      (this.hurting = 0),
                      (this.stage = -1),
                      this.onDamaged(this.toughness, this.toughness);
                  }),
                  (s.dealDamage = function (t) {
                    var e = this.health + 0;
                    (this.health -= t), (this.hurting = 10), this.onDamaged(e, this.health);
                  }),
                  (s.update = function (t) {
                    this.hurting > 0 && (this.hurting -= 60 * t), this.shouldMaterial();
                  }),
                  (s.setBodyRec = function () {
                    this._hidden || this.health <= 0
                      ? (this.bodyRec = m.createRectangleSide(new u(1e5, 1e5), 0, 0))
                      : (this.bodyRec = m.createRectangleNodeSide(
                          this.node,
                          this.bodyRecSize.height,
                          this.bodyRecSize.width,
                          90
                        ));
                  }),
                  (s.onLnCSet = function (t, e) {
                    var i, n;
                    (null != t && t.tombStone && (t.tombStone = null),
                    (e.tombStone = this),
                    (null == t ? void 0 : t.inLane) != (null == e ? void 0 : e.inLane)) &&
                      (null == t || null == (i = t.inLane) || i.deleteTomb(this),
                      null == e || null == (n = e.inLane) || n.addTomb(this));
                    this.setBodyRec();
                  }),
                  (s.shouldMaterial = function () {
                    var t = new b(0, 0, 0, 255);
                    this.hurting > 0 && ((t.r += 10 * this.hurting), (t.g += 10 * this.hurting), (t.b += 10 * this.hurting));
                    var e = this.material.passes[0].getHandle('addColor');
                    this.material.passes[0].setUniform(e, t), (this.body.customMaterial = this.material);
                  }),
                  (s.characterOnDisable = function () {
                    var t;
                    f.deleteTomb(this),
                      null == (t = this.inLane) || t.deleteTomb(this),
                      (this.inLane = null),
                      this.inLnC && ((this.inLnC.tombStone = null), this.inLnC.readIndex(), (this.inLnC = null));
                  }),
                  o(e, [
                    {
                      key: 'hidden',
                      get: function () {
                        return this._hidden;
                      },
                      set: function (t) {
                        var e;
                        ((this._hidden = t), t)
                          ? null == (e = this.body.armature().getSlot('MAIN')) || e._setDisplayIndex(-1)
                          : ((this.stage = -1), this.onDamaged(this.health, this.health), this.playSpawnParticle());
                        this.setBodyRec();
                      },
                    },
                  ]),
                  e
                );
              })(v)).prototype,
              'damageParticle',
              [w],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (A = e(z.prototype, 'toughness', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 700;
              },
            })),
            (B = e(z.prototype, 'bustable', [R], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !0;
              },
            })),
            (M = e(z.prototype, 'bodyRecSize', [T], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new d(50, 50);
              },
            })),
            (D = z))
          ) || D)
        );
        s._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/tombBone.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './commonShot.ts',
    './Tombs.ts',
    './CharacterManager.ts',
    './CabbagePult.ts',
    './Character.ts',
  ],
  function (n) {
    var t, o, e, r, a, c, i, u;
    return {
      setters: [
        function (n) {
          t = n.inheritsLoose;
        },
        function (n) {
          (o = n.cclegacy), (e = n._decorator);
        },
        function (n) {
          r = n.commonShot;
        },
        function (n) {
          a = n.TombEnum;
        },
        function (n) {
          c = n.Umbrellas;
        },
        function (n) {
          i = n.cabbagePult;
        },
        function (n) {
          u = n.CharacterType;
        },
      ],
      execute: function () {
        var l;
        o._RF.push({}, '1a86fAtX2JEdLclRTAjmPcZ', 'tombBone', void 0);
        var s = e.ccclass;
        e.property,
          n(
            'tombBone',
            s('tombBone')(
              (l = (function (n) {
                function o() {
                  return n.apply(this, arguments) || this;
                }
                return (
                  t(o, n),
                  (o.prototype.specialOnGroundHit = function (n) {
                    var t = this;
                    if (n.isInLawn()) {
                      var o = !1;
                      if (
                        (c.umbrellas.forEach(function (n) {
                          var e, r;
                          !o &&
                            n.detector.judgeInRecNode(t.node) &&
                            ((o = !0),
                            i.lobOneCabbageOnNode(
                              t.node,
                              t.node.worldPosition,
                              0,
                              t.node.parent,
                              t.linearVelocity.x >= 0
                                ? null == (e = t.inLane)
                                  ? void 0
                                  : e.toRight
                                : null == (r = t.inLane)
                                ? void 0
                                : r.toLeft,
                              2,
                              u.default,
                              !0
                            ),
                            n.owner.umbrella());
                        }),
                        o)
                      )
                        return !1;
                      n.addTomb(a.egypt, !0, !0);
                    }
                    return !0;
                  }),
                  o
                );
              })(r))
            ) || l
          );
        o._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/Tombs.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (t) {
  var r, e, n, o, i, u, a, s;
  return {
    setters: [
      function (t) {
        (r = t.applyDecoratedDescriptor), (e = t.inheritsLoose), (n = t.initializerDefineProperty), (o = t.assertThisInitialized);
      },
      function (t) {
        (i = t.cclegacy), (u = t._decorator), (a = t.Prefab), (s = t.Component);
      },
    ],
    execute: function () {
      var c, l, p, y, b;
      i._RF.push({}, 'cb12ei5DPtMULkKKnzbNN6d', 'Tombs', void 0);
      var f = u.ccclass,
        m = u.property,
        d = t(
          'TombEnum',
          (function (t) {
            return (
              (t[(t.tutorial = 0)] = 'tutorial'),
              (t[(t.egypt = 1)] = 'egypt'),
              (t[(t.pirate = 2)] = 'pirate'),
              (t[(t.cowboy = 3)] = 'cowboy'),
              (t[(t.future = 4)] = 'future'),
              (t[(t.dark_normal = 5)] = 'dark_normal'),
              (t[(t.dark_sunny = 6)] = 'dark_sunny'),
              (t[(t.dark_plantfood = 7)] = 'dark_plantfood'),
              t
            );
          })({})
        ),
        g = t(
          'tombs',
          (function () {
            function t() {}
            return (
              (t.getTomb = function (t) {
                return this.res.EgyptTomb;
              }),
              (t.getTombEnumByString = function (t) {
                return null != t && t.includes('(gravestone_egypt@GridItemTypes)') ? d.egypt : d.tutorial;
              }),
              t
            );
          })()
        );
      g.res = void 0;
      t(
        'Tombs',
        ((c = f('Tombs')),
        (l = m(a)),
        c(
          ((b = r(
            (y = (function (t) {
              function r() {
                for (var r, e = arguments.length, i = new Array(e), u = 0; u < e; u++) i[u] = arguments[u];
                return (r = t.call.apply(t, [this].concat(i)) || this), n(r, 'EgyptTomb', b, o(r)), r;
              }
              return (
                e(r, t),
                (r.prototype.onLoad = function () {
                  g.res = this;
                }),
                r
              );
            })(s)).prototype,
            'EgyptTomb',
            [l],
            { configurable: !0, enumerable: !0, writable: !0, initializer: null }
          )),
          (p = y))
        ) || p)
      );
      i._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/Torchwood.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './NodePools.ts',
    './Peashooter.ts',
    './Character.ts',
    './torchWoodSound.ts',
    './CharacterManager.ts',
    './Square.ts',
    './Zombie.ts',
    './GroundFire.ts',
    './Jalapeno.ts',
  ],
  function (e) {
    var n, t, o, i, a, r, l, c, s, d, u, h, f, p, g, m, y, P, C, b, w;
    return {
      setters: [
        function (e) {
          (n = e.applyDecoratedDescriptor),
            (t = e.inheritsLoose),
            (o = e.initializerDefineProperty),
            (i = e.assertThisInitialized);
        },
        function (e) {
          (a = e.cclegacy), (r = e._decorator), (l = e.CCFloat), (c = e.Prefab), (s = e.Vec2), (d = e.Vec3);
        },
        function (e) {
          u = e.Plant;
        },
        function (e) {
          h = e.NodePools;
        },
        function (e) {
          f = e.peaShooter;
        },
        function (e) {
          p = e.CharacterType;
        },
        function (e) {
          g = e.torchWoodSound;
        },
        function (e) {
          m = e.Rectangle;
        },
        function (e) {
          y = e.Square;
        },
        function (e) {
          P = e.zombieDamageType;
        },
        function (e) {
          (C = e.GroundFireColorEnum), (b = e.GroundFireSpreadStyleEnum);
        },
        function (e) {
          w = e.jalapeno;
        },
      ],
      execute: function () {
        var S, v, L, I, z, D, E, F, R, _, O;
        a._RF.push({}, '351b4USk6JLE4y6eM9xWOiD', 'Torchwood', void 0);
        var A = r.ccclass,
          B = r.property;
        e(
          'TorchwoodPlant',
          ((S = A('TorchwoodPlant')),
          (v = B(l)),
          (L = B(l)),
          (I = B(c)),
          (z = B(c)),
          S(
            ((F = n(
              (E = (function (e) {
                function n() {
                  for (var n, t = arguments.length, a = new Array(t), r = 0; r < t; r++) a[r] = arguments[r];
                  return (
                    ((n = e.call.apply(e, [this].concat(a)) || this).ignitedCSs = []),
                    (n.detector = m.createRectangleCenter(new s(), 0, 0)),
                    o(n, 'CD', F, i(n)),
                    o(n, 'damage', R, i(n)),
                    (n.busy = 0),
                    o(n, 'blueParticle', _, i(n)),
                    o(n, 'yellowParticle', O, i(n)),
                    (n.fooded = !1),
                    n
                  );
                }
                t(n, e);
                var a = n.prototype;
                return (
                  (a.ignite = function (e, n) {
                    var t;
                    void 0 === n && (n = !1);
                    var o = !1,
                      i = null;
                    if (!n && e.canBeYellowIgnited && e.yellowIgnited) {
                      var a = h.instantiatePooly(e.yellowIgnited);
                      a.parent = e.node.parent;
                      var r = f.shootOnePea(
                        a,
                        new d(e._worldPositionX, e._worldPositionY),
                        e.height,
                        e.node.parent,
                        new s(),
                        p.zombie
                      );
                      r.copy(e, !0, !1, !1, !0, !0, !0, !0, !0, !0), (o = !0), e.fade(), this.ignitedCSs.push(r), (i = r);
                    } else if (n && e.canBeBlueIgnited && e.blueIgnited) {
                      var l = h.instantiatePooly(e.blueIgnited);
                      l.parent = e.node.parent;
                      var c = f.shootOnePea(
                        l,
                        new d(e._worldPositionX, e._worldPositionY),
                        e.height,
                        e.node.parent,
                        new s(),
                        p.zombie
                      );
                      c.copy(e, !0, !1, !1, !0, !0, !0, !0, !0, !0), (o = !0), e.fade(), this.ignitedCSs.push(c), (i = c);
                    }
                    return (
                      o && this.getComponent(g).playIgniteSound(),
                      this.inLnC.havePeaBuff && (null == (t = i) || t.addPeaBuff()),
                      i
                    );
                  }),
                  (a.animationListener = function (e) {
                    'explode' == e.name && w.burnFromLnC(this.inLnC, 450, !0, 5, 10, C.yellow, b.cross, 9, 9);
                  }),
                  (a.spawnParticle = function (e) {
                    var n = h.instantiatePooly(this.fooded ? this.blueParticle : this.yellowParticle);
                    (n.parent = e.inLane.prjLayer),
                      (n.worldPosition = new d(e.node.worldPosition.x, e.node.worldPosition.y + e.zombieHeight / 2, 100));
                  }),
                  (a.detectEnemies = function () {
                    var e = this,
                      n = [];
                    this.inLane
                      .zombiePool()
                      .concat()
                      .forEach(function (t) {
                        e.detector.judgeCrossRec(t.bodyRec) && n.push(t);
                      }),
                      n.length &&
                        (n.forEach(function (n) {
                          e.spawnParticle(n), n.dealDamage(e.damage * (e.fooded ? 3 : 2), !0, !1, !1, null, P.fire);
                        }),
                        (this.busy = this.CD),
                        this.getComponent(g).playAttackSound());
                  }),
                  (a.specialPlantOnSquareChange = function (e, n) {
                    this.detector = m.createRectangleNodeCenter(n.node, y.SquareDisW, y.SquareDisH);
                  }),
                  (a.specialPlantOnEnable = function () {
                    (this.fooded = !1), (this.anmControl.IdleAnim = 'Idle'), (this.anmControl.RandomAnim = ['Random']);
                  }),
                  (a.specialPlantFood = function (e) {
                    var n = this;
                    (this.foodable = !1),
                      this.anmControl.playAnimation('Food', 1),
                      this.getComponent(g).playFoodSound(),
                      (this.fooded = !0),
                      (this.anmControl.IdleAnim = 'Idle_Blue'),
                      (this.anmControl.RandomAnim = []),
                      this.scheduleOnce(function () {
                        n.foodEnd();
                      }, 5);
                  }),
                  (a.specialPlantUpdate = function (e) {
                    var n = this;
                    this.inLane
                      .prjPool()
                      .concat()
                      .forEach(function (e) {
                        if (e.inLnC == n.inLnC && -1 == n.ignitedCSs.indexOf(e)) {
                          var t = n.ignite(e, n.fooded);
                          t && (t.inLnC = n.inLnC);
                        }
                      }),
                      this.ignitedCSs.concat().forEach(function (e) {
                        e.inLnC != n.inLnC && n.ignitedCSs.splice(n.ignitedCSs.indexOf(e), 1);
                      }),
                      this.busy > 0 ? (this.busy -= e) : this.detectEnemies();
                  }),
                  n
                );
              })(u)).prototype,
              'CD',
              [v],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 1;
                },
              }
            )),
            (R = n(E.prototype, 'damage', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 6.25;
              },
            })),
            (_ = n(E.prototype, 'blueParticle', [I], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (O = n(E.prototype, 'yellowParticle', [z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (D = E))
          ) || D)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/torchWoodSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './plantSound.ts'],
  function (o) {
    var t, n, i, e, r, a, u, l, s;
    return {
      setters: [
        function (o) {
          (t = o.applyDecoratedDescriptor),
            (n = o.inheritsLoose),
            (i = o.initializerDefineProperty),
            (e = o.assertThisInitialized);
        },
        function (o) {
          (r = o.cclegacy), (a = o._decorator), (u = o.AudioClip);
        },
        function (o) {
          l = o.ArrayGet;
        },
        function (o) {
          s = o.plantSound;
        },
      ],
      execute: function () {
        var c, d, p, h, f, S, g, y, w;
        r._RF.push({}, '445fe51DzxFhabIferb0l4x', 'torchWoodSound', void 0);
        var D = a.ccclass,
          b = a.property;
        o(
          'torchWoodSound',
          ((c = D('torchWoodSound')),
          (d = b([u])),
          (p = b([u])),
          (h = b([u])),
          c(
            ((g = t(
              (S = (function (o) {
                function t() {
                  for (var t, n = arguments.length, r = new Array(n), a = 0; a < n; a++) r[a] = arguments[a];
                  return (
                    (t = o.call.apply(o, [this].concat(r)) || this),
                    i(t, 'foodSounds', g, e(t)),
                    i(t, 'igniteSounds', y, e(t)),
                    (t.ignCoolDown = 0),
                    i(t, 'attackSounds', w, e(t)),
                    (t.attCoolDown = 1),
                    t
                  );
                }
                n(t, o);
                var r = t.prototype;
                return (
                  (r.playFoodSound = function () {
                    this.playOneShot(l.getRandom(this.foodSounds));
                  }),
                  (r.playIgniteSound = function () {
                    this.ignCoolDown <= 0 && (this.playOneShot(l.getRandom(this.igniteSounds)), (this.ignCoolDown = 0.5));
                  }),
                  (r.playAttackSound = function () {
                    this.attCoolDown <= 0 && ((this.attCoolDown = 1), this.playOneShot(l.getRandom(this.attackSounds)));
                  }),
                  (r.update = function (o) {
                    this.attCoolDown > 0 && this.attCoolDown--, this.ignCoolDown > 0 && (this.ignCoolDown -= o);
                  }),
                  t
                );
              })(s)).prototype,
              'foodSounds',
              [d],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (y = t(S.prototype, 'igniteSounds', [p], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (w = t(S.prototype, 'attackSounds', [h], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (f = S))
          ) || f)
        );
        r._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/Trophies.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (o) {
  var t, n, r, e;
  return {
    setters: [
      function (o) {
        t = o.inheritsLoose;
      },
      function (o) {
        (n = o.cclegacy), (r = o._decorator), (e = o.Component);
      },
    ],
    execute: function () {
      var s;
      n._RF.push({}, '85f44Xl39BGta8AE7/kY1hI', 'Trophies', void 0);
      var u = r.ccclass;
      r.property,
        o(
          'TrophyEnum',
          (function (o) {
            return (
              (o[(o.SunBoost = 0)] = 'SunBoost'),
              (o[(o.ShovelBoost = 1)] = 'ShovelBoost'),
              (o[(o.SlotBoost = 2)] = 'SlotBoost'),
              (o[(o.PlantfoodBoost = 3)] = 'PlantfoodBoost'),
              o
            );
          })({})
        ),
        o(
          'Trophies',
          u('Trophies')(
            (s = (function (o) {
              function n() {
                return o.apply(this, arguments) || this;
              }
              t(n, o);
              var r = n.prototype;
              return (r.start = function () {}), (r.update = function (o) {}), n;
            })(e))
          ) || s
        );
      n._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/UI.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './cardSelectAlmanac.ts',
    './Cards.ts',
    './Square.ts',
    './ShovelUIController.ts',
    './NodePools.ts',
    './SunCount.ts',
    './PlantFoodCount.ts',
    './CardFeatureTotal.ts',
    './SoundsController.ts',
    './inGame.ts',
    './FrontYard.ts',
    './SoundRescourses.ts',
    './levelController.ts',
    './Plants.ts',
    './Conveyor.ts',
    './SettingWindow.ts',
    './SandBoxLevelSettingWindow.ts',
    './SandBoxZombieCards.ts',
    './PowerupFingers.ts',
    './LnC.ts',
    './CoinCollecterInGame.ts',
  ],
  function (e) {
    var t,
      n,
      i,
      o,
      s,
      a,
      r,
      l,
      d,
      u,
      h,
      c,
      p,
      g,
      S,
      m,
      y,
      C,
      x,
      f,
      b,
      B,
      w,
      I,
      T,
      P,
      v,
      k,
      U,
      E,
      N,
      F,
      L,
      _,
      O,
      A,
      H,
      D,
      M,
      W,
      R,
      G,
      z,
      Z,
      Y,
      K,
      q,
      V,
      j,
      J;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (n = e.inheritsLoose),
            (i = e.initializerDefineProperty),
            (o = e.assertThisInitialized),
            (s = e.createClass);
        },
        function (e) {
          (a = e.cclegacy),
            (r = e._decorator),
            (l = e.dragonBones),
            (d = e.Node),
            (u = e.Prefab),
            (h = e.Button),
            (c = e.Sprite),
            (p = e.Label),
            (g = e.EventMouse),
            (S = e.director),
            (m = e.Vec3),
            (y = e.find),
            (C = e.KeyCode),
            (x = e.Color),
            (f = e.Tween),
            (b = e.AnimationComponent),
            (B = e.instantiate),
            (w = e.input),
            (I = e.Input),
            (T = e.game),
            (P = e.tween),
            (v = e.Component);
        },
        function (e) {
          k = e.cardSelectAlmanac;
        },
        function (e) {
          U = e.Cards;
        },
        function (e) {
          E = e.Square;
        },
        function (e) {
          N = e.ShovelUIController;
        },
        function (e) {
          F = e.NodePools;
        },
        function (e) {
          L = e.SunCount;
        },
        function (e) {
          _ = e.PlantFoodCount;
        },
        function (e) {
          O = e.CardFeatureTotal;
        },
        function (e) {
          A = e.MusicController;
        },
        function (e) {
          H = e.inGame;
        },
        function (e) {
          (D = e.FrontYard), (M = e.yardType), (W = e.stageEffects);
        },
        function (e) {
          R = e.sounds;
        },
        function (e) {
          G = e.LevelPlay;
        },
        function (e) {
          z = e.plants;
        },
        function (e) {
          Z = e.Conveyor;
        },
        function (e) {
          Y = e.Setting;
        },
        function (e) {
          K = e.SandBoxLevelSettingWindow;
        },
        function (e) {
          q = e.SandBoxZombieCards;
        },
        function (e) {
          V = e.PowerupFingers;
        },
        function (e) {
          j = e.LnCSpawnZombieStyleEnum;
        },
        function (e) {
          J = e.CoinCollecterInGame;
        },
      ],
      execute: function () {
        var Q, X, $, ee, te, ne, ie, oe, se, ae, re, le, de, ue, he, ce, pe, ge, Se, me, ye, Ce, xe, fe, be, Be, we, Ie, Te, Pe;
        a._RF.push({}, 'c2160cIG6JF67sVDFCFV7Hp', 'UI', void 0);
        var ve = r.ccclass,
          ke = r.property,
          Ue = e('gamingSpeed', 1),
          Ee = e('superSlowed', !1);
        e(
          'UIInGame',
          ((Q = ve('UIInGame')),
          (X = ke(l.ArmatureDisplay)),
          ($ = ke(d)),
          (ee = ke(d)),
          (te = ke(u)),
          (ne = ke(h)),
          (ie = ke(u)),
          (oe = ke(d)),
          (se = ke(d)),
          (ae = ke(d)),
          (re = ke(d)),
          (le = ke(d)),
          (de = ke(c)),
          (ue = ke(p)),
          Q(
            (((Pe = (function (t) {
              function a() {
                for (var e, n = arguments.length, s = new Array(n), a = 0; a < n; a++) s[a] = arguments[a];
                return (
                  (e = t.call.apply(t, [this].concat(s)) || this),
                  i(e, 'sbZombieSpawnIcon', pe, o(e)),
                  (e.currentFreeSeedPacket = null),
                  (e.cards = null),
                  (e.squares = null),
                  (e.sceneEnabled = !1),
                  i(e, 'mouse', ge, o(e)),
                  i(e, 'UIUpper', Se, o(e)),
                  i(e, 'sandBoxSettingWindowPrefab', me, o(e)),
                  (e.sandBoxSettingWindow = void 0),
                  i(e, 'sbButton', ye, o(e)),
                  (e.sbButtonOldPos = void 0),
                  i(e, 'SBZombieCards', Ce, o(e)),
                  i(e, 'SBZombieCardsSlot', xe, o(e)),
                  (e.uiHidden = !1),
                  (e.shovel = null),
                  (e.index = -1),
                  (e.willCostSun = 0),
                  (e.indexChange = [
                    function (t) {
                      t.getButton() == g.BUTTON_LEFT && e.tryChangingIndex(0);
                    },
                    function (t) {
                      t.getButton() == g.BUTTON_LEFT && e.tryChangingIndex(1);
                    },
                    function (t) {
                      t.getButton() == g.BUTTON_LEFT && e.tryChangingIndex(2);
                    },
                    function (t) {
                      t.getButton() == g.BUTTON_LEFT && e.tryChangingIndex(3);
                    },
                    function (t) {
                      t.getButton() == g.BUTTON_LEFT && e.tryChangingIndex(4);
                    },
                    function (t) {
                      t.getButton() == g.BUTTON_LEFT && e.tryChangingIndex(5);
                    },
                    function (t) {
                      t.getButton() == g.BUTTON_LEFT && e.tryChangingIndex(6);
                    },
                    function (t) {
                      t.getButton() == g.BUTTON_LEFT && e.tryChangingIndex(7);
                    },
                    function (t) {
                      t.getButton() == g.BUTTON_LEFT && e.tryChangingIndex(-1);
                    },
                    function (t) {
                      t.getButton() == g.BUTTON_LEFT && e.tryChangingIndex(-2);
                    },
                    function (t) {
                      t.getButton() == g.BUTTON_LEFT && e.tryChangingIndex(-3);
                    },
                    function (t) {
                      t.getButton() == g.BUTTON_LEFT && e.tryChangingIndex(-4);
                    },
                    function (t) {
                      t.getButton() == g.BUTTON_LEFT && e.tryChangingIndex(-5);
                    },
                    function (t) {
                      t.getButton() == g.BUTTON_LEFT && e.tryChangingIndex(-6);
                    },
                  ]),
                  (e.plantInHandType = []),
                  (e.plantReady = null),
                  (e.currentPlantName = null),
                  (e.shovelReady = null),
                  (e.currentSniperPlant = null),
                  (e.stageEffIndex = 0),
                  i(e, 'pauseScreen', fe, o(e)),
                  i(e, 'pauseButton', be, o(e)),
                  (e.normalPause = void 0),
                  (e.hoverPause = void 0),
                  (e.pressedPause = void 0),
                  i(e, 's2xButton', Be, o(e)),
                  (e.normal2x = void 0),
                  (e.hover2x = void 0),
                  (e.pressed2x = void 0),
                  (e.oldTick = S.tick),
                  (e.musicI = 0),
                  (e.gameStarted = !1),
                  i(e, 'plantInHandLayer', we, o(e)),
                  i(e, 'windowSplash', Ie, o(e)),
                  i(e, 'gameLoseTip', Te, o(e)),
                  (e.exitNextTick = !1),
                  e
                );
              }
              n(a, t);
              var r = a.prototype;
              return (
                (r.readSBZombieSpawnStyle = function (e) {
                  var t,
                    n = 'DirectPut';
                  switch (e) {
                    case j.dirtSpawn:
                      n = 'DirtSpawn';
                      break;
                    case j.snowStorm:
                      n = 'SnowStorm';
                      break;
                    case j.sandStorm:
                      n = 'SandStorm';
                      break;
                    case j.fromLane:
                      n = 'FromLane';
                  }
                  null == (t = this.sbZombieSpawnIcon) || t.playAnimation(n, 1);
                }),
                (r.switchSBZombieSpawnStyle = function () {
                  K.zombieSpawnStyle++;
                }),
                (r.showSBSettings = function () {
                  this.sandBoxSettingWindow
                    ? ((Ee = e('superSlowed', !1)), F.destroyPooly(this.sandBoxSettingWindow), (this.sandBoxSettingWindow = null))
                    : ((Ee = e('superSlowed', !0)),
                      (this.sandBoxSettingWindow = F.instantiatePooly(this.sandBoxSettingWindowPrefab)),
                      (this.sandBoxSettingWindow.parent = this.UIUpper),
                      (this.sandBoxSettingWindow.worldPosition = this.node.parent.worldPosition),
                      this.sandBoxSettingWindow.setSiblingIndex(this.sbButton.node.getSiblingIndex()));
                }),
                (r.hideUI = function () {
                  this.uiHidden
                    ? ((this.node.scale = new m(1, 1, 1)), (this.UIUpper.scale = new m(1, 1, 1)), (this.uiHidden = !1))
                    : ((this.node.scale = new m(0, 0, 0)), (this.UIUpper.scale = new m(0, 0, 0)), (this.uiHidden = !0));
                }),
                (r.cardSelect = function () {
                  this.cards.JudgeSelection(),
                    this.cards.cardSelect(),
                    this.shovel.shovelSelect(),
                    _.component.choose(),
                    this.squares.readIndex();
                }),
                (r.onEnable = function () {
                  var e = this;
                  this.scheduleOnce(function () {
                    e.sceneEnabled = !0;
                  }, 0.1);
                }),
                (r.setSibling = function () {
                  var e = y('Canvas/LawnCommon');
                  this.node.setSiblingIndex(e.getSiblingIndex()),
                    (a.cardsAtUpper = e.getSiblingIndex() < this.node.getSiblingIndex()),
                    Y.saveSettings();
                }),
                (r.onKeyDown = function (t) {
                  var n,
                    i = U.cardsController.cardSlot;
                  if (G.gameStarted || G.component.lastStandPrepareStarted)
                    if (t.keyCode == C.BACK_QUOTE) this.hideUI();
                    else {
                      switch (t.keyCode) {
                        case C.DIGIT_1:
                          i[0] && this.tryChangingIndex(0);
                          break;
                        case C.DIGIT_2:
                          i[1] && this.tryChangingIndex(1);
                          break;
                        case C.DIGIT_3:
                          i[2] && this.tryChangingIndex(2);
                          break;
                        case C.DIGIT_4:
                          i[3] && this.tryChangingIndex(3);
                          break;
                        case C.KEY_Q:
                          i[4] && this.tryChangingIndex(4);
                          break;
                        case C.KEY_W:
                          i[5] && this.tryChangingIndex(5);
                          break;
                        case C.KEY_E:
                          i[6] && this.tryChangingIndex(6);
                          break;
                        case C.KEY_R:
                          i[7] && this.tryChangingIndex(7);
                          break;
                        case C.F3:
                          this.setSibling();
                          break;
                        case C.KEY_D:
                          this.tryChangingIndex(-2);
                          break;
                        case C.KEY_F:
                          this.tryChangingIndex(-3);
                          break;
                        case C.KEY_V:
                          S.isPaused() || this.speedUp();
                      }
                      if (G.sandBoxModeOn) {
                        if (!this.sandBoxSettingWindow)
                          switch (t.keyCode) {
                            case C.ARROW_LEFT:
                              D.pushTide(1);
                              break;
                            case C.ARROW_RIGHT:
                              D.pullTide(1);
                              break;
                            case C.ENTER:
                              D.pullTide(9);
                              break;
                            case C.BACKSPACE:
                              D.addTide(), D.pushTide(9);
                              break;
                            case C.TAB:
                              D.setStageEffect(this.stageEffIndex++ % (W.none + 1));
                              break;
                            case C.F1:
                              null == (n = H.component) || n.loadZombies();
                              break;
                            case C.F2:
                              D.changeFrontYard((D.currentLawnYardType + 1) % M.yardAmount), this.musicI++;
                              break;
                            case C.F5:
                              Ee = e('superSlowed', !Ee);
                          }
                        switch (t.keyCode) {
                          case C.F6:
                            this.showSBSettings();
                        }
                      }
                    }
                  switch (t.keyCode) {
                    case C.SPACE:
                    case C.ESCAPE:
                      this.pauseMenu();
                  }
                }),
                (r.pauseMenu = function () {
                  if (S.isPaused())
                    S.resume(),
                      (this.pauseScreen.parent = this.node.parent),
                      (this.pauseScreen.getChildByName('MainBody').position = new m(0, 1e3, 0)),
                      this.pauseScreen.setSiblingIndex(0),
                      A.resumeMusic(),
                      (this.pauseButton.getComponent(h).hoverSprite = this.hoverPause),
                      (this.pauseButton.getComponent(h).normalSprite = this.normalPause);
                  else {
                    if (G.component.gameWon) return;
                    R.playPause(),
                      A.pauseMusic(),
                      (this.pauseScreen.parent = this.UIUpper),
                      (this.pauseScreen.getChildByName('MainBody').position = new m()),
                      this.pauseScreen.setSiblingIndex(this.pauseButton.getSiblingIndex()),
                      this.scheduleOnce(function () {
                        S.pause();
                      }, 0),
                      (this.pauseButton.getComponent(h).hoverSprite = this.pressedPause),
                      (this.pauseButton.getComponent(h).normalSprite = this.pressedPause);
                  }
                }),
                (r.plantInHand = function (e, t) {
                  if (
                    (void 0 === t && (t = !0),
                    (this.plantInHandType = []),
                    (this.plantReady = null),
                    (this.currentPlantName = null),
                    (this.willCostSun = 0),
                    t && e)
                  ) {
                    var n = e.getComponent(O);
                    (this.currentPlantName = n.ID),
                      (this.plantInHandType = n.thisPlant.TYPE),
                      (this.willCostSun = n.thisPlant.SUNCOST),
                      (this.plantReady = F.instantiatePooly(z.getPlantsInCard(this.currentPlantName).plantDIS)),
                      (this.plantReady.parent = this.plantInHandLayer),
                      (this.plantReady.getChildByName('Body').getComponent(l.ArmatureDisplay).color = new x(255, 255, 255, 255)),
                      this.plantReady.setPosition(0, -20);
                  }
                }),
                (r.spawnPlantCost = function () {
                  var e;
                  8 == this.index && (null == Z || null == (e = Z.component) || e.spliceCard(this.currentFreeSeedPacket)),
                    this.node.getChildByName('SunSlot').getComponent(L).SunDec(this.willCostSun),
                    this.index >= 0 && this.index <= 7 && this.cards.CoolStart(this.index);
                }),
                (a.exit = function () {
                  a.uiingame.oldTickReturn(),
                    f.stopAll(),
                    F.clearAll(),
                    S.loadScene('worldMapScene', function () {
                      S.isPaused() && S.resume(), F.clearAll(), f.stopAll();
                    }),
                    f.stopAll();
                }),
                (r.tryChangingIndex = function (e) {
                  var t;
                  if (!S.isPaused() && !this.indexLocked) {
                    var n = !1;
                    switch (
                      (this.squares.deletePlantGhosts(),
                      this.currentSniperPlant &&
                        (this.currentSniperPlant.locateCancel(),
                        (this.currentSniperPlant.locatorNode = null),
                        (this.currentSniperPlant = null)),
                      e)
                    ) {
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                      case 6:
                      case 7:
                        this.cards.seedPackets[e] &&
                          (this.cards.seedPackets[e].getComponent(k).selectable
                            ? (F.destroyNodeArrayPooly(this.plantInHandLayer.children),
                              this.index == e
                                ? this.tryChangingIndex(-1)
                                : ((this.index = e),
                                  this.plantInHand(this.cards.seedPackets[e]),
                                  R.playCardChosen(),
                                  this.squares.plantGhost()),
                              (n = !0))
                            : (R.playCardChooseFailed(),
                              this.cards.seedPackets[e].getComponent(k).affordable ||
                                this.cards.seedPackets[e].getComponent(k).cooling ||
                                this.node.getChildByName('SunSlot').getComponent(b).play('sunCountWarn')));
                        break;
                      case 8:
                        null != (t = this.currentFreeSeedPacket) &&
                          t.enabled &&
                          this.currentFreeSeedPacket.getComponent(k).selectable &&
                          (F.destroyNodeArrayPooly(this.plantInHandLayer.children),
                          this.index == e
                            ? this.tryChangingIndex(-1)
                            : ((this.index = e),
                              this.plantInHand(this.currentFreeSeedPacket.node),
                              R.playCardChosen(),
                              this.squares.plantGhost()),
                          (n = !0));
                        break;
                      case 9:
                        F.destroyNodeArrayPooly(this.plantInHandLayer.children),
                          this.index == e ? this.tryChangingIndex(-1) : ((this.index = e), this.squares.plantGhost()),
                          (n = !0);
                        break;
                      case -1:
                        if ((F.destroyNodeArrayPooly(this.plantInHandLayer.children), this.index <= 8 && this.index >= 0))
                          this.plantInHand(null, !1), R.playCardCancel();
                        else if (-2 == this.index) R.playShovelActive();
                        else if (-4 == this.index) {
                          var i;
                          null == (i = this.currentSniperPlant) || i.locateCancel();
                        }
                        null != q && q.component && (q.component.index = -1), (this.index = -1), (n = !0);
                        break;
                      case -2:
                        F.destroyNodeArrayPooly(this.plantInHandLayer.children),
                          (this.index = -2 == this.index ? -1 : -2),
                          R.playShovelActive(),
                          (n = !0);
                        break;
                      case -3:
                        _.plantFoodNum > 0 || K.freePF
                          ? G.gameStarted &&
                            ((this.index = -3 == this.index ? -1 : -3),
                            F.destroyNodeArrayPooly(this.plantInHandLayer.children),
                            -3 == this.index && _.component.addMouseChild(),
                            (n = !0))
                          : _.plantfoodWarn();
                        break;
                      case -4:
                        -4 != this.index && (n = !0), (this.index = -4);
                        break;
                      case -5:
                        if (G.gameStarted) {
                          var o = this.index + 0;
                          (this.index = -5 == this.index ? -1 : -5),
                            F.destroyNodeArrayPooly(this.plantInHandLayer.children),
                            (n = o != this.index);
                        }
                    }
                    n &&
                      (this.cardSelect(),
                      V.component.judgeUIIndex(),
                      8 != this.index &&
                        this.currentFreeSeedPacket &&
                        (R.playCardCancel(),
                        (this.currentFreeSeedPacket.getComponent(k).index = 0),
                        (this.currentFreeSeedPacket = null)));
                  }
                }),
                (r.onMouseUp = function (e) {
                  -5 == this.index && e.getButton() == g.BUTTON_LEFT && V.component.onMouseUp(e);
                }),
                (r.onMouseDown = function (e) {
                  if (e.getButton() == g.BUTTON_RIGHT) {
                    var t = this.index + 0;
                    this.tryChangingIndex(-1), -1 != t && -1 == this.index && R.playRightButtonCancel();
                  } else -5 == this.index && e.getButton() == g.BUTTON_LEFT && V.component.onMouseDown(e);
                }),
                (r.oldTickReturn = function () {
                  (Ue = e('gamingSpeed', 1)), (S.tick = this.oldTick);
                }),
                (r.speedUp = function () {
                  (Ue = e('gamingSpeed', 1 == Ue ? 1.5 : 1)),
                    R.playSpeedUp(),
                    1 == Ue
                      ? ((this.s2xButton.getComponent(h).normalSprite = this.normal2x),
                        (this.s2xButton.getComponent(h).pressedSprite = this.pressed2x),
                        (this.s2xButton.getComponent(h).hoverSprite = this.hover2x))
                      : ((this.s2xButton.getComponent(h).normalSprite = this.pressed2x),
                        (this.s2xButton.getComponent(h).pressedSprite = this.pressed2x),
                        (this.s2xButton.getComponent(h).hoverSprite = this.hover2x));
                }),
                (a.gameStart = function () {
                  this.uiingame._gameStart();
                }),
                (r._gameStart = function () {
                  var e = this;
                  if (!this.gameStarted) {
                    G.sandBoxModeOn &&
                      ((this.sbButton.node.position = this.sbButtonOldPos),
                      (B(this.SBZombieCards).parent = this.SBZombieCardsSlot)),
                      J.component && (J.component.show(), (J.component.hidden = !1)),
                      (this.gameStarted = !0),
                      (this.s2xButton.getComponent(c).color = new x(255, 255, 255, 255)),
                      this.s2xButton.on(d.EventType.MOUSE_DOWN, function (t) {
                        S.isPaused() || e.speedUp();
                      }),
                      this.shovel.node.on(d.EventType.MOUSE_DOWN, this.indexChange[9], this),
                      this.node.parent.on(d.EventType.MOUSE_DOWN, this.onMouseDown, this),
                      this.node.parent.on(d.EventType.MOUSE_UP, this.onMouseUp, this),
                      y('Canvas/UIInGame/PlantFoodSlot/Button').on(d.EventType.MOUSE_DOWN, this.indexChange[10], this),
                      _.keyOn();
                    var t = y('Canvas/LawnCommon');
                    ((a.cardsAtUpper && t.getSiblingIndex() > this.node.getSiblingIndex()) ||
                      (!a.cardsAtUpper && t.getSiblingIndex() < this.node.getSiblingIndex())) &&
                      this.setSibling();
                  }
                }),
                (r.onLoad = function () {
                  (this.uiHidden = !1),
                    (this.sceneEnabled = !1),
                    (this.sbButtonOldPos = this.sbButton.node.position.clone()),
                    this.sbButton.node.position.add3f(-1e3, 1e3, 0),
                    (Ee = e('superSlowed', !1)),
                    (this.gameStarted = !1),
                    (this.currentFreeSeedPacket = null),
                    (a.uiingame = this),
                    w.on(I.EventType.KEY_DOWN, this.onKeyDown, this),
                    (this.s2xButton.getComponent(c).color = new x(255, 255, 255, 0)),
                    (this.squares = y('Canvas/LawnCommon/Squares').getComponent(E)),
                    (this.cards = this.node.getChildByName('Cards').getComponent(U)),
                    (this.shovel = this.node.getChildByName('Shovel').getComponent(N)),
                    (this.shovel.UIParent = this),
                    (this.normalPause = this.pauseButton.getComponent(h).normalSprite),
                    (this.hoverPause = this.pauseButton.getComponent(h).hoverSprite),
                    (this.pressedPause = this.pauseButton.getComponent(h).pressedSprite),
                    (this.normal2x = this.s2xButton.getComponent(h).normalSprite),
                    (this.hover2x = this.s2xButton.getComponent(h).hoverSprite),
                    (this.pressed2x = this.s2xButton.getComponent(h).pressedSprite);
                }),
                (r.start = function () {
                  (this.cards.enabled = !0), (this.uiHidden = !0), this.hideUI();
                }),
                (r.update = function (e) {
                  var t,
                    n = this;
                  if (
                    ((this.plantInHandLayer.worldPosition = this.mouse.worldPosition),
                    null != (t = this.currentSniperPlant) &&
                      t.locatorNode &&
                      (this.currentSniperPlant.locatorNode.worldPosition = this.mouse.worldPosition),
                    (this.UIUpper.position = this.node.position),
                    this.sceneEnabled)
                  )
                    if (Ee)
                      S.tick = function (e) {
                        var t;
                        null == n || null == (t = n.oldTick) || t.call(S, 60 * T.deltaTime * 0);
                      };
                    else {
                      var i = G.sandBoxModeOn && !G.gameStarted ? 4 : 1;
                      S.tick = function (e) {
                        var t;
                        null == n || null == (t = n.oldTick) || t.call(S, (Ue / 60) * i * (60 * T.deltaTime));
                      };
                    }
                  else this.oldTickReturn();
                  this.exitNextTick && a.exit();
                }),
                (r.victoryExit = function () {
                  var e = this;
                  (this.windowSplash.color = new x(255, 255, 255, 0)),
                    P(this)
                      .to(2.5, {})
                      .to(2.5, { windowSplashColorA: 255 })
                      .call(function () {
                        e.exitNextTick = !0;
                      })
                      .start();
                }),
                (r.loseDarken = function (e, t) {
                  var n = this;
                  void 0 === e && (e = 'THE ZOMBIES ATE YOUR BRAINS!'),
                    void 0 === t && (t = null),
                    t && (t.node.setParent(this.windowSplash.node.parent, !0), t.triggerGameLose()),
                    (this.gameLoseTip.string = e),
                    (this.windowSplash.color = new x(0, 0, 0, 0)),
                    P(this)
                      .to(2.5, {})
                      .to(2.5, { windowSplashColorA: 255 })
                      .call(function () {
                        n.exitNextTick = !0;
                      })
                      .start();
                }),
                s(
                  a,
                  [
                    {
                      key: 'indexLocked',
                      get: function () {
                        return V.uiIndexLocked;
                      },
                    },
                    {
                      key: 'windowSplashColorA',
                      get: function () {
                        return this.windowSplash.color.a;
                      },
                      set: function (e) {
                        var t = this.windowSplash.color.clone();
                        this.windowSplash.color = new x(t.r, t.g, t.b, e);
                      },
                    },
                  ],
                  [
                    {
                      key: 'index',
                      get: function () {
                        return this.uiingame.index;
                      },
                    },
                  ]
                ),
                a
              );
            })(v)).cardsAtUpper = !1),
            (Pe.uiingame = void 0),
            (pe = t((ce = Pe).prototype, 'sbZombieSpawnIcon', [X], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (ge = t(ce.prototype, 'mouse', [$], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Se = t(ce.prototype, 'UIUpper', [ee], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (me = t(ce.prototype, 'sandBoxSettingWindowPrefab', [te], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (ye = t(ce.prototype, 'sbButton', [ne], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (Ce = t(ce.prototype, 'SBZombieCards', [ie], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (xe = t(ce.prototype, 'SBZombieCardsSlot', [oe], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (fe = t(ce.prototype, 'pauseScreen', [se], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (be = t(ce.prototype, 'pauseButton', [ae], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (Be = t(ce.prototype, 's2xButton', [re], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (we = t(ce.prototype, 'plantInHandLayer', [le], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (Ie = t(ce.prototype, 'windowSplash', [de], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (Te = t(ce.prototype, 'gameLoseTip', [ue], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (he = ce))
          ) || he)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/UmbrellaLeaf.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Plant.ts', './CharacterManager.ts', './Square.ts', './umbrellaLeafSound.ts'],
  function (t) {
    var e, n, a, i, s, o, l, r, h, c, m, u;
    return {
      setters: [
        function (t) {
          (e = t.inheritsLoose), (n = t.createClass), (a = t.assertThisInitialized);
        },
        function (t) {
          (i = t.cclegacy), (s = t._decorator), (o = t.AudioSource), (l = t.Vec2);
        },
        function (t) {
          r = t.Plant;
        },
        function (t) {
          (h = t.Umbrellas), (c = t.Rectangle);
        },
        function (t) {
          m = t.Square;
        },
        function (t) {
          u = t.umbrellaLeafSound;
        },
      ],
      execute: function () {
        var d;
        i._RF.push({}, 'f671cHIAU9Era0nTV0pwgDI', 'UmbrellaLeaf', void 0);
        var f = s.ccclass,
          b =
            (s.property,
            t('umbrellaLeafRange', function (t, e) {
              (this.owner = void 0), (this.detector = void 0), (this.owner = t), (this.detector = e);
            }));
        t(
          'UmbrellaLeafPlant',
          f('UmbrellaLeaf')(
            (d = (function (t) {
              function i() {
                for (var e, n = arguments.length, i = new Array(n), s = 0; s < n; s++) i[s] = arguments[s];
                return (
                  ((e = t.call.apply(t, [this].concat(i)) || this).blockAnm = 'Block'),
                  (e._stage = 0),
                  (e.thisUmbrella = new b(a(e), c.createRectangleCenter(new l(0, 0), 3 * m.SquareDisW, 3 * m.SquareDisH))),
                  (e.zombiesInRange = []),
                  (e.detector = void 0),
                  e
                );
              }
              e(i, t);
              var s = i.prototype;
              return (
                (s.umbrella = function () {
                  return (
                    this.getComponent(u).playUmbrellaSound(),
                    this.anmControl.playAnimation(this.blockAnm, 1),
                    this.setAnimation(!0),
                    !0
                  );
                }),
                (s.specialPlantFood = function (t) {
                  (this.foodable = !1),
                    this.foodEnd(),
                    this.getComponent(u).playFoodSound(),
                    (this.allowStack = !0),
                    (this.eaterDetectable = !1),
                    (this.smasherDetectable = !1),
                    (this.stage = 2 + (this.stage % 2)),
                    this.anmControl.playRandom();
                }),
                (s.bounce = function () {
                  o.maxAudioChannel,
                    this.getComponent(u).playBounceSound(),
                    this.anmControl.playAnimation(this.blockAnm, 1, 0, 0.7),
                    this.setAnimation(!0);
                }),
                (s.specialPlantDie = function () {
                  var t = h.umbrellas.indexOf(this.thisUmbrella);
                  -1 != t && h.umbrellas.splice(t, 1);
                }),
                (s.specialPlantOnEnable = function () {
                  (this.stage = 0),
                    -1 == h.umbrellas.indexOf(this.thisUmbrella) && h.umbrellas.push(this.thisUmbrella),
                    (this.zombiesInRange = []),
                    this.setAnimation(!1),
                    this.anmControl.playRandom();
                }),
                (s.setAnimation = function (t) {
                  this.anmControl;
                  t
                    ? this.stage >= 2
                      ? (this.stage = 3)
                      : (this.stage = 1)
                    : this.stage >= 2
                    ? (this.stage = 2)
                    : (this.stage = 0);
                }),
                (s.specialPlantOnSquareChange = function (t, e) {
                  (this.detector = c.createRectangleNodeCenter(e.node, 3 * m.SquareDisW, 3 * m.SquareDisH)),
                    (this.thisUmbrella.detector = this.detector);
                }),
                n(i, [
                  {
                    key: 'stage',
                    get: function () {
                      return this._stage;
                    },
                    set: function (t) {
                      switch (t) {
                        case 1:
                          (this.anmControl.IdleAnim = 'Idle_Excited'),
                            (this.anmControl.RandomAnim = ['Random_Excited']),
                            (this.deathAnm = 'Death'),
                            (this.waterAnm = 'Water'),
                            (this.blockAnm = 'Block');
                          break;
                        case 2:
                          (this.anmControl.IdleAnim = 'Idle_Infi'),
                            (this.anmControl.RandomAnim = ['Random_Infi']),
                            (this.deathAnm = 'Death_Infi'),
                            (this.waterAnm = 'Water_Infi'),
                            (this.blockAnm = 'Block_Infi');
                          break;
                        case 3:
                          (this.anmControl.IdleAnim = 'Idle_Excited_Infi'),
                            (this.anmControl.RandomAnim = ['Random_Excited_Infi']),
                            (this.deathAnm = 'Death_Infi'),
                            (this.waterAnm = 'Water_Infi'),
                            (this.blockAnm = 'Block_Infi');
                          break;
                        default:
                          (t = 0),
                            (this.anmControl.IdleAnim = 'Idle'),
                            (this.anmControl.RandomAnim = ['Random']),
                            (this.deathAnm = 'Death'),
                            (this.waterAnm = 'Water'),
                            (this.blockAnm = 'Block');
                      }
                      this._stage = t;
                    },
                  },
                ]),
                i
              );
            })(r))
          ) || d
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/umbrellaLeafSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodePools.ts', './plantSound.ts'],
  function (o) {
    var n, e, t, u, r, i, l, a, c;
    return {
      setters: [
        function (o) {
          (n = o.applyDecoratedDescriptor),
            (e = o.inheritsLoose),
            (t = o.initializerDefineProperty),
            (u = o.assertThisInitialized);
        },
        function (o) {
          (r = o.cclegacy), (i = o._decorator), (l = o.AudioClip);
        },
        function (o) {
          a = o.ArrayGet;
        },
        function (o) {
          c = o.plantSound;
        },
      ],
      execute: function () {
        var d, p, s, b, f, S, h, y, m;
        r._RF.push({}, '2b2e22+u0ZJpI5DDdhvN8Rr', 'umbrellaLeafSound', void 0);
        var g = i.ccclass,
          D = i.property;
        o(
          'umbrellaLeafSound',
          ((d = g('umbrellaLeafSound')),
          (p = D([l])),
          (s = D([l])),
          (b = D([l])),
          d(
            ((h = n(
              (S = (function (o) {
                function n() {
                  for (var n, e = arguments.length, r = new Array(e), i = 0; i < e; i++) r[i] = arguments[i];
                  return (
                    (n = o.call.apply(o, [this].concat(r)) || this),
                    t(n, 'umbrellaSound', h, u(n)),
                    t(n, 'bounceSound', y, u(n)),
                    (n.bounceSoundCoolDown = 0),
                    t(n, 'foodSound', m, u(n)),
                    n
                  );
                }
                e(n, o);
                var r = n.prototype;
                return (
                  (r.playUmbrellaSound = function () {
                    this.playOneShot(a.getRandom(this.umbrellaSound));
                  }),
                  (r.playBounceSound = function () {
                    this.bounceSoundCoolDown <= 0 &&
                      (this.playOneShot(a.getRandom(this.bounceSound)), (this.bounceSoundCoolDown = 1));
                  }),
                  (r.playFoodSound = function () {
                    this.playOneShot(a.getRandom(this.foodSound));
                  }),
                  (r.update = function (o) {
                    this.bounceSoundCoolDown > 0 && this.bounceSoundCoolDown--;
                  }),
                  n
                );
              })(c)).prototype,
              'umbrellaSound',
              [p],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (y = n(S.prototype, 'bounceSound', [s], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (m = n(S.prototype, 'foodSound', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (f = S))
          ) || f)
        );
        r._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Vamporcini.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './Plant.ts',
    './CharacterManager.ts',
    './Square.ts',
    './Zombie.ts',
    './NodePools.ts',
    './SoundsController.ts',
    './vamporciniSound.ts',
  ],
  function (t) {
    var n, i, e, o, a, r, s, l, c, h, u, b, d, m, p, f, g, P;
    return {
      setters: [
        function (t) {
          (n = t.applyDecoratedDescriptor),
            (i = t.inheritsLoose),
            (e = t.initializerDefineProperty),
            (o = t.assertThisInitialized);
        },
        function (t) {
          (a = t.cclegacy),
            (r = t._decorator),
            (s = t.CCFloat),
            (l = t.Prefab),
            (c = t.Vec2),
            (h = t.dragonBones),
            (u = t.AudioSource);
        },
        function (t) {
          b = t.Plant;
        },
        function (t) {
          d = t.Rectangle;
        },
        function (t) {
          m = t.Square;
        },
        function (t) {
          p = t.zombieDamageType;
        },
        function (t) {
          f = t.NodePools;
        },
        function (t) {
          g = t.SoundFXController;
        },
        function (t) {
          P = t.vamporciniSound;
        },
      ],
      execute: function () {
        var y, D, S, C, L, A, v, w, R, z, E, F, k, _, I, j, x, T, V;
        a._RF.push({}, 'e13e99QG7VHJpt/BDlmuh0l', 'Vamporcini', void 0);
        var q = r.ccclass,
          U = r.property;
        t(
          'VamporciniPlant',
          ((y = q('VamporciniPlant')),
          (D = U(s)),
          (S = U(s)),
          (C = U(s)),
          (L = U(s)),
          (A = U(s)),
          (v = U(l)),
          (w = U(l)),
          (R = U(l)),
          y(
            ((F = n(
              (E = (function (t) {
                function n() {
                  for (var n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                  return (
                    (n = t.call.apply(t, [this].concat(a)) || this),
                    e(n, 'maxToughness', F, o(n)),
                    e(n, 'normalDPS', k, o(n)),
                    e(n, 'attackDuration', _, o(n)),
                    (n.attackCD = 1 / 0),
                    e(n, 'foodDPS', I, o(n)),
                    e(n, 'foodDuration', j, o(n)),
                    e(n, 'batParticles', x, o(n)),
                    e(n, 'hereParticles', T, o(n)),
                    e(n, 'thereParticles', V, o(n)),
                    (n.particles = []),
                    (n.absorbStartable = !0),
                    (n.absorbing = !1),
                    (n.absorbFinished = !1),
                    (n.detector = d.createRectangleCenter(new c(), 0, 0)),
                    n
                  );
                }
                i(n, t);
                var a = n.prototype;
                return (
                  (a.onDamaged = function (t, n, i) {
                    var e = 5,
                      o = this.anmControl.body.armature();
                    for (e = 5; e >= 0; e--) {
                      var a = o.getSlot('SLOT' + (5 - e).toString());
                      i < (this.maxToughness / 7) * (e + 1)
                        ? null == a || a._setDisplayIndex(-1)
                        : null == a || a._setDisplayIndex(0);
                    }
                  }),
                  (a.waterable = function () {
                    return !this.absorbing && this.absorbStartable;
                  }),
                  (a.specialPlantOnEnable = function () {
                    (this.absorbing = !1),
                      (this.absorbFinished = !1),
                      (this.attackCD = 1 / 0),
                      (this.anmControl.IdleAnim = 'Idle'),
                      (this.anmControl.RandomAnim = ['Random']);
                  }),
                  (a.specialPlantOnSquareChange = function (t, n) {
                    (this.detector = d.createRectangleNodeCenter(n.node, 3 * m.SquareDisW, 3 * m.SquareDisH)),
                      this.particles.forEach(function (t) {
                        t.node.worldPosition = n.node.worldPosition;
                      });
                  }),
                  (a.spawnParticles = function () {
                    var t = this,
                      n = f.instantiatePooly(this.thereParticles);
                    n.parent = this.inLane.UpperLane.prjLayer;
                    var i = f.instantiatePooly(this.hereParticles);
                    i.parent = this.inLane.prjLayer;
                    var e = f.instantiatePooly(this.batParticles);
                    (e.parent = this.inLane.prjLayer),
                      [n, i, e].forEach(function (n) {
                        n.worldPosition = t.inLnC.node.worldPosition;
                        var i = n.getComponent(h.ArmatureDisplay);
                        t.particles.push(i), i.playAnimation('Start', 1);
                      });
                  }),
                  (a.deleteParticles = function () {
                    this.particles.forEach(function (t) {
                      t.playAnimation('Death');
                    }),
                      (this.particles = []);
                  }),
                  (a.absorb = function (t) {
                    var n = this,
                      i = 0;
                    this.inLane
                      .zombiePool()
                      .concat(this.inLane.UpperLane.zombiePool(), this.inLane.LowerLane.zombiePool())
                      .forEach(function (e) {
                        e.bodyRec.judgeCrossRec(n.detector) && (e.dealDamage(t, !1, !1, !1, null, p.physicle, !0), (i += t));
                      }),
                      this.inLane
                        .tombPool()
                        .concat(this.inLane.UpperLane.tombPool(), this.inLane.LowerLane.tombPool())
                        .forEach(function (e) {
                          e.bodyRec.judgeCrossRec(n.detector) && (e.dealDamage(t), (i += t));
                        }),
                      (this.toughness = Math.min(this.toughness + 4 * i, this.maxToughness)),
                      (this.health = this.toughness),
                      this.onDamaged(0, this.toughness, this.toughness);
                  }),
                  (a.detectEnemies = function () {
                    var t = this,
                      n = !1;
                    return (
                      this.inLane
                        .zombiePool()
                        .concat(this.inLane.UpperLane.zombiePool(), this.inLane.LowerLane.zombiePool())
                        .forEach(function (i) {
                          n || (i.bodyRec.judgeCrossRec(t.detector) && (n = !0));
                        }),
                      n
                    );
                  }),
                  (a.specialPlantFood = function (t) {
                    this.absorbStart();
                  }),
                  (a.absorbStart = function () {
                    this.deleteParticles(),
                      this.getComponent(P).playAbsorbStart(this.fooding),
                      (this.absorbing = !1),
                      (this.absorbStartable = !1),
                      (this.attackCD = 1 / 0),
                      this.anmControl.playAnimation(this.fooding ? 'FoodStart' : 'AbsorbStart', 1),
                      (this.damagable = !1),
                      (this.anmControl.IdleAnim = this.fooding ? 'Fooding' : 'Absorbing'),
                      (this.anmControl.RandomAnim = []);
                  }),
                  (a.absorbEnd = function () {
                    (this.absorbing = !1),
                      (this.damagable = !0),
                      this.deleteParticles(),
                      this.getComponent(P).playAbsorbEnd(),
                      this.fooding
                        ? this.anmControl.playAnimation('FoodEnd', 1, 0.1)
                        : this.anmControl.playAnimation('AbsorbEnd', 1, 0.1),
                      (this.anmControl.IdleAnim = 'Idle_Red'),
                      (this.anmControl.RandomAnim = ['Random_Red']),
                      (this.deathAnm = 'Death_Red');
                  }),
                  (a.animationListener = function (t) {
                    'absorbStart' == t.name
                      ? ((this.absorbing = !0),
                        this.spawnParticles(),
                        (this.attackCD = this.fooding ? this.foodDuration : this.attackDuration))
                      : 'foodStart' == t.name
                      ? this.anmControl.playAnimation('Fooding', 1 / 0)
                      : 'foodEnd' == t.name && this.foodEnd();
                  }),
                  (a.specialPlantDie = function () {
                    this.deleteParticles();
                  }),
                  (a.specialPlantUpdate = function (t) {
                    if ((this.absorbStartable && this.detectEnemies() && this.absorbStart(), this.absorbing)) {
                      var n = (this.fooding ? this.foodDPS : this.normalDPS) * t;
                      this.absorb(n), this.attackCD > 0 ? (this.attackCD -= t) : this.absorbEnd();
                    }
                    this.particles.forEach(function (t) {
                      var n = t.getComponent(u);
                      n && (n.volume = g.SoundFXVolume);
                    });
                  }),
                  n
                );
              })(b)).prototype,
              'maxToughness',
              [D],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 6e3;
                },
              }
            )),
            (k = n(E.prototype, 'normalDPS', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 20;
              },
            })),
            (_ = n(E.prototype, 'attackDuration', [C], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 6;
              },
            })),
            (I = n(E.prototype, 'foodDPS', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 40;
              },
            })),
            (j = n(E.prototype, 'foodDuration', [A], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 10;
              },
            })),
            (x = n(E.prototype, 'batParticles', [v], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (T = n(E.prototype, 'hereParticles', [w], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (V = n(E.prototype, 'thereParticles', [R], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (z = E))
          ) || z)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/vamporciniSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './plantSound.ts', './NodePools.ts'],
  function (o) {
    var t, n, r, i, e, a, u, c, l;
    return {
      setters: [
        function (o) {
          (t = o.applyDecoratedDescriptor),
            (n = o.inheritsLoose),
            (r = o.initializerDefineProperty),
            (i = o.assertThisInitialized);
        },
        function (o) {
          (e = o.cclegacy), (a = o._decorator), (u = o.AudioClip);
        },
        function (o) {
          c = o.plantSound;
        },
        function (o) {
          l = o.ArrayGet;
        },
      ],
      execute: function () {
        var s, d, p, b, S, f, y, h, v;
        e._RF.push({}, '4237c+e/VZPxbgDw+Iz6Ulw', 'vamporciniSound', void 0);
        var g = a.ccclass,
          m = a.property;
        o(
          'vamporciniSound',
          ((s = g('vamporciniSound')),
          (d = m([u])),
          (p = m([u])),
          (b = m([u])),
          s(
            ((y = t(
              (f = (function (o) {
                function t() {
                  for (var t, n = arguments.length, e = new Array(n), a = 0; a < n; a++) e[a] = arguments[a];
                  return (
                    (t = o.call.apply(o, [this].concat(e)) || this),
                    r(t, 'foodStartSound', y, i(t)),
                    r(t, 'absorbStartSound', h, i(t)),
                    r(t, 'absorbEndSound', v, i(t)),
                    t
                  );
                }
                n(t, o);
                var e = t.prototype;
                return (
                  (e.playAbsorbStart = function (o) {
                    void 0 === o && (o = !1), this.playOneShot(l.getRandom(o ? this.foodStartSound : this.absorbStartSound));
                  }),
                  (e.playAbsorbEnd = function () {
                    this.playOneShot(l.getRandom(this.absorbEndSound));
                  }),
                  t
                );
              })(c)).prototype,
              'foodStartSound',
              [d],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (h = t(f.prototype, 'absorbStartSound', [p], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (v = t(f.prototype, 'absorbEndSound', [b], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (S = f))
          ) || S)
        );
        e._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/WallNut.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './Plant.ts', './wallnutSound.ts'],
  function (t) {
    var e, a, n, i, s, r, o, h;
    return {
      setters: [
        function (t) {
          (e = t.applyDecoratedDescriptor),
            (a = t.inheritsLoose),
            (n = t.initializerDefineProperty),
            (i = t.assertThisInitialized);
        },
        function (t) {
          (s = t.cclegacy), (r = t._decorator);
        },
        function (t) {
          o = t.Plant;
        },
        function (t) {
          h = t.wallnutSound;
        },
      ],
      execute: function () {
        var l, u, m, d, c;
        s._RF.push({}, 'd56b3xZyPhKQrzCj5jI3A26', 'WallNut', void 0);
        var f = r.ccclass,
          p = r.property;
        t(
          'WallNutPlant',
          ((l = f('WallNutPlant')),
          (u = p(Number)),
          l(
            ((c = e(
              (d = (function (t) {
                function e() {
                  for (var e, a = arguments.length, s = new Array(a), r = 0; r < a; r++) s[r] = arguments[r];
                  return (
                    ((e = t.call.apply(t, [this].concat(s)) || this).armorHealth = 0),
                    n(e, 'armorToughness', c, i(e)),
                    (e.armorStage = 3),
                    (e.hurtStage = 0),
                    e
                  );
                }
                a(e, t);
                var s = e.prototype;
                return (
                  (s.specialPlantOnLoad = function () {}),
                  (s.normalSmash = function (t) {
                    this.fooding ||
                      this.invincible ||
                      (this.armorHealth > 0 ? ((this.armorHealth = 0), (this.foodable = !0), this.setArmor()) : this.die());
                  }),
                  (s.replantable = function () {
                    return this.hurtStage > 0;
                  }),
                  (s.replant = function () {
                    (this.health = this.toughness), this.setAnimation();
                  }),
                  (s.specialPlantOnEnable = function () {
                    (this.foodable = !0), this.setAnimation(), this.setArmor(), (this.armorHealth = 0);
                  }),
                  (s.animationListener = function (t) {
                    'foodEnd' == t.name
                      ? this.foodEnd()
                      : 'wearArmor' == t.name && (this.setArmor(0), (this.armorHealth = this.armorToughness));
                  }),
                  (s.waterable = function () {
                    return 0 == this.hurtStage;
                  }),
                  (s.specialPlantDie = function () {
                    this.setArmor();
                  }),
                  (s.setArmor = function (t) {
                    void 0 === t && (t = 3);
                    var e = this.anmControl.body.armature().getSlot('ARMOR');
                    switch (t) {
                      case 0:
                        e._setDisplayIndex(0);
                        break;
                      case 1:
                        e._setDisplayIndex(1);
                        break;
                      case 2:
                        e._setDisplayIndex(2);
                        break;
                      default:
                        e._setDisplayIndex(-1), (this.armorStage = 3);
                    }
                  }),
                  (s.dealNormalDamage = function (t, e) {
                    var a = this.health + 0;
                    if (this.armorHealth > 0) {
                      var n = this.armorHealth + 0;
                      (this.armorHealth -= t), this.armorHealth != this.armorToughness && (this.foodable = !0);
                      for (var i = 0; i <= 3; i++)
                        n >= (this.toughness / 3) * i && this.armorHealth <= (this.toughness / 3) * i && this.setArmor(3 - i);
                    } else
                      (this.health -= t),
                        t > 0 && ((this.hurting = this.defaultHurtLightStrength(0 == e)), this.onDamaged(t, a, this.health + 0)),
                        this.health <= 0 && this.die();
                    return this.health;
                  }),
                  (s.onDamaged = function (t, e, a) {
                    for (var n = 1; n <= 3; n++)
                      e >= (this.toughness / 4) * n && a <= (this.toughness / 4) * n && this.setAnimation(4 - n);
                  }),
                  (s.specialPlantFood = function (t) {
                    this.getComponent(h).playFoodSound(),
                      (this.foodable = !1),
                      this.setAnimation(0),
                      this.anmControl.playAnimation('Food', 1);
                  }),
                  (s.setAnimation = function (t) {
                    void 0 === t && (t = 0), (this.hurtStage = t);
                    var e,
                      a = this.anmControl;
                    switch (t) {
                      case 1:
                        (a.IdleAnim = 'Idle2'), (a.RandomAnim = []), (this.deathAnm = 'Death2');
                        break;
                      case 2:
                        (a.IdleAnim = 'Idle3'), (a.RandomAnim = []), (this.deathAnm = 'Death3');
                        break;
                      case 3:
                        (a.IdleAnim = 'Idle4'), (a.RandomAnim = []), (this.deathAnm = 'Death4');
                        break;
                      default:
                        (a.IdleAnim = 'Idle1'),
                          (a.RandomAnim = ['Rand11', 'Rand12']),
                          (this.deathAnm = 'Death1'),
                          (this.hurtStage = 0);
                    }
                    this.dead || (a.playRandom(), this.replantable() && (null == (e = this.inLnC) || e.readIndex()));
                  }),
                  e
                );
              })(o)).prototype,
              'armorToughness',
              [u],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 4e3;
                },
              }
            )),
            (m = d))
          ) || m)
        );
        s._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/wallnutSound.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './plantSound.ts'],
  function (n) {
    var t, o, e, r, i, u, l, a;
    return {
      setters: [
        function (n) {
          (t = n.applyDecoratedDescriptor),
            (o = n.inheritsLoose),
            (e = n.initializerDefineProperty),
            (r = n.assertThisInitialized);
        },
        function (n) {
          (i = n.cclegacy), (u = n._decorator), (l = n.AudioClip);
        },
        function (n) {
          a = n.plantSound;
        },
      ],
      execute: function () {
        var c, s, p, d, f;
        i._RF.push({}, '32ece+svt1FM6szWFC0R0DX', 'wallnutSound', void 0);
        var S = u.ccclass,
          y = u.property;
        n(
          'wallnutSound',
          ((c = S('wallnutSound')),
          (s = y(l)),
          c(
            ((f = t(
              (d = (function (n) {
                function t() {
                  for (var t, o = arguments.length, i = new Array(o), u = 0; u < o; u++) i[u] = arguments[u];
                  return (t = n.call.apply(n, [this].concat(i)) || this), e(t, 'foodSound', f, r(t)), t;
                }
                return (
                  o(t, n),
                  (t.prototype.playFoodSound = function () {
                    this.playOneShot(this.foodSound);
                  }),
                  t
                );
              })(a)).prototype,
              'foodSound',
              [s],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              }
            )),
            (p = d))
          ) || p)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/WorldMap.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './NodePools.ts',
    './LevelNodes.ts',
    './levelController.ts',
    './Plants.ts',
    './PlayerProperties.ts',
    './SoundRescourses.ts',
    './worldMapScene.ts',
  ],
  function (e) {
    var t, i, n, l, o, a, r, s, c, p, u, d, y, v, h, f, m, g, b, N, P, w, E, D, C, M, X, B, L, S;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (i = e.initializerDefineProperty),
            (n = e.inheritsLoose),
            (l = e.assertThisInitialized),
            (o = e.createClass);
        },
        function (e) {
          (a = e.cclegacy),
            (r = e._decorator),
            (s = e.Enum),
            (c = e.JsonAsset),
            (p = e.Node),
            (u = e.CCFloat),
            (d = e.Vec3),
            (y = e.dragonBones),
            (v = e.tween),
            (h = e.Color),
            (f = e.UIOpacity),
            (m = e.input),
            (g = e.Input),
            (b = e.Label),
            (N = e.director),
            (P = e.Component);
        },
        function (e) {
          w = e.NodePools;
        },
        function (e) {
          E = e.levelNodeRes;
        },
        function (e) {
          D = e.LevelPlay;
        },
        function (e) {
          (C = e.PlantEnum), (M = e.plants);
        },
        function (e) {
          X = e.AllPlayerProperties;
        },
        function (e) {
          B = e.sounds;
        },
        function (e) {
          (L = e.WorldMapSceneDisplayEnum), (S = e.worldMapScene);
        },
      ],
      execute: function () {
        var z, I, x, _, W, A, T, R, F, J, O, H, U, k, G, V, Y, j, q, K, Q, Z, $, ee, te, ie, ne, le, oe, ae, re, se, ce, pe, ue;
        a._RF.push({}, 'c950fgYqFxBG7Ic+A1nhlTR', 'WorldMap', void 0);
        var de = r.ccclass,
          ye = r.property,
          ve = (function (e) {
            return (
              (e[(e.level = 0)] = 'level'),
              (e[(e.plant = 1)] = 'plant'),
              (e[(e.giftBox = 2)] = 'giftBox'),
              (e[(e.trophy = 3)] = 'trophy'),
              e
            );
          })(ve || {}),
          he = (function (e) {
            return (e[(e.normal = 0)] = 'normal'), (e[(e.minigame = 1)] = 'minigame'), (e[(e.gargantuar = 2)] = 'gargantuar'), e;
          })(he || {});
        s(C), s(he), s(ve);
        var fe =
            ((z = de('LevelIsland')),
            (I = ye({ type: ve })),
            (x = ye({
              type: C,
              visible: function () {
                return this.islandDisplay == ve.plant;
              },
            })),
            (_ = ye({
              type: he,
              visible: function () {
                return this.islandDisplay == ve.level;
              },
            })),
            (W = ye({
              type: c,
              visible: function () {
                return this.islandDisplay == ve.level;
              },
            })),
            (A = ye({
              type: String,
              visible: function () {
                return this.islandDisplay == ve.level;
              },
            })),
            (T = ye(p)),
            z(
              ((J = t(
                (F = function () {
                  i(this, 'islandDisplay', J, this),
                    i(this, 'plantDisplayed', O, this),
                    i(this, 'levelNodeAppearance', H, this),
                    i(this, 'levelJson', U, this),
                    i(this, 'levelNodeName', k, this),
                    i(this, 'islandNode', G, this);
                }).prototype,
                'islandDisplay',
                [I],
                {
                  configurable: !0,
                  enumerable: !0,
                  writable: !0,
                  initializer: function () {
                    return ve.level;
                  },
                }
              )),
              (O = t(F.prototype, 'plantDisplayed', [x], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return C.Peashooter;
                },
              })),
              (H = t(F.prototype, 'levelNodeAppearance', [_], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return he.normal;
                },
              })),
              (U = t(F.prototype, 'levelJson', [W], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return null;
                },
              })),
              (k = t(F.prototype, 'levelNodeName', [A], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return '';
                },
              })),
              (G = t(F.prototype, 'islandNode', [T], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
              (R = F))
            ) || R),
          me =
            ((V = de('Farlands')),
            (Y = ye(p)),
            (j = ye(u)),
            V(
              ((Q = t(
                (K = function () {
                  i(this, 'islandNode', Q, this), i(this, 'offsetScale', Z, this), (this.orgPosition = new d(0, 0, 0));
                }).prototype,
                'islandNode',
                [Y],
                { configurable: !0, enumerable: !0, writable: !0, initializer: null }
              )),
              (Z = t(K.prototype, 'offsetScale', [j], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 1;
                },
              })),
              (q = K))
            ) || q);
        s(L);
        e(
          'WorldMap',
          (($ = de('WorldMap')),
          (ee = ye([fe])),
          (te = ye(p)),
          (ie = ye(p)),
          (ne = ye([me])),
          (le = ye({ type: L })),
          $(
            ((re = t(
              (ae = (function (e) {
                function t() {
                  for (var t, n = arguments.length, o = new Array(n), a = 0; a < n; a++) o[a] = arguments[a];
                  return (
                    (t = e.call.apply(e, [this].concat(o)) || this),
                    i(t, 'levelIslands', re, l(t)),
                    (t.levelNodeLayer = void 0),
                    (t.levelPathLayer = void 0),
                    i(t, 'islandParent', se, l(t)),
                    i(t, 'levelParent', ce, l(t)),
                    (t.levelNodes = []),
                    i(t, 'farIslands', pe, l(t)),
                    (t._mapX = 0),
                    (t.maxMapX = 0),
                    (t.velocity = 0),
                    i(t, 'displayEnum', ue, l(t)),
                    (t.dbs = []),
                    t
                  );
                }
                n(t, e);
                var a = t.prototype;
                return (
                  (a.onLoad = function () {
                    (this.dbs = this.getComponentsInChildren(y.ArmatureDisplay)), (this.levelNodes = []);
                    var e = this.node.getChildByName('Levels');
                    (this.levelNodeLayer = e.getChildByName('Nodes')),
                      (this.levelPathLayer = e.getChildByName('Paths')),
                      this.farIslands.forEach(function (e) {
                        e.orgPosition = e.islandNode.position.clone();
                      });
                  }),
                  (a.onDisable = function () {
                    X.savePP();
                  }),
                  (a.moveBy = function (e, t) {
                    void 0 === t && (t = 0.1);
                    var i = this.mapX + e;
                    i > 0 && (i = 0), i < -this.maxMapX && (i = -this.maxMapX);
                    t > 0 ? v(this).to(t, { mapX: i }).start() : (this.mapX = i);
                  }),
                  (a.moveLefter = function () {
                    this.velocity < 0 && (this.velocity = 0), (this.velocity += 20);
                  }),
                  (a.moveRighter = function () {
                    this.velocity > 0 && (this.velocity = 0), (this.velocity -= 20);
                  }),
                  (a.onEnable = function () {
                    var e = this;
                    this.dbs.forEach(function (t) {
                      var i = t.color.clone();
                      t.color = new h(i.r, i.g, i.b, e.node.parent.getComponent(f).opacity);
                    }),
                      (this.velocity = 0),
                      (this.mapX = S.getWMXByDisplayEnum(this.displayEnum));
                  }),
                  (a.update = function (e) {
                    var t = this;
                    this.dbs.forEach(function (e) {
                      var i = e.color.clone();
                      e.color = new h(i.r, i.g, i.b, t.node.parent.getComponent(f).opacity);
                    }),
                      0 != this.velocity && (this.moveBy(this.velocity, 0), (this.velocity /= 1.05));
                  }),
                  (a.start = function () {
                    var e = this;
                    this.dbs.forEach(function (t) {
                      var i = t.color.clone();
                      t.color = new h(i.r, i.g, i.b, e.node.parent.getComponent(f).opacity);
                    }),
                      B.playWorldMapStart(),
                      m.on(
                        g.EventType.MOUSE_WHEEL,
                        function (t) {
                          var i = 0.2 * t.getScrollY();
                          (e.velocity = 0), e.moveBy(i, 0);
                        },
                        this
                      ),
                      m.on(
                        g.EventType.TOUCH_MOVE,
                        function (t) {
                          var i = t.getDeltaX() * e.node.worldScale.x;
                          (e.velocity = i), e.moveBy(i, 0);
                        },
                        this
                      ),
                      this.levelIslands.forEach(function (t) {
                        var i = t.islandNode.worldPosition;
                        if (t.islandDisplay == ve.level) {
                          var n = E.normalNode();
                          switch (t.levelNodeAppearance) {
                            case he.gargantuar:
                              n = E.gargantuarNode();
                              break;
                            case he.minigame:
                              n = E.minigameNode();
                          }
                          var l = w.instantiatePooly(n);
                          (l.parent = e.levelNodeLayer),
                            (l.worldPosition = i),
                            (l.getChildByName('title').getComponent(b).string = t.levelNodeName),
                            e.levelNodes.push(l),
                            l.getChildByName('listener').on(p.EventType.TOUCH_END, function () {
                              (D.levelJson = t.levelJson), N.loadScene('inGameScene');
                            });
                        } else if (t.islandDisplay == ve.plant) {
                          var o = w.instantiatePooly(M.getPlantsInCard(t.plantDisplayed).plantDIS);
                          (o.parent = e.levelNodeLayer), (o.worldPosition = i);
                        }
                        var a = i.clone().add(e.islandParent.worldPosition.clone().negative()).x;
                        a > e.maxMapX && (e.maxMapX = a);
                      });
                  }),
                  o(t, [
                    {
                      key: 'mapX',
                      get: function () {
                        return this._mapX;
                      },
                      set: function (e) {
                        (this.levelParent.position = new d(e, 0, 0)),
                          (this.islandParent.position = new d(e, 0, 0)),
                          this.farIslands.forEach(function (t) {
                            t.islandNode.position = new d(e * t.offsetScale + t.orgPosition.x, t.orgPosition.y, 0);
                          }),
                          (this._mapX = e),
                          S.setWMXByDisplayEnum(this.displayEnum, this._mapX);
                      },
                    },
                  ]),
                  t
                );
              })(P)).prototype,
              'levelIslands',
              [ee],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return [];
                },
              }
            )),
            (se = t(ae.prototype, 'islandParent', [te], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (ce = t(ae.prototype, 'levelParent', [ie], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (pe = t(ae.prototype, 'farIslands', [ne], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (ue = t(ae.prototype, 'displayEnum', [le], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return L.egypt;
              },
            })),
            (oe = ae))
          ) || oe)
        );
        a._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/WorldMapChooser.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './worldMapScene.ts', './PlayerProperties.ts', './SoundRescourses.ts'],
  function (e) {
    var n, t, o, r, i, a, s, l, c, u, d, h, p, f, b, y, m, w, g, v, x, M;
    return {
      setters: [
        function (e) {
          (n = e.applyDecoratedDescriptor),
            (t = e.initializerDefineProperty),
            (o = e.inheritsLoose),
            (r = e.assertThisInitialized),
            (i = e.createClass);
        },
        function (e) {
          (a = e.cclegacy),
            (s = e._decorator),
            (l = e.Enum),
            (c = e.Node),
            (u = e.AudioClip),
            (d = e.Color),
            (h = e.UIOpacity),
            (p = e.Vec3),
            (f = e.dragonBones),
            (b = e.input),
            (y = e.Input),
            (m = e.tween),
            (w = e.Component);
        },
        function (e) {
          (g = e.WorldMapSceneDisplayEnum), (v = e.worldMapScene);
        },
        function (e) {
          x = e.AllPlayerProperties;
        },
        function (e) {
          M = e.sounds;
        },
      ],
      execute: function () {
        var P, C, I, E, S, _, T, z, A, W, D, O, B, N, k, F, H, L, R, U, j, q;
        a._RF.push({}, '0afd7/QFy1OXrADNpaZkrno', 'WorldMapChooser', void 0);
        var Q = s.ccclass,
          V = s.property;
        l(g);
        var X =
          ((P = Q('WorldMapIcon')),
          (C = V(c)),
          (I = V(Boolean)),
          (E = V({
            type: g,
            visible: function () {
              return this.enterable;
            },
          })),
          P(
            ((T = n(
              (_ = function () {
                t(this, 'node', T, this), t(this, 'enterable', z, this), t(this, 'enterTo', A, this), (this.x = 0);
              }).prototype,
              'node',
              [C],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (z = n(_.prototype, 'enterable', [I], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !0;
              },
            })),
            (A = n(_.prototype, 'enterTo', [E], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return g.egypt;
              },
            })),
            (S = _))
          ) || S);
        e(
          'WorldMapChooser',
          ((W = Q('WorldMapChooser')),
          (D = V(c)),
          (O = V(c)),
          (B = V([X])),
          (N = V(u)),
          (k = V(u)),
          W(
            ((L = n(
              (H = (function (e) {
                function n() {
                  for (var n, o = arguments.length, i = new Array(o), a = 0; a < o; a++) i[a] = arguments[a];
                  return (
                    (n = e.call.apply(e, [this].concat(i)) || this),
                    t(n, 'mid', L, r(n)),
                    t(n, 'iconParent', R, r(n)),
                    t(n, 'icons', U, r(n)),
                    t(n, 'touchStartSound', j, r(n)),
                    t(n, 'touchEndSound', q, r(n)),
                    (n._currentI = 0),
                    (n.xMax = 0),
                    (n._x = 0),
                    (n.dbs = []),
                    (n.entering = !1),
                    n
                  );
                }
                o(n, e);
                var a = n.prototype;
                return (
                  (a.onMouseWheel = function (e) {
                    var n = e.getScrollY() > 0 ? -1 : 1;
                    this.moveBy(n);
                  }),
                  (a.moveTo = function (e) {
                    void 0 === e && (e = 0), (this.currentI = e);
                  }),
                  (a.moveBy = function (e) {
                    void 0 === e && (e = 0), this.moveTo(this.currentI + e);
                  }),
                  (a.update = function (e) {
                    var n = this;
                    this.dbs.forEach(function (e) {
                      var t = e.color.clone();
                      e.color = new d(t.r, t.g, t.b, n.node.parent.getComponent(h).opacity);
                    }),
                      this.icons.forEach(function (e) {
                        var t = e.node.worldPosition.x - n.mid.worldPosition.x,
                          o = Math.max(1 - Math.abs(t) / 600, 0.3);
                        e.node.scale = new p(o, o, o);
                      });
                  }),
                  (a.onEnable = function () {
                    var e = this;
                    (this.entering = !1),
                      this.dbs.forEach(function (n) {
                        var t = n.color.clone();
                        n.color = new d(t.r, t.g, t.b, e.node.parent.getComponent(h).opacity);
                      }),
                      this.icons.forEach(function (n) {
                        var t = n.node.worldPosition.x - e.mid.worldPosition.x,
                          o = Math.max(1 - Math.abs(t) / 600, 0.3);
                        n.node.scale = new p(o, o, o);
                      }),
                      (this.currentI = isNaN(x.currentPlayer.worldChooserI) ? 0 : x.currentPlayer.worldChooserI);
                  }),
                  (a.onLoad = function () {
                    var e = this;
                    (this.dbs = this.getComponentsInChildren(f.ArmatureDisplay)),
                      (this.currentI = 0),
                      b.on(y.EventType.MOUSE_WHEEL, this.onMouseWheel, this),
                      this.icons.forEach(function (n, t) {
                        var o = n.node.worldPosition.x - e.mid.worldPosition.x;
                        (n.x = o),
                          e.xMax <= o && (e.xMax = o),
                          n.node.on(
                            c.EventType.TOUCH_START,
                            function () {
                              var o = Math.abs(n.node.worldPosition.x - e.mid.worldPosition.x);
                              e.entering || (n.enterable && o < 5 ? M.play(e.touchStartSound) : o >= 5 && (e.currentI = t));
                            },
                            e
                          ),
                          n.node.on(
                            c.EventType.TOUCH_END,
                            function () {
                              var t = Math.abs(n.node.worldPosition.x - e.mid.worldPosition.x);
                              e.entering ||
                                (n.enterable &&
                                  t < 5 &&
                                  (v.component.switchWM(n.enterTo), (e.entering = !0), M.play(e.touchEndSound)));
                            },
                            e
                          );
                      });
                  }),
                  i(n, [
                    {
                      key: 'currentI',
                      get: function () {
                        return this._currentI;
                      },
                      set: function (e) {
                        var n = this;
                        if ((e >= n.icons.length && (e = n.icons.length - 1), e < 0 && (e = 0), this._currentI != e)) {
                          m(n).to(0.2, { x: n.icons[e].x }, { easing: 'quadOut' }).start();
                          var t = n.icons[this._currentI].enterable,
                            o = n.icons[e].enterable;
                          (this._currentI = e),
                            (x.currentPlayer.worldChooserI = e),
                            t && !o
                              ? this.mid.getComponent(f.ArmatureDisplay).playAnimation('Fade')
                              : !t && o && this.mid.getComponent(f.ArmatureDisplay).playAnimation('Start');
                        }
                      },
                    },
                    {
                      key: 'x',
                      get: function () {
                        return this._x;
                      },
                      set: function (e) {
                        e < 0 && (e = 0),
                          e > this.xMax && (e = this.xMax),
                          (this.iconParent.worldPosition = this.mid.worldPosition.clone().add(new p(-e, 0, 0))),
                          (this._x = e);
                      },
                    },
                  ]),
                  n
                );
              })(w)).prototype,
              'mid',
              [D],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (R = n(H.prototype, 'iconParent', [O], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (U = n(H.prototype, 'icons', [B], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (j = n(H.prototype, 'touchStartSound', [N], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (q = n(H.prototype, 'touchEndSound', [k], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (F = H))
          ) || F)
        );
        a._RF.pop();
      },
    };
  }
);

System.register('chunks:///_virtual/WorldMaps.ts', ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (e) {
  var r, t, i, o, a, n, l, p;
  return {
    setters: [
      function (e) {
        (r = e.applyDecoratedDescriptor), (t = e.inheritsLoose), (i = e.initializerDefineProperty), (o = e.assertThisInitialized);
      },
      function (e) {
        (a = e.cclegacy), (n = e._decorator), (l = e.Prefab), (p = e.Component);
      },
    ],
    execute: function () {
      var c, s, u, f, y, M, b, g, W;
      a._RF.push({}, '5c9aeSHwwpMsYe+LVqE6pgO', 'WorldMaps', void 0);
      var d = n.ccclass,
        h = n.property;
      e(
        'WorldMaps',
        ((c = d('WorldMaps')),
        (s = h(l)),
        (u = h(l)),
        (f = h(l)),
        c(
          ((b = r(
            (M = (function (e) {
              function r() {
                for (var r, t = arguments.length, a = new Array(t), n = 0; n < t; n++) a[n] = arguments[n];
                return (
                  (r = e.call.apply(e, [this].concat(a)) || this),
                  i(r, 'WMChooser', b, o(r)),
                  i(r, 'EgyptWM', g, o(r)),
                  i(r, 'PirateWM', W, o(r)),
                  r
                );
              }
              return t(r, e), r;
            })(p)).prototype,
            'WMChooser',
            [s],
            { configurable: !0, enumerable: !0, writable: !0, initializer: null }
          )),
          (g = r(M.prototype, 'EgyptWM', [u], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
          (W = r(M.prototype, 'PirateWM', [f], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
          (y = M))
        ) || y)
      );
      a._RF.pop();
    },
  };
});

System.register(
  'chunks:///_virtual/worldMapScene.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './SoundsController.ts', './SoundManager.ts', './PlayerProperties.ts'],
  function (e) {
    var t, o, r, n, i, a, c, l, s, u, p, y, h, M, W, d, w, g, b, f, S, m, P, v;
    return {
      setters: [
        function (e) {
          (t = e.applyDecoratedDescriptor),
            (o = e.inheritsLoose),
            (r = e.initializerDefineProperty),
            (n = e.assertThisInitialized);
        },
        function (e) {
          (i = e.cclegacy),
            (a = e._decorator),
            (c = e.UIOpacity),
            (l = e.Prefab),
            (s = e.Node),
            (u = e.director),
            (p = e.AudioSource),
            (y = e.input),
            (h = e.Input),
            (M = e.KeyCode),
            (W = e.instantiate),
            (d = e.tween),
            (w = e.dragonBones),
            (g = e.Color),
            (b = e.Vec3),
            (f = e.Component);
        },
        function (e) {
          (S = e.MusicController), (m = e.SoundFXController);
        },
        function (e) {
          P = e.musicType;
        },
        function (e) {
          v = e.AllPlayerProperties;
        },
      ],
      execute: function () {
        var C, N, X, z, D, E, L, k, A, F, V, _, x, B, I, T, K, O;
        i._RF.push({}, '27653LZNN5NYJNVVGpF/xdf', 'worldMapScene', void 0);
        var R = a.ccclass,
          Y = a.property,
          j = e(
            'WorldMapSceneDisplayEnum',
            (function (e) {
              return (
                (e[(e.chooser = 0)] = 'chooser'),
                (e[(e.egypt = 1)] = 'egypt'),
                (e[(e.pirate = 2)] = 'pirate'),
                (e[(e.cowboy = 3)] = 'cowboy'),
                e
              );
            })({})
          );
        e(
          'worldMapScene',
          ((C = R('worldMapScene')),
          (N = Y(c)),
          (X = Y(c)),
          (z = Y(l)),
          (D = Y(l)),
          (E = Y(l)),
          (L = Y(l)),
          (k = Y(s)),
          C(
            (((O = (function (e) {
              function t() {
                for (var t, o = arguments.length, i = new Array(o), a = 0; a < o; a++) i[a] = arguments[a];
                return (
                  (t = e.call.apply(e, [this].concat(i)) || this),
                  r(t, 'WMSlot', V, n(t)),
                  r(t, 'WMLowerSlot', _, n(t)),
                  (t.audioSource = void 0),
                  r(t, 'WMChooser', x, n(t)),
                  r(t, 'egyptWM', B, n(t)),
                  r(t, 'pirateWM', I, n(t)),
                  r(t, 'cowboyWM', T, n(t)),
                  (t.settingsShown = void 0),
                  r(t, 'settingWindow', K, n(t)),
                  t
                );
              }
              o(t, e);
              var i = t.prototype;
              return (
                (i.exit = function () {
                  v.currentPlayer.currentWM == j.chooser ? u.loadScene('mainScene') : this.switchWM(j.chooser);
                }),
                (t.getWMXByDisplayEnum = function (e) {
                  switch (e) {
                    case j.egypt:
                      return isNaN(v.currentPlayer.egyptWMX) ? 0 : v.currentPlayer.egyptWMX;
                    case j.pirate:
                      return isNaN(v.currentPlayer.pirateWMX) ? 0 : v.currentPlayer.pirateWMX;
                    case j.cowboy:
                      return isNaN(v.currentPlayer.cowboyWMX) ? 0 : v.currentPlayer.cowboyWMX;
                  }
                  return 0;
                }),
                (t.setWMXByDisplayEnum = function (e, t) {
                  switch (e) {
                    case j.egypt:
                      v.currentPlayer.egyptWMX = t;
                      break;
                    case j.pirate:
                      v.currentPlayer.pirateWMX = t;
                      break;
                    case j.cowboy:
                      v.currentPlayer.cowboyWMX = t;
                  }
                }),
                (i.onLoad = function () {
                  var e = this;
                  (t.component = this),
                    this.getComponent(p) || this.addComponent(p),
                    (this.audioSource = this.getComponent(p)),
                    y.on(
                      h.EventType.KEY_DOWN,
                      function (t) {
                        t.keyCode == M.ESCAPE && e.exit();
                      },
                      this
                    );
                }),
                (i.switchWM = function (e) {
                  var t = this,
                    o = this.WMChooser;
                  switch (e) {
                    case j.egypt:
                      o = this.egyptWM;
                      break;
                    case j.pirate:
                      o = this.pirateWM;
                      break;
                    case j.cowboy:
                      o = this.cowboyWM;
                  }
                  var r = 0 == this.WMSlot.opacity ? 0 : 0.5,
                    n = W(o);
                  d(this.WMSlot)
                    .to(r, { opacity: 0 })
                    .call(function () {})
                    .to(0.1, {})
                    .call(function () {
                      t.WMSlot.node.destroyAllChildren(),
                        (n.parent = t.WMLowerSlot.node),
                        n.getComponentsInChildren(w.ArmatureDisplay).forEach(function (e) {
                          e.color = new g(255, 255, 255, 0);
                        });
                    })
                    .to(0.1, {})
                    .call(function () {
                      n.parent = t.WMSlot.node;
                    })
                    .to(0.5, { opacity: 255 })
                    .start(),
                    (v.currentPlayer.currentWM = e),
                    v.savePP();
                }),
                (i.setting = function () {
                  this.settingsShown
                    ? ((this.settingWindow.position = new b(-1e4, 0)), (this.settingsShown = !1))
                    : ((this.settingWindow.position = new b(0, 0)), (this.settingsShown = !0));
                }),
                (i.start = function () {
                  S.playMusic(P.Worldmap),
                    (this.settingsShown = !0),
                    (this.audioSource.volume = 0.3 * m.SoundFXVolume),
                    this.setting();
                  var e = isNaN(v.currentPlayer.currentWM) ? 0 : v.currentPlayer.currentWM;
                  this.switchWM(e);
                }),
                (i.update = function (e) {
                  this.audioSource.volume = 0.3 * m.SoundFXVolume;
                }),
                t
              );
            })(f)).component = void 0),
            (V = t((F = O).prototype, 'WMSlot', [N], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (_ = t(F.prototype, 'WMLowerSlot', [X], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (x = t(F.prototype, 'WMChooser', [z], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (B = t(F.prototype, 'egyptWM', [D], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (I = t(F.prototype, 'pirateWM', [E], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (T = t(F.prototype, 'cowboyWM', [L], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (K = t(F.prototype, 'settingWindow', [k], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (A = F))
          ) || A)
        );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Zombie.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './NodePools.ts',
    './Armor.ts',
    './Character.ts',
    './BodyGrouper.ts',
    './SoundsController.ts',
    './CharacterManager.ts',
    './Square.ts',
    './LnC.ts',
    './Armors.ts',
    './SoundRescourses.ts',
    './Particles.ts',
    './FrontYard.ts',
    './Materials.ts',
    './Plant.ts',
    './levelController.ts',
    './Sunflower.ts',
    './Zombies.ts',
    './ZombieAshParticle.ts',
    './EgyptSandStormParticle.ts',
    './ParticleSelfdestroy.ts',
    './Plants.ts',
  ],
  function (t) {
    var i,
      e,
      n,
      o,
      a,
      s,
      r,
      l,
      h,
      d,
      u,
      c,
      p,
      f,
      b,
      m,
      y,
      w,
      S,
      g,
      P,
      v,
      k,
      D,
      z,
      C,
      A,
      L,
      T,
      R,
      _,
      E,
      B,
      W,
      x,
      F,
      H,
      Z,
      O,
      I,
      M,
      X,
      q,
      N,
      j,
      V;
    return {
      setters: [
        function (t) {
          (i = t.applyDecoratedDescriptor),
            (e = t.inheritsLoose),
            (n = t.initializerDefineProperty),
            (o = t.assertThisInitialized),
            (a = t.createClass);
        },
        function (t) {
          (s = t.cclegacy),
            (r = t._decorator),
            (l = t.CCFloat),
            (h = t.Enum),
            (d = t.dragonBones),
            (u = t.AudioClip),
            (c = t.Prefab),
            (p = t.Node),
            (f = t.Vec2),
            (b = t.Size),
            (m = t.tween),
            (y = t.Vec3),
            (w = t.Color),
            (S = t.AudioSource),
            (g = t.Material),
            (P = t.math);
        },
        function (t) {
          (v = t.instantiatePooly), (k = t.ArrayGet), (D = t.NodePools);
        },
        function (t) {
          z = t.Armor;
        },
        function (t) {
          C = t.Character;
        },
        function (t) {
          A = t.BodyGrouper;
        },
        function (t) {
          L = t.SoundFXController;
        },
        function (t) {
          (T = t.Rectangle), (R = t.ZombiePool), (_ = t.Umbrellas);
        },
        function (t) {
          E = t.Square;
        },
        function (t) {
          B = t.TileType;
        },
        function (t) {
          W = t.armors;
        },
        function (t) {
          x = t.sounds;
        },
        function (t) {
          F = t.particle;
        },
        function (t) {
          H = t.FrontYard;
        },
        function (t) {
          Z = t.materialRes;
        },
        function (t) {
          O = t.PlantType;
        },
        function (t) {
          I = t.LevelPlay;
        },
        function (t) {
          M = t.sunflower;
        },
        function (t) {
          X = t.ZombieEnum;
        },
        function (t) {
          q = t.ZombieAshParticle;
        },
        function (t) {
          N = t.EgyptSandStormParticle;
        },
        function (t) {
          j = t.ParticleSelfdestroy;
        },
        function (t) {
          V = t.PlantEnum;
        },
      ],
      execute: function () {
        var Y,
          G,
          U,
          K,
          J,
          Q,
          $,
          tt,
          it,
          et,
          nt,
          ot,
          at,
          st,
          rt,
          lt,
          ht,
          dt,
          ut,
          ct,
          pt,
          ft,
          bt,
          mt,
          yt,
          wt,
          St,
          gt,
          Pt,
          vt,
          kt,
          Dt,
          zt,
          Ct,
          At,
          Lt,
          Tt,
          Rt,
          _t,
          Et,
          Bt,
          Wt,
          xt,
          Ft,
          Ht,
          Zt,
          Ot,
          It,
          Mt,
          Xt,
          qt,
          Nt,
          jt,
          Vt,
          Yt,
          Gt,
          Ut,
          Kt,
          Jt,
          Qt,
          $t,
          ti,
          ii,
          ei,
          ni,
          oi,
          ai,
          si,
          ri,
          li;
        s._RF.push({}, '1f230U4V25L0KJSottj1hy0', 'Zombie', void 0);
        var hi = r.ccclass,
          di = r.property,
          ui = t(
            'zombiePoison',
            ((Y = hi('ZombiePoison')),
            (G = di({ type: l, visible: !0 })),
            (U = di({ type: l, visible: !0 })),
            Y(
              ((Q = i(
                (J = (function () {
                  function t(t, i) {
                    n(this, 'DPS', Q, this), n(this, 'duration', $, this), (this.DPS = t), (this.duration = i);
                  }
                  return (
                    (t.prototype.isValid = function () {
                      return this.DPS > 0 && this.duration > 0;
                    }),
                    t
                  );
                })()).prototype,
                'DPS',
                [G],
                {
                  configurable: !0,
                  enumerable: !0,
                  writable: !0,
                  initializer: function () {
                    return 0;
                  },
                }
              )),
              ($ = i(J.prototype, 'duration', [U], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 0;
                },
              })),
              (K = J))
            ) || K)
          ),
          ci = t(
            'zombieDamageType',
            (function (t) {
              return (
                (t[(t.physicle = 0)] = 'physicle'),
                (t[(t.fire = 1)] = 'fire'),
                (t[(t.electricity = 2)] = 'electricity'),
                (t[(t.potatoMine = 3)] = 'potatoMine'),
                t
              );
            })({})
          ),
          pi = t(
            'ZombieGroanSoundGroupEnum',
            (function (t) {
              return (
                (t[(t.modern = 0)] = 'modern'),
                (t[(t.egypt = 1)] = 'egypt'),
                (t[(t.pirate = 2)] = 'pirate'),
                (t[(t.cowboy = 3)] = 'cowboy'),
                (t[(t.future = 4)] = 'future'),
                (t[(t.dark = 5)] = 'dark'),
                (t[(t.beach = 6)] = 'beach'),
                (t[(t.ice = 7)] = 'ice'),
                (t[(t.lost = 8)] = 'lost'),
                (t[(t.stage = 9)] = 'stage'),
                (t[(t.dino = 10)] = 'dino'),
                (t[(t.imp = 11)] = 'imp'),
                (t[(t.gargantuar = 12)] = 'gargantuar'),
                (t[(t.none = 13)] = 'none'),
                t
              );
            })({})
          );
        h(pi);
        t(
          'Zombie',
          ((tt = hi('Zombie Features')),
          (it = di(l)),
          (et = di(d.ArmatureDisplay)),
          (nt = di({ type: pi })),
          (ot = di(Boolean)),
          (at = di([u])),
          (st = di([u])),
          (rt = di({ type: l, max: 1, min: 0 })),
          (lt = di([u])),
          (ht = di([u])),
          (dt = di([u])),
          (ut = di([u])),
          (ct = di(c)),
          (pt = di(A)),
          (ft = di(Boolean)),
          (bt = di(l)),
          (mt = di(c)),
          (yt = di(c)),
          (wt = di(Number)),
          (St = di({ type: Number, min: 0 })),
          (gt = di(Number)),
          (Pt = di(p)),
          (vt = di(Boolean)),
          (kt = di({
            type: Boolean,
            visible: function () {
              return this.chompable;
            },
          })),
          (Dt = di(f)),
          (zt = di(b)),
          (Ct = di(Number)),
          (At = di(f)),
          (Lt = di(b)),
          (Tt = di(Boolean)),
          (Rt = di(Number)),
          tt(
            ((Bt = i(
              (Et = (function (t) {
                function i() {
                  for (var i, e = arguments.length, a = new Array(e), s = 0; s < e; s++) a[s] = arguments[s];
                  return (
                    ((i = t.call.apply(t, [this].concat(a)) || this)._reversed = !1),
                    (i.chilibeanFartTween = null),
                    (i.chilibeanPoisoning = !1),
                    n(i, 'chiliStunDurationScale', Bt, o(i)),
                    (i.chiliStunParticle = null),
                    (i._chiliStun = 0),
                    (i.displayed = !1),
                    n(i, 'butterFace', Wt, o(i)),
                    (i.butterStun = 0),
                    n(i, 'zombieGroanSoundGroup', xt, o(i)),
                    (i.ID = X.modern_basic),
                    (i.finalWaveVictoryCountdown = 0.1),
                    (i.poison = new ui(0, 0)),
                    (i._perfume = 0),
                    (i.perfumeParticle = void 0),
                    (i.flying = !1),
                    n(i, 'flyZombie', Ft, o(i)),
                    (i.currentFlyZombie = !1),
                    n(i, 'breakSound', Ht, o(i)),
                    n(i, 'hurtSound', Zt, o(i)),
                    n(i, 'hurtSoundVolume', Ot, o(i)),
                    n(i, 'deathSound', It, o(i)),
                    n(i, 'onHeadThrownSound', Mt, o(i)),
                    n(i, 'lieSound', Xt, o(i)),
                    n(i, 'groanSound', qt, o(i)),
                    (i.enteredLawn = !1),
                    n(i, 'zombieAshParticle', Nt, o(i)),
                    (i.zombieAshParticle_ = null),
                    n(i, 'body', jt, o(i)),
                    n(i, 'countHealthToThisWave', Vt, o(i)),
                    n(i, 'toughness', Yt, o(i)),
                    (i.health = 190),
                    (i.stunned = 0),
                    n(i, 'zombieHead', Gt, o(i)),
                    n(i, 'zombieArm', Ut, o(i)),
                    n(i, 'zombieHeight', Kt, o(i)),
                    (i.isGargantuar = !1),
                    (i.knockBackTween = null),
                    (i.knockBackable = !0),
                    (i.leapable = !0),
                    (i.tallNutBlock = !1),
                    (i.leapHeightTween = null),
                    (i.dirtSpawning = !1),
                    (i.dirtSpawnTweens = []),
                    n(i, 'squarePerSec', Jt, o(i)),
                    (i.randomSpeed = 0.3),
                    n(i, 'anmSpeed', Qt, o(i)),
                    (i.haveArm = !0),
                    n(i, 'headDropPoint', $t, o(i)),
                    (i.haveHead = !0),
                    (i.armors = []),
                    n(i, 'chompable', ti, o(i)),
                    (i.chompable_ = !0),
                    n(i, 'easyToChomp', ii, o(i)),
                    (i.easyToChomp_ = !1),
                    (i.chill = 0),
                    (i.freeze = 0),
                    (i.icetrapParticle = void 0),
                    (i.dead = !1),
                    (i.eating = !1),
                    (i.walking = !1),
                    (i.audioSource = void 0),
                    (i.inWater = !1),
                    n(i, 'plantDetectorRecOffset', ei, o(i)),
                    n(i, 'plantDetectorRecSize', ni, o(i)),
                    (i._plantDetectorRec = T.createRectangleCenter(new f(1e5, 1e5), 1, 1)),
                    n(i, 'dps', oi, o(i)),
                    (i.lieEnded = !1),
                    n(i, 'bodyRecOffset', ai, o(i)),
                    n(i, 'bodyRecSize', si, o(i)),
                    (i._bodyRec = T.createRectangleCenter(new f(1e5, 1e5), 1, 1)),
                    (i.hurting = 0),
                    (i.havePlantfood = !1),
                    n(i, 'allowWaveAddPlantFood', ri, o(i)),
                    (i.material = void 0),
                    n(i, 'depthScale', li, o(i)),
                    (i.sandStormPar = void 0),
                    (i.sandStormTween = void 0),
                    (i.zombieWave = null),
                    (i.blew = !1),
                    (i.pfParCD = 0),
                    (i.switching = !1),
                    (i.oldTileType = B.floor),
                    (i.eatSoundCoolDown = 0),
                    i
                  );
                }
                e(i, t);
                var s = i.prototype;
                return (
                  (s.chilibeanFart = function () {
                    var t = this;
                    (this.chilibeanPoisoning = !0),
                      (this.chilibeanFartTween = m(this.db.color)
                        .to(2, { r: 0, g: 255, b: 0 })
                        .call(function () {
                          x.playZombieFart(), (t.chilibeanPoisoning = !1), (t.switching = !0), t.playIdle();
                          var i = v(F.zombieFart());
                          (i.parent = t.node.parent),
                            i.setSiblingIndex(t.node.getSiblingIndex()),
                            (i.worldPosition = new y(t._worldPositionX, t._worldPositionY + t.height)),
                            (i.scale = t.node.scale.clone().multiply(t.body.node.scale));
                          t._bodyRec.prjX();
                          t.reversed
                            ? t.inLane.zombiePool().forEach(function (i) {
                                i.bodyRec.prjX().x <= t.worldPositionX + 20 && i.setChiliStun(10);
                              })
                            : t.inLane.zombiePool().forEach(function (i) {
                                i.bodyRec.prjX().y >= t.worldPositionX - 20 && i.setChiliStun(10);
                              });
                        })
                        .to(1, { r: 255, g: 255, b: 255 })
                        .call(function () {
                          t.playDie(), (t.chilibeanFartTween = null);
                        })
                        .start());
                  }),
                  (s.dealChiliStun = function (t) {
                    this.chiliStun > 0 &&
                      ((this.chiliStun -= t),
                      this.chiliStunParticle &&
                        (this.chiliStunParticle.node.worldPosition = new y(this._worldPositionX, this._worldPositionY)));
                  }),
                  (s.onChiliStunned = function (t) {}),
                  (s.setChiliStun = function (t) {
                    return (
                      this.dead || (this.chiliStun = t > this.chiliStun ? t * this.chiliStunDurationScale : this.chiliStun),
                      this.freeze > 0 && (this.onChiliStunned(this.chiliStun), this._onStunned(this.chiliStun)),
                      !0
                    );
                  }),
                  (s.lobberTarget = function () {
                    return this;
                  }),
                  (s.lobberToPos = function (t) {
                    var i = this._bodyRec.prjX();
                    return new f((i.x + i.y) / 2 - 2 * this.getShouldSpeed() * t * (this.reversed ? -1 : 1), this.worldPositionY);
                  }),
                  (s.correctShadeWP = function () {
                    this.worldPositionX = this.shadeSocket.worldPosition.x;
                  }),
                  (s.onButtered = function (t) {}),
                  (s.setButter = function (t, i) {
                    return (
                      void 0 === i && (i = !1),
                      i && this.butterStun <= 0 && t > 0 && x.playButterOn(),
                      (this.butterStun = this.butterStun > t ? this.butterStun : t),
                      this.butterStun > 0 && (this.onButtered(this.butterStun), this._onStunned(this.butterStun)),
                      !0
                    );
                  }),
                  (s.dealButter = function (t) {
                    this.butterStun > 0 && (this.butterStun -= t),
                      this.butterFace && (this.butterFace.color = new w(255, 255, 255, this.butterStun > 0 ? 255 : 0));
                  }),
                  (s.dealHurrikale = function (t) {
                    var i;
                    null != (i = this.inLane) &&
                      i.hurrikaleBlowing() &&
                      (this.flying ? this.blowAway() : (this.knockBackBy(new f(0.2), !1, 0.1, !0, !1, !1), this.setChill(8)));
                  }),
                  (s.setPoison = function (t, i) {
                    t >= this.poison.DPS && (this.poison.DPS = t), i >= this.poison.duration && (this.poison.duration = i);
                  }),
                  (s.dealPoison = function (t) {
                    var i;
                    null == (i = this.body.body.armature().getSlot('POISONFACE')) ||
                      i._setDisplayIndex(this.poison.isValid() ? 0 : -1),
                      this.poison.isValid()
                        ? (this.dealDamage(t * this.poison.DPS, !1, !1, !1, null, 0, !1), (this.poison.duration -= t))
                        : ((this.poison.duration = 0), (this.poison.DPS = 0));
                  }),
                  (s.setPerfume = function (t) {
                    this.perfume = t > this.perfume ? t : this.perfume;
                  }),
                  (s.dealPerfume = function (t) {
                    this.perfume > 0 &&
                      (this.perfumeParticle && (this.perfumeParticle.node.worldPosition = this.node.worldPosition),
                      (this.perfume -= t));
                  }),
                  (s.specialZombieOnLanding = function () {}),
                  (s.onLanding = function () {
                    var t = this.inLnC.getTileType();
                    t == B.sky ? this.playFall() : t == B.sea && this.dropSea(),
                      this.dead || this.fallingInSky || this.specialZombieOnLanding();
                  }),
                  (s.playOnHeadThrownSound = function () {
                    x.play(k.getRandom(this.onHeadThrownSound));
                  }),
                  (s.playDeathSound = function () {
                    x.play(k.getRandom(this.deathSound));
                  }),
                  (s.playHurtSound = function () {
                    x.play(k.getRandom(this.hurtSound), this.hurtSoundVolume);
                  }),
                  (s.playBreakSound = function () {
                    this.breakSound.length ? x.play(k.getRandom(this.breakSound)) : x.playZombieLimbPop();
                  }),
                  (s.specialAshPlayed = function (t) {}),
                  (s.playAsh = function () {
                    if (!this.zombieAshParticle_) return null;
                    var t = D.instantiatePooly(this.zombieAshParticle_);
                    if (null != t && t.isValid) {
                      (t.parent = this.node.parent),
                        t.setSiblingIndex(this.node.getSiblingIndex()),
                        (t.worldPosition = new y(this.shadeSocket.worldPosition.x, this._worldPositionY + this._height, 1)),
                        (t.scale = this.node.scale.clone().multiply(this.body.node.scale)),
                        this.playDie(!0),
                        D.destroyPooly(this.node);
                      var i = t.getComponent(q);
                      return (
                        this.smartShadeHider ? (i.inLnC = this.shadeInLnC) : (i.inLnC = this.inLnC),
                        (i.height = this.height),
                        i.playAsh(),
                        this.isGargantuar && x.playGargantuarAsh(),
                        this.playSpecialZombieDieForced(),
                        this.specialAshPlayed(i),
                        i.db
                      );
                    }
                  }),
                  (s.extraHealth = function () {
                    return 0;
                  }),
                  (s.totalToughness = function () {
                    var t = this.toughness;
                    return (
                      this.armors.forEach(function (i) {
                        t += i.getComponent(z).health;
                      }),
                      (t += this.extraHealth())
                    );
                  }),
                  (s.totalHealth = function () {
                    var t = this.health;
                    return (
                      this.armors.forEach(function (i) {
                        t += i.getComponent(z).health;
                      }),
                      (t += this.extraHealth())
                    );
                  }),
                  (s._onStunned = function (t) {
                    this.endSandStorm(), this.onStunned(t);
                  }),
                  (s.onStunned = function (t) {}),
                  (s.stun = function (t) {
                    (this.stunned = t > this.stunned ? t : this.stunned), this._onStunned(t);
                  }),
                  (s.setToughness = function (t) {
                    void 0 === t && (t = 190), (this.toughness = t);
                  }),
                  (s.onDamaged = function (t, i) {}),
                  (s.dealNormalDamage = function (t, i, e, n, o, a, s) {
                    if ((void 0 === s && (s = !0), !this.dead && t > 0)) {
                      if ((a == ci.fire && ((this.chill = 0), (this.freeze = 0)), this.armors.length <= 0 || !i)) {
                        s && (this.hurting = 10);
                        var r = this.health + 0;
                        if (
                          ((this.health -= t),
                          n && this.playHurtSound(),
                          this.onDamaged(r, this.health + 0),
                          this.health <= this.toughness / 2 &&
                            this.haveArm &&
                            ((a != ci.fire && a != ci.electricity) || !(this.health <= 0)))
                        ) {
                          var l = null == o ? void 0 : o.clone();
                          l && l.multiply2f(1, 0.5).normalize().multiplyScalar(o.length()), this.breakArm(l);
                        }
                        if (this.health <= 0)
                          if ((a != ci.fire && a != ci.electricity) || !this.zombieAshParticle_)
                            this.playDie(!1, o, !0, a, !0, t >= this.toughness);
                          else {
                            var h = this.playAsh();
                            h && a == ci.electricity && (h.playAnimation('Shock', 2), x.playZombieShock(this.isGargantuar));
                          }
                        this.isAlive() || a != ci.potatoMine || D.destroyPooly(this.node);
                      } else if (this.armors.length > 0 && i) {
                        var d,
                          u = null == (d = this.armors[0].getComponent(z)) ? void 0 : d.dealDamage(t, e);
                        if (null != u && u <= 0) {
                          var c = this.armors[0];
                          this.throwArmor(c, o),
                            this.armors.shift(),
                            D.destroyPooly(c.node),
                            this.dealDamage(-u, !0, e, n, o, a, s);
                        }
                      }
                      return this.health;
                    }
                  }),
                  (s.dealDamage = function (t, i, e, n, o, a, s) {
                    return (
                      void 0 === t && (t = 0),
                      void 0 === i && (i = !0),
                      void 0 === e && (e = !0),
                      void 0 === n && (n = !0),
                      void 0 === o && (o = null),
                      void 0 === a && (a = ci.physicle),
                      void 0 === s && (s = !0),
                      this.dealNormalDamage(t, i, e, n, o, a, s)
                    );
                  }),
                  (s.throwArmor = function (t, i) {
                    this.drop(
                      t.armorDROP,
                      t.node.worldPosition.y - this._worldPositionY,
                      new y(t.node.worldPosition.x, this._worldPositionY, 0),
                      i,
                      this.node.parent
                    )
                      .getComponent(d.ArmatureDisplay)
                      .playAnimation('Broken2');
                  }),
                  (s.specialZombieOnDisable = function () {}),
                  (s.characterOnDisable = function () {
                    var t, i, e;
                    (this.armors.length &&
                      (this.armors.concat().forEach(function (t) {
                        D.destroyPooly(null == t ? void 0 : t.node);
                      }),
                      (this.armors = [])),
                    R.deleteZombie(this),
                    null == (t = this.inLane) || t.deleteZombie(this),
                    null != (i = this.zombieWave) && i.isValid) &&
                      (this.zombieWave.getComponent(d.ArmatureDisplay).playAnimation('Fade'), (this.zombieWave = null));
                    null != (e = this.icetrapParticle) &&
                      e.isValid &&
                      (this.icetrapParticle.playAnimation('Die', 1), (this.icetrapParticle = null)),
                      this.clearBuff(),
                      this.specialZombieOnDisable(),
                      this.dirtSpawnTweens.forEach(function (t) {
                        null == t || t.stop();
                      });
                  }),
                  (s.onKnockBackStart = function () {}),
                  (s._onKnockBackEnd = function () {
                    var t;
                    (this.flying = this.currentFlyZombie),
                      null == (t = this.knockBackTween) || t.stop(),
                      (this.knockBackTween = null),
                      this.flying || this.onLanding(),
                      (this.tallNutBlock = !1);
                  }),
                  (s.knockBackTo = function (t, i, e, n, o) {
                    var a,
                      s = this;
                    void 0 === i && (i = !0),
                      void 0 === e && (e = 0.1),
                      void 0 === n && (n = !0),
                      void 0 === o && (o = !1),
                      this._onStunned(e),
                      this.onKnockBackStart(),
                      (this.chiliStun = 0),
                      n || null == (a = this.knockBackTween) || a.stop(),
                      (this.flying = !!i || this.flying),
                      (this.tallNutBlock = o);
                    this.knockBackTween = m(this)
                      .to(e * (this.currentFlyZombie ? 0.2 : 1), { worldPositionX: t.x, worldPositionY: t.y })
                      .call(function () {
                        s._onKnockBackEnd();
                      })
                      .start();
                  }),
                  (s.knockBackBy = function (t, i, e, n, o, a) {
                    void 0 === i && (i = !0),
                      void 0 === e && (e = 0.1),
                      void 0 === n && (n = !0),
                      void 0 === o && (o = !1),
                      void 0 === a && (a = !1);
                    var s = this.node.worldPosition.x + t.x * E.SquareDisW,
                      r = E.getSquareWorldPosition(0, 8, 1, 1).x - 1;
                    !o &&
                      s > r &&
                      (s = Math.min(this.node.worldPosition.x + t.x * E.SquareDisW, Math.max(this.node.worldPosition.x, r)));
                    var l = new f(s, this._worldPositionY + t.y * E.SquareDisH);
                    this.knockBackTo(l, i, e, n, a);
                  }),
                  (s._onLeapEnd = function (t) {
                    var i;
                    null == (i = this.leapHeightTween) || i.stop(), (this.leapHeightTween = null), this.onLeapEnd(t);
                  }),
                  (s.leapBy = function (t, i, e, n, o, a, s) {
                    var r,
                      l = this;
                    void 0 === i && (i = !0),
                      void 0 === e && (e = 0.5),
                      void 0 === n && (n = 27),
                      void 0 === o && (o = !0),
                      void 0 === a && (a = !1),
                      void 0 === s && (s = !1),
                      null == (r = this.leapHeightTween) || r.stop();
                    var h = this.height;
                    n < h && (n = h);
                    var d = n - h,
                      u = e / (1 + Math.sqrt(d / n));
                    this.knockBackBy(t, i, e, !1, a, s);
                    this.leapHeightTween = m(this)
                      .to(e - u, { height: n }, { easing: 'quadOut' })
                      .to(u, { height: 0 }, { easing: 'quadIn' })
                      .call(function () {
                        l._onLeapEnd(o);
                      })
                      .start();
                  }),
                  (s.leapTo = function (t, i, e, n, o, a) {
                    var s,
                      r = this;
                    void 0 === i && (i = !0),
                      void 0 === e && (e = 0.5),
                      void 0 === n && (n = 27),
                      void 0 === o && (o = !0),
                      void 0 === a && (a = !1),
                      null == (s = this.leapHeightTween) || s.stop();
                    var l = this.height;
                    n < l && (n = l);
                    var h = n - l,
                      d = e / (1 + Math.sqrt(h / n));
                    this.knockBackTo(t, i, e, !1, a);
                    this.leapHeightTween = m(this)
                      .to(e - d, { height: n }, { easing: 'quadOut' })
                      .to(d, { height: 0 }, { easing: 'quadIn' })
                      .call(function () {
                        r._onLeapEnd(o);
                      })
                      .start();
                  }),
                  (s.specialOnLeapEnd = function () {}),
                  (s.onLeapEnd = function (t) {
                    var i = this;
                    if ((void 0 === t && (t = !0), t && this.isAlive())) {
                      var e = !1;
                      _.umbrellas.forEach(function (t) {
                        var n, o, a;
                        e ||
                          ((null == t || null == (n = t.owner) ? void 0 : n.inLane) != i.inLane &&
                            (null == t || null == (o = t.owner) || null == (o = o.inLane) ? void 0 : o.UpperLane) != i.inLane &&
                            (null == t || null == (a = t.owner) || null == (a = a.inLane) ? void 0 : a.LowerLane) != i.inLane) ||
                          !t.detector.judgeCrossRec(i.bodyRec) ||
                          ((e = !0), t.owner.bounce());
                      }),
                        e && this.leapBy(new f(10, 0), !0, 0.5, 80, !1);
                    }
                    this.specialOnLeapEnd(),
                      this.inLane && (this.inLane.LaneIndex < 0 || this.inLane.LaneIndex > 4) && this.playDie();
                  }),
                  (s.tallNutListen = function () {
                    var t,
                      i = this;
                    null == (t = this.inLane) ||
                      t.plantPool().forEach(function (t) {
                        t.ID == V.Tallnut &&
                          i.knockBackTween &&
                          i.leapHeightTween &&
                          i.bodyRec.judgeCrossRec(t.bodyRec) &&
                          (i._onKnockBackEnd(), i.onLeapEnd(!0), (i.height = 0));
                      });
                  }),
                  (s.onDirtSpawned = function (t) {}),
                  (s.playDirtSpawn = function (t) {
                    var i,
                      e = this;
                    if (
                      (t < 0 && (t = 0),
                      this.playIdle(),
                      (this.dirtSpawning = !0),
                      (this.switching = !0),
                      this.onDirtSpawned(t),
                      null != (i = this.db) && i.isValid)
                    ) {
                      var n, o, a;
                      this.db.color = new w(255, 255, 255, 0);
                      var s = m(null == this || null == (n = this.db) ? void 0 : n.color)
                        .to(t, {})
                        .to(0.5, { a: 255 })
                        .start();
                      (this.db.node.scale = new y(1, 0.3, 1)),
                        (this.db.node.position = new y(0, -this.zombieHeight / this.originalScale, 0));
                      var r = m(null == this || null == (o = this.db) ? void 0 : o.node)
                          .to(t, {})
                          .to(0.5, { scale: new y(1, 1, 1) }, { easing: 'quadOut' })
                          .start(),
                        l = m(null == this || null == (a = this.db) ? void 0 : a.node)
                          .to(t, {})
                          .call(function () {
                            var t = v(F.dirtSpawn());
                            (t.parent = e.node.parent),
                              (t.worldPosition = new y(e._worldPositionX, e._worldPositionY, 10)),
                              x.playDirtRise(!1, !0);
                          })
                          .to(1, { position: new y() }, { easing: 'quadOut' })
                          .call(function () {
                            (e.dirtSpawning = !1), (e.switching = !1), e.playWalk(0.2);
                          })
                          .start();
                      this.dirtSpawnTweens.push(s, r, l);
                    }
                  }),
                  (s.endDirtSpawn = function () {
                    this.dirtSpawning &&
                      (this.dirtSpawnTweens.forEach(function (t) {
                        t.stop();
                      }),
                      (this.dirtSpawning = !1),
                      (this.db.node.scale = new y(1, 1, 1)),
                      (this.db.node.position = new y(0, 0, 0)),
                      (this.db.color = new w(255, 255, 255, 255)));
                  }),
                  (s.getShouldSpeed = function () {
                    return ((this.randomSpeed * E.SquareDisW) / 60) * this.shouldSpeedScale() * (this.walking ? 1 : 0);
                  }),
                  (s.setSpeed = function (t, i) {
                    void 0 === i && (i = !0), (this.walking = i);
                  }),
                  (s.defaultShouldSpeedScale = function () {
                    if (this.leapHeightTween) return 0;
                    if (this.dead) return 1;
                    if (
                      this.stunned > 0 ||
                      this.butterStun > 0 ||
                      this.fallingInSky ||
                      this.freeze > 0 ||
                      this.chilibeanPoisoning ||
                      this.chiliStun > 0
                    )
                      return 0;
                    var t = 1;
                    return this.chill > 0 && (t *= 0.5), this.perfume > 0 && (t *= 0.5), t;
                  }),
                  (s.shouldSpeedScale = function () {
                    return this.defaultShouldSpeedScale();
                  }),
                  (s.drop = function (t, i, e, n, o) {
                    var a,
                      s,
                      r = null == n ? void 0 : n.clone();
                    r && r.multiplyScalar(0.8 + 0.4 * Math.random()), r || (r = this.defaultDirection());
                    var l = D.instantiatePooly(t);
                    if (
                      (o || (o = null == (a = this.inLane) ? void 0 : a.zombieLayer),
                      null == (s = o) || s.addChild(l),
                      null != l && l.isValid)
                    ) {
                      var h = l.getComponent(C);
                      (h.worldPosition = new f(e.x, e.y)),
                        (h.height = i),
                        (h.linearVelocity = new f(r.x, 0)),
                        (h.node.angle = 0),
                        (h.bodyLinearVelocity = r.y),
                        (h.gravity = 3),
                        (h.detectEnemyOn = !1),
                        (h.bodyOmega = Math.pow(-1, Math.round(Math.random())) * Math.round(2 * Math.random() + 1));
                    }
                    return l;
                  }),
                  (s.breakArm = function (t) {
                    void 0 === t && (t = null),
                      this.body.showArm(!1),
                      (this.haveArm = !1),
                      this.zombieArm &&
                        (this.drop(
                          this.zombieArm,
                          this.zombieHeight / 2,
                          new y(this.shadeSocket.worldPosition.x, this._worldPositionY, 0),
                          t,
                          this.node.parent
                        ),
                        this.playBreakSound());
                  }),
                  (s.dropHead = function (t, i) {
                    var e = this;
                    void 0 === i && (i = this.zombieHeight),
                      this.armors.length &&
                        (this.armors.concat().forEach(function (i) {
                          e.throwArmor(i, t), D.destroyPooly(i.node);
                        }),
                        (this.armors = [])),
                      this.haveHead &&
                        this.zombieHead &&
                        (this.playBreakSound(),
                        this.drop(
                          this.zombieHead,
                          i,
                          new y(
                            this.headDropPoint ? this.headDropPoint.worldPosition.x : this.shadeSocket.worldPosition.x,
                            this._worldPositionY,
                            0
                          ),
                          t,
                          this.node.parent
                        ),
                        (this.haveHead = !1));
                  }),
                  (s.defaultDirection = function () {
                    return new f(Math.pow(-1, Math.round(Math.random())) * Math.round(10 * Math.random()), 15);
                  }),
                  (s.addArmor = function (t) {
                    var i = null;
                    return (
                      ((i = D.instantiatePooly(W.getArmor(t))).parent = this.node
                        .getChildByName('Body')
                        .getChildByName('ArmorSocket')),
                      this.armors.unshift(i.getComponent(z)),
                      this.onArmorAdded(t),
                      this.node
                    );
                  }),
                  (s.onArmorAdded = function (t) {}),
                  (s.copyBuff = function (t) {
                    this.setChill(t.chill),
                      this.setFreeze(t.freeze),
                      this.stun(t.stunned),
                      this.setPoison(t.poison.DPS, t.poison.duration),
                      this.setButter(t.butterStun);
                  }),
                  (s.onChill = function (t) {}),
                  (s.setChill = function (t) {
                    return (
                      this.dead || (this.chill = t > this.chill ? t : this.chill), this.chill > 0 && this.onChill(this.chill), !0
                    );
                  }),
                  (s.onFrozen = function (t) {}),
                  (s.setFreeze = function (t, i) {
                    return (
                      void 0 === i && (i = !0),
                      this.dead ||
                        (i && this.flying
                          ? (this.chill = t > this.chill ? t : this.chill)
                          : (this.freeze = t > this.freeze ? t : this.freeze)),
                      this.freeze > 0 && (this.onChill(this.chill), this.onFrozen(this.freeze), this._onStunned(this.freeze)),
                      !0
                    );
                  }),
                  (s.deathCauseReader = function (t, i) {
                    void 0 === i && (i = ci.physicle);
                  }),
                  (s.playDie = function (t, i, e, n, o, a) {
                    var s,
                      r = this;
                    if (
                      (void 0 === t && (t = !1),
                      void 0 === i && (i = null),
                      void 0 === e && (e = !0),
                      void 0 === n && (n = ci.physicle),
                      void 0 === o && (o = !0),
                      void 0 === a && (a = !1),
                      !this.dead)
                    ) {
                      if (
                        (this.endSandStorm(),
                        this.deathCauseReader(i, n),
                        this.havePlantfood && ((this.havePlantfood = !1), M.producePlantFood(this.worldPosition)),
                        !this.displayed)
                      ) {
                        var l = Math.random();
                        l < 0.01
                          ? M.dropOneGem(this.worldPosition)
                          : l < 0.025
                          ? M.dropOneCoin(this.worldPosition, 1)
                          : l < 0.15 && M.dropOneCoin(this.worldPosition, 0);
                      }
                      (this.chiliStun = 0),
                        (this.eating = !1),
                        (this.dead = !0),
                        R.deleteZombie(this),
                        null == (s = this.inLane) || s.deleteZombie(this),
                        this.clearBuff(),
                        this.armors.length &&
                          (this.armors.concat().forEach(function (t) {
                            r.displayed || r.throwArmor(t, i), D.destroyPooly(t.node);
                          }),
                          (this.armors = [])),
                        t ||
                          (e && this.playOnHeadThrownSound(),
                          this.haveHead && o && this.dropHead(i),
                          this.body.showHead(!1),
                          this.playSpecialZombieDie(i),
                          a && this.judgeDeath()),
                        this.displayed || this.playSpecialZombieDieForced(),
                        this.dirtSpawning && this.endDirtSpawn(),
                        this.setBodyRec(!0);
                    }
                  }),
                  (s.playSpecialZombieDie = function (t) {}),
                  (s.playSpecialZombieDieForced = function () {}),
                  (s.replayAnimation = function () {
                    this.walking
                      ? ((this.walking = !1), this.playWalk())
                      : this.eating
                      ? ((this.eating = !1), this.playEat(0))
                      : this.playIdle();
                  }),
                  (s.playEat = function (t) {
                    (this.walking = !1),
                      this.eatSoundCoolDown > 0
                        ? (this.eatSoundCoolDown -= t)
                        : (x.playZombieChew(), (this.eatSoundCoolDown = 1)),
                      this.eating ||
                        ((this.eatSoundCoolDown = 0),
                        this.body.playAnimation(this.body.EatAnm),
                        this.setSpeed(0, !1),
                        this.correctShadeWP(),
                        (this.eating = !0));
                  }),
                  (s.playIdle = function (t) {
                    void 0 === t && (t = 0),
                      (this.walking = !1),
                      (this.eating = !1),
                      this.body.playAnimation(this.body.IdleAnm, 1 / 0, t),
                      this.setSpeed(0, !1);
                  }),
                  (s.playWalk = function (t) {
                    void 0 === t && (t = 0),
                      (this.eating = !1),
                      this.walking ||
                        (this.body.playAnimation(this.body.WalkAnm, 1 / 0, t),
                        (this.walking = !0),
                        this.setSpeed(this.shouldSpeedScale()));
                  }),
                  (s.specialZombieOnLoad = function () {}),
                  (s.additionalZombies = function () {
                    return [];
                  }),
                  (s.onPutDirectly = function (t) {}),
                  (s.playOneShot = function (t, i) {
                    void 0 === i && (i = 1), t && i > 0 && x.play(t, i);
                  }),
                  (s.characterOnLoad = function () {
                    (this.body.body = this.body.getComponent(d.ArmatureDisplay)),
                      (this.db = this.body.body),
                      this.getComponent(S) || this.addComponent(S),
                      (this.audioSource = this.getComponent(S)),
                      this.specialZombieOnLoad();
                    var t = new g();
                    t.initialize({ effectAsset: Z.addColorEffect, defines: { USE_TEXTURE: !0 } }), (this.material = t);
                  }),
                  (s.specialZombieOnSquareChange = function (t, i) {}),
                  (s.characterOnSquareChange = function (t, i) {
                    var e = i.getTileType(),
                      n = this.inWater;
                    (this.inWater = e == B.water),
                      !n && this.inWater && this.enterWater(),
                      n && !this.inWater && this.exitWater(),
                      this.isAlive() && !this.sandStormTween && this.specialZombieOnSquareChange(t, i);
                  }),
                  (s.enterWater = function () {
                    this.onEnterWater();
                  }),
                  (s.onEnterWater = function () {}),
                  (s.exitWater = function () {
                    (this.body.node.position = new y(0, 0, 0)), this.onExitWater();
                  }),
                  (s.onExitWater = function () {}),
                  (s.characterOnLaneChange = function (t, i) {
                    var e, n;
                    this.fallingInSky ||
                      (this.node.setParent(i.zombieLayer, !0), null == i || i.addZombie(this), null == t || t.deleteZombie(this)),
                      this.zombieWave && this.zombieWave.setParent(this.inLane.node, !0),
                      null == (e = this.icetrapParticle) || null == (e = e.node) || e.setParent(this.node.parent),
                      null == (n = this.icetrapParticle) ||
                        null == (n = n.node) ||
                        n.setSiblingIndex(this.node.getSiblingIndex() + 1),
                      this.perfumeParticle && this.perfumeParticle.node.setParent(this.inLane.prjLayer);
                  }),
                  (s.setPlantDetectorRec = function () {
                    I.gameStarted && this.isAlive()
                      ? (this.plantDetectorRec = T.createRectangleCenter(
                          new f(
                            this.shadeSocket.worldPosition.x + this.plantDetectorRecOffset.x * (this.reversed ? -1 : 1),
                            this._worldPosition.y + this._height + this.plantDetectorRecOffset.y
                          ),
                          this.plantDetectorRecSize.width,
                          this.plantDetectorRecSize.height
                        ))
                      : (this.plantDetectorRec = T.createRectangleCenter(new f(1e4, 1e4), 1, 1));
                  }),
                  (s.plantEatAllowed = function (t) {
                    return !0;
                  }),
                  (s.detectPlantOn = function () {
                    return !this.switching;
                  }),
                  (s.ignorePlants = function () {
                    return !1;
                  }),
                  (s.defaultDetectPlant = function (t) {
                    var i = this;
                    if (0 != t && this.detectPlantOn()) {
                      var e = this.plantDetectorRec,
                        n = null;
                      this.ignorePlants() ||
                        this.inLane.plantPool().forEach(function (t) {
                          t.eaterDetectable &&
                            i.plantEatAllowed(t) &&
                            e.judgeCrossRec(t.bodyRec) &&
                            ((n &&
                              t.plantType != O.vine &&
                              t.plantType != O.plant &&
                              t.plantType != O.lilyPad &&
                              t.plantType != O.pot) ||
                              (n = t));
                        }),
                        n
                          ? (n.eat(this.dps * t, this), this.playEat(t))
                          : this.allowWalk()
                          ? this.playWalk()
                          : (this.walking || this.eating) && this.playIdle();
                    }
                  }),
                  (s.allowWalk = function () {
                    return !0;
                  }),
                  (s.detectPlant = function (t) {
                    this.defaultDetectPlant(t);
                  }),
                  (s.specialZombieOnEnable = function () {}),
                  (s.characterOnEnable = function () {
                    var t,
                      i,
                      e,
                      n = this;
                    (this.tallNutBlock = !1),
                      (this.dirtSpawning = !1),
                      null == (t = this.knockBackTween) || t.stop(),
                      (this.knockBackTween = null),
                      null == (i = this.leapHeightTween) || i.stop(),
                      (this.leapHeightTween = null),
                      (this.lieEnded = !1),
                      (this.chiliStun = 0),
                      (this.chiliStunParticle = null),
                      (this.perfume = 0),
                      (this.perfumeParticle = null),
                      (this.haveHead = !0),
                      null == (e = this.chilibeanFartTween) || e.stop(),
                      (this.chilibeanFartTween = null),
                      (this.chilibeanPoisoning = !1),
                      (this.displayed = !1),
                      (this.enteredLawn = !1),
                      (this.node.angle = 0),
                      (this.inLane = null),
                      (this.inLnC = null),
                      (this.currentFlyZombie = this.flyZombie),
                      (this.flying = this.flyZombie),
                      (this.zombieAshParticle_ = this.zombieAshParticle),
                      R.registerZombie(this),
                      (this.chompable_ = this.chompable),
                      (this.easyToChomp_ = this.easyToChomp),
                      (this.oldTileType = B.floor),
                      (this.zombieWave = null),
                      (this.eating = !1),
                      (this.dead = !1),
                      (this.blew = !1),
                      (this.fallingInSky = !1),
                      (this.haveArm = !0),
                      (this.walking = !1),
                      (this.inWater = !1),
                      (this.body.node.angle = 0),
                      this.body.showHead(!0),
                      this.body.showArm(),
                      this.clearBuff(),
                      (this.randomSpeed = this.squarePerSec - 0.008 + 0.016 * Math.random()),
                      (this.health = this.toughness),
                      (this.body.node.scale = new y(1, 1, 1)),
                      (this.body.body = this.body.getComponent(d.ArmatureDisplay)),
                      this.body.body.addEventListener(d.EventObject.FRAME_EVENT, this.animationListener, this),
                      this.body.body.addEventListener(d.EventObject.SOUND_EVENT, this.soundEventListener, this),
                      this.body.body.addEventListener(
                        d.EventObject.LOOP_COMPLETE,
                        function () {
                          n.judgeFade(), n.judgeDeath();
                        },
                        this
                      ),
                      this.playWalk(),
                      (this.switching = !1),
                      (this.reversed = !1),
                      this.setBodyRec(!0),
                      this.specialZombieOnEnable();
                  }),
                  (s.playSpecialZombieDeath = function () {}),
                  (s.judgeDeath = function (t) {
                    void 0 === t && (t = 0.1),
                      this.blew ||
                        (this.dead &&
                          this.body.currentAnimationName != this.body.DeathAnm &&
                          (this.playDeathSound(),
                          (this.walking = !1),
                          this.body.playAnimation(this.body.DeathAnm, 1, t),
                          (this.body.body.timeScale = 1),
                          this.setSpeed(0, !1),
                          this.playSpecialZombieDeath()));
                  }),
                  (s.judgeFade = function () {
                    this.lieEnded && !this.fadingAway && (P.Color.set(this.body.body.color, 255, 255, 255, 255), this.fadeAway());
                  }),
                  (s.specialSoundEventListener = function (t) {}),
                  (s.soundEventListener = function (t) {
                    'fall' == t.name &&
                      this.inLnC.getTileType() != B.sky &&
                      (this.lieSound.length ? x.play(k.getRandom(this.lieSound), L.SoundFXVolume) : x.playZombieLie()),
                      this.specialSoundEventListener(t);
                  }),
                  (s.specialSetBodyRec = function () {
                    this.bodyRec = T.createRectangleCenter(
                      new f(
                        this.shadeSocket.worldPosition.x + this.bodyRecOffset.x * (this.reversed ? -1 : 1),
                        this._worldPositionY + this.bodyRecOffset.y + this._height
                      ),
                      this.bodyRecSize.width,
                      this.bodyRecSize.height
                    );
                  }),
                  (s.currentFarBodyRec = function () {
                    return !1;
                  }),
                  (s.setBodyRec = function (t) {
                    void 0 === t && (t = this.currentFarBodyRec()), t ? (this.bodyRec = new T()) : this.specialSetBodyRec();
                  }),
                  (s.prevDistance = function () {
                    return E.SquareDisW;
                  }),
                  (s.isInLawn = function () {
                    return (
                      this.inLnC &&
                      this.inLnC.lIndex >= 0 &&
                      this.inLnC.lIndex <= 4 &&
                      this.inLnC.cIndex >= 0 &&
                      this.inLnC.cIndex <= 8
                    );
                  }),
                  (s.isAlive = function () {
                    return !(this.dead || this.fallingInSky || this.blew || this.displayed);
                  }),
                  (s.shouldMaterial = function () {
                    var t = new w(0, 0, 0, 255),
                      i = 0;
                    this.dead ||
                      this.fallingInSky ||
                      ((this.chill > 0 || this.freeze > 0) && (i = 1),
                      this.hurting > 0 && ((t.r += 10 * this.hurting), (t.g += 10 * this.hurting), (t.b += 10 * this.hurting)),
                      this.havePlantfood && ((t.r += Z.zombiePF.r), (t.g += Z.zombiePF.g), (t.b += Z.zombiePF.b)));
                    var e = this.material.passes[0].getHandle('chillColor'),
                      n = this.material.passes[0].getHandle('addColor');
                    this.material.passes[0].setUniform(e, i),
                      this.material.passes[0].setUniform(n, t),
                      (this.body.body.customMaterial = this.material);
                  }),
                  (s.shouldColor = function () {
                    var t = new w(255, 255, 255, 255);
                    this.poison.isValid() ? (t = Z.zombiePoisonColor) : this.perfume > 0 && (t = Z.zombiePerfumeColor),
                      this.dead && (t = new w(255, 255, 255, 255)),
                      this.dirtSpawning || (this.body.body.color = t);
                  }),
                  (s.onLaneSpawnSettled = function (t) {}),
                  (s.animationListener = function (t) {
                    'die' == t.name
                      ? (this.lieEnded = !0)
                      : 'land' == t.name
                      ? ((this.flying = !1), (this.currentFlyZombie = !1), this.onLanding())
                      : 'leapEnd' == t.name
                      ? this.onLeapEnd()
                      : 'switchingFalse' == t.name && (this.switching = !1),
                      this.specialAnimationListener(t);
                  }),
                  (s.specialAnimationListener = function (t) {}),
                  (s.dropSea = function () {
                    F.spawnSeaSplash(this.inLnC.lIndex, this.node.worldPosition), this.playDie(!0), D.destroyPooly(this.node);
                  }),
                  (s.clearBuff = function () {
                    var t, i;
                    (this.chill = 0),
                      (this.freeze = 0),
                      (this.stunned = 0),
                      (this.hurting = 0),
                      (this.chiliStun = 0),
                      (this.perfume = 0),
                      null == (t = this.icetrapParticle) || t.playAnimation('Die', 1),
                      (this.icetrapParticle = null),
                      (this.poison.DPS = 0),
                      (this.poison.duration = 0),
                      null == (i = this.body.body.armature().getSlot('POISONFACE')) || i._setDisplayIndex(-1),
                      (this.butterStun = 0),
                      this.butterFace && (this.butterFace.color = new w(255, 255, 255, 0)),
                      this.shouldColor(),
                      this.shouldMaterial();
                  }),
                  (s.playFall = function () {
                    var t = this;
                    this.fallingInSky ||
                      (this.knockBackTween && (this.knockBackTween.stop(), (this.knockBackTween = null)),
                      this.leapHeightTween && (this.leapHeightTween.stop(), (this.leapHeightTween = null)),
                      (this.body.body.timeScale = 0),
                      (this.walking = !1),
                      this.armors.forEach(function (i) {
                        t.throwArmor(i, null), D.destroyPooly(i.node);
                      }),
                      (this.armors = []),
                      this.setPlantDetectorRec(),
                      this.dead || this.playDie(!0),
                      this.fallInSky(!0),
                      this.setSpeed(0));
                  }),
                  (s.endSandStorm = function () {
                    var t, i;
                    this.sandStormTween &&
                      (this.playWalk(0.2),
                      null == (t = this.sandStormPar) || t.end(),
                      (this.sandStormPar = null),
                      null == (i = this.sandStormTween) || i.stop(),
                      (this.sandStormTween = null));
                  }),
                  (s.playSandStorm = function (t, i) {
                    var e = this;
                    if ((void 0 === i && (i = 0), !this.sandStormTween)) {
                      this.playIdle();
                      var n = F.sandStorm();
                      1 == i && (n = F.snowStorm());
                      var o = v(n);
                      (o.parent = this.node.parent),
                        (o.worldPosition = this.node.worldPosition),
                        o.setSiblingIndex(this.node.getSiblingIndex() + 1),
                        (this.sandStormPar = o.getComponent(N)),
                        (this.worldPositionX = this.inLane.toRight.worldPosition.x),
                        this.sandStormPar.onSettled(),
                        (this.sandStormTween = m(this)
                          .to(3, { worldPositionX: t }, { easing: 'quadOut' })
                          .to(1, {})
                          .call(function () {
                            e.endSandStorm();
                          })
                          .start());
                    }
                  }),
                  (s.specialZombieUpdate = function (t) {}),
                  (s.onTileTypeChange = function (t, i) {
                    this.displayed ||
                      (this.flying || (i == B.sky && this.playFall(), i == B.sea && this.dropSea()),
                      t != B.water && i == B.water && ((this.inWater = !0), this.enterWater()),
                      t == B.water && i != B.water && ((this.inWater = !1), this.exitWater()));
                  }),
                  (s.addZombieWave = function (t) {
                    if (!this.flying) {
                      if (t == B.water && !this.zombieWave) {
                        var i = D.instantiatePooly(F.zombieWaterWave());
                        (i.parent = this.inLane.node),
                          i.getComponent(d.ArmatureDisplay).playAnimation('Idle', 1 / 0),
                          (this.zombieWave = i),
                          (this.shadeHidden = !0);
                      }
                      this.zombieWave &&
                        ((this.zombieWave.worldPosition = new y(this._worldPositionX, this._worldPositionY)),
                        (this.shadeHidden = !0),
                        t != B.water &&
                          (this.zombieWave.getComponent(d.ArmatureDisplay).playAnimation('Fade'),
                          (this.zombieWave = null),
                          (this.shadeHidden = !1)));
                    }
                  }),
                  (s.specialDisblowable = function () {
                    return !1;
                  }),
                  (s.blowAway = function () {
                    var t = this;
                    this.blew ||
                      this.specialDisblowable() ||
                      ((this.blew = !0),
                      this.playDie(!0, null, !1),
                      m(this)
                        .by(1, { worldPositionX: 2e3 }, { easing: 'cubicIn' })
                        .call(function () {
                          t.armors.concat().forEach(function (t) {
                            D.destroyPooly(t.node);
                          }),
                            (t.armors = []),
                            t.clearBuff(),
                            D.destroyPooly(t.node);
                        })
                        .start());
                  }),
                  (s.plantFoodPar = function (t) {
                    if ((this.pfParCD > 0 && (this.pfParCD -= t), this.pfParCD <= 0)) {
                      var i;
                      this.pfParCD = 3 + 3 * Math.random();
                      var e = D.instantiatePooly(F.PFLightning());
                      if (((e.parent = null == (i = this.inLane) ? void 0 : i.prjLayer), e.active)) {
                        var n = Math.random() > 0.5;
                        (e.worldPosition = new y(
                          n ? this.bodyRec.prjX().x : this.bodyRec.prjX().y,
                          this.node.worldPosition.y,
                          this.node.worldPosition.z
                        )),
                          e.getComponent(d.ArmatureDisplay).playAnimation('');
                        var o = this.zombieHeight / 96;
                        e.scale = new y(o, o, o);
                      }
                    }
                  }),
                  (s.characterUpdate = function (t) {
                    var i, e;
                    this.setPlantDetectorRec(),
                      this.setBodyRec(!this.isAlive()),
                      this.havePlantfood && this.plantFoodPar(t),
                      !this.enteredLawn && this.bodyRec.judgeCrossRec(E.lawnRec) && (this.enteredLawn = !0),
                      null == (i = this.icetrapParticle) ||
                        null == (i = i.node) ||
                        i.setWorldPosition(new y(this._worldPositionX, this._worldPositionY));
                    var n = this.shouldSpeedScale(),
                      o = ((this.randomSpeed * E.SquareDisW) / 60) * n * (this.enteredLawn ? 1 : 2);
                    !this.fallingInSky && this.walking
                      ? ((this.body.body.timeScale = o / this.anmSpeed),
                        (this.worldPositionX -= o * t * 60 * (this._reversed ? -1 : 1)))
                      : this.fallingInSky || this.blew
                      ? (this.body.body.timeScale = 0)
                      : this.eating || this.switching
                      ? (this.body.body.timeScale = n)
                      : this.dead
                      ? (this.body.body.timeScale = 1)
                      : (this.body.body.timeScale = (n * this.randomSpeed) / this.squarePerSec),
                      this.isAlive() &&
                        (this.shadeWorldPosition.x < E.zombieWinX
                          ? (this.worldPosition = new f(E.zombieSpawnSpawnX, this.shadeWorldPosition.y))
                          : this.shadeWorldPosition.x > 1600 && this._reversed && (this.playDie(!0), D.destroyPooly(this.node)),
                        !this.inLane ||
                          this.dirtSpawning ||
                          this.sandStormTween ||
                          (this.detectPlant(t * n), this.specialZombieUpdate(t * n)),
                        this.dealPoison(t),
                        this.dealButter(t),
                        this.dealChiliStun(t),
                        this.dealPerfume(t),
                        this.dealHurrikale(t));
                    var a = null == (e = this.inLnC) ? void 0 : e.getTileType();
                    if ((a != this.oldTileType && this.onTileTypeChange(this.oldTileType, a), !this.flying)) {
                      var s = -H.depth(this._worldPositionX) * this.depthScale;
                      this.body.node.position = new y(0, s / this.body.node.worldScale.y, 1);
                    }
                    if (
                      (this.hurting > 0 && (this.hurting -= 60 * t),
                      this.stunned > 0 && (this.stunned -= t),
                      this.chill > 0 && this.freeze <= 0 && (this.chill -= t),
                      this.freeze > 0)
                    ) {
                      if (((this.freeze -= t), !this.icetrapParticle)) {
                        var r = D.instantiatePooly(F.zombieIceTrap());
                        this.inLane &&
                          ((r.parent = this.inLane.zombieLayer),
                          (r.worldPosition = this.node.worldPosition),
                          r.setSiblingIndex(this.node.getSiblingIndex() + 1),
                          (this.icetrapParticle = r.getComponent(d.ArmatureDisplay)),
                          this.icetrapParticle.playAnimation('Idle', 1 / 0));
                      }
                    } else this.icetrapParticle && (this.icetrapParticle.playAnimation('Die', 1), (this.icetrapParticle = null));
                    this.shouldMaterial(),
                      this.dead || this.shouldColor(),
                      this.addZombieWave(a),
                      this.tallNutBlock && this.tallNutListen(),
                      this.sandStormPar &&
                        (this.sandStormPar.node.worldPosition = new y(this._worldPositionX, this._worldPositionY)),
                      I.component.gameWon && this.playDie();
                  }),
                  a(i, [
                    {
                      key: 'reversed',
                      get: function () {
                        return this._reversed;
                      },
                      set: function (t) {
                        var i = this.node.scale.clone();
                        (this.node.scale = new y(Math.abs(i.x) * (t ? -1 : 1), i.y, i.z)),
                          (this._reversed = t),
                          this.setBodyRec(),
                          this.setPlantDetectorRec();
                      },
                    },
                    {
                      key: 'chiliStun',
                      get: function () {
                        return this._chiliStun;
                      },
                      set: function (t) {
                        if (this.chiliStun <= 0 && t > 0) {
                          var i = v(F.zombieChiliBeanStun());
                          (i.parent = this.node.parent),
                            (i.worldPosition = new y(this.shade.node.worldPosition.x, this._worldPositionY)),
                            (this.chiliStunParticle = i.getComponent(j)),
                            this.chiliStunParticle.db.playAnimation('Start', 1);
                        } else
                          this._chiliStun > 0 &&
                            t <= 0 &&
                            this.chiliStunParticle &&
                            (this.chiliStunParticle.db.playAnimation('Die', 2), (this.chiliStunParticle = null));
                        this._chiliStun = t;
                      },
                    },
                    {
                      key: 'perfume',
                      get: function () {
                        return this._perfume;
                      },
                      set: function (t) {
                        if (t > 0 && this._perfume <= 0) {
                          var i = v(F.zombiePerfumeSlow());
                          (i.parent = this.inLane.prjLayer),
                            (i.worldPosition = this.node.worldPosition.clone()),
                            (i.worldScale = this.node.worldScale.clone()),
                            (this.perfumeParticle = i.getComponent(j)),
                            this.perfumeParticle.db.playAnimation('Idle', 1 / 0);
                        } else if (t <= 0 && this._perfume > 0) {
                          var e;
                          null == (e = this.perfumeParticle) || null == (e = e.db) || e.playAnimation('Die', 1);
                        }
                        this._perfume = t;
                      },
                    },
                    {
                      key: 'plantDetectorRec',
                      get: function () {
                        return !this.isAlive() || this.dirtSpawning ? new T() : this._plantDetectorRec;
                      },
                      set: function (t) {
                        this._plantDetectorRec = t;
                      },
                    },
                    {
                      key: 'bodyRec',
                      get: function () {
                        return I.gameStarted && this.isAlive() && !this.dirtSpawning && !this.chilibeanFartTween
                          ? this._bodyRec
                          : new T();
                      },
                      set: function (t) {
                        this._bodyRec = t;
                      },
                    },
                  ]),
                  i
                );
              })(C)).prototype,
              'chiliStunDurationScale',
              [it],
              {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () {
                  return 1;
                },
              }
            )),
            (Wt = i(Et.prototype, 'butterFace', [et], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (xt = i(Et.prototype, 'zombieGroanSoundGroup', [nt], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return pi.modern;
              },
            })),
            (Ft = i(Et.prototype, 'flyZombie', [ot], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !1;
              },
            })),
            (Ht = i(Et.prototype, 'breakSound', [at], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Zt = i(Et.prototype, 'hurtSound', [st], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Ot = i(Et.prototype, 'hurtSoundVolume', [rt], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 1;
              },
            })),
            (It = i(Et.prototype, 'deathSound', [lt], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Mt = i(Et.prototype, 'onHeadThrownSound', [ht], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Xt = i(Et.prototype, 'lieSound', [dt], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (qt = i(Et.prototype, 'groanSound', [ut], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Nt = i(Et.prototype, 'zombieAshParticle', [ct], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (jt = i(Et.prototype, 'body', [pt], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (Vt = i(Et.prototype, 'countHealthToThisWave', [ft], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !0;
              },
            })),
            (Yt = i(Et.prototype, 'toughness', [bt], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 190;
              },
            })),
            (Gt = i(Et.prototype, 'zombieHead', [mt], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Ut = i(Et.prototype, 'zombieArm', [yt], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return null;
              },
            })),
            (Kt = i(Et.prototype, 'zombieHeight', [wt], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 60;
              },
            })),
            (Jt = i(Et.prototype, 'squarePerSec', [St], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 0.2;
              },
            })),
            (Qt = i(Et.prototype, 'anmSpeed', [gt], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 0.35;
              },
            })),
            ($t = i(Et.prototype, 'headDropPoint', [Pt], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (ti = i(Et.prototype, 'chompable', [vt], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !0;
              },
            })),
            (ii = i(Et.prototype, 'easyToChomp', [kt], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !1;
              },
            })),
            (ei = i(Et.prototype, 'plantDetectorRecOffset', [Dt], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new f(0, 38);
              },
            })),
            (ni = i(Et.prototype, 'plantDetectorRecSize', [zt], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new b(32, 96);
              },
            })),
            (oi = i(Et.prototype, 'dps', [Ct], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 100;
              },
            })),
            (ai = i(Et.prototype, 'bodyRecOffset', [At], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new f(0, 38);
              },
            })),
            (si = i(Et.prototype, 'bodyRecSize', [Lt], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new b(48, 96);
              },
            })),
            (ri = i(Et.prototype, 'allowWaveAddPlantFood', [Tt], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return !0;
              },
            })),
            (li = i(Et.prototype, 'depthScale', [Rt], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return 25;
              },
            })),
            (_t = Et))
          ) || _t)
        );
        s._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/ZombieAshParticle.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './ParticleSelfdestroy.ts', './LnC.ts'],
  function (e) {
    var t, i, n, r, o;
    return {
      setters: [
        function (e) {
          t = e.inheritsLoose;
        },
        function (e) {
          (i = e.cclegacy), (n = e._decorator);
        },
        function (e) {
          r = e.ParticleSelfdestroy;
        },
        function (e) {
          o = e.TileType;
        },
      ],
      execute: function () {
        var s;
        i._RF.push({}, '5fe0cRIBMdG9a1Hu7mi2SL6', 'ZombieAshParticle', void 0);
        var a = n.ccclass;
        n.property,
          e(
            'ZombieAshParticle',
            a('ZombieAshParticle')(
              (s = (function (e) {
                function i() {
                  for (var t, i = arguments.length, n = new Array(i), r = 0; r < i; r++) n[r] = arguments[r];
                  return ((t = e.call.apply(e, [this].concat(n)) || this).sky = !1), (t.inLnC = void 0), (t.height = 0), t;
                }
                t(i, e);
                var n = i.prototype;
                return (
                  (n.zombieAshDBListener = function (e) {}),
                  (n.animationListener = function (e) {
                    'ash' == e.name && this.playAsh(), this.zombieAshDBListener(e);
                  }),
                  (n.playAsh = function () {
                    var e,
                      t = 'PlayFloor',
                      i = null == (e = this.inLnC) ? void 0 : e.getTileType();
                    (this.height > 5 || i == o.sea || i == o.water || i == o.sky) && (t = 'PlaySky'), this.db.playAnimation(t);
                  }),
                  i
                );
              })(r))
            ) || s
          );
        i._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/zombieDrop.ts',
  ['./rollupPluginModLoBabelHelpers.js', 'cc', './commonShot.ts'],
  function (t) {
    var i, o, e, n, r;
    return {
      setters: [
        function (t) {
          i = t.inheritsLoose;
        },
        function (t) {
          (o = t.cclegacy), (e = t._decorator), (n = t.Vec2);
        },
        function (t) {
          r = t.commonShot;
        },
      ],
      execute: function () {
        var s;
        o._RF.push({}, '45bb9Yr+sNB1ZuCJPlM2PYm', 'zombieDrop', void 0);
        var c = e.ccclass;
        e.property,
          t(
            'zombieDrop',
            c('zombieDrop')(
              (s = (function (t) {
                function o() {
                  return t.apply(this, arguments) || this;
                }
                return (
                  i(o, t),
                  (o.prototype.hitFloor = function (t) {
                    this.height = 0;
                    var i = this.linearVelocity.clone(),
                      o = this.bodyLinearVelocity,
                      e = new n(i.x / 2, i.y / 2),
                      r = o / -2 - 0.55 * t * 60 * this.gravity;
                    r <= 3 &&
                      !this.fadingAway &&
                      ((e = new n(0, 0)),
                      (r = 0),
                      this.fallingInSky || (this.bodyOmega = 0),
                      (this.gravity = 0),
                      this.fadeAway()),
                      (this.linearVelocity = e),
                      (this.bodyLinearVelocity = r);
                  }),
                  o
                );
              })(r))
            ) || s
          );
        o._RF.pop();
      },
    };
  }
);

System.register(
  'chunks:///_virtual/Zombies.ts',
  [
    './rollupPluginModLoBabelHelpers.js',
    'cc',
    './NodePools.ts',
    './Zombie.ts',
    './Armors.ts',
    './Square.ts',
    './Lane.ts',
    './SoundRescourses.ts',
    './EgyptCamelZombie.ts',
    './FrontYard.ts',
  ],
  function (e) {
    var a, r, i, o, t, n, b, l, m, p, u, c, g, s, y, _, Z, f, d, h, k, w;
    return {
      setters: [
        function (e) {
          (a = e.applyDecoratedDescriptor),
            (r = e.inheritsLoose),
            (i = e.initializerDefineProperty),
            (o = e.assertThisInitialized);
        },
        function (e) {
          (t = e.cclegacy),
            (n = e._decorator),
            (b = e.JsonAsset),
            (l = e.AudioClip),
            (m = e.Prefab),
            (p = e.Vec2),
            (u = e.Component),
            (c = e.instantiate);
        },
        function (e) {
          (g = e.ArrayGet), (s = e.NodePools);
        },
        function (e) {
          (y = e.Zombie), (_ = e.ZombieGroanSoundGroupEnum);
        },
        function (e) {
          Z = e.armorEnum;
        },
        function (e) {
          f = e.Square;
        },
        function (e) {
          d = e.Lane;
        },
        function (e) {
          h = e.sounds;
        },
        function (e) {
          k = e.EgyptCamelZombie;
        },
        function (e) {
          w = e.FrontYard;
        },
      ],
      execute: function () {
        var z,
          C,
          G,
          R,
          S,
          B,
          P,
          A,
          I,
          F,
          E,
          T,
          v,
          O,
          M,
          N,
          D,
          W,
          x,
          L,
          J,
          H,
          j,
          q,
          V,
          Y,
          U,
          K,
          Q,
          X,
          $,
          ee,
          ae,
          re,
          ie,
          oe,
          te,
          ne,
          be,
          le,
          me,
          pe,
          ue,
          ce,
          ge,
          se,
          ye,
          _e,
          Ze,
          fe,
          de,
          he,
          ke,
          we,
          ze,
          Ce,
          Ge,
          Re,
          Se,
          Be,
          Pe,
          Ae,
          Ie,
          Fe,
          Ee,
          Te,
          ve,
          Oe,
          Me,
          Ne,
          De,
          We,
          xe,
          Le,
          Je,
          He,
          je,
          qe,
          Ve,
          Ye,
          Ue,
          Ke,
          Qe,
          Xe,
          $e,
          ea,
          aa,
          ra,
          ia,
          oa,
          ta,
          na,
          ba,
          la,
          ma,
          pa,
          ua,
          ca,
          ga,
          sa,
          ya,
          _a,
          Za,
          fa,
          da,
          ha,
          ka,
          wa,
          za,
          Ca,
          Ga,
          Ra,
          Sa,
          Ba,
          Pa,
          Aa,
          Ia;
        t._RF.push({}, '3127d1KIzhGIqdUCpakDMry', 'Zombies', void 0);
        var Fa = n.ccclass,
          Ea = n.property,
          Ta =
            (e('ZombieFeature', function () {
              (this.NAME = ''),
                (this.ZOMBIETYPE = ''),
                (this.CODENAME = ''),
                (this.SUNCOST = 0),
                (this.WAVEPOINTCOST = 100),
                (this.WEIGHT = 100),
                (this.OBTAINWORLD = 'egypt');
            }),
            e(
              'ZombieEnum',
              (function (e) {
                return (
                  (e[(e.modern_basic = 0)] = 'modern_basic'),
                  (e[(e.modern_cone = 1)] = 'modern_cone'),
                  (e[(e.modern_bucket = 2)] = 'modern_bucket'),
                  (e[(e.modern_bricks = 3)] = 'modern_bricks'),
                  (e[(e.modern_flag = 4)] = 'modern_flag'),
                  (e[(e.modern_rally = 5)] = 'modern_rally'),
                  (e[(e.modern_imp = 6)] = 'modern_imp'),
                  (e[(e.modern_gargantuar = 7)] = 'modern_gargantuar'),
                  (e[(e.modern_bobSled = 8)] = 'modern_bobSled'),
                  (e[(e.modern_bobSled_team = 9)] = 'modern_bobSled_team'),
                  (e[(e.modern_balloon = 10)] = 'modern_balloon'),
                  (e[(e.modern_allstar = 11)] = 'modern_allstar'),
                  (e[(e.modern_sleighCart = 12)] = 'modern_sleighCart'),
                  (e[(e.modern_catapult = 13)] = 'modern_catapult'),
                  (e[(e.egypt_basic = 14)] = 'egypt_basic'),
                  (e[(e.egypt_cone = 15)] = 'egypt_cone'),
                  (e[(e.egypt_bucket = 16)] = 'egypt_bucket'),
                  (e[(e.egypt_bricks = 17)] = 'egypt_bricks'),
                  (e[(e.egypt_flag = 18)] = 'egypt_flag'),
                  (e[(e.egypt_rally = 19)] = 'egypt_rally'),
                  (e[(e.egypt_ra = 20)] = 'egypt_ra'),
                  (e[(e.egypt_camel = 21)] = 'egypt_camel'),
                  (e[(e.egypt_camel_onehump = 22)] = 'egypt_camel_onehump'),
                  (e[(e.egypt_camel_twohump = 23)] = 'egypt_camel_twohump'),
                  (e[(e.egypt_camel_threehump = 24)] = 'egypt_camel_threehump'),
                  (e[(e.egypt_camel_manyhump = 25)] = 'egypt_camel_manyhump'),
                  (e[(e.egypt_explorer = 26)] = 'egypt_explorer'),
                  (e[(e.egypt_torchlight = 27)] = 'egypt_torchlight'),
                  (e[(e.egypt_tombraiser = 28)] = 'egypt_tombraiser'),
                  (e[(e.egypt_pharaoh_inner = 29)] = 'egypt_pharaoh_inner'),
                  (e[(e.egypt_pharaoh_weak = 30)] = 'egypt_pharaoh_weak'),
                  (e[(e.egypt_pharaoh = 31)] = 'egypt_pharaoh'),
                  (e[(e.egypt_imp = 32)] = 'egypt_imp'),
                  (e[(e.egypt_gargantuar = 33)] = 'egypt_gargantuar'),
                  (e[(e.pirate_basic = 34)] = 'pirate_basic'),
                  (e[(e.pirate_cone = 35)] = 'pirate_cone'),
                  (e[(e.pirate_bucket = 36)] = 'pirate_bucket'),
                  (e[(e.pirate_bricks = 37)] = 'pirate_bricks'),
                  (e[(e.pirate_flag = 38)] = 'pirate_flag'),
                  (e[(e.pirate_rally = 39)] = 'pirate_rally'),
                  (e[(e.pirate_swashbuckler = 40)] = 'pirate_swashbuckler'),
                  (e[(e.pirate_seagull = 41)] = 'pirate_seagull'),
                  (e[(e.pirate_pelican = 42)] = 'pirate_pelican'),
                  (e[(e.pirate_barrel_pusher = 43)] = 'pirate_barrel_pusher'),
                  (e[(e.pirate_barrel = 44)] = 'pirate_barrel'),
                  (e[(e.pirate_cannon = 45)] = 'pirate_cannon'),
                  (e[(e.pirate_captain = 46)] = 'pirate_captain'),
                  (e[(e.pirate_parrot = 47)] = 'pirate_parrot'),
                  (e[(e.pirate_imp = 48)] = 'pirate_imp'),
                  (e[(e.pirate_gargantuar = 49)] = 'pirate_gargantuar'),
                  (e[(e.cowboy_basic = 50)] = 'cowboy_basic'),
                  (e[(e.cowboy_cone = 51)] = 'cowboy_cone'),
                  (e[(e.cowboy_bucket = 52)] = 'cowboy_bucket'),
                  (e[(e.cowboy_bricks = 53)] = 'cowboy_bricks'),
                  (e[(e.cowboy_flag = 54)] = 'cowboy_flag'),
                  (e[(e.cowboy_rally = 55)] = 'cowboy_rally'),
                  (e[(e.future_basic = 56)] = 'future_basic'),
                  (e[(e.future_cone = 57)] = 'future_cone'),
                  (e[(e.future_bucket = 58)] = 'future_bucket'),
                  (e[(e.future_bricks = 59)] = 'future_bricks'),
                  (e[(e.future_jetpack = 60)] = 'future_jetpack'),
                  (e[(e.lost_relichunter = 61)] = 'lost_relichunter'),
                  (e[(e.zombieAmount = 62)] = 'zombieAmount'),
                  e
                );
              })({})
            )),
          va = e(
            'zombies',
            (function () {
              function e() {}
              return (
                (e.playGroan = function (e, a) {
                  void 0 === a && (a = 1), this.zombieRes.playZombieGroan(e, a);
                }),
                (e.createZombie = function (a, r) {
                  var i = e.getZombie(r),
                    o = i.getComponent(y);
                  if (isNaN(a) || null == a) {
                    var t, n;
                    a = Math.floor(5 * Math.random());
                    var b = w.currentLawn;
                    !o.flyZombie && null != b && null != (t = b.PlankRows) && t.length
                      ? (a = g.getRandom(b.PlankRows))
                      : o.flyZombie && null != b && null != (n = b.PlankRows) && n.length && (a = g.getRandom(b.SeaRows));
                  }
                  var l = f.getLane(a).getComponent(d),
                    m = 10 * Math.round(10 * Math.random());
                  return (
                    (i.parent = l.zombieLayer),
                    (o.worldPosition = new p(l.spawnPoint.worldPosition.x + m, l.spawnPoint.worldPosition.y)),
                    o.onLaneSpawnSettled(l),
                    o
                  );
                }),
                (e.createZombieByRTID = function (e, a) {
                  var r = this.getZombieEnumByRTID(a);
                  return this.createZombie(e, r);
                }),
                (e.getZombie = function (e, a) {
                  void 0 === a && (a = !1);
                  var r = this.zombieRes,
                    i = a ? c : s.instantiatePooly,
                    o = i(r.basicZombie),
                    t = e + 0;
                  switch (e) {
                    case Ta.modern_sleighCart:
                      o = i(r.sleighCartZombie);
                      break;
                    case Ta.modern_basic:
                      o = i(r.basicZombie);
                      break;
                    case Ta.modern_cone:
                      o = i(r.basicZombie).getComponent(y).addArmor(Z.basic_cone);
                      break;
                    case Ta.modern_bucket:
                      o = i(r.basicZombie).getComponent(y).addArmor(Z.basic_bucket);
                      break;
                    case Ta.modern_bricks:
                      o = i(r.basicZombie).getComponent(y).addArmor(Z.basic_bricks);
                      break;
                    case Ta.modern_flag:
                      o = i(r.basicFlagZombie);
                      break;
                    case Ta.modern_rally:
                      o = i(r.basicRallyZombie);
                      break;
                    case Ta.modern_imp:
                      o = i(r.modernImpZombie);
                      break;
                    case Ta.modern_gargantuar:
                      o = i(r.modernGargantuarZombie);
                      break;
                    case Ta.modern_bobSled:
                      o = i(r.bobSledZombie);
                      break;
                    case Ta.modern_allstar:
                      o = i(r.allstarZombie);
                      break;
                    case Ta.modern_balloon:
                      o = i(r.balloonZombie);
                      break;
                    case Ta.future_basic:
                      o = i(r.futureBasicZombie);
                      break;
                    case Ta.future_cone:
                      o = i(r.futureBasicZombie).getComponent(y).addArmor(Z.future_cone);
                      break;
                    case Ta.future_bucket:
                      o = i(r.futureBasicZombie).getComponent(y).addArmor(Z.future_bucket);
                      break;
                    case Ta.future_bricks:
                      o = i(r.futureBasicZombie).getComponent(y).addArmor(Z.future_bricks);
                      break;
                    case Ta.future_jetpack:
                      o = i(r.futureJetpackZombie);
                      break;
                    case Ta.lost_relichunter:
                      o = i(r.lostRelicHunterZombie);
                      break;
                    case Ta.modern_bobSled_team:
                      o = i(r.bobSledZombieTeam);
                      break;
                    case Ta.modern_catapult:
                      o = i(r.catapultZombie);
                      break;
                    case Ta.egypt_basic:
                      o = i(r.egyptBasicZombie);
                      break;
                    case Ta.egypt_cone:
                      o = i(r.egyptBasicZombie).getComponent(y).addArmor(Z.egypt_cone);
                      break;
                    case Ta.egypt_bucket:
                      o = i(r.egyptBasicZombie).getComponent(y).addArmor(Z.egypt_bucket);
                      break;
                    case Ta.egypt_bricks:
                      o = i(r.egyptBasicZombie).getComponent(y).addArmor(Z.egypt_bricks);
                      break;
                    case Ta.egypt_flag:
                      o = i(r.egyptFlagZombie);
                      break;
                    case Ta.egypt_rally:
                      o = i(r.egyptRallyZombie);
                      break;
                    case Ta.egypt_ra:
                      o = i(r.egyptRaZombie);
                      break;
                    case Ta.egypt_camel:
                      ((o = i(r.egyptCamelZombie)).getComponent(k).teamAmount = 0), (o.getComponent(k).defaultShowSlot = 0);
                      break;
                    case Ta.egypt_camel_onehump:
                      ((o = i(r.egyptCamelZombie)).getComponent(k).teamAmount = 3), (o.getComponent(k).defaultShowSlot = 0);
                      break;
                    case Ta.egypt_camel_twohump:
                      ((o = i(r.egyptCamelZombie)).getComponent(k).teamAmount = 4), (o.getComponent(k).defaultShowSlot = 0);
                      break;
                    case Ta.egypt_camel_threehump:
                      ((o = i(r.egyptCamelZombie)).getComponent(k).teamAmount = 5), (o.getComponent(k).defaultShowSlot = 0);
                      break;
                    case Ta.egypt_camel_manyhump:
                      ((o = i(r.egyptCamelZombie)).getComponent(k).teamAmount = 4 + Math.ceil(3 * Math.random())),
                        (o.getComponent(k).defaultShowSlot = 0);
                      break;
                    case Ta.egypt_explorer:
                      o = i(r.egyptExplorerZombie);
                      break;
                    case Ta.egypt_torchlight:
                      o = i(r.egyptTorchlightZombie);
                      break;
                    case Ta.egypt_tombraiser:
                      o = i(r.egyptTombRaiserZombie);
                      break;
                    case Ta.egypt_pharaoh_weak:
                      o = i(r.egyptPharaohWeakZombie);
                      break;
                    case Ta.egypt_pharaoh:
                      o = i(r.egyptPharaohZombie);
                      break;
                    case Ta.egypt_gargantuar:
                      o = i(r.egyptGargantuarZombie);
                      break;
                    case Ta.egypt_pharaoh_inner:
                      o = i(r.egyptPharaohInnerZombie);
                      break;
                    case Ta.egypt_imp:
                      o = i(r.egyptImpZombie);
                      break;
                    case Ta.pirate_basic:
                      o = i(r.pirateBasicZombie);
                      break;
                    case Ta.pirate_cone:
                      o = i(r.pirateBasicZombie).getComponent(y).addArmor(Z.pirate_cone);
                      break;
                    case Ta.pirate_bucket:
                      o = i(r.pirateBasicZombie).getComponent(y).addArmor(Z.pirate_bucket);
                      break;
                    case Ta.pirate_bricks:
                      o = i(r.pirateBasicZombie).getComponent(y).addArmor(Z.pirate_bricks);
                      break;
                    case Ta.pirate_flag:
                      o = i(r.pirateFlagZombie);
                      break;
                    case Ta.pirate_rally:
                      o = i(r.pirateRallyZombie);
                      break;
                    case Ta.pirate_swashbuckler:
                      o = i(r.pirateSwashbucklerZombie);
                      break;
                    case Ta.pirate_seagull:
                      o = i(r.pirateSeagullZombie);
                      break;
                    case Ta.pirate_pelican:
                      o = i(r.piratePelicanZombie);
                      break;
                    case Ta.pirate_barrel_pusher:
                      o = i(r.pirateBarrelPusherZombie);
                      break;
                    case Ta.pirate_barrel:
                      o = i(r.pirateBarrel);
                      break;
                    case Ta.pirate_cannon:
                      o = i(r.pirateImpCannonZombie);
                      break;
                    case Ta.pirate_captain:
                      o = i(r.pirateCaptainZombie);
                      break;
                    case Ta.pirate_parrot:
                      o = i(r.pirateParrotZombie);
                      break;
                    case Ta.pirate_imp:
                      o = i(r.pirateImpZombie);
                      break;
                    case Ta.pirate_gargantuar:
                      o = i(r.pirateGargantuarZombie);
                      break;
                    case Ta.cowboy_basic:
                      o = i(r.cowboyBasicZombie);
                      break;
                    case Ta.cowboy_cone:
                      o = i(r.cowboyBasicZombie).getComponent(y).addArmor(Z.cowboy_cone);
                      break;
                    case Ta.cowboy_bucket:
                      o = i(r.cowboyBasicZombie).getComponent(y).addArmor(Z.cowboy_bucket);
                      break;
                    case Ta.cowboy_bricks:
                      o = i(r.cowboyBasicZombie).getComponent(y).addArmor(Z.cowboy_bricks);
                      break;
                    case Ta.cowboy_flag:
                      o = i(r.cowboyFlagZombie);
                      break;
                    case Ta.cowboy_rally:
                      o = i(r.cowboyRallyZombie);
                      break;
                    default:
                      (t = Ta.modern_basic), (o = i(r.basicZombie));
                  }
                  return (o.getComponent(y).ID = t), o;
                }),
                (e.getZombieEnumByString = function (e) {
                  var a = -1;
                  return (
                    this.zombieRes.ZombieFeatures.forEach(function (r, i) {
                      -1 == a && r.CODENAME == e && (a = i);
                    }),
                    -1 == a && (a = Ta.modern_basic),
                    a
                  );
                }),
                (e.getZombieEnumByRTID = function (e) {
                  var a = e.concat(),
                    r = a.indexOf('RTID('),
                    i = a.indexOf('@ZombieTypes)'),
                    o = '';
                  return -1 != r && (o = a.slice(r + 5, i)), this.getZombieEnumByString(o);
                }),
                (e.getZombieWavePointCost = function (e) {
                  return this.zombieRes.ZombieFeatures[e].WAVEPOINTCOST;
                }),
                (e.getZombieWeight = function (e) {
                  return this.zombieRes.ZombieFeatures[e].WEIGHT;
                }),
                (e.pickZombieByWeight = function (e) {
                  var a = this,
                    r = [],
                    i = 0;
                  e.forEach(function (e) {
                    var o = a.getZombieWeight(e);
                    r.push(i + o), (i += o);
                  });
                  for (var o = Math.random() * i, t = 0; t < r.length; t++) if (o < r[t]) return e[t];
                  return g.getRandom(e);
                }),
                (e.getZombieFeature = function (e) {
                  return this.zombieRes.ZombieFeatures[e];
                }),
                e
              );
            })()
          );
        va.zombieRes = null;
        e(
          'Zombies',
          ((z = Fa('Zombies')),
          (C = Ea(b)),
          (G = Ea([l])),
          (R = Ea([l])),
          (S = Ea([l])),
          (B = Ea([l])),
          (P = Ea([l])),
          (A = Ea([l])),
          (I = Ea([l])),
          (F = Ea([l])),
          (E = Ea([l])),
          (T = Ea([l])),
          (v = Ea([l])),
          (O = Ea([l])),
          (M = Ea([l])),
          (N = Ea(m)),
          (D = Ea(m)),
          (W = Ea(m)),
          (x = Ea(m)),
          (L = Ea(m)),
          (J = Ea(m)),
          (H = Ea(m)),
          (j = Ea(m)),
          (q = Ea(m)),
          (V = Ea(m)),
          (Y = Ea(m)),
          (U = Ea(m)),
          (K = Ea(m)),
          (Q = Ea(m)),
          (X = Ea(m)),
          ($ = Ea(m)),
          (ee = Ea(m)),
          (ae = Ea(m)),
          (re = Ea(m)),
          (ie = Ea(m)),
          (oe = Ea(m)),
          (te = Ea(m)),
          (ne = Ea(m)),
          (be = Ea(m)),
          (le = Ea(m)),
          (me = Ea(m)),
          (pe = Ea(m)),
          (ue = Ea(m)),
          (ce = Ea(m)),
          (ge = Ea(m)),
          (se = Ea(m)),
          (ye = Ea(m)),
          (_e = Ea(m)),
          (Ze = Ea(m)),
          (fe = Ea(m)),
          (de = Ea(m)),
          (he = Ea(m)),
          (ke = Ea(m)),
          (we = Ea(m)),
          (ze = Ea(m)),
          (Ce = Ea(m)),
          (Ge = Ea(m)),
          (Re = Ea(m)),
          z(
            ((Pe = a(
              (Be = (function (e) {
                function a() {
                  for (var a, r = arguments.length, t = new Array(r), n = 0; n < r; n++) t[n] = arguments[n];
                  return (
                    (a = e.call.apply(e, [this].concat(t)) || this),
                    i(a, 'zombieFeaturesJson', Pe, o(a)),
                    (a.ZombieFeatures = []),
                    i(a, 'modernZombieGroan', Ae, o(a)),
                    i(a, 'egyptZombieGroan', Ie, o(a)),
                    i(a, 'pirateZombieGroan', Fe, o(a)),
                    i(a, 'cowboyZombieGroan', Ee, o(a)),
                    i(a, 'futureZombieGroan', Te, o(a)),
                    i(a, 'darkZombieGroan', ve, o(a)),
                    i(a, 'beachZombieGroan', Oe, o(a)),
                    i(a, 'iceZombieGroan', Me, o(a)),
                    i(a, 'lostZombieGroan', Ne, o(a)),
                    i(a, 'stageZombieGroan', De, o(a)),
                    i(a, 'dinoZombieGroan', We, o(a)),
                    i(a, 'impGroan', xe, o(a)),
                    i(a, 'gargantuarGroan', Le, o(a)),
                    i(a, 'basicZombie', Je, o(a)),
                    i(a, 'basicFlagZombie', He, o(a)),
                    i(a, 'basicRallyZombie', je, o(a)),
                    i(a, 'modernImpZombie', qe, o(a)),
                    i(a, 'modernGargantuarZombie', Ve, o(a)),
                    i(a, 'bobSledZombie', Ye, o(a)),
                    i(a, 'bobSledZombieTeam', Ue, o(a)),
                    i(a, 'balloonZombie', Ke, o(a)),
                    i(a, 'allstarZombie', Qe, o(a)),
                    i(a, 'sleighCartZombie', Xe, o(a)),
                    i(a, 'futureBasicZombie', $e, o(a)),
                    i(a, 'futureJetpackZombie', ea, o(a)),
                    i(a, 'lostRelicHunterZombie', aa, o(a)),
                    i(a, 'catapultZombie', ra, o(a)),
                    i(a, 'egyptBasicZombie', ia, o(a)),
                    i(a, 'egyptFlagZombie', oa, o(a)),
                    i(a, 'egyptRallyZombie', ta, o(a)),
                    i(a, 'egyptRaZombie', na, o(a)),
                    i(a, 'egyptCamelZombie', ba, o(a)),
                    i(a, 'egyptExplorerZombie', la, o(a)),
                    i(a, 'egyptTorchlightZombie', ma, o(a)),
                    i(a, 'egyptTombRaiserZombie', pa, o(a)),
                    i(a, 'egyptPharaohWeakZombie', ua, o(a)),
                    i(a, 'egyptPharaohZombie', ca, o(a)),
                    i(a, 'egyptPharaohInnerZombie', ga, o(a)),
                    i(a, 'egyptImpZombie', sa, o(a)),
                    i(a, 'egyptGargantuarZombie', ya, o(a)),
                    i(a, 'pirateBasicZombie', _a, o(a)),
                    i(a, 'pirateFlagZombie', Za, o(a)),
                    i(a, 'pirateRallyZombie', fa, o(a)),
                    i(a, 'pirateSwashbucklerZombie', da, o(a)),
                    i(a, 'pirateSeagullZombie', ha, o(a)),
                    i(a, 'piratePelicanZombie', ka, o(a)),
                    i(a, 'pirateBarrelPusherZombie', wa, o(a)),
                    i(a, 'pirateBarrel', za, o(a)),
                    i(a, 'pirateImpCannonZombie', Ca, o(a)),
                    i(a, 'pirateCaptainZombie', Ga, o(a)),
                    i(a, 'pirateParrotZombie', Ra, o(a)),
                    i(a, 'pirateImpZombie', Sa, o(a)),
                    i(a, 'pirateGargantuarZombie', Ba, o(a)),
                    i(a, 'cowboyBasicZombie', Pa, o(a)),
                    i(a, 'cowboyFlagZombie', Aa, o(a)),
                    i(a, 'cowboyRallyZombie', Ia, o(a)),
                    a
                  );
                }
                r(a, e);
                var t = a.prototype;
                return (
                  (t.playZombieGroan = function (e, a) {
                    switch ((void 0 === a && (a = 1), e)) {
                      case _.modern:
                        h.play(g.getRandom(this.modernZombieGroan), a);
                        break;
                      case _.egypt:
                        h.play(g.getRandom(this.egyptZombieGroan), a);
                        break;
                      case _.pirate:
                        h.play(g.getRandom(this.pirateZombieGroan), a);
                        break;
                      case _.cowboy:
                        h.play(g.getRandom(this.cowboyZombieGroan), a);
                        break;
                      case _.future:
                        h.play(g.getRandom(this.futureZombieGroan), a);
                        break;
                      case _.dark:
                        h.play(g.getRandom(this.darkZombieGroan), a);
                        break;
                      case _.beach:
                        h.play(g.getRandom(this.beachZombieGroan), a);
                        break;
                      case _.ice:
                        h.play(g.getRandom(this.iceZombieGroan), a);
                        break;
                      case _.lost:
                        h.play(g.getRandom(this.lostZombieGroan), a);
                        break;
                      case _.stage:
                        h.play(g.getRandom(this.stageZombieGroan), a);
                        break;
                      case _.dino:
                        h.play(g.getRandom(this.dinoZombieGroan), a);
                        break;
                      case _.imp:
                        h.play(g.getRandom(this.impGroan), a);
                        break;
                      case _.gargantuar:
                        h.play(g.getRandom(this.gargantuarGroan), a);
                    }
                  }),
                  (t.onLoad = function () {
                    va.zombieRes = this;
                    var e = JSON.stringify(this.zombieFeaturesJson);
                    this.ZombieFeatures = JSON.parse(e).json.ZOMBIES;
                  }),
                  a
                );
              })(u)).prototype,
              'zombieFeaturesJson',
              [C],
              { configurable: !0, enumerable: !0, writable: !0, initializer: null }
            )),
            (Ae = a(Be.prototype, 'modernZombieGroan', [G], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Ie = a(Be.prototype, 'egyptZombieGroan', [R], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Fe = a(Be.prototype, 'pirateZombieGroan', [S], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Ee = a(Be.prototype, 'cowboyZombieGroan', [B], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Te = a(Be.prototype, 'futureZombieGroan', [P], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (ve = a(Be.prototype, 'darkZombieGroan', [A], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Oe = a(Be.prototype, 'beachZombieGroan', [I], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Me = a(Be.prototype, 'iceZombieGroan', [F], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Ne = a(Be.prototype, 'lostZombieGroan', [E], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (De = a(Be.prototype, 'stageZombieGroan', [T], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (We = a(Be.prototype, 'dinoZombieGroan', [v], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (xe = a(Be.prototype, 'impGroan', [O], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Le = a(Be.prototype, 'gargantuarGroan', [M], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return [];
              },
            })),
            (Je = a(Be.prototype, 'basicZombie', [N], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (He = a(Be.prototype, 'basicFlagZombie', [D], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (je = a(Be.prototype, 'basicRallyZombie', [W], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (qe = a(Be.prototype, 'modernImpZombie', [x], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (Ve = a(Be.prototype, 'modernGargantuarZombie', [L], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (Ye = a(Be.prototype, 'bobSledZombie', [J], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (Ue = a(Be.prototype, 'bobSledZombieTeam', [H], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (Ke = a(Be.prototype, 'balloonZombie', [j], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (Qe = a(Be.prototype, 'allstarZombie', [q], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (Xe = a(Be.prototype, 'sleighCartZombie', [V], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            ($e = a(Be.prototype, 'futureBasicZombie', [Y], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (ea = a(Be.prototype, 'futureJetpackZombie', [U], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (aa = a(Be.prototype, 'lostRelicHunterZombie', [K], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (ra = a(Be.prototype, 'catapultZombie', [Q], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (ia = a(Be.prototype, 'egyptBasicZombie', [X], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (oa = a(Be.prototype, 'egyptFlagZombie', [$], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (ta = a(Be.prototype, 'egyptRallyZombie', [ee], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (na = a(Be.prototype, 'egyptRaZombie', [ae], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (ba = a(Be.prototype, 'egyptCamelZombie', [re], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (la = a(Be.prototype, 'egyptExplorerZombie', [ie], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (ma = a(Be.prototype, 'egyptTorchlightZombie', [oe], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (pa = a(Be.prototype, 'egyptTombRaiserZombie', [te], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (ua = a(Be.prototype, 'egyptPharaohWeakZombie', [ne], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (ca = a(Be.prototype, 'egyptPharaohZombie', [be], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (ga = a(Be.prototype, 'egyptPharaohInnerZombie', [le], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (sa = a(Be.prototype, 'egyptImpZombie', [me], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (ya = a(Be.prototype, 'egyptGargantuarZombie', [pe], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (_a = a(Be.prototype, 'pirateBasicZombie', [ue], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (Za = a(Be.prototype, 'pirateFlagZombie', [ce], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (fa = a(Be.prototype, 'pirateRallyZombie', [ge], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (da = a(Be.prototype, 'pirateSwashbucklerZombie', [se], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (ha = a(Be.prototype, 'pirateSeagullZombie', [ye], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (ka = a(Be.prototype, 'piratePelicanZombie', [_e], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (wa = a(Be.prototype, 'pirateBarrelPusherZombie', [Ze], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (za = a(Be.prototype, 'pirateBarrel', [fe], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
            (Ca = a(Be.prototype, 'pirateImpCannonZombie', [de], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (Ga = a(Be.prototype, 'pirateCaptainZombie', [he], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (Ra = a(Be.prototype, 'pirateParrotZombie', [ke], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (Sa = a(Be.prototype, 'pirateImpZombie', [we], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (Ba = a(Be.prototype, 'pirateGargantuarZombie', [ze], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (Pa = a(Be.prototype, 'cowboyBasicZombie', [Ce], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (Aa = a(Be.prototype, 'cowboyFlagZombie', [Ge], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (Ia = a(Be.prototype, 'cowboyRallyZombie', [Re], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null,
            })),
            (Se = Be))
          ) || Se)
        );
        t._RF.pop();
      },
    };
  }
);

(function (r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main');
})(function (mid, cid) {
  System.register(mid, [cid], function (_export, _context) {
    return {
      setters: [
        function (_m) {
          var _exportObj = {};

          for (var _key in _m) {
            if (_key !== 'default' && _key !== '__esModule') _exportObj[_key] = _m[_key];
          }

          _export(_exportObj);
        },
      ],
      execute: function () {},
    };
  });
});
